<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ActionLanguage="http://www.omg.org/spec/ALF/20120827/ActionLanguage-Profile" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:standard="http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML" xsi:schemaLocation="http://www.omg.org/spec/ALF/20120827/ActionLanguage-Profile pathmap://PAPYRUS_ACTIONLANGUAGE_PROFILE/ActionLanguage-Profile.profile.uml#_Kv8EIKFXEeS_KNX0nfvIVQ">
  <uml:Model xmi:id="_rZAAEEIZEeaoHPpII-6Tdw" name="rover">
    <eAnnotations xmi:id="_-sKOUEhlEeaGrIS8kLT52w" source="UMLRT_Default_top">
      <details xmi:id="_-sK1YEhlEeaGrIS8kLT52w" key="top_name" value="Debug__Top"/>
    </eAnnotations>
    <packageImport xmi:id="_I3zzMPH9EeaFP7yOXIAVPg">
      <importedPackage xmi:type="uml:Model" href="../CommGateWay/model.uml#_MZw7AAdxEeadtKuU2t6fMg"/>
    </packageImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_rZAALEIZEeaoHPpII-6Tdw" name="UMLRT-Rover">
      <packagedElement xmi:type="uml:Package" xmi:id="_rZAALUIZEeaoHPpII-6Tdw" name="Engine">
        <packagedElement xmi:type="uml:Collaboration" xmi:id="_rZAALkIZEeaoHPpII-6Tdw" name="Engine">
          <interfaceRealization xmi:id="_rZAAL0IZEeaoHPpII-6Tdw" client="_rZAALkIZEeaoHPpII-6Tdw" supplier="_rZAAMUIZEeaoHPpII-6Tdw" contract="_rZAAMUIZEeaoHPpII-6Tdw"/>
          <interfaceRealization xmi:id="_rZAAMEIZEeaoHPpII-6Tdw" client="_rZAALkIZEeaoHPpII-6Tdw" supplier="_rZAAP0IZEeaoHPpII-6Tdw" contract="_rZAAP0IZEeaoHPpII-6Tdw"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Interface" xmi:id="_rZAAMUIZEeaoHPpII-6Tdw" name="Engine">
          <ownedOperation xmi:id="_rZAAMkIZEeaoHPpII-6Tdw" name="turnedLeft"/>
          <ownedOperation xmi:id="_rZAAM0IZEeaoHPpII-6Tdw" name="turnedRight"/>
          <ownedOperation xmi:id="_rZAANEIZEeaoHPpII-6Tdw" name="stopped"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Interface" xmi:id="_rZAANUIZEeaoHPpII-6Tdw" name="Engine~">
          <ownedOperation xmi:id="_rZAANkIZEeaoHPpII-6Tdw" name="moveForward"/>
          <ownedOperation xmi:id="_rZAAN0IZEeaoHPpII-6Tdw" name="moveBackwards"/>
          <ownedOperation xmi:id="_rZAAOEIZEeaoHPpII-6Tdw" name="turnLeft">
            <ownedParameter xmi:id="_rZAAOUIZEeaoHPpII-6Tdw" name="angle">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_rZAAOkIZEeaoHPpII-6Tdw" name="turnRight">
            <ownedParameter xmi:id="_rZAAO0IZEeaoHPpII-6Tdw" name="angle">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_rZAAPEIZEeaoHPpII-6Tdw" name="stop"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Usage" xmi:id="_rZAAPUIZEeaoHPpII-6Tdw" client="_rZAALkIZEeaoHPpII-6Tdw" supplier="_rZAANUIZEeaoHPpII-6Tdw"/>
        <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_rZAAPkIZEeaoHPpII-6Tdw" name="*"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_rZAAP0IZEeaoHPpII-6Tdw" name="EngineIO"/>
        <packagedElement xmi:type="uml:Usage" xmi:id="_rZAAQEIZEeaoHPpII-6Tdw" client="_rZAALkIZEeaoHPpII-6Tdw" supplier="_rZAAP0IZEeaoHPpII-6Tdw"/>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_rZAAQUIZEeaoHPpII-6Tdw" operation="_rZAAMkIZEeaoHPpII-6Tdw"/>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_rZAAQkIZEeaoHPpII-6Tdw" operation="_rZAAM0IZEeaoHPpII-6Tdw"/>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_rZAAQ0IZEeaoHPpII-6Tdw" operation="_rZAANEIZEeaoHPpII-6Tdw"/>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_rZAAREIZEeaoHPpII-6Tdw" operation="_rZAANkIZEeaoHPpII-6Tdw"/>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_rZAARUIZEeaoHPpII-6Tdw" operation="_rZAAN0IZEeaoHPpII-6Tdw"/>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_rZAARkIZEeaoHPpII-6Tdw" operation="_rZAAOEIZEeaoHPpII-6Tdw"/>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_rZAAR0IZEeaoHPpII-6Tdw" operation="_rZAAOkIZEeaoHPpII-6Tdw"/>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_rZAASEIZEeaoHPpII-6Tdw" operation="_rZAAPEIZEeaoHPpII-6Tdw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_rZAASUIZEeaoHPpII-6Tdw" name="Detection">
        <packagedElement xmi:type="uml:Collaboration" xmi:id="_rZAASkIZEeaoHPpII-6Tdw" name="Detection">
          <interfaceRealization xmi:id="_rZAAS0IZEeaoHPpII-6Tdw" client="_rZAASkIZEeaoHPpII-6Tdw" supplier="_rZAATUIZEeaoHPpII-6Tdw" contract="_rZAATUIZEeaoHPpII-6Tdw"/>
          <interfaceRealization xmi:id="_rZAATEIZEeaoHPpII-6Tdw" client="_rZAASkIZEeaoHPpII-6Tdw" supplier="_rZAAVUIZEeaoHPpII-6Tdw" contract="_rZAAVUIZEeaoHPpII-6Tdw"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Interface" xmi:id="_rZAATUIZEeaoHPpII-6Tdw" name="Detection">
          <ownedOperation xmi:id="_rZAATkIZEeaoHPpII-6Tdw" name="obstacleDetected">
            <ownedParameter xmi:id="_rZAAT0IZEeaoHPpII-6Tdw" name="distance">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Real"/>
            </ownedParameter>
          </ownedOperation>
        </packagedElement>
        <packagedElement xmi:type="uml:Interface" xmi:id="_rZAAUEIZEeaoHPpII-6Tdw" name="Detection~">
          <ownedOperation xmi:id="_rZAAUUIZEeaoHPpII-6Tdw" name="startDetection"/>
          <ownedOperation xmi:id="_rZAAUkIZEeaoHPpII-6Tdw" name="stopDetection"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Usage" xmi:id="_rZAAU0IZEeaoHPpII-6Tdw" client="_rZAASkIZEeaoHPpII-6Tdw" supplier="_rZAAUEIZEeaoHPpII-6Tdw"/>
        <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_rZAAVEIZEeaoHPpII-6Tdw" name="*"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_rZAAVUIZEeaoHPpII-6Tdw" name="DetectionIO"/>
        <packagedElement xmi:type="uml:Usage" xmi:id="_rZAAVkIZEeaoHPpII-6Tdw" client="_rZAASkIZEeaoHPpII-6Tdw" supplier="_rZAAVUIZEeaoHPpII-6Tdw"/>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_rZAAV0IZEeaoHPpII-6Tdw" operation="_rZAAUUIZEeaoHPpII-6Tdw"/>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_rZAAWEIZEeaoHPpII-6Tdw" operation="_rZAAUkIZEeaoHPpII-6Tdw"/>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_rZAAWUIZEeaoHPpII-6Tdw" operation="_rZAATkIZEeaoHPpII-6Tdw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_rZAAWkIZEeaoHPpII-6Tdw" name="Temperature">
        <packagedElement xmi:type="uml:Collaboration" xmi:id="_rZAAW0IZEeaoHPpII-6Tdw" name="Temperature">
          <interfaceRealization xmi:id="_rZAAXEIZEeaoHPpII-6Tdw" client="_rZAAW0IZEeaoHPpII-6Tdw" supplier="_rZAAXkIZEeaoHPpII-6Tdw" contract="_rZAAXkIZEeaoHPpII-6Tdw"/>
          <interfaceRealization xmi:id="_rZAAXUIZEeaoHPpII-6Tdw" client="_rZAAW0IZEeaoHPpII-6Tdw" supplier="_rZAAZkIZEeaoHPpII-6Tdw" contract="_rZAAZkIZEeaoHPpII-6Tdw"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Interface" xmi:id="_rZAAXkIZEeaoHPpII-6Tdw" name="Temperature">
          <ownedOperation xmi:id="_rZAAX0IZEeaoHPpII-6Tdw" name="dataCollected">
            <ownedParameter xmi:id="_rZAAYEIZEeaoHPpII-6Tdw" name="value">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EDouble"/>
            </ownedParameter>
          </ownedOperation>
        </packagedElement>
        <packagedElement xmi:type="uml:Interface" xmi:id="_rZAAYUIZEeaoHPpII-6Tdw" name="Temperature~">
          <ownedOperation xmi:id="_rZAAYkIZEeaoHPpII-6Tdw" name="startCollecting"/>
          <ownedOperation xmi:id="_rZAAY0IZEeaoHPpII-6Tdw" name="stopCollecting"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Usage" xmi:id="_rZAAZEIZEeaoHPpII-6Tdw" client="_rZAAW0IZEeaoHPpII-6Tdw" supplier="_rZAAYUIZEeaoHPpII-6Tdw"/>
        <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_rZAAZUIZEeaoHPpII-6Tdw" name="*"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_rZAAZkIZEeaoHPpII-6Tdw" name="TemperatureIO"/>
        <packagedElement xmi:type="uml:Usage" xmi:id="_rZAAZ0IZEeaoHPpII-6Tdw" client="_rZAAW0IZEeaoHPpII-6Tdw" supplier="_rZAAZkIZEeaoHPpII-6Tdw"/>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_rZAAaEIZEeaoHPpII-6Tdw" operation="_rZAAX0IZEeaoHPpII-6Tdw"/>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_rZAAaUIZEeaoHPpII-6Tdw" operation="_rZAAYkIZEeaoHPpII-6Tdw"/>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_rZAAakIZEeaoHPpII-6Tdw" operation="_rZAAY0IZEeaoHPpII-6Tdw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_lJwmkEhvEeaGrIS8kLT52w" name="Rover" isActive="true">
        <ownedAttribute xmi:type="uml:Port" xmi:id="_pekDoEhvEeaGrIS8kLT52w" name="temperature" visibility="public" type="_rZAAW0IZEeaoHPpII-6Tdw" isOrdered="true" aggregation="composite" isConjugated="true">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_penG8EhvEeaGrIS8kLT52w" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_penuAEhvEeaGrIS8kLT52w" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_rhC4wEhvEeaGrIS8kLT52w" name="detection" visibility="public" type="_rZAASkIZEeaoHPpII-6Tdw" isOrdered="true" aggregation="composite" isConjugated="true">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_rhLboEhvEeaGrIS8kLT52w" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_rhMCsEhvEeaGrIS8kLT52w" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_tKPrMEhvEeaGrIS8kLT52w" name="engine" visibility="public" type="_rZAALkIZEeaoHPpII-6Tdw" isOrdered="true" aggregation="composite" isConjugated="true">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_tKSugEhvEeaGrIS8kLT52w" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_tKTVkEhvEeaGrIS8kLT52w" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_K14YMEhxEeaGrIS8kLT52w" name="detectionSensor" visibility="protected" type="_Rbq14EhwEeaGrIS8kLT52w" isOrdered="true" aggregation="composite">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_K16NYEhxEeaGrIS8kLT52w" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_K16NYUhxEeaGrIS8kLT52w" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_K19QsEhxEeaGrIS8kLT52w" name="temperatureSensor" visibility="protected" type="_W-iBgEhwEeaGrIS8kLT52w" isOrdered="true" aggregation="composite">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_K1-e0EhxEeaGrIS8kLT52w" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_K1_F4EhxEeaGrIS8kLT52w" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_K2A7EEhxEeaGrIS8kLT52w" name="engineController" visibility="protected" type="_Y3d5EEhwEeaGrIS8kLT52w" isOrdered="true" aggregation="composite">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_K2CwQEhxEeaGrIS8kLT52w" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_K2CwQUhxEeaGrIS8kLT52w" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_uigZoFTbEeaAD8nFYloOhg" name="detectionSensor2" visibility="protected" type="_Rbq14EhwEeaGrIS8kLT52w" isOrdered="true" aggregation="composite">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_uijc8FTbEeaAD8nFYloOhg" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_uijc8VTbEeaAD8nFYloOhg" value="1"/>
        </ownedAttribute>
        <ownedConnector xmi:id="_ZnMQYEhxEeaGrIS8kLT52w" name="engine">
          <end xmi:id="_ZnMQYUhxEeaGrIS8kLT52w" partWithPort="_K2A7EEhxEeaGrIS8kLT52w" role="_-HcWsEhwEeaGrIS8kLT52w"/>
          <end xmi:id="_ZnMQYkhxEeaGrIS8kLT52w" role="_tKPrMEhvEeaGrIS8kLT52w"/>
        </ownedConnector>
        <ownedConnector xmi:id="_5xYs4FTbEeaAD8nFYloOhg" name="detection">
          <end xmi:id="_5xaiEFTbEeaAD8nFYloOhg" role="_rhC4wEhvEeaGrIS8kLT52w"/>
          <end xmi:id="_5xaiEVTbEeaAD8nFYloOhg" partWithPort="_uigZoFTbEeaAD8nFYloOhg" role="_eOwG0EhwEeaGrIS8kLT52w"/>
        </ownedConnector>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_Rbq14EhwEeaGrIS8kLT52w" name="DetectionSensor" classifierBehavior="_LdxvIEj0EeaDOaB8rZNNSg" isActive="true">
        <ownedAttribute xmi:type="uml:Port" xmi:id="_eOwG0EhwEeaGrIS8kLT52w" name="detection" visibility="public" type="_rZAASkIZEeaoHPpII-6Tdw" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_eOyjEEhwEeaGrIS8kLT52w" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_eOyjEUhwEeaGrIS8kLT52w" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_t2UsoEj0EeaDOaB8rZNNSg" name="timer" visibility="public" isOrdered="true" aggregation="composite" isBehavior="true">
          <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_t2fEsEj0EeaDOaB8rZNNSg" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_t2frwEj0EeaDOaB8rZNNSg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_wxv78Ej0EeaDOaB8rZNNSg" name="timerId">
          <type xmi:type="uml:Class" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_9RZ9wEj4EeaDOaB8rZNNSg" name="pinTrig">
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O8uI8Ej5EeaDOaB8rZNNSg">
            <language>C++</language>
            <body>GPIOClass(&quot;23&quot;)</body>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c6o1UEj5EeaDOaB8rZNNSg" name="pinEcho">
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_c6o1UUj5EeaDOaB8rZNNSg">
            <language>C++</language>
            <body>GPIOClass(&quot;24&quot;)</body>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_J81eQFTQEeaAD8nFYloOhg" name="log" visibility="public" isOrdered="true" aggregation="composite" isBehavior="true">
          <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_KAJ4AFTQEeaAD8nFYloOhg" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_KAKfEFTQEeaAD8nFYloOhg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_I__e0PH9EeaFP7yOXIAVPg" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
          <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_JADwQPH9EeaFP7yOXIAVPg" value="1"/>
          <upperValue xmi:type="uml:LiteralInteger" xmi:id="_JADwQfH9EeaFP7yOXIAVPg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_JAMTJfH9EeaFP7yOXIAVPg" name="Debug__flag">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_JAMTJvH9EeaFP7yOXIAVPg" name="Debug__variablesData">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_JAMTJ_H9EeaFP7yOXIAVPg" name="Debug__event"/>
        <ownedAttribute xmi:id="_JATn4PH9EeaFP7yOXIAVPg" name="Debug__SRO"/>
        <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_LdxvIEj0EeaDOaB8rZNNSg" name="DetectionSensorStateMachine" isReentrant="false">
          <region xmi:id="_Ld8HMEj0EeaDOaB8rZNNSg" name="Region">
            <transition xmi:id="_TE1AEEj0EeaDOaB8rZNNSg" name="init" source="_J6gmUPH9EeaFP7yOXIAVPg" target="_Q1jFEEj0EeaDOaB8rZNNSg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_nkzrQEj0EeaDOaB8rZNNSg">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::init&quot;,(char *)&quot;Debug__Path__init&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

pinTrig.export_gpio();
pinEcho.export_gpio();

pinTrig.setdir_gpio(&quot;out&quot;);
pinEcho.setdir_gpio(&quot;in&quot;);</body>
              </effect>
            </transition>
            <transition xmi:id="_WVlmMEj0EeaDOaB8rZNNSg" name="start detecting" source="_J1b5EPH9EeaFP7yOXIAVPg" target="_U40GMEj0EeaDOaB8rZNNSg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_luMEj1EeaDOaB8rZNNSg">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::start detecting&quot;,(char *)&quot;Debug__Path__start detecting&quot;,(char *)&quot;DETECTING&quot;,(char *)&quot;&quot;);

pinTrig.setval_gpio(&quot;1&quot;);
timerId = timer.informIn(UMLRTTimespec(0,10000));</body>
              </effect>
            </transition>
            <transition xmi:id="_bjo_cEj0EeaDOaB8rZNNSg" name="stop detecting" source="_J1lqEPH9EeaFP7yOXIAVPg" target="_Q1jFEEj0EeaDOaB8rZNNSg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5enwAEj1EeaDOaB8rZNNSg">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::stop detecting&quot;,(char *)&quot;Debug__Path__stop detecting&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

timer.cancelTimer(timerId);
log.log(&quot;stop detecting&quot;);</body>
              </effect>
            </transition>
            <transition xmi:id="_qrr8oEj0EeaDOaB8rZNNSg" name="detecting" kind="internal" source="_J6oiIPH9EeaFP7yOXIAVPg" target="_U40GMEj0EeaDOaB8rZNNSg">
              <ownedComment xmi:id="_97WPcEj0EeaDOaB8rZNNSg">
                <body>nt</body>
              </ownedComment>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JelpIEj1EeaDOaB8rZNNSg">
                <language>C++</language>
                <body>pinTrig.setval_gpio(&quot;0&quot;);

clock_t pulse_start;
clock_t pulse_end;
double pulse_duration;

while(true) {
	string inputstate;
	pinEcho.getval_gpio(inputstate);
	int value = atoi(inputstate.c_str());

	if (value == 0) {
		pulse_start = clock();
	} else {
		break;
	}
}

while(true) {
	string inputstate;
	pinEcho.getval_gpio(inputstate);
	int value = atoi(inputstate.c_str());

	if (value == 1) {
		pulse_end = clock();
	} else {
		break;
	}
}

pulse_duration = (pulse_end - pulse_start) / (double)(CLOCKS_PER_SEC);

// log.log (&quot;pulse duration is %f&quot;, pulse_duration);

double distance = pulse_duration *17150;

//log.log (&quot;distance is %f&quot;, distance);

detection.obstacleDetected(distance).send();

pinTrig.setval_gpio(&quot;1&quot;);

timerId = timer.informIn(UMLRTTimespec(0,10000));</body>
              </effect>
            </transition>
            <transition xmi:id="_J1cgJPH9EeaFP7yOXIAVPg" name="Debug__start detecting" source="_Q1jFEEj0EeaDOaB8rZNNSg" target="_J1b5EPH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J1cgJfH9EeaFP7yOXIAVPg" name="Debug__start detecting__368">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__start detecting&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;Debug__Path__start detecting&quot;,(char *)&quot;&quot;);

</body>
              </effect>
              <trigger xmi:id="_aphgkEj0EeaDOaB8rZNNSg" event="_rZAAV0IZEeaoHPpII-6Tdw" port="_eOwG0EhwEeaGrIS8kLT52w"/>
            </transition>
            <transition xmi:id="_J1duQPH9EeaFP7yOXIAVPg" name="Debug__start detecting__S" guard="_J1duQvH9EeaFP7yOXIAVPg" source="_J1b5EPH9EeaFP7yOXIAVPg" target="_J1cgIvH9EeaFP7yOXIAVPg">
              <ownedRule xmi:id="_J1duQvH9EeaFP7yOXIAVPg" name="Debug__Guardstart detecting">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_J1duQfH9EeaFP7yOXIAVPg" name="Debug__Guardstart detecting">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J1duQ_H9EeaFP7yOXIAVPg" name="Debug__start detecting__S__370">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__start detecting__S&quot;,(char *)&quot;Debug__Path__start detecting&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_J1eVUPH9EeaFP7yOXIAVPg" name="Debug__start detecting__E" source="_J1cgI_H9EeaFP7yOXIAVPg" target="_U40GMEj0EeaDOaB8rZNNSg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J1eVUfH9EeaFP7yOXIAVPg" name="Debug__start detecting__E__372">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__start detecting__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;DETECTING&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_J1e8YPH9EeaFP7yOXIAVPg" name="Debug__start detecting__dbg" source="_J1cgIPH9EeaFP7yOXIAVPg" target="_J1cgIPH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J1e8YvH9EeaFP7yOXIAVPg" name="Debug__start detecting__dbg__374">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__start detecting__dbg&quot;,(char *)&quot;Debug__C__start detecting&quot;,(char *)&quot;Debug__C__start detecting&quot;,(char *)&quot;&quot;);

</body>
              </effect>
              <trigger xmi:id="_J1e8YfH9EeaFP7yOXIAVPg" name="Debug__MSG" port="_I__e0PH9EeaFP7yOXIAVPg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_J1mRIPH9EeaFP7yOXIAVPg" name="Debug__stop detecting" source="_U40GMEj0EeaDOaB8rZNNSg" target="_J1lqEPH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J1mRIfH9EeaFP7yOXIAVPg" name="Debug__stop detecting__390">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__stop detecting&quot;,(char *)&quot;DETECTING&quot;,(char *)&quot;Debug__Path__stop detecting&quot;,(char *)&quot;&quot;);

</body>
              </effect>
              <trigger xmi:id="_eKnBsEj0EeaDOaB8rZNNSg" event="_rZAAWEIZEeaoHPpII-6Tdw" port="_eOwG0EhwEeaGrIS8kLT52w"/>
            </transition>
            <transition xmi:id="_J1m4MPH9EeaFP7yOXIAVPg" name="Debug__stop detecting__S" guard="_J1m4MvH9EeaFP7yOXIAVPg" source="_J1lqEPH9EeaFP7yOXIAVPg" target="_J1lqE_H9EeaFP7yOXIAVPg">
              <ownedRule xmi:id="_J1m4MvH9EeaFP7yOXIAVPg" name="Debug__Guardstop detecting">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_J1m4MfH9EeaFP7yOXIAVPg" name="Debug__Guardstop detecting">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;DETECTING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J1m4M_H9EeaFP7yOXIAVPg" name="Debug__stop detecting__S__392">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__stop detecting__S&quot;,(char *)&quot;Debug__Path__stop detecting&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_J1nfQPH9EeaFP7yOXIAVPg" name="Debug__stop detecting__E" source="_J1lqFPH9EeaFP7yOXIAVPg" target="_Q1jFEEj0EeaDOaB8rZNNSg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J1nfQfH9EeaFP7yOXIAVPg" name="Debug__stop detecting__E__394">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__stop detecting__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_J6YqgPH9EeaFP7yOXIAVPg" name="Debug__stop detecting__dbg" source="_J1lqEfH9EeaFP7yOXIAVPg" target="_J1lqEfH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J6ZRkPH9EeaFP7yOXIAVPg" name="Debug__stop detecting__dbg__396">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__stop detecting__dbg&quot;,(char *)&quot;Debug__C__stop detecting&quot;,(char *)&quot;Debug__C__stop detecting&quot;,(char *)&quot;&quot;);

</body>
              </effect>
              <trigger xmi:id="_J6YqgfH9EeaFP7yOXIAVPg" name="Debug__MSG" port="_I__e0PH9EeaFP7yOXIAVPg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_J6hNZPH9EeaFP7yOXIAVPg" name="Debug__init" source="_J6rlcPH9EeaFP7yOXIAVPg" target="_J6gmUPH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J6hNZfH9EeaFP7yOXIAVPg" name="Debug__init__411">
                <language>C++</language>
                <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;move forward&quot;,&quot;MOVING_FORWARD&quot;,&quot;moveForward&quot;,&quot;Engine&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;move backwards&quot;,&quot;MOVING_BACKWARDS&quot;,&quot;moveBackwards&quot;,&quot;Engine&quot;);
Debug__SRO.addTransitionsFromState(&quot;DETECTING&quot;,&quot;detecting&quot;,&quot;DETECTING&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;turn left&quot;,&quot;TURNING_LEFT&quot;,&quot;turnLeft&quot;,&quot;Engine&quot;);
Debug__SRO.addTransitionsFromState(&quot;TURNING_LEFT&quot;,&quot;stop turning left&quot;,&quot;IDLE&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;MOVING_FORWARD&quot;,&quot;stop moving forward&quot;,&quot;IDLE&quot;,&quot;stop&quot;,&quot;Engine&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;init&quot;,&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;turn right&quot;,&quot;TURNING_RIGHT&quot;,&quot;turnRight&quot;,&quot;Engine&quot;);
Debug__SRO.addTransitionsFromState(&quot;STOPPING_MOVING_BACKWARDS&quot;,&quot;stopped moving backwards&quot;,&quot;ROTATING&quot;,&quot;stopped&quot;,&quot;Engine&quot;);
Debug__SRO.addTransitionsFromState(&quot;MOVING_FORWARD&quot;,&quot;lowerThanThreshold&quot;,&quot;STOPPING_MOVING_FORWARD&quot;,&quot;obstacleDetected&quot;,&quot;Detection&quot;);
Debug__SRO.addTransitionsFromState(&quot;MOVING_BACKWARDS&quot;,&quot;stop moving backwards&quot;,&quot;IDLE&quot;,&quot;stop&quot;,&quot;Engine&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;init&quot;,&quot;STANDBY&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;MOVING_FORWARD&quot;,&quot;greaterThan&quot;,&quot;MOVING_FORWARD&quot;,&quot;obstacleDetected&quot;,&quot;Detection&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;start detecting&quot;,&quot;DETECTING&quot;,&quot;startDetection&quot;,&quot;Detection&quot;);
Debug__SRO.addTransitionsFromState(&quot;DETECTING&quot;,&quot;stop detecting&quot;,&quot;IDLE&quot;,&quot;stopDetection&quot;,&quot;Detection&quot;);
Debug__SRO.addTransitionsFromState(&quot;ROTATING&quot;,&quot;turnedRight&quot;,&quot;MOVING_FORWARD&quot;,&quot;turnedRight&quot;,&quot;Engine&quot;);
Debug__SRO.addTransitionsFromState(&quot;TURNING_RIGHT&quot;,&quot;stop turning right&quot;,&quot;IDLE&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;MOVING_BACKWARDS&quot;,&quot;timeout&quot;,&quot;STOPPING_MOVING_BACKWARDS&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;STANDBY&quot;,&quot;moving forward&quot;,&quot;MOVING_FORWARD&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;STOPPING_MOVING_FORWARD&quot;,&quot;stopped&quot;,&quot;MOVING_BACKWARDS&quot;,&quot;stopped&quot;,&quot;Engine&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),(char *) &quot;&quot;,(char *) &quot;&quot;,(char *) &quot;&quot;,(char *)&quot;&quot;,(char *) &quot;&quot;);
}
</body>
              </effect>
              <trigger xmi:id="_J6sMgPH9EeaFP7yOXIAVPg" name="ConnectionEstablished" port="_I__e0PH9EeaFP7yOXIAVPg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_J6h0cPH9EeaFP7yOXIAVPg" name="Debug__init__S" guard="_J6h0cvH9EeaFP7yOXIAVPg" source="_J6gmUPH9EeaFP7yOXIAVPg" target="_J6hNYvH9EeaFP7yOXIAVPg">
              <ownedRule xmi:id="_J6h0cvH9EeaFP7yOXIAVPg" name="Debug__Guardinit">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_J6h0cfH9EeaFP7yOXIAVPg" name="Debug__Guardinit">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;Pseudo3&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J6h0c_H9EeaFP7yOXIAVPg" name="Debug__init__S__413">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__init__S&quot;,(char *)&quot;Debug__Path__init&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_J6ibgPH9EeaFP7yOXIAVPg" name="Debug__init__E" source="_J6hNY_H9EeaFP7yOXIAVPg" target="_Q1jFEEj0EeaDOaB8rZNNSg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J6ibgfH9EeaFP7yOXIAVPg" name="Debug__init__E__415">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__init__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_J6jCkPH9EeaFP7yOXIAVPg" name="Debug__init__dbg" source="_J6hNYPH9EeaFP7yOXIAVPg" target="_J6hNYPH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J6jCkvH9EeaFP7yOXIAVPg" name="Debug__init__dbg__417">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__init__dbg&quot;,(char *)&quot;Debug__C__init&quot;,(char *)&quot;Debug__C__init&quot;,(char *)&quot;&quot;);

</body>
              </effect>
              <trigger xmi:id="_J6jCkfH9EeaFP7yOXIAVPg" name="Debug__MSG" port="_I__e0PH9EeaFP7yOXIAVPg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_J6oiJfH9EeaFP7yOXIAVPg" name="Debug__detecting" source="_U40GMEj0EeaDOaB8rZNNSg" target="_J6oiIPH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J6pJMPH9EeaFP7yOXIAVPg" name="Debug__detecting__429">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__detecting&quot;,(char *)&quot;DETECTING&quot;,(char *)&quot;Debug__Path__detecting&quot;,(char *)&quot;&quot;);

</body>
              </effect>
              <trigger xmi:id="_3xRS0Ej0EeaDOaB8rZNNSg" port="_t2UsoEj0EeaDOaB8rZNNSg">
                <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
              </trigger>
            </transition>
            <transition xmi:id="_J6pwQPH9EeaFP7yOXIAVPg" name="Debug__detecting__S" guard="_J6pwQvH9EeaFP7yOXIAVPg" source="_J6oiIPH9EeaFP7yOXIAVPg" target="_J6oiI_H9EeaFP7yOXIAVPg">
              <ownedRule xmi:id="_J6pwQvH9EeaFP7yOXIAVPg" name="Debug__Guarddetecting">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_J6pwQfH9EeaFP7yOXIAVPg" name="Debug__Guarddetecting">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;DETECTING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J6pwQ_H9EeaFP7yOXIAVPg" name="Debug__detecting__S__431">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__detecting__S&quot;,(char *)&quot;Debug__Path__detecting&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_J6qXUPH9EeaFP7yOXIAVPg" name="Debug__detecting__E" source="_J6oiJPH9EeaFP7yOXIAVPg" target="_U40GMEj0EeaDOaB8rZNNSg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J6qXUfH9EeaFP7yOXIAVPg" name="Debug__detecting__E__433">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__detecting__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;DETECTING&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_J6qXUvH9EeaFP7yOXIAVPg" name="Debug__detecting__dbg" source="_J6oiIfH9EeaFP7yOXIAVPg" target="_J6oiIfH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J6q-YPH9EeaFP7yOXIAVPg" name="Debug__detecting__dbg__435">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__detecting__dbg&quot;,(char *)&quot;Debug__C__detecting&quot;,(char *)&quot;Debug__C__detecting&quot;,(char *)&quot;&quot;);

</body>
              </effect>
              <trigger xmi:id="_J6qXU_H9EeaFP7yOXIAVPg" name="Debug__MSG" port="_I__e0PH9EeaFP7yOXIAVPg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_J6rlcfH9EeaFP7yOXIAVPg" name="Debug__InitDebug" source="_LeAYoEj0EeaDOaB8rZNNSg" target="_J6rlcPH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J6rlcvH9EeaFP7yOXIAVPg" name="DebugCheck">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
std::string tempS;
std::cout&lt;&lt;&quot;Enter 1 for running in debug mode, any other key for normal model\n&quot;;
std::cin>> tempS;
if (tempS==&quot;1&quot;)
    this->Debug__SRO.setExecMode(Stepping);
else
    this->Debug__SRO.setExecMode(Running);
</body>
              </effect>
            </transition>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_LeAYoEj0EeaDOaB8rZNNSg" name="Pseudo3"/>
            <subvertex xmi:type="uml:State" xmi:id="_Q1jFEEj0EeaDOaB8rZNNSg" name="IDLE">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_e8_MYFTSEeaAD8nFYloOhg">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

pinTrig.setval_gpio(&quot;0&quot;);}</body>
              </entry>
              <exit xmi:type="uml:OpaqueBehavior" xmi:id="_J_cwsPH9EeaFP7yOXIAVPg" name="IDLE__438">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

}</body>
              </exit>
            </subvertex>
            <subvertex xmi:type="uml:State" xmi:id="_U40GMEj0EeaDOaB8rZNNSg" name="DETECTING">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_J_bikPH9EeaFP7yOXIAVPg" name="DETECTING__436">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;DETECTING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::DETECTING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

}</body>
              </entry>
              <exit xmi:type="uml:OpaqueBehavior" xmi:id="_J_bikfH9EeaFP7yOXIAVPg" name="DETECTING__437">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;DETECTING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::DETECTING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

}</body>
              </exit>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_J1b5EPH9EeaFP7yOXIAVPg" name="Debug__Path__start detecting" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_J1cgIPH9EeaFP7yOXIAVPg" name="Debug__C__start detecting">
              <connectionPoint xmi:id="_J1cgIvH9EeaFP7yOXIAVPg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_J1cgI_H9EeaFP7yOXIAVPg" name="ex" kind="exitPoint"/>
              <region xmi:id="_J1cgIfH9EeaFP7yOXIAVPg" name="Region1">
                <transition xmi:id="_J1gxkPH9EeaFP7yOXIAVPg" name="Debug__init__trans__start detecting" source="_J1cgIvH9EeaFP7yOXIAVPg" target="_J1fjcPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J1jN0PH9EeaFP7yOXIAVPg" name="Debug__init__trans__start detecting__380">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__start detecting::Region1::Debug__init__trans__start detecting&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                </transition>
                <transition xmi:id="_J1gxkfH9EeaFP7yOXIAVPg" name="Debug__Ex__IDLE" source="_J1fjcPH9EeaFP7yOXIAVPg" target="_J1fjcvH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J1j04PH9EeaFP7yOXIAVPg" name="Debug__Ex__IDLE__382">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__start detecting::Region1::Debug__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ac__start detecting&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_J1gxkvH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_I__e0PH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_J1gxk_H9EeaFP7yOXIAVPg" name="Debug__AC__start detecting" source="_J1fjcvH9EeaFP7yOXIAVPg" target="_J1gKgPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J1gxlfH9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                    <name xsi:nil="true"/>
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__start detecting::Region1::Debug__AC__start detecting&quot;,(char *)&quot;Debug__B__Ac__start detecting&quot;,(char *)&quot;Debug__A__Ac__start detecting&quot;,(char *)&quot;&quot;);

pinTrig.setval_gpio(&quot;1&quot;);
timerId = timer.informIn(UMLRTTimespec(0,10000));</body>
                  </effect>
                  <trigger xmi:id="_J1gxlPH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_I__e0PH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_J1gxlvH9EeaFP7yOXIAVPg" name="Debug__En__DETECTING" source="_J1gKgPH9EeaFP7yOXIAVPg" target="_J1gKgvH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J1kb8PH9EeaFP7yOXIAVPg" name="Debug__En__DETECTING__385">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__start detecting::Region1::Debug__En__DETECTING&quot;,(char *)&quot;Debug__A__Ac__start detecting&quot;,(char *)&quot;Debug__A__En__DETECTING&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_J1gxl_H9EeaFP7yOXIAVPg" name="Debug__Exec" port="_I__e0PH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_J1gxmPH9EeaFP7yOXIAVPg" name="Debug__end__trans__start detecting" source="_J1gKgvH9EeaFP7yOXIAVPg" target="_J1cgI_H9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J1kb8fH9EeaFP7yOXIAVPg" name="Debug__end__trans__start detecting__387">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__start detecting::Region1::Debug__end__trans__start detecting&quot;,(char *)&quot;Debug__A__En__DETECTING&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_J1gxmfH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_I__e0PH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_J1fjcPH9EeaFP7yOXIAVPg" name="Debug__B__Ex__IDLE">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_J1fjcfH9EeaFP7yOXIAVPg" name="Debug__B__Ex__IDLE">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__start detecting::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_J1hYoPH9EeaFP7yOXIAVPg" name="Debug__B__Ex__IDLE__375">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__start detecting::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_J1fjcvH9EeaFP7yOXIAVPg" name="Debug__B__Ac__start detecting">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_J1fjc_H9EeaFP7yOXIAVPg" name="Debug__B__Ac__start detecting">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__start detecting::Region1::Debug__B__Ac__start detecting&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;start detecting&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_J1h_sPH9EeaFP7yOXIAVPg" name="Debug__B__Ac__start detecting__376">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__start detecting::Region1::Debug__B__Ac__start detecting&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_J1gKgPH9EeaFP7yOXIAVPg" name="Debug__A__Ac__start detecting">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_J1gKgfH9EeaFP7yOXIAVPg" name="Debug__A__Ac__start detecting">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__start detecting::Region1::Debug__A__Ac__start detecting&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;start detecting&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;DETECTING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_J1h_sfH9EeaFP7yOXIAVPg" name="Debug__A__Ac__start detecting__377">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__start detecting::Region1::Debug__A__Ac__start detecting&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_J1gKgvH9EeaFP7yOXIAVPg" name="Debug__A__En__DETECTING">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_J1gKg_H9EeaFP7yOXIAVPg" name="Debug__A__En__DETECTING">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__start detecting::Region1::Debug__A__En__DETECTING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;DETECTING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_J1imwPH9EeaFP7yOXIAVPg" name="Debug__A__En__DETECTING__378">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__start detecting::Region1::Debug__A__En__DETECTING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_J1lqEPH9EeaFP7yOXIAVPg" name="Debug__Path__stop detecting" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_J1lqEfH9EeaFP7yOXIAVPg" name="Debug__C__stop detecting">
              <connectionPoint xmi:id="_J1lqE_H9EeaFP7yOXIAVPg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_J1lqFPH9EeaFP7yOXIAVPg" name="ex" kind="exitPoint"/>
              <region xmi:id="_J1lqEvH9EeaFP7yOXIAVPg" name="Region1">
                <transition xmi:id="_J6bGwvH9EeaFP7yOXIAVPg" name="Debug__init__trans__stop detecting" source="_J1lqE_H9EeaFP7yOXIAVPg" target="_J6Z4oPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J6eKEPH9EeaFP7yOXIAVPg" name="Debug__init__trans__stop detecting__402">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__stop detecting::Region1::Debug__init__trans__stop detecting&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__DETECTING&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                </transition>
                <transition xmi:id="_J6bGw_H9EeaFP7yOXIAVPg" name="Debug__Ex__DETECTING" source="_J6Z4oPH9EeaFP7yOXIAVPg" target="_J6Z4ovH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J6exIPH9EeaFP7yOXIAVPg" name="Debug__Ex__DETECTING__404">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__stop detecting::Region1::Debug__Ex__DETECTING&quot;,(char *)&quot;Debug__B__Ex__DETECTING&quot;,(char *)&quot;Debug__B__Ac__stop detecting&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_J6bGxPH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_I__e0PH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_J6bGxfH9EeaFP7yOXIAVPg" name="Debug__AC__stop detecting" source="_J6Z4ovH9EeaFP7yOXIAVPg" target="_J6afsPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J6bt0PH9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                    <name xsi:nil="true"/>
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__stop detecting::Region1::Debug__AC__stop detecting&quot;,(char *)&quot;Debug__B__Ac__stop detecting&quot;,(char *)&quot;Debug__A__Ac__stop detecting&quot;,(char *)&quot;&quot;);

timer.cancelTimer(timerId);
log.log(&quot;stop detecting&quot;);</body>
                  </effect>
                  <trigger xmi:id="_J6bGxvH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_I__e0PH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_J6bt0fH9EeaFP7yOXIAVPg" name="Debug__En__IDLE" source="_J6afsPH9EeaFP7yOXIAVPg" target="_J6bGwPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J6bt0_H9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                    <name xsi:nil="true"/>
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__stop detecting::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__stop detecting&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;&quot;);

pinTrig.setval_gpio(&quot;0&quot;);</body>
                  </effect>
                  <trigger xmi:id="_J6bt0vH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_I__e0PH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_J6bt1PH9EeaFP7yOXIAVPg" name="Debug__end__trans__stop detecting" source="_J6bGwPH9EeaFP7yOXIAVPg" target="_J1lqFPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J6fYMPH9EeaFP7yOXIAVPg" name="Debug__end__trans__stop detecting__408">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__stop detecting::Region1::Debug__end__trans__stop detecting&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_J6bt1fH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_I__e0PH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_J6Z4oPH9EeaFP7yOXIAVPg" name="Debug__B__Ex__DETECTING">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_J6Z4ofH9EeaFP7yOXIAVPg" name="Debug__B__Ex__DETECTING">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__stop detecting::Region1::Debug__B__Ex__DETECTING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;DETECTING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_J6bt1vH9EeaFP7yOXIAVPg" name="Debug__B__Ex__DETECTING__397">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__stop detecting::Region1::Debug__B__Ex__DETECTING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_J6Z4ovH9EeaFP7yOXIAVPg" name="Debug__B__Ac__stop detecting">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_J6Z4o_H9EeaFP7yOXIAVPg" name="Debug__B__Ac__stop detecting">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__stop detecting::Region1::Debug__B__Ac__stop detecting&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;DETECTING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;stop detecting&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_J6cU4PH9EeaFP7yOXIAVPg" name="Debug__B__Ac__stop detecting__398">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__stop detecting::Region1::Debug__B__Ac__stop detecting&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_J6afsPH9EeaFP7yOXIAVPg" name="Debug__A__Ac__stop detecting">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_J6afsfH9EeaFP7yOXIAVPg" name="Debug__A__Ac__stop detecting">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__stop detecting::Region1::Debug__A__Ac__stop detecting&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;stop detecting&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_J6c78PH9EeaFP7yOXIAVPg" name="Debug__A__Ac__stop detecting__399">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__stop detecting::Region1::Debug__A__Ac__stop detecting&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_J6bGwPH9EeaFP7yOXIAVPg" name="Debug__A__En__IDLE">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_J6bGwfH9EeaFP7yOXIAVPg" name="Debug__A__En__IDLE">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__stop detecting::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_J6djAPH9EeaFP7yOXIAVPg" name="Debug__A__En__IDLE__400">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__stop detecting::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_J6gmUPH9EeaFP7yOXIAVPg" name="Debug__Path__init" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_J6hNYPH9EeaFP7yOXIAVPg" name="Debug__C__init">
              <connectionPoint xmi:id="_J6hNYvH9EeaFP7yOXIAVPg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_J6hNY_H9EeaFP7yOXIAVPg" name="ex" kind="exitPoint"/>
              <region xmi:id="_J6hNYfH9EeaFP7yOXIAVPg" name="Region1">
                <transition xmi:id="_J6kQsvH9EeaFP7yOXIAVPg" name="Debug__init__trans__init" source="_J6hNYvH9EeaFP7yOXIAVPg" target="_J6jpoPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J6mF4fH9EeaFP7yOXIAVPg" name="Debug__init__trans__init__422">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__init::Region1::Debug__init__trans__init&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__init&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                </transition>
                <transition xmi:id="_J6kQs_H9EeaFP7yOXIAVPg" name="Debug__Ac__init" source="_J6jpoPH9EeaFP7yOXIAVPg" target="_J6jpovH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J6kQtfH9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                    <name xsi:nil="true"/>
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__init::Region1::Debug__Ac__init&quot;,(char *)&quot;Debug__B__Ac__init&quot;,(char *)&quot;Debug__A__Ac__init&quot;,(char *)&quot;&quot;);

pinTrig.export_gpio();
pinEcho.export_gpio();

pinTrig.setdir_gpio(&quot;out&quot;);
pinEcho.setdir_gpio(&quot;in&quot;);</body>
                  </effect>
                  <trigger xmi:id="_J6kQtPH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_I__e0PH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_J6kQtvH9EeaFP7yOXIAVPg" name="Debug__En__IDLE" source="_J6jpovH9EeaFP7yOXIAVPg" target="_J6kQsPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J6k3wPH9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                    <name xsi:nil="true"/>
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__init::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__init&quot;,(char *)&quot;Debug__A__En__init&quot;,(char *)&quot;&quot;);

pinTrig.setval_gpio(&quot;0&quot;);</body>
                  </effect>
                  <trigger xmi:id="_J6kQt_H9EeaFP7yOXIAVPg" name="Debug__Exec" port="_I__e0PH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_J6k3wfH9EeaFP7yOXIAVPg" name="Debug__end__trans__init" source="_J6kQsPH9EeaFP7yOXIAVPg" target="_J6hNY_H9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J6nUAPH9EeaFP7yOXIAVPg" name="Debug__end__trans__init__426">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__init::Region1::Debug__end__trans__init&quot;,(char *)&quot;Debug__A__En__init&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_J6k3wvH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_I__e0PH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_J6jpoPH9EeaFP7yOXIAVPg" name="Debug__B__Ac__init">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_J6jpofH9EeaFP7yOXIAVPg" name="Debug__B__Ac__init">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__init::Region1::Debug__B__Ac__init&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;init&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_J6k3w_H9EeaFP7yOXIAVPg" name="Debug__B__Ac__init__418">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__init::Region1::Debug__B__Ac__init&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_J6jpovH9EeaFP7yOXIAVPg" name="Debug__A__Ac__init">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_J6jpo_H9EeaFP7yOXIAVPg" name="Debug__A__Ac__init">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__init::Region1::Debug__A__Ac__init&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;init&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_J6le0PH9EeaFP7yOXIAVPg" name="Debug__A__Ac__init__419">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__init::Region1::Debug__A__Ac__init&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_J6kQsPH9EeaFP7yOXIAVPg" name="Debug__A__En__init">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_J6kQsfH9EeaFP7yOXIAVPg" name="Debug__A__En__init">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__init::Region1::Debug__A__En__init&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_J6mF4PH9EeaFP7yOXIAVPg" name="Debug__A__En__init__420">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::DetectionSensor::DetectionSensorStateMachine::Region::Debug__C__init::Region1::Debug__A__En__init&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_J6oiIPH9EeaFP7yOXIAVPg" name="Debug__Path__detecting" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_J6oiIfH9EeaFP7yOXIAVPg" name="Debug__C__detecting">
              <connectionPoint xmi:id="_J6oiI_H9EeaFP7yOXIAVPg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_J6oiJPH9EeaFP7yOXIAVPg" name="ex" kind="exitPoint"/>
              <region xmi:id="_J6oiIvH9EeaFP7yOXIAVPg" name="Region1"/>
            </subvertex>
            <subvertex xmi:type="uml:State" xmi:id="_J6rlcPH9EeaFP7yOXIAVPg" name="Debug__InitState"/>
          </region>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_JALsEfH9EeaFP7yOXIAVPg" name="Debug__variablesViewMethod" specification="_JALsEPH9EeaFP7yOXIAVPg">
          <language>C++</language>
          <body>std::string tempS=&quot;&quot;;
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_JAMTJPH9EeaFP7yOXIAVPg" name="Debug__variablesChange" specification="_JAMTIPH9EeaFP7yOXIAVPg">
          <language>C++</language>
          <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);

    return false;
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_JI5jMPH9EeaFP7yOXIAVPg" name="Debug__sendEvent" specification="_JApmIPH9EeaFP7yOXIAVPg">
          <language>C++</language>
          <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
        </ownedBehavior>
        <ownedOperation xmi:id="_JALsEPH9EeaFP7yOXIAVPg" name="Debug__variablesView" visibility="private" method="_JALsEfH9EeaFP7yOXIAVPg"/>
        <ownedOperation xmi:id="_JAMTIPH9EeaFP7yOXIAVPg" name="Debug__variablesChange" visibility="private" method="_JAMTJPH9EeaFP7yOXIAVPg">
          <ownedParameter xmi:id="_JAMTIfH9EeaFP7yOXIAVPg" name="methodReturn" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_JAMTIvH9EeaFP7yOXIAVPg" name="varName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_JAMTI_H9EeaFP7yOXIAVPg" name="varValue">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_JApmIPH9EeaFP7yOXIAVPg" name="Debug__sendEvent" visibility="private" method="_JI5jMPH9EeaFP7yOXIAVPg">
          <ownedParameter xmi:id="_JApmIfH9EeaFP7yOXIAVPg" name="eventSourceKind">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_JAxh8PH9EeaFP7yOXIAVPg" name="eventType">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_JA42sPH9EeaFP7yOXIAVPg" name="instanceName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_JIwZQPH9EeaFP7yOXIAVPg" name="capsuleIndex">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_JIwZQfH9EeaFP7yOXIAVPg" name="signalName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_JI4VEPH9EeaFP7yOXIAVPg" name="capsuleName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_JI4VEfH9EeaFP7yOXIAVPg" name="sourceName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_JI48IPH9EeaFP7yOXIAVPg" name="reserve1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_JI48IfH9EeaFP7yOXIAVPg" name="reserve2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_JI48IvH9EeaFP7yOXIAVPg" name="reserve3">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_W-iBgEhwEeaGrIS8kLT52w" name="TemperatureSensor" isActive="true">
        <ownedAttribute xmi:type="uml:Port" xmi:id="_64Qd4EhwEeaGrIS8kLT52w" name="temperature" visibility="public" type="_rZAAW0IZEeaoHPpII-6Tdw" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_64STEEhwEeaGrIS8kLT52w" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_64S6IEhwEeaGrIS8kLT52w" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_Y3d5EEhwEeaGrIS8kLT52w" name="EngineController" classifierBehavior="_e95PUEhxEeaGrIS8kLT52w" isActive="true">
        <ownedAttribute xmi:type="uml:Port" xmi:id="_-HcWsEhwEeaGrIS8kLT52w" name="engine" visibility="public" type="_rZAALkIZEeaoHPpII-6Tdw" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_-Hey8EhwEeaGrIS8kLT52w" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_-Hey8UhwEeaGrIS8kLT52w" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_mCfzIEh0EeaGrIS8kLT52w" name="timer" visibility="public" isOrdered="true" aggregation="composite" isBehavior="true">
          <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_mCi2cEh0EeaGrIS8kLT52w" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_mCi2cUh0EeaGrIS8kLT52w" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_34ZdsEh0EeaGrIS8kLT52w" name="timerId">
          <type xmi:type="uml:Class" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gSHugEj5EeaDOaB8rZNNSg" name="leftMotorForward">
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_gSHugUj5EeaDOaB8rZNNSg">
            <language>C++</language>
            <body>GPIOClass(&quot;22&quot;)</body>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s5v9YEj5EeaDOaB8rZNNSg" name="rightMotorForward">
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_s5v9YUj5EeaDOaB8rZNNSg">
            <language>C++</language>
            <body>GPIOClass(&quot;6&quot;)</body>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_wyUKYEj5EeaDOaB8rZNNSg" name="rightMotorBackwards">
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_wyUKYUj5EeaDOaB8rZNNSg">
            <language>C++</language>
            <body>GPIOClass(&quot;5&quot;)</body>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_zryR4Ej5EeaDOaB8rZNNSg" name="leftMotorBackwards">
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_zry48Ej5EeaDOaB8rZNNSg">
            <language>C++</language>
            <body>GPIOClass(&quot;27&quot;)</body>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_-fhVsEkDEeazmIbzY62nkg" name="log" visibility="public" isOrdered="true" aggregation="composite" isBehavior="true">
          <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_-foDYEkDEeazmIbzY62nkg" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_-foqcEkDEeazmIbzY62nkg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_JO3oUPH9EeaFP7yOXIAVPg" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
          <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_JO8g0fH9EeaFP7yOXIAVPg" value="1"/>
          <upperValue xmi:type="uml:LiteralInteger" xmi:id="_JO8g0vH9EeaFP7yOXIAVPg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_JPFqxPH9EeaFP7yOXIAVPg" name="Debug__flag">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_JPFqxfH9EeaFP7yOXIAVPg" name="Debug__variablesData">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_JPFqxvH9EeaFP7yOXIAVPg" name="Debug__event"/>
        <ownedAttribute xmi:id="_JPM_gPH9EeaFP7yOXIAVPg" name="Debug__SRO"/>
        <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_e95PUEhxEeaGrIS8kLT52w" name="EngineControllerStateMachine" isReentrant="false">
          <region xmi:id="_e985sEhxEeaGrIS8kLT52w" name="Region">
            <transition xmi:id="_A7vN0EhyEeaGrIS8kLT52w" name="turn right" source="_JwNa0PH9EeaFP7yOXIAVPg" target="_szwy8EhxEeaGrIS8kLT52w">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yfQcgEh5EeaGrIS8kLT52w">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::turn right&quot;,(char *)&quot;Debug__Path__turn right&quot;,(char *)&quot;TURNING_RIGHT&quot;,(char *)&quot;&quot;);

timerId = timer.informIn(UMLRTTimespec(0, (umlrtparam_angle / 360) * 1000000000));</body>
              </effect>
            </transition>
            <transition xmi:id="_B3o1YEhyEeaGrIS8kLT52w" name="stop turning right" source="_JksuYPH9EeaFP7yOXIAVPg" target="_pBYtgEhxEeaGrIS8kLT52w">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_pZ0iAEh5EeaGrIS8kLT52w">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::stop turning right&quot;,(char *)&quot;Debug__Path__stop turning right&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

engine.turnedRight().send();</body>
              </effect>
            </transition>
            <transition xmi:id="_Ca890EhyEeaGrIS8kLT52w" name="move backwards" source="_JwYZ8PH9EeaFP7yOXIAVPg" target="_p51_gEhxEeaGrIS8kLT52w">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jwhj4PH9EeaFP7yOXIAVPg" name="move backwards__361">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::move backwards&quot;,(char *)&quot;Debug__Path__move backwards&quot;,(char *)&quot;MOVING_BACKWARDS&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_C_8hQEhyEeaGrIS8kLT52w" name="stop moving backwards" source="_JqmiEPH9EeaFP7yOXIAVPg" target="_pBYtgEhxEeaGrIS8kLT52w">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Y913wEh5EeaGrIS8kLT52w">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::stop moving backwards&quot;,(char *)&quot;Debug__Path__stop moving backwards&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

engine.stopped().send();</body>
              </effect>
            </transition>
            <transition xmi:id="_FJu4QEhyEeaGrIS8kLT52w" name="turn left" source="_JfoBIPH9EeaFP7yOXIAVPg" target="_uPS80EhxEeaGrIS8kLT52w">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wftmoEh5EeaGrIS8kLT52w">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::turn left&quot;,(char *)&quot;Debug__Path__turn left&quot;,(char *)&quot;TURNING_LEFT&quot;,(char *)&quot;&quot;);

timerId = timer.informIn(UMLRTTimespec(0, (umlrtparam_angle / 360) * 1000000000));</body>
              </effect>
            </transition>
            <transition xmi:id="_Fy2GsEhyEeaGrIS8kLT52w" name="stop turning left" source="_Jq0kgPH9EeaFP7yOXIAVPg" target="_pBYtgEhxEeaGrIS8kLT52w">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_m5suoEh5EeaGrIS8kLT52w">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::stop turning left&quot;,(char *)&quot;Debug__Path__stop turning left&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

engine.turnedRight().send();</body>
              </effect>
            </transition>
            <transition xmi:id="_Gb_KUEhyEeaGrIS8kLT52w" name="stop moving forward" source="_Jk7X4PH9EeaFP7yOXIAVPg" target="_pBYtgEhxEeaGrIS8kLT52w">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_hffvwEh5EeaGrIS8kLT52w">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::stop moving forward&quot;,(char *)&quot;Debug__Path__stop moving forward&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

engine.stopped().send();</body>
              </effect>
            </transition>
            <transition xmi:id="_HDz_UEhyEeaGrIS8kLT52w" name="move forward" source="_JlG-EPH9EeaFP7yOXIAVPg" target="_rDoSEEhxEeaGrIS8kLT52w">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jql7APH9EeaFP7yOXIAVPg" name="move forward__257">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::move forward&quot;,(char *)&quot;Debug__Path__move forward&quot;,(char *)&quot;MOVING_FORWARD&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_Hq2KIEhyEeaGrIS8kLT52w" name="init" source="_JwBNkPH9EeaFP7yOXIAVPg" target="_pBYtgEhxEeaGrIS8kLT52w">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_cKYCAEh1EeaGrIS8kLT52w" name="initialize pins">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::init&quot;,(char *)&quot;Debug__Path__init&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

// exporting GPIOs
leftMotorForward.export_gpio();
leftMotorBackwards.export_gpio();
rightMotorForward.export_gpio();
rightMotorBackwards.export_gpio();

// setting the mode for each GPIO
leftMotorForward.setdir_gpio(&quot;out&quot;);
leftMotorBackwards.setdir_gpio(&quot;out&quot;);
rightMotorForward.setdir_gpio(&quot;out&quot;);
rightMotorBackwards.setdir_gpio(&quot;out&quot;);</body>
              </effect>
            </transition>
            <transition xmi:id="_JfooMfH9EeaFP7yOXIAVPg" name="Debug__turn left" source="_pBYtgEhxEeaGrIS8kLT52w" target="_JfoBIPH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JfooMvH9EeaFP7yOXIAVPg" name="Debug__turn left__173">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__turn left&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;Debug__Path__turn left&quot;,(char *)&quot;&quot;);

</body>
              </effect>
              <trigger xmi:id="_axIegEhyEeaGrIS8kLT52w" event="_rZAARkIZEeaoHPpII-6Tdw" port="_-HcWsEhwEeaGrIS8kLT52w"/>
            </transition>
            <transition xmi:id="_JfpPQPH9EeaFP7yOXIAVPg" name="Debug__turn left__S" guard="_JfpPQvH9EeaFP7yOXIAVPg" source="_JfoBIPH9EeaFP7yOXIAVPg" target="_JfoBI_H9EeaFP7yOXIAVPg">
              <ownedRule xmi:id="_JfpPQvH9EeaFP7yOXIAVPg" name="Debug__Guardturn left">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_JfpPQfH9EeaFP7yOXIAVPg" name="Debug__Guardturn left">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jfp2UPH9EeaFP7yOXIAVPg" name="Debug__turn left__S__175">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__turn left__S&quot;,(char *)&quot;Debug__Path__turn left&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_JfqdYPH9EeaFP7yOXIAVPg" name="Debug__turn left__E" source="_JfooMPH9EeaFP7yOXIAVPg" target="_uPS80EhxEeaGrIS8kLT52w">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JkiWUPH9EeaFP7yOXIAVPg" name="Debug__turn left__E__177">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__turn left__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;TURNING_LEFT&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_JkjkcPH9EeaFP7yOXIAVPg" name="Debug__turn left__dbg" source="_JfoBIfH9EeaFP7yOXIAVPg" target="_JfoBIfH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JkjkcvH9EeaFP7yOXIAVPg" name="Debug__turn left__dbg__179">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__turn left__dbg&quot;,(char *)&quot;Debug__C__turn left&quot;,(char *)&quot;Debug__C__turn left&quot;,(char *)&quot;&quot;);

</body>
              </effect>
              <trigger xmi:id="_JkjkcfH9EeaFP7yOXIAVPg" name="Debug__MSG" port="_JO3oUPH9EeaFP7yOXIAVPg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_JktVdPH9EeaFP7yOXIAVPg" name="Debug__stop turning right" source="_szwy8EhxEeaGrIS8kLT52w" target="_JksuYPH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JktVdfH9EeaFP7yOXIAVPg" name="Debug__stop turning right__194">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__stop turning right&quot;,(char *)&quot;TURNING_RIGHT&quot;,(char *)&quot;Debug__Path__stop turning right&quot;,(char *)&quot;&quot;);

</body>
              </effect>
              <trigger xmi:id="_vsJN8Eh0EeaGrIS8kLT52w" port="_mCfzIEh0EeaGrIS8kLT52w">
                <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
              </trigger>
            </transition>
            <transition xmi:id="_Jkt8gPH9EeaFP7yOXIAVPg" name="Debug__stop turning right__S" guard="_Jkt8gvH9EeaFP7yOXIAVPg" source="_JksuYPH9EeaFP7yOXIAVPg" target="_JktVcvH9EeaFP7yOXIAVPg">
              <ownedRule xmi:id="_Jkt8gvH9EeaFP7yOXIAVPg" name="Debug__Guardstop turning right">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_Jkt8gfH9EeaFP7yOXIAVPg" name="Debug__Guardstop turning right">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;TURNING_RIGHT&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JkujkPH9EeaFP7yOXIAVPg" name="Debug__stop turning right__S__196">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__stop turning right__S&quot;,(char *)&quot;Debug__Path__stop turning right&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_JkvKoPH9EeaFP7yOXIAVPg" name="Debug__stop turning right__E" source="_JktVc_H9EeaFP7yOXIAVPg" target="_pBYtgEhxEeaGrIS8kLT52w">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JkvKofH9EeaFP7yOXIAVPg" name="Debug__stop turning right__E__198">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__stop turning right__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_JkyN8PH9EeaFP7yOXIAVPg" name="Debug__stop turning right__dbg" source="_JktVcPH9EeaFP7yOXIAVPg" target="_JktVcPH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jky1APH9EeaFP7yOXIAVPg" name="Debug__stop turning right__dbg__200">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__stop turning right__dbg&quot;,(char *)&quot;Debug__C__stop turning right&quot;,(char *)&quot;Debug__C__stop turning right&quot;,(char *)&quot;&quot;);

</body>
              </effect>
              <trigger xmi:id="_JkyN8fH9EeaFP7yOXIAVPg" name="Debug__MSG" port="_JO3oUPH9EeaFP7yOXIAVPg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_Jk7X5fH9EeaFP7yOXIAVPg" name="Debug__stop moving forward" source="_rDoSEEhxEeaGrIS8kLT52w" target="_Jk7X4PH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jk7X5vH9EeaFP7yOXIAVPg" name="Debug__stop moving forward__215">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__stop moving forward&quot;,(char *)&quot;MOVING_FORWARD&quot;,(char *)&quot;Debug__Path__stop moving forward&quot;,(char *)&quot;&quot;);

</body>
              </effect>
              <trigger xmi:id="_rNoGIEhyEeaGrIS8kLT52w" event="_rZAASEIZEeaoHPpII-6Tdw" port="_-HcWsEhwEeaGrIS8kLT52w"/>
            </transition>
            <transition xmi:id="_Jk7-8PH9EeaFP7yOXIAVPg" name="Debug__stop moving forward__S" guard="_Jk8mAfH9EeaFP7yOXIAVPg" source="_Jk7X4PH9EeaFP7yOXIAVPg" target="_Jk7X4_H9EeaFP7yOXIAVPg">
              <ownedRule xmi:id="_Jk8mAfH9EeaFP7yOXIAVPg" name="Debug__Guardstop moving forward">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_Jk8mAPH9EeaFP7yOXIAVPg" name="Debug__Guardstop moving forward">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;MOVING_FORWARD&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jk8mAvH9EeaFP7yOXIAVPg" name="Debug__stop moving forward__S__217">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__stop moving forward__S&quot;,(char *)&quot;Debug__Path__stop moving forward&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_Jk9NEPH9EeaFP7yOXIAVPg" name="Debug__stop moving forward__E" source="_Jk7X5PH9EeaFP7yOXIAVPg" target="_pBYtgEhxEeaGrIS8kLT52w">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jk9NEfH9EeaFP7yOXIAVPg" name="Debug__stop moving forward__E__219">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__stop moving forward__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_Jk90IPH9EeaFP7yOXIAVPg" name="Debug__stop moving forward__dbg" source="_Jk7X4fH9EeaFP7yOXIAVPg" target="_Jk7X4fH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jk90IvH9EeaFP7yOXIAVPg" name="Debug__stop moving forward__dbg__221">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__stop moving forward__dbg&quot;,(char *)&quot;Debug__C__stop moving forward&quot;,(char *)&quot;Debug__C__stop moving forward&quot;,(char *)&quot;&quot;);

</body>
              </effect>
              <trigger xmi:id="_Jk90IfH9EeaFP7yOXIAVPg" name="Debug__MSG" port="_JO3oUPH9EeaFP7yOXIAVPg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_JlHlJPH9EeaFP7yOXIAVPg" name="Debug__move forward" source="_pBYtgEhxEeaGrIS8kLT52w" target="_JlG-EPH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JlIMMPH9EeaFP7yOXIAVPg" name="Debug__move forward__236">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__move forward&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;Debug__Path__move forward&quot;,(char *)&quot;&quot;);

</body>
              </effect>
              <trigger xmi:id="_m926EEhyEeaGrIS8kLT52w" event="_rZAAREIZEeaoHPpII-6Tdw" port="_-HcWsEhwEeaGrIS8kLT52w"/>
            </transition>
            <transition xmi:id="_JqcxEPH9EeaFP7yOXIAVPg" name="Debug__move forward__S" guard="_JqcxEvH9EeaFP7yOXIAVPg" source="_JlG-EPH9EeaFP7yOXIAVPg" target="_JlHlIvH9EeaFP7yOXIAVPg">
              <ownedRule xmi:id="_JqcxEvH9EeaFP7yOXIAVPg" name="Debug__Guardmove forward">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_JqcxEfH9EeaFP7yOXIAVPg" name="Debug__Guardmove forward">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JqdYIPH9EeaFP7yOXIAVPg" name="Debug__move forward__S__238">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__move forward__S&quot;,(char *)&quot;Debug__Path__move forward&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_Jqd_MPH9EeaFP7yOXIAVPg" name="Debug__move forward__E" source="_JlHlI_H9EeaFP7yOXIAVPg" target="_rDoSEEhxEeaGrIS8kLT52w">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jqd_MfH9EeaFP7yOXIAVPg" name="Debug__move forward__E__240">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__move forward__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;MOVING_FORWARD&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_JqemQPH9EeaFP7yOXIAVPg" name="Debug__move forward__dbg" source="_JlHlIPH9EeaFP7yOXIAVPg" target="_JlHlIPH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JqfNUPH9EeaFP7yOXIAVPg" name="Debug__move forward__dbg__242">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__move forward__dbg&quot;,(char *)&quot;Debug__C__move forward&quot;,(char *)&quot;Debug__C__move forward&quot;,(char *)&quot;&quot;);

</body>
              </effect>
              <trigger xmi:id="_JqemQfH9EeaFP7yOXIAVPg" name="Debug__MSG" port="_JO3oUPH9EeaFP7yOXIAVPg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_JqnwMPH9EeaFP7yOXIAVPg" name="Debug__stop moving backwards" source="_p51_gEhxEeaGrIS8kLT52w" target="_JqmiEPH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JqnwMfH9EeaFP7yOXIAVPg" name="Debug__stop moving backwards__259">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__stop moving backwards&quot;,(char *)&quot;MOVING_BACKWARDS&quot;,(char *)&quot;Debug__Path__stop moving backwards&quot;,(char *)&quot;&quot;);

</body>
              </effect>
              <trigger xmi:id="_uAeoQEhyEeaGrIS8kLT52w" event="_rZAASEIZEeaoHPpII-6Tdw" port="_-HcWsEhwEeaGrIS8kLT52w"/>
            </transition>
            <transition xmi:id="_JqoXQPH9EeaFP7yOXIAVPg" name="Debug__stop moving backwards__S" guard="_Jqo-UfH9EeaFP7yOXIAVPg" source="_JqmiEPH9EeaFP7yOXIAVPg" target="_JqnJIvH9EeaFP7yOXIAVPg">
              <ownedRule xmi:id="_Jqo-UfH9EeaFP7yOXIAVPg" name="Debug__Guardstop moving backwards">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_Jqo-UPH9EeaFP7yOXIAVPg" name="Debug__Guardstop moving backwards">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;MOVING_BACKWARDS&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JqplYPH9EeaFP7yOXIAVPg" name="Debug__stop moving backwards__S__261">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__stop moving backwards__S&quot;,(char *)&quot;Debug__Path__stop moving backwards&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_JqqMcPH9EeaFP7yOXIAVPg" name="Debug__stop moving backwards__E" source="_JqnJI_H9EeaFP7yOXIAVPg" target="_pBYtgEhxEeaGrIS8kLT52w">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JqqMcfH9EeaFP7yOXIAVPg" name="Debug__stop moving backwards__E__263">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__stop moving backwards__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_JqqzgPH9EeaFP7yOXIAVPg" name="Debug__stop moving backwards__dbg" source="_JqnJIPH9EeaFP7yOXIAVPg" target="_JqnJIPH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JqrakfH9EeaFP7yOXIAVPg" name="Debug__stop moving backwards__dbg__265">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__stop moving backwards__dbg&quot;,(char *)&quot;Debug__C__stop moving backwards&quot;,(char *)&quot;Debug__C__stop moving backwards&quot;,(char *)&quot;&quot;);

</body>
              </effect>
              <trigger xmi:id="_JqrakPH9EeaFP7yOXIAVPg" name="Debug__MSG" port="_JO3oUPH9EeaFP7yOXIAVPg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_Jq1LkPH9EeaFP7yOXIAVPg" name="Debug__stop turning left" source="_uPS80EhxEeaGrIS8kLT52w" target="_Jq0kgPH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jq1LkfH9EeaFP7yOXIAVPg" name="Debug__stop turning left__280">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__stop turning left&quot;,(char *)&quot;TURNING_LEFT&quot;,(char *)&quot;Debug__Path__stop turning left&quot;,(char *)&quot;&quot;);

</body>
              </effect>
              <trigger xmi:id="_tFmpgEh0EeaGrIS8kLT52w" port="_mCfzIEh0EeaGrIS8kLT52w">
                <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
              </trigger>
            </transition>
            <transition xmi:id="_Jq1yoPH9EeaFP7yOXIAVPg" name="Debug__stop turning left__S" guard="_Jq1yovH9EeaFP7yOXIAVPg" source="_Jq0kgPH9EeaFP7yOXIAVPg" target="_Jq0kg_H9EeaFP7yOXIAVPg">
              <ownedRule xmi:id="_Jq1yovH9EeaFP7yOXIAVPg" name="Debug__Guardstop turning left">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_Jq1yofH9EeaFP7yOXIAVPg" name="Debug__Guardstop turning left">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;TURNING_LEFT&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jq1yo_H9EeaFP7yOXIAVPg" name="Debug__stop turning left__S__282">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__stop turning left__S&quot;,(char *)&quot;Debug__Path__stop turning left&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_Jq2ZsPH9EeaFP7yOXIAVPg" name="Debug__stop turning left__E" source="_Jq0khPH9EeaFP7yOXIAVPg" target="_pBYtgEhxEeaGrIS8kLT52w">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jq2ZsfH9EeaFP7yOXIAVPg" name="Debug__stop turning left__E__284">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__stop turning left__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_Jq3AwPH9EeaFP7yOXIAVPg" name="Debug__stop turning left__dbg" source="_Jq0kgfH9EeaFP7yOXIAVPg" target="_Jq0kgfH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jq3AwvH9EeaFP7yOXIAVPg" name="Debug__stop turning left__dbg__286">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__stop turning left__dbg&quot;,(char *)&quot;Debug__C__stop turning left&quot;,(char *)&quot;Debug__C__stop turning left&quot;,(char *)&quot;&quot;);

</body>
              </effect>
              <trigger xmi:id="_Jq3AwfH9EeaFP7yOXIAVPg" name="Debug__MSG" port="_JO3oUPH9EeaFP7yOXIAVPg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_JwB0oPH9EeaFP7yOXIAVPg" name="Debug__init" source="_J1Q58PH9EeaFP7yOXIAVPg" target="_JwBNkPH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwB0ofH9EeaFP7yOXIAVPg" name="Debug__init__301">
                <language>C++</language>
                <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;move forward&quot;,&quot;MOVING_FORWARD&quot;,&quot;moveForward&quot;,&quot;Engine&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;move backwards&quot;,&quot;MOVING_BACKWARDS&quot;,&quot;moveBackwards&quot;,&quot;Engine&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;turn left&quot;,&quot;TURNING_LEFT&quot;,&quot;turnLeft&quot;,&quot;Engine&quot;);
Debug__SRO.addTransitionsFromState(&quot;TURNING_LEFT&quot;,&quot;stop turning left&quot;,&quot;IDLE&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;MOVING_FORWARD&quot;,&quot;stop moving forward&quot;,&quot;IDLE&quot;,&quot;stop&quot;,&quot;Engine&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;init&quot;,&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;turn right&quot;,&quot;TURNING_RIGHT&quot;,&quot;turnRight&quot;,&quot;Engine&quot;);
Debug__SRO.addTransitionsFromState(&quot;STOPPING_MOVING_BACKWARDS&quot;,&quot;stopped moving backwards&quot;,&quot;ROTATING&quot;,&quot;stopped&quot;,&quot;Engine&quot;);
Debug__SRO.addTransitionsFromState(&quot;MOVING_FORWARD&quot;,&quot;lowerThanThreshold&quot;,&quot;STOPPING_MOVING_FORWARD&quot;,&quot;obstacleDetected&quot;,&quot;Detection&quot;);
Debug__SRO.addTransitionsFromState(&quot;MOVING_BACKWARDS&quot;,&quot;stop moving backwards&quot;,&quot;IDLE&quot;,&quot;stop&quot;,&quot;Engine&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;init&quot;,&quot;STANDBY&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;MOVING_FORWARD&quot;,&quot;greaterThan&quot;,&quot;MOVING_FORWARD&quot;,&quot;obstacleDetected&quot;,&quot;Detection&quot;);
Debug__SRO.addTransitionsFromState(&quot;ROTATING&quot;,&quot;turnedRight&quot;,&quot;MOVING_FORWARD&quot;,&quot;turnedRight&quot;,&quot;Engine&quot;);
Debug__SRO.addTransitionsFromState(&quot;TURNING_RIGHT&quot;,&quot;stop turning right&quot;,&quot;IDLE&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;MOVING_BACKWARDS&quot;,&quot;timeout&quot;,&quot;STOPPING_MOVING_BACKWARDS&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;STANDBY&quot;,&quot;moving forward&quot;,&quot;MOVING_FORWARD&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;STOPPING_MOVING_FORWARD&quot;,&quot;stopped&quot;,&quot;MOVING_BACKWARDS&quot;,&quot;stopped&quot;,&quot;Engine&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),(char *) &quot;&quot;,(char *) &quot;&quot;,(char *) &quot;&quot;,(char *)&quot;&quot;,(char *) &quot;&quot;);
}
</body>
              </effect>
              <trigger xmi:id="_J1RhAfH9EeaFP7yOXIAVPg" name="ConnectionEstablished" port="_JO3oUPH9EeaFP7yOXIAVPg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_JwDp0PH9EeaFP7yOXIAVPg" name="Debug__init__S" guard="_JwEQ4fH9EeaFP7yOXIAVPg" source="_JwBNkPH9EeaFP7yOXIAVPg" target="_JwBNk_H9EeaFP7yOXIAVPg">
              <ownedRule xmi:id="_JwEQ4fH9EeaFP7yOXIAVPg" name="Debug__Guardinit">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_JwEQ4PH9EeaFP7yOXIAVPg" name="Debug__Guardinit">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;Pseudo2&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwEQ4vH9EeaFP7yOXIAVPg" name="Debug__init__S__303">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__init__S&quot;,(char *)&quot;Debug__Path__init&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_JwE38PH9EeaFP7yOXIAVPg" name="Debug__init__E" source="_JwBNlPH9EeaFP7yOXIAVPg" target="_pBYtgEhxEeaGrIS8kLT52w">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwE38fH9EeaFP7yOXIAVPg" name="Debug__init__E__305">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__init__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_JwFfAPH9EeaFP7yOXIAVPg" name="Debug__init__dbg" source="_JwBNkfH9EeaFP7yOXIAVPg" target="_JwBNkfH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwGGEPH9EeaFP7yOXIAVPg" name="Debug__init__dbg__307">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__init__dbg&quot;,(char *)&quot;Debug__C__init&quot;,(char *)&quot;Debug__C__init&quot;,(char *)&quot;&quot;);

</body>
              </effect>
              <trigger xmi:id="_JwFfAfH9EeaFP7yOXIAVPg" name="Debug__MSG" port="_JO3oUPH9EeaFP7yOXIAVPg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_JwOB4vH9EeaFP7yOXIAVPg" name="Debug__turn right" source="_pBYtgEhxEeaGrIS8kLT52w" target="_JwNa0PH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwOB4_H9EeaFP7yOXIAVPg" name="Debug__turn right__319">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__turn right&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;Debug__Path__turn right&quot;,(char *)&quot;&quot;);

</body>
              </effect>
              <trigger xmi:id="_h3EmcEhyEeaGrIS8kLT52w" event="_rZAAR0IZEeaoHPpII-6Tdw" port="_-HcWsEhwEeaGrIS8kLT52w"/>
            </transition>
            <transition xmi:id="_JwOo8PH9EeaFP7yOXIAVPg" name="Debug__turn right__S" guard="_JwOo8vH9EeaFP7yOXIAVPg" source="_JwNa0PH9EeaFP7yOXIAVPg" target="_JwOB4PH9EeaFP7yOXIAVPg">
              <ownedRule xmi:id="_JwOo8vH9EeaFP7yOXIAVPg" name="Debug__Guardturn right">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_JwOo8fH9EeaFP7yOXIAVPg" name="Debug__Guardturn right">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwPQAPH9EeaFP7yOXIAVPg" name="Debug__turn right__S__321">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__turn right__S&quot;,(char *)&quot;Debug__Path__turn right&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_JwPQAfH9EeaFP7yOXIAVPg" name="Debug__turn right__E" source="_JwOB4fH9EeaFP7yOXIAVPg" target="_szwy8EhxEeaGrIS8kLT52w">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwPQAvH9EeaFP7yOXIAVPg" name="Debug__turn right__E__323">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__turn right__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;TURNING_RIGHT&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_JwP3EPH9EeaFP7yOXIAVPg" name="Debug__turn right__dbg" source="_JwNa0fH9EeaFP7yOXIAVPg" target="_JwNa0fH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwP3EvH9EeaFP7yOXIAVPg" name="Debug__turn right__dbg__325">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__turn right__dbg&quot;,(char *)&quot;Debug__C__turn right&quot;,(char *)&quot;Debug__C__turn right&quot;,(char *)&quot;&quot;);

</body>
              </effect>
              <trigger xmi:id="_JwP3EfH9EeaFP7yOXIAVPg" name="Debug__MSG" port="_JO3oUPH9EeaFP7yOXIAVPg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_JwYZ9fH9EeaFP7yOXIAVPg" name="Debug__move backwards" source="_pBYtgEhxEeaGrIS8kLT52w" target="_JwYZ8PH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwZBAPH9EeaFP7yOXIAVPg" name="Debug__move backwards__340">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__move backwards&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;Debug__Path__move backwards&quot;,(char *)&quot;&quot;);

</body>
              </effect>
              <trigger xmi:id="_kUiucEhyEeaGrIS8kLT52w" event="_rZAARUIZEeaoHPpII-6Tdw" port="_-HcWsEhwEeaGrIS8kLT52w"/>
            </transition>
            <transition xmi:id="_JwZBAfH9EeaFP7yOXIAVPg" name="Debug__move backwards__S" guard="_JwZoEPH9EeaFP7yOXIAVPg" source="_JwYZ8PH9EeaFP7yOXIAVPg" target="_JwYZ8_H9EeaFP7yOXIAVPg">
              <ownedRule xmi:id="_JwZoEPH9EeaFP7yOXIAVPg" name="Debug__Guardmove backwards">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_JwZBAvH9EeaFP7yOXIAVPg" name="Debug__Guardmove backwards">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwZoEfH9EeaFP7yOXIAVPg" name="Debug__move backwards__S__342">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__move backwards__S&quot;,(char *)&quot;Debug__Path__move backwards&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_JwZoEvH9EeaFP7yOXIAVPg" name="Debug__move backwards__E" source="_JwYZ9PH9EeaFP7yOXIAVPg" target="_p51_gEhxEeaGrIS8kLT52w">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwZoE_H9EeaFP7yOXIAVPg" name="Debug__move backwards__E__344">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__move backwards__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;MOVING_BACKWARDS&quot;,(char *)&quot;&quot;);

</body>
              </effect>
            </transition>
            <transition xmi:id="_JwaPIPH9EeaFP7yOXIAVPg" name="Debug__move backwards__dbg" source="_JwYZ8fH9EeaFP7yOXIAVPg" target="_JwYZ8fH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwaPIvH9EeaFP7yOXIAVPg" name="Debug__move backwards__dbg__346">
                <language>C++</language>
                <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__move backwards__dbg&quot;,(char *)&quot;Debug__C__move backwards&quot;,(char *)&quot;Debug__C__move backwards&quot;,(char *)&quot;&quot;);

</body>
              </effect>
              <trigger xmi:id="_JwaPIfH9EeaFP7yOXIAVPg" name="Debug__MSG" port="_JO3oUPH9EeaFP7yOXIAVPg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_J1Q58fH9EeaFP7yOXIAVPg" name="Debug__InitDebug" source="_e9-u4EhxEeaGrIS8kLT52w" target="_J1Q58PH9EeaFP7yOXIAVPg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_J1RhAPH9EeaFP7yOXIAVPg" name="DebugCheck">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
std::string tempS;
std::cout&lt;&lt;&quot;Enter 1 for running in debug mode, any other key for normal model\n&quot;;
std::cin>> tempS;
if (tempS==&quot;1&quot;)
    this->Debug__SRO.setExecMode(Stepping);
else
    this->Debug__SRO.setExecMode(Running);
</body>
              </effect>
            </transition>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_e9-u4EhxEeaGrIS8kLT52w" name="Pseudo2"/>
            <subvertex xmi:type="uml:State" xmi:id="_pBYtgEhxEeaGrIS8kLT52w" name="IDLE">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_0-j34Eh2EeaGrIS8kLT52w">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

log.log(&quot;Engine is idle&quot;);

leftMotorForward.setval_gpio(&quot;0&quot;);
leftMotorBackwards.setval_gpio(&quot;0&quot;);
rightMotorForward.setval_gpio(&quot;0&quot;);
rightMotorBackwards.setval_gpio(&quot;0&quot;);}</body>
              </entry>
              <exit xmi:type="uml:OpaqueBehavior" xmi:id="_J1XnoPH9EeaFP7yOXIAVPg" name="IDLE__364">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

}</body>
              </exit>
            </subvertex>
            <subvertex xmi:type="uml:State" xmi:id="_p51_gEhxEeaGrIS8kLT52w" name="MOVING_BACKWARDS">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_EdzNEEh3EeaGrIS8kLT52w">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;MOVING_BACKWARDS&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::MOVING_BACKWARDS&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

log.log(&quot;Engine is moving backwards&quot;);


leftMotorBackwards.setval_gpio(&quot;1&quot;);
rightMotorBackwards.setval_gpio(&quot;1&quot;);}</body>
              </entry>
              <exit xmi:type="uml:OpaqueBehavior" xmi:id="_J1Y1wPH9EeaFP7yOXIAVPg" name="MOVING_BACKWARDS__365">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;MOVING_BACKWARDS&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::MOVING_BACKWARDS&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

}</body>
              </exit>
            </subvertex>
            <subvertex xmi:type="uml:State" xmi:id="_rDoSEEhxEeaGrIS8kLT52w" name="MOVING_FORWARD">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_O3tAIEh3EeaGrIS8kLT52w">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;MOVING_FORWARD&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::MOVING_FORWARD&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

log.log(&quot;Engine is moving forward&quot;);
leftMotorForward.setval_gpio(&quot;1&quot;);
rightMotorForward.setval_gpio(&quot;1&quot;);}</body>
              </entry>
              <exit xmi:type="uml:OpaqueBehavior" xmi:id="_J1WZgPH9EeaFP7yOXIAVPg" name="MOVING_FORWARD__363">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;MOVING_FORWARD&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::MOVING_FORWARD&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

}</body>
              </exit>
            </subvertex>
            <subvertex xmi:type="uml:State" xmi:id="_szwy8EhxEeaGrIS8kLT52w" name="TURNING_RIGHT">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_P8JfsEh3EeaGrIS8kLT52w">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;TURNING_RIGHT&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::TURNING_RIGHT&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

log.log(&quot;Engine is turning right&quot;);

leftMotorForward.setval_gpio(&quot;1&quot;);
rightMotorBackwards.setval_gpio(&quot;1&quot;);}</body>
              </entry>
              <exit xmi:type="uml:OpaqueBehavior" xmi:id="_J1Zc0PH9EeaFP7yOXIAVPg" name="TURNING_RIGHT__366">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;TURNING_RIGHT&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::TURNING_RIGHT&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

}</body>
              </exit>
            </subvertex>
            <subvertex xmi:type="uml:State" xmi:id="_uPS80EhxEeaGrIS8kLT52w" name="TURNING_LEFT">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RFJvIEh3EeaGrIS8kLT52w">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;TURNING_LEFT&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::TURNING_LEFT&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

log.log(&quot;Engine is turning left&quot;);

leftMotorBackwards.setval_gpio(&quot;1&quot;);
rightMotorForward.setval_gpio(&quot;1&quot;);}</body>
              </entry>
              <exit xmi:type="uml:OpaqueBehavior" xmi:id="_J1VycPH9EeaFP7yOXIAVPg" name="TURNING_LEFT__362">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;TURNING_LEFT&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::TURNING_LEFT&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

}</body>
              </exit>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_JfoBIPH9EeaFP7yOXIAVPg" name="Debug__Path__turn left" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_JfoBIfH9EeaFP7yOXIAVPg" name="Debug__C__turn left">
              <connectionPoint xmi:id="_JfoBI_H9EeaFP7yOXIAVPg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_JfooMPH9EeaFP7yOXIAVPg" name="ex" kind="exitPoint"/>
              <region xmi:id="_JfoBIvH9EeaFP7yOXIAVPg" name="Region1">
                <transition xmi:id="_JkmAsvH9EeaFP7yOXIAVPg" name="Debug__init__trans__turn left" source="_JfoBI_H9EeaFP7yOXIAVPg" target="_JkkykPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JkprEPH9EeaFP7yOXIAVPg" name="Debug__init__trans__turn left__185">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn left::Region1::Debug__init__trans__turn left&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                </transition>
                <transition xmi:id="_JkmnwPH9EeaFP7yOXIAVPg" name="Debug__Ex__IDLE" source="_JkkykPH9EeaFP7yOXIAVPg" target="_JkkykvH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JkqSIPH9EeaFP7yOXIAVPg" name="Debug__Ex__IDLE__187">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn left::Region1::Debug__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ac__turn left&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_JkmnwfH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_JkmnwvH9EeaFP7yOXIAVPg" name="Debug__AC__turn left" source="_JkkykvH9EeaFP7yOXIAVPg" target="_JklZoPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JkmnxPH9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                    <name xsi:nil="true"/>
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn left::Region1::Debug__AC__turn left&quot;,(char *)&quot;Debug__B__Ac__turn left&quot;,(char *)&quot;Debug__A__Ac__turn left&quot;,(char *)&quot;&quot;);

timerId = timer.informIn(UMLRTTimespec(0, (umlrtparam_angle / 360) * 1000000000));</body>
                  </effect>
                  <trigger xmi:id="_Jkmnw_H9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_JknO0PH9EeaFP7yOXIAVPg" name="Debug__En__TURNING_LEFT" source="_JklZoPH9EeaFP7yOXIAVPg" target="_JkmAsPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JknO0vH9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                    <name xsi:nil="true"/>
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn left::Region1::Debug__En__TURNING_LEFT&quot;,(char *)&quot;Debug__A__Ac__turn left&quot;,(char *)&quot;Debug__A__En__TURNING_LEFT&quot;,(char *)&quot;&quot;);

log.log(&quot;Engine is turning left&quot;);

leftMotorBackwards.setval_gpio(&quot;1&quot;);
rightMotorForward.setval_gpio(&quot;1&quot;);</body>
                  </effect>
                  <trigger xmi:id="_JknO0fH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_JknO0_H9EeaFP7yOXIAVPg" name="Debug__end__trans__turn left" source="_JkmAsPH9EeaFP7yOXIAVPg" target="_JfooMPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JksHUPH9EeaFP7yOXIAVPg" name="Debug__end__trans__turn left__191">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn left::Region1::Debug__end__trans__turn left&quot;,(char *)&quot;Debug__A__En__TURNING_LEFT&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_JknO1PH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_JkkykPH9EeaFP7yOXIAVPg" name="Debug__B__Ex__IDLE">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JkkykfH9EeaFP7yOXIAVPg" name="Debug__B__Ex__IDLE">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn left::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Jkn14PH9EeaFP7yOXIAVPg" name="Debug__B__Ex__IDLE__180">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn left::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_JkkykvH9EeaFP7yOXIAVPg" name="Debug__B__Ac__turn left">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Jkkyk_H9EeaFP7yOXIAVPg" name="Debug__B__Ac__turn left">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn left::Region1::Debug__B__Ac__turn left&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;turn left&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Jkoc8PH9EeaFP7yOXIAVPg" name="Debug__B__Ac__turn left__181">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn left::Region1::Debug__B__Ac__turn left&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_JklZoPH9EeaFP7yOXIAVPg" name="Debug__A__Ac__turn left">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JklZofH9EeaFP7yOXIAVPg" name="Debug__A__Ac__turn left">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn left::Region1::Debug__A__Ac__turn left&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;turn left&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;TURNING_LEFT&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Jkoc8fH9EeaFP7yOXIAVPg" name="Debug__A__Ac__turn left__182">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn left::Region1::Debug__A__Ac__turn left&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_JkmAsPH9EeaFP7yOXIAVPg" name="Debug__A__En__TURNING_LEFT">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JkmAsfH9EeaFP7yOXIAVPg" name="Debug__A__En__TURNING_LEFT">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn left::Region1::Debug__A__En__TURNING_LEFT&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;TURNING_LEFT&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JkpEAPH9EeaFP7yOXIAVPg" name="Debug__A__En__TURNING_LEFT__183">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn left::Region1::Debug__A__En__TURNING_LEFT&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_JksuYPH9EeaFP7yOXIAVPg" name="Debug__Path__stop turning right" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_JktVcPH9EeaFP7yOXIAVPg" name="Debug__C__stop turning right">
              <connectionPoint xmi:id="_JktVcvH9EeaFP7yOXIAVPg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_JktVc_H9EeaFP7yOXIAVPg" name="ex" kind="exitPoint"/>
              <region xmi:id="_JktVcfH9EeaFP7yOXIAVPg" name="Region1">
                <transition xmi:id="_Jk0qMPH9EeaFP7yOXIAVPg" name="Debug__init__trans__stop turning right" source="_JktVcvH9EeaFP7yOXIAVPg" target="_Jky1AfH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jk4UkPH9EeaFP7yOXIAVPg" name="Debug__init__trans__stop turning right__206">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning right::Region1::Debug__init__trans__stop turning right&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__TURNING_RIGHT&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                </transition>
                <transition xmi:id="_Jk0qMfH9EeaFP7yOXIAVPg" name="Debug__Ex__TURNING_RIGHT" source="_Jky1AfH9EeaFP7yOXIAVPg" target="_JkzcEPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jk47oPH9EeaFP7yOXIAVPg" name="Debug__Ex__TURNING_RIGHT__208">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning right::Region1::Debug__Ex__TURNING_RIGHT&quot;,(char *)&quot;Debug__B__Ex__TURNING_RIGHT&quot;,(char *)&quot;Debug__B__Ac__stop turning right&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_Jk0qMvH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_Jk0qM_H9EeaFP7yOXIAVPg" name="Debug__AC__stop turning right" source="_JkzcEPH9EeaFP7yOXIAVPg" target="_JkzcEvH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jk0qNfH9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                    <name xsi:nil="true"/>
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning right::Region1::Debug__AC__stop turning right&quot;,(char *)&quot;Debug__B__Ac__stop turning right&quot;,(char *)&quot;Debug__A__Ac__stop turning right&quot;,(char *)&quot;&quot;);

engine.turnedRight().send();</body>
                  </effect>
                  <trigger xmi:id="_Jk0qNPH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_Jk0qNvH9EeaFP7yOXIAVPg" name="Debug__En__IDLE" source="_JkzcEvH9EeaFP7yOXIAVPg" target="_Jk0DIPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jk0qOPH9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                    <name xsi:nil="true"/>
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning right::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__stop turning right&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;&quot;);

log.log(&quot;Engine is idle&quot;);

leftMotorForward.setval_gpio(&quot;0&quot;);
leftMotorBackwards.setval_gpio(&quot;0&quot;);
rightMotorForward.setval_gpio(&quot;0&quot;);
rightMotorBackwards.setval_gpio(&quot;0&quot;);</body>
                  </effect>
                  <trigger xmi:id="_Jk0qN_H9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_Jk0qOfH9EeaFP7yOXIAVPg" name="Debug__end__trans__stop turning right" source="_Jk0DIPH9EeaFP7yOXIAVPg" target="_JktVc_H9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jk6JwPH9EeaFP7yOXIAVPg" name="Debug__end__trans__stop turning right__212">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning right::Region1::Debug__end__trans__stop turning right&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_Jk0qOvH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_Jky1AfH9EeaFP7yOXIAVPg" name="Debug__B__Ex__TURNING_RIGHT">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Jky1AvH9EeaFP7yOXIAVPg" name="Debug__B__Ex__TURNING_RIGHT">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning right::Region1::Debug__B__Ex__TURNING_RIGHT&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;TURNING_RIGHT&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Jk1RQPH9EeaFP7yOXIAVPg" name="Debug__B__Ex__TURNING_RIGHT__201">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning right::Region1::Debug__B__Ex__TURNING_RIGHT&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_JkzcEPH9EeaFP7yOXIAVPg" name="Debug__B__Ac__stop turning right">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JkzcEfH9EeaFP7yOXIAVPg" name="Debug__B__Ac__stop turning right">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning right::Region1::Debug__B__Ac__stop turning right&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;TURNING_RIGHT&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;stop turning right&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Jk2fYPH9EeaFP7yOXIAVPg" name="Debug__B__Ac__stop turning right__202">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning right::Region1::Debug__B__Ac__stop turning right&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_JkzcEvH9EeaFP7yOXIAVPg" name="Debug__A__Ac__stop turning right">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JkzcE_H9EeaFP7yOXIAVPg" name="Debug__A__Ac__stop turning right">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning right::Region1::Debug__A__Ac__stop turning right&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;stop turning right&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Jk3GcPH9EeaFP7yOXIAVPg" name="Debug__A__Ac__stop turning right__203">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning right::Region1::Debug__A__Ac__stop turning right&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_Jk0DIPH9EeaFP7yOXIAVPg" name="Debug__A__En__IDLE">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Jk0DIfH9EeaFP7yOXIAVPg" name="Debug__A__En__IDLE">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning right::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Jk3tgPH9EeaFP7yOXIAVPg" name="Debug__A__En__IDLE__204">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning right::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_Jk7X4PH9EeaFP7yOXIAVPg" name="Debug__Path__stop moving forward" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_Jk7X4fH9EeaFP7yOXIAVPg" name="Debug__C__stop moving forward">
              <connectionPoint xmi:id="_Jk7X4_H9EeaFP7yOXIAVPg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_Jk7X5PH9EeaFP7yOXIAVPg" name="ex" kind="exitPoint"/>
              <region xmi:id="_Jk7X4vH9EeaFP7yOXIAVPg" name="Region1">
                <transition xmi:id="_JlA3cvH9EeaFP7yOXIAVPg" name="Debug__init__trans__stop moving forward" source="_Jk7X4_H9EeaFP7yOXIAVPg" target="_Jk_pUPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JlEh0PH9EeaFP7yOXIAVPg" name="Debug__init__trans__stop moving forward__227">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving forward::Region1::Debug__init__trans__stop moving forward&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__MOVING_FORWARD&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                </transition>
                <transition xmi:id="_JlA3c_H9EeaFP7yOXIAVPg" name="Debug__Ex__MOVING_FORWARD" source="_Jk_pUPH9EeaFP7yOXIAVPg" target="_JlAQYPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JlEh0fH9EeaFP7yOXIAVPg" name="Debug__Ex__MOVING_FORWARD__229">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving forward::Region1::Debug__Ex__MOVING_FORWARD&quot;,(char *)&quot;Debug__B__Ex__MOVING_FORWARD&quot;,(char *)&quot;Debug__B__Ac__stop moving forward&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_JlA3dPH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_JlA3dfH9EeaFP7yOXIAVPg" name="Debug__AC__stop moving forward" source="_JlAQYPH9EeaFP7yOXIAVPg" target="_JlAQYvH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JlBegPH9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                    <name xsi:nil="true"/>
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving forward::Region1::Debug__AC__stop moving forward&quot;,(char *)&quot;Debug__B__Ac__stop moving forward&quot;,(char *)&quot;Debug__A__Ac__stop moving forward&quot;,(char *)&quot;&quot;);

engine.stopped().send();</body>
                  </effect>
                  <trigger xmi:id="_JlA3dvH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_JlBegfH9EeaFP7yOXIAVPg" name="Debug__En__IDLE" source="_JlAQYvH9EeaFP7yOXIAVPg" target="_JlA3cPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JlBeg_H9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                    <name xsi:nil="true"/>
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving forward::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__stop moving forward&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;&quot;);

log.log(&quot;Engine is idle&quot;);

leftMotorForward.setval_gpio(&quot;0&quot;);
leftMotorBackwards.setval_gpio(&quot;0&quot;);
rightMotorForward.setval_gpio(&quot;0&quot;);
rightMotorBackwards.setval_gpio(&quot;0&quot;);</body>
                  </effect>
                  <trigger xmi:id="_JlBegvH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_JlBehPH9EeaFP7yOXIAVPg" name="Debug__end__trans__stop moving forward" source="_JlA3cPH9EeaFP7yOXIAVPg" target="_Jk7X5PH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JlFv8PH9EeaFP7yOXIAVPg" name="Debug__end__trans__stop moving forward__233">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving forward::Region1::Debug__end__trans__stop moving forward&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_JlBehfH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_Jk_pUPH9EeaFP7yOXIAVPg" name="Debug__B__Ex__MOVING_FORWARD">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Jk_pUfH9EeaFP7yOXIAVPg" name="Debug__B__Ex__MOVING_FORWARD">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving forward::Region1::Debug__B__Ex__MOVING_FORWARD&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;MOVING_FORWARD&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JlBehvH9EeaFP7yOXIAVPg" name="Debug__B__Ex__MOVING_FORWARD__222">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving forward::Region1::Debug__B__Ex__MOVING_FORWARD&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_JlAQYPH9EeaFP7yOXIAVPg" name="Debug__B__Ac__stop moving forward">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JlAQYfH9EeaFP7yOXIAVPg" name="Debug__B__Ac__stop moving forward">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving forward::Region1::Debug__B__Ac__stop moving forward&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;MOVING_FORWARD&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;stop moving forward&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JlCFkPH9EeaFP7yOXIAVPg" name="Debug__B__Ac__stop moving forward__223">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving forward::Region1::Debug__B__Ac__stop moving forward&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_JlAQYvH9EeaFP7yOXIAVPg" name="Debug__A__Ac__stop moving forward">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JlAQY_H9EeaFP7yOXIAVPg" name="Debug__A__Ac__stop moving forward">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving forward::Region1::Debug__A__Ac__stop moving forward&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;stop moving forward&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JlCsoPH9EeaFP7yOXIAVPg" name="Debug__A__Ac__stop moving forward__224">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving forward::Region1::Debug__A__Ac__stop moving forward&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_JlA3cPH9EeaFP7yOXIAVPg" name="Debug__A__En__IDLE">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JlA3cfH9EeaFP7yOXIAVPg" name="Debug__A__En__IDLE">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving forward::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JlDTsPH9EeaFP7yOXIAVPg" name="Debug__A__En__IDLE__225">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving forward::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_JlG-EPH9EeaFP7yOXIAVPg" name="Debug__Path__move forward" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_JlHlIPH9EeaFP7yOXIAVPg" name="Debug__C__move forward">
              <connectionPoint xmi:id="_JlHlIvH9EeaFP7yOXIAVPg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_JlHlI_H9EeaFP7yOXIAVPg" name="ex" kind="exitPoint"/>
              <region xmi:id="_JlHlIfH9EeaFP7yOXIAVPg" name="Region1">
                <transition xmi:id="_JqhCgPH9EeaFP7yOXIAVPg" name="Debug__init__trans__move forward" source="_JlHlIvH9EeaFP7yOXIAVPg" target="_JqfNUfH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JqkF0PH9EeaFP7yOXIAVPg" name="Debug__init__trans__move forward__248">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move forward::Region1::Debug__init__trans__move forward&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                </transition>
                <transition xmi:id="_JqhCgfH9EeaFP7yOXIAVPg" name="Debug__Ex__IDLE" source="_JqfNUfH9EeaFP7yOXIAVPg" target="_Jqf0YfH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JqkF0fH9EeaFP7yOXIAVPg" name="Debug__Ex__IDLE__250">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move forward::Region1::Debug__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ac__move forward&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_JqhCgvH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_JqhCg_H9EeaFP7yOXIAVPg" name="Debug__AC__move forward" source="_Jqf0YfH9EeaFP7yOXIAVPg" target="_JqgbcPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jqks4PH9EeaFP7yOXIAVPg" name="Debug__AC__move forward__252">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move forward::Region1::Debug__AC__move forward&quot;,(char *)&quot;Debug__B__Ac__move forward&quot;,(char *)&quot;Debug__A__Ac__move forward&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_JqhChPH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_JqhChfH9EeaFP7yOXIAVPg" name="Debug__En__MOVING_FORWARD" source="_JqgbcPH9EeaFP7yOXIAVPg" target="_JqgbcvH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JqhCh_H9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                    <name xsi:nil="true"/>
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move forward::Region1::Debug__En__MOVING_FORWARD&quot;,(char *)&quot;Debug__A__Ac__move forward&quot;,(char *)&quot;Debug__A__En__MOVING_FORWARD&quot;,(char *)&quot;&quot;);

log.log(&quot;Engine is moving forward&quot;);
leftMotorForward.setval_gpio(&quot;1&quot;);
rightMotorForward.setval_gpio(&quot;1&quot;);</body>
                  </effect>
                  <trigger xmi:id="_JqhChvH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_JqhCiPH9EeaFP7yOXIAVPg" name="Debug__end__trans__move forward" source="_JqgbcvH9EeaFP7yOXIAVPg" target="_JlHlI_H9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JqlT8PH9EeaFP7yOXIAVPg" name="Debug__end__trans__move forward__255">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move forward::Region1::Debug__end__trans__move forward&quot;,(char *)&quot;Debug__A__En__MOVING_FORWARD&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_JqhCifH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_JqfNUfH9EeaFP7yOXIAVPg" name="Debug__B__Ex__IDLE">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Jqf0YPH9EeaFP7yOXIAVPg" name="Debug__B__Ex__IDLE">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move forward::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JqhpkPH9EeaFP7yOXIAVPg" name="Debug__B__Ex__IDLE__243">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move forward::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_Jqf0YfH9EeaFP7yOXIAVPg" name="Debug__B__Ac__move forward">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Jqf0YvH9EeaFP7yOXIAVPg" name="Debug__B__Ac__move forward">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move forward::Region1::Debug__B__Ac__move forward&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;move forward&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JqiQoPH9EeaFP7yOXIAVPg" name="Debug__B__Ac__move forward__244">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move forward::Region1::Debug__B__Ac__move forward&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_JqgbcPH9EeaFP7yOXIAVPg" name="Debug__A__Ac__move forward">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JqgbcfH9EeaFP7yOXIAVPg" name="Debug__A__Ac__move forward">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move forward::Region1::Debug__A__Ac__move forward&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;move forward&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;MOVING_FORWARD&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Jqi3sPH9EeaFP7yOXIAVPg" name="Debug__A__Ac__move forward__245">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move forward::Region1::Debug__A__Ac__move forward&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_JqgbcvH9EeaFP7yOXIAVPg" name="Debug__A__En__MOVING_FORWARD">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Jqgbc_H9EeaFP7yOXIAVPg" name="Debug__A__En__MOVING_FORWARD">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move forward::Region1::Debug__A__En__MOVING_FORWARD&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;MOVING_FORWARD&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JqjewPH9EeaFP7yOXIAVPg" name="Debug__A__En__MOVING_FORWARD__246">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move forward::Region1::Debug__A__En__MOVING_FORWARD&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_JqmiEPH9EeaFP7yOXIAVPg" name="Debug__Path__stop moving backwards" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_JqnJIPH9EeaFP7yOXIAVPg" name="Debug__C__stop moving backwards">
              <connectionPoint xmi:id="_JqnJIvH9EeaFP7yOXIAVPg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_JqnJI_H9EeaFP7yOXIAVPg" name="ex" kind="exitPoint"/>
              <region xmi:id="_JqnJIfH9EeaFP7yOXIAVPg" name="Region1">
                <transition xmi:id="_Jqt20fH9EeaFP7yOXIAVPg" name="Debug__init__trans__stop moving backwards" source="_JqnJIvH9EeaFP7yOXIAVPg" target="_JqsBoPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JqxhMPH9EeaFP7yOXIAVPg" name="Debug__init__trans__stop moving backwards__271">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving backwards::Region1::Debug__init__trans__stop moving backwards&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__MOVING_BACKWARDS&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                </transition>
                <transition xmi:id="_Jqt20vH9EeaFP7yOXIAVPg" name="Debug__Ex__MOVING_BACKWARDS" source="_JqsBoPH9EeaFP7yOXIAVPg" target="_JqsosPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JqyIQPH9EeaFP7yOXIAVPg" name="Debug__Ex__MOVING_BACKWARDS__273">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving backwards::Region1::Debug__Ex__MOVING_BACKWARDS&quot;,(char *)&quot;Debug__B__Ex__MOVING_BACKWARDS&quot;,(char *)&quot;Debug__B__Ac__stop moving backwards&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_Jqt20_H9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_Jqud4PH9EeaFP7yOXIAVPg" name="Debug__AC__stop moving backwards" source="_JqsosPH9EeaFP7yOXIAVPg" target="_JqsosvH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jqud4vH9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                    <name xsi:nil="true"/>
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving backwards::Region1::Debug__AC__stop moving backwards&quot;,(char *)&quot;Debug__B__Ac__stop moving backwards&quot;,(char *)&quot;Debug__A__Ac__stop moving backwards&quot;,(char *)&quot;&quot;);

engine.stopped().send();</body>
                  </effect>
                  <trigger xmi:id="_Jqud4fH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_Jqud4_H9EeaFP7yOXIAVPg" name="Debug__En__IDLE" source="_JqsosvH9EeaFP7yOXIAVPg" target="_JqtPwfH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jqud5fH9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                    <name xsi:nil="true"/>
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving backwards::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__stop moving backwards&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;&quot;);

log.log(&quot;Engine is idle&quot;);

leftMotorForward.setval_gpio(&quot;0&quot;);
leftMotorBackwards.setval_gpio(&quot;0&quot;);
rightMotorForward.setval_gpio(&quot;0&quot;);
rightMotorBackwards.setval_gpio(&quot;0&quot;);</body>
                  </effect>
                  <trigger xmi:id="_Jqud5PH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_Jqud5vH9EeaFP7yOXIAVPg" name="Debug__end__trans__stop moving backwards" source="_JqtPwfH9EeaFP7yOXIAVPg" target="_JqnJI_H9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JqzWYPH9EeaFP7yOXIAVPg" name="Debug__end__trans__stop moving backwards__277">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving backwards::Region1::Debug__end__trans__stop moving backwards&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_Jqud5_H9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_JqsBoPH9EeaFP7yOXIAVPg" name="Debug__B__Ex__MOVING_BACKWARDS">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JqsBofH9EeaFP7yOXIAVPg" name="Debug__B__Ex__MOVING_BACKWARDS">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving backwards::Region1::Debug__B__Ex__MOVING_BACKWARDS&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;MOVING_BACKWARDS&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JqvE8PH9EeaFP7yOXIAVPg" name="Debug__B__Ex__MOVING_BACKWARDS__266">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving backwards::Region1::Debug__B__Ex__MOVING_BACKWARDS&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_JqsosPH9EeaFP7yOXIAVPg" name="Debug__B__Ac__stop moving backwards">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JqsosfH9EeaFP7yOXIAVPg" name="Debug__B__Ac__stop moving backwards">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving backwards::Region1::Debug__B__Ac__stop moving backwards&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;MOVING_BACKWARDS&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;stop moving backwards&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JqvsAPH9EeaFP7yOXIAVPg" name="Debug__B__Ac__stop moving backwards__267">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving backwards::Region1::Debug__B__Ac__stop moving backwards&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_JqsosvH9EeaFP7yOXIAVPg" name="Debug__A__Ac__stop moving backwards">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JqtPwPH9EeaFP7yOXIAVPg" name="Debug__A__Ac__stop moving backwards">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving backwards::Region1::Debug__A__Ac__stop moving backwards&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;stop moving backwards&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JqwTEPH9EeaFP7yOXIAVPg" name="Debug__A__Ac__stop moving backwards__268">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving backwards::Region1::Debug__A__Ac__stop moving backwards&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_JqtPwfH9EeaFP7yOXIAVPg" name="Debug__A__En__IDLE">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Jqt20PH9EeaFP7yOXIAVPg" name="Debug__A__En__IDLE">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving backwards::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Jqw6IPH9EeaFP7yOXIAVPg" name="Debug__A__En__IDLE__269">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop moving backwards::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_Jq0kgPH9EeaFP7yOXIAVPg" name="Debug__Path__stop turning left" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_Jq0kgfH9EeaFP7yOXIAVPg" name="Debug__C__stop turning left">
              <connectionPoint xmi:id="_Jq0kg_H9EeaFP7yOXIAVPg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_Jq0khPH9EeaFP7yOXIAVPg" name="ex" kind="exitPoint"/>
              <region xmi:id="_Jq0kgvH9EeaFP7yOXIAVPg" name="Region1">
                <transition xmi:id="_Jq418vH9EeaFP7yOXIAVPg" name="Debug__init__trans__stop turning left" source="_Jq0kg_H9EeaFP7yOXIAVPg" target="_Jq3n0PH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jq8gUPH9EeaFP7yOXIAVPg" name="Debug__init__trans__stop turning left__292">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning left::Region1::Debug__init__trans__stop turning left&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__TURNING_LEFT&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                </transition>
                <transition xmi:id="_Jq418_H9EeaFP7yOXIAVPg" name="Debug__Ex__TURNING_LEFT" source="_Jq3n0PH9EeaFP7yOXIAVPg" target="_Jq3n0vH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jq9HYPH9EeaFP7yOXIAVPg" name="Debug__Ex__TURNING_LEFT__294">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning left::Region1::Debug__Ex__TURNING_LEFT&quot;,(char *)&quot;Debug__B__Ex__TURNING_LEFT&quot;,(char *)&quot;Debug__B__Ac__stop turning left&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_Jq419PH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_Jq419fH9EeaFP7yOXIAVPg" name="Debug__AC__stop turning left" source="_Jq3n0vH9EeaFP7yOXIAVPg" target="_Jq4O4PH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jq419_H9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                    <name xsi:nil="true"/>
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning left::Region1::Debug__AC__stop turning left&quot;,(char *)&quot;Debug__B__Ac__stop turning left&quot;,(char *)&quot;Debug__A__Ac__stop turning left&quot;,(char *)&quot;&quot;);

engine.turnedRight().send();</body>
                  </effect>
                  <trigger xmi:id="_Jq419vH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_Jq5dAPH9EeaFP7yOXIAVPg" name="Debug__En__IDLE" source="_Jq4O4PH9EeaFP7yOXIAVPg" target="_Jq418PH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jq5dAvH9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                    <name xsi:nil="true"/>
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning left::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__stop turning left&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;&quot;);

log.log(&quot;Engine is idle&quot;);

leftMotorForward.setval_gpio(&quot;0&quot;);
leftMotorBackwards.setval_gpio(&quot;0&quot;);
rightMotorForward.setval_gpio(&quot;0&quot;);
rightMotorBackwards.setval_gpio(&quot;0&quot;);</body>
                  </effect>
                  <trigger xmi:id="_Jq5dAfH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_Jq6EEPH9EeaFP7yOXIAVPg" name="Debug__end__trans__stop turning left" source="_Jq418PH9EeaFP7yOXIAVPg" target="_Jq0khPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jq-VgPH9EeaFP7yOXIAVPg" name="Debug__end__trans__stop turning left__298">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning left::Region1::Debug__end__trans__stop turning left&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_Jq6EEfH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_Jq3n0PH9EeaFP7yOXIAVPg" name="Debug__B__Ex__TURNING_LEFT">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Jq3n0fH9EeaFP7yOXIAVPg" name="Debug__B__Ex__TURNING_LEFT">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning left::Region1::Debug__B__Ex__TURNING_LEFT&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;TURNING_LEFT&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Jq6EEvH9EeaFP7yOXIAVPg" name="Debug__B__Ex__TURNING_LEFT__287">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning left::Region1::Debug__B__Ex__TURNING_LEFT&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_Jq3n0vH9EeaFP7yOXIAVPg" name="Debug__B__Ac__stop turning left">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Jq3n0_H9EeaFP7yOXIAVPg" name="Debug__B__Ac__stop turning left">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning left::Region1::Debug__B__Ac__stop turning left&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;TURNING_LEFT&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;stop turning left&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Jq6rIPH9EeaFP7yOXIAVPg" name="Debug__B__Ac__stop turning left__288">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning left::Region1::Debug__B__Ac__stop turning left&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_Jq4O4PH9EeaFP7yOXIAVPg" name="Debug__A__Ac__stop turning left">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Jq4O4fH9EeaFP7yOXIAVPg" name="Debug__A__Ac__stop turning left">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning left::Region1::Debug__A__Ac__stop turning left&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;stop turning left&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Jq7SMPH9EeaFP7yOXIAVPg" name="Debug__A__Ac__stop turning left__289">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning left::Region1::Debug__A__Ac__stop turning left&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_Jq418PH9EeaFP7yOXIAVPg" name="Debug__A__En__IDLE">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Jq418fH9EeaFP7yOXIAVPg" name="Debug__A__En__IDLE">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning left::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Jq75QPH9EeaFP7yOXIAVPg" name="Debug__A__En__IDLE__290">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__stop turning left::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_JwBNkPH9EeaFP7yOXIAVPg" name="Debug__Path__init" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_JwBNkfH9EeaFP7yOXIAVPg" name="Debug__C__init">
              <connectionPoint xmi:id="_JwBNk_H9EeaFP7yOXIAVPg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_JwBNlPH9EeaFP7yOXIAVPg" name="ex" kind="exitPoint"/>
              <region xmi:id="_JwBNkvH9EeaFP7yOXIAVPg" name="Region1">
                <transition xmi:id="_JwH7QfH9EeaFP7yOXIAVPg" name="Debug__init__trans__init" source="_JwBNk_H9EeaFP7yOXIAVPg" target="_JwGtIPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwKXgPH9EeaFP7yOXIAVPg" name="Debug__init__trans__init__312">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__init::Region1::Debug__init__trans__init&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__init&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                </transition>
                <transition xmi:id="_JwH7QvH9EeaFP7yOXIAVPg" name="Debug__Ac__init" source="_JwGtIPH9EeaFP7yOXIAVPg" target="_JwGtIvH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwH7RPH9EeaFP7yOXIAVPg" name="initialize pins" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__init::Region1::Debug__Ac__init&quot;,(char *)&quot;Debug__B__Ac__init&quot;,(char *)&quot;Debug__A__Ac__init&quot;,(char *)&quot;&quot;);

// exporting GPIOs
leftMotorForward.export_gpio();
leftMotorBackwards.export_gpio();
rightMotorForward.export_gpio();
rightMotorBackwards.export_gpio();

// setting the mode for each GPIO
leftMotorForward.setdir_gpio(&quot;out&quot;);
leftMotorBackwards.setdir_gpio(&quot;out&quot;);
rightMotorForward.setdir_gpio(&quot;out&quot;);
rightMotorBackwards.setdir_gpio(&quot;out&quot;);</body>
                  </effect>
                  <trigger xmi:id="_JwH7Q_H9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_JwIiUPH9EeaFP7yOXIAVPg" name="Debug__En__IDLE" source="_JwGtIvH9EeaFP7yOXIAVPg" target="_JwHUMPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwIiUvH9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                    <name xsi:nil="true"/>
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__init::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__init&quot;,(char *)&quot;Debug__A__En__init&quot;,(char *)&quot;&quot;);

log.log(&quot;Engine is idle&quot;);

leftMotorForward.setval_gpio(&quot;0&quot;);
leftMotorBackwards.setval_gpio(&quot;0&quot;);
rightMotorForward.setval_gpio(&quot;0&quot;);
rightMotorBackwards.setval_gpio(&quot;0&quot;);</body>
                  </effect>
                  <trigger xmi:id="_JwIiUfH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_JwIiU_H9EeaFP7yOXIAVPg" name="Debug__end__trans__init" source="_JwHUMPH9EeaFP7yOXIAVPg" target="_JwBNlPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwLloPH9EeaFP7yOXIAVPg" name="Debug__end__trans__init__316">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__init::Region1::Debug__end__trans__init&quot;,(char *)&quot;Debug__A__En__init&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_JwIiVPH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_JwGtIPH9EeaFP7yOXIAVPg" name="Debug__B__Ac__init">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JwGtIfH9EeaFP7yOXIAVPg" name="Debug__B__Ac__init">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__init::Region1::Debug__B__Ac__init&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;init&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JwIiVfH9EeaFP7yOXIAVPg" name="Debug__B__Ac__init__308">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__init::Region1::Debug__B__Ac__init&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_JwGtIvH9EeaFP7yOXIAVPg" name="Debug__A__Ac__init">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JwGtI_H9EeaFP7yOXIAVPg" name="Debug__A__Ac__init">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__init::Region1::Debug__A__Ac__init&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;init&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JwJJYPH9EeaFP7yOXIAVPg" name="Debug__A__Ac__init__309">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__init::Region1::Debug__A__Ac__init&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_JwHUMPH9EeaFP7yOXIAVPg" name="Debug__A__En__init">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JwH7QPH9EeaFP7yOXIAVPg" name="Debug__A__En__init">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__init::Region1::Debug__A__En__init&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JwJwcPH9EeaFP7yOXIAVPg" name="Debug__A__En__init__310">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__init::Region1::Debug__A__En__init&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_JwNa0PH9EeaFP7yOXIAVPg" name="Debug__Path__turn right" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_JwNa0fH9EeaFP7yOXIAVPg" name="Debug__C__turn right">
              <connectionPoint xmi:id="_JwOB4PH9EeaFP7yOXIAVPg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_JwOB4fH9EeaFP7yOXIAVPg" name="ex" kind="exitPoint"/>
              <region xmi:id="_JwNa0vH9EeaFP7yOXIAVPg" name="Region1">
                <transition xmi:id="_JwRsQvH9EeaFP7yOXIAVPg" name="Debug__init__trans__turn right" source="_JwOB4PH9EeaFP7yOXIAVPg" target="_JwQeIPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwVWoPH9EeaFP7yOXIAVPg" name="Debug__init__trans__turn right__331">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn right::Region1::Debug__init__trans__turn right&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                </transition>
                <transition xmi:id="_JwSTUPH9EeaFP7yOXIAVPg" name="Debug__Ex__IDLE" source="_JwQeIPH9EeaFP7yOXIAVPg" target="_JwRFMPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwVWofH9EeaFP7yOXIAVPg" name="Debug__Ex__IDLE__333">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn right::Region1::Debug__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ac__turn right&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_JwSTUfH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_JwSTUvH9EeaFP7yOXIAVPg" name="Debug__AC__turn right" source="_JwRFMPH9EeaFP7yOXIAVPg" target="_JwRFMvH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwSTVPH9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                    <name xsi:nil="true"/>
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn right::Region1::Debug__AC__turn right&quot;,(char *)&quot;Debug__B__Ac__turn right&quot;,(char *)&quot;Debug__A__Ac__turn right&quot;,(char *)&quot;&quot;);

timerId = timer.informIn(UMLRTTimespec(0, (umlrtparam_angle / 360) * 1000000000));</body>
                  </effect>
                  <trigger xmi:id="_JwSTU_H9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_JwSTVfH9EeaFP7yOXIAVPg" name="Debug__En__TURNING_RIGHT" source="_JwRFMvH9EeaFP7yOXIAVPg" target="_JwRsQPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwSTV_H9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                    <name xsi:nil="true"/>
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn right::Region1::Debug__En__TURNING_RIGHT&quot;,(char *)&quot;Debug__A__Ac__turn right&quot;,(char *)&quot;Debug__A__En__TURNING_RIGHT&quot;,(char *)&quot;&quot;);

log.log(&quot;Engine is turning right&quot;);

leftMotorForward.setval_gpio(&quot;1&quot;);
rightMotorBackwards.setval_gpio(&quot;1&quot;);</body>
                  </effect>
                  <trigger xmi:id="_JwSTVvH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_JwS6YPH9EeaFP7yOXIAVPg" name="Debug__end__trans__turn right" source="_JwRsQPH9EeaFP7yOXIAVPg" target="_JwOB4fH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwXL0PH9EeaFP7yOXIAVPg" name="Debug__end__trans__turn right__337">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn right::Region1::Debug__end__trans__turn right&quot;,(char *)&quot;Debug__A__En__TURNING_RIGHT&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_JwS6YfH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_JwQeIPH9EeaFP7yOXIAVPg" name="Debug__B__Ex__IDLE">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JwQeIfH9EeaFP7yOXIAVPg" name="Debug__B__Ex__IDLE">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn right::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JwS6YvH9EeaFP7yOXIAVPg" name="Debug__B__Ex__IDLE__326">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn right::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_JwRFMPH9EeaFP7yOXIAVPg" name="Debug__B__Ac__turn right">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JwRFMfH9EeaFP7yOXIAVPg" name="Debug__B__Ac__turn right">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn right::Region1::Debug__B__Ac__turn right&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;turn right&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JwThcPH9EeaFP7yOXIAVPg" name="Debug__B__Ac__turn right__327">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn right::Region1::Debug__B__Ac__turn right&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_JwRFMvH9EeaFP7yOXIAVPg" name="Debug__A__Ac__turn right">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JwRFM_H9EeaFP7yOXIAVPg" name="Debug__A__Ac__turn right">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn right::Region1::Debug__A__Ac__turn right&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;turn right&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;TURNING_RIGHT&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JwUIgPH9EeaFP7yOXIAVPg" name="Debug__A__Ac__turn right__328">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn right::Region1::Debug__A__Ac__turn right&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_JwRsQPH9EeaFP7yOXIAVPg" name="Debug__A__En__TURNING_RIGHT">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JwRsQfH9EeaFP7yOXIAVPg" name="Debug__A__En__TURNING_RIGHT">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn right::Region1::Debug__A__En__TURNING_RIGHT&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;TURNING_RIGHT&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JwUvkPH9EeaFP7yOXIAVPg" name="Debug__A__En__TURNING_RIGHT__329">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__turn right::Region1::Debug__A__En__TURNING_RIGHT&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_JwYZ8PH9EeaFP7yOXIAVPg" name="Debug__Path__move backwards" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_JwYZ8fH9EeaFP7yOXIAVPg" name="Debug__C__move backwards">
              <connectionPoint xmi:id="_JwYZ8_H9EeaFP7yOXIAVPg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_JwYZ9PH9EeaFP7yOXIAVPg" name="ex" kind="exitPoint"/>
              <region xmi:id="_JwYZ8vH9EeaFP7yOXIAVPg" name="Region1">
                <transition xmi:id="_JwcEUPH9EeaFP7yOXIAVPg" name="Debug__init__trans__move backwards" source="_JwYZ8_H9EeaFP7yOXIAVPg" target="_Jwa2MPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwfHoPH9EeaFP7yOXIAVPg" name="Debug__init__trans__move backwards__352">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move backwards::Region1::Debug__init__trans__move backwards&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                </transition>
                <transition xmi:id="_JwcEUfH9EeaFP7yOXIAVPg" name="Debug__Ex__IDLE" source="_Jwa2MPH9EeaFP7yOXIAVPg" target="_Jwa2MvH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwfusPH9EeaFP7yOXIAVPg" name="Debug__Ex__IDLE__354">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move backwards::Region1::Debug__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ac__move backwards&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_JwcEUvH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_JwcEU_H9EeaFP7yOXIAVPg" name="Debug__AC__move backwards" source="_Jwa2MvH9EeaFP7yOXIAVPg" target="_JwbdQPH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwfusfH9EeaFP7yOXIAVPg" name="Debug__AC__move backwards__356">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move backwards::Region1::Debug__AC__move backwards&quot;,(char *)&quot;Debug__B__Ac__move backwards&quot;,(char *)&quot;Debug__A__Ac__move backwards&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_JwcEVPH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_JwcEVfH9EeaFP7yOXIAVPg" name="Debug__En__MOVING_BACKWARDS" source="_JwbdQPH9EeaFP7yOXIAVPg" target="_JwbdQvH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JwcEV_H9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                    <name xsi:nil="true"/>
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move backwards::Region1::Debug__En__MOVING_BACKWARDS&quot;,(char *)&quot;Debug__A__Ac__move backwards&quot;,(char *)&quot;Debug__A__En__MOVING_BACKWARDS&quot;,(char *)&quot;&quot;);

log.log(&quot;Engine is moving backwards&quot;);


leftMotorBackwards.setval_gpio(&quot;1&quot;);
rightMotorBackwards.setval_gpio(&quot;1&quot;);</body>
                  </effect>
                  <trigger xmi:id="_JwcEVvH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_JwcEWPH9EeaFP7yOXIAVPg" name="Debug__end__trans__move backwards" source="_JwbdQvH9EeaFP7yOXIAVPg" target="_JwYZ9PH9EeaFP7yOXIAVPg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jwg80PH9EeaFP7yOXIAVPg" name="Debug__end__trans__move backwards__359">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move backwards::Region1::Debug__end__trans__move backwards&quot;,(char *)&quot;Debug__A__En__MOVING_BACKWARDS&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                  </effect>
                  <trigger xmi:id="_JwcEWfH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JO3oUPH9EeaFP7yOXIAVPg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_Jwa2MPH9EeaFP7yOXIAVPg" name="Debug__B__Ex__IDLE">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Jwa2MfH9EeaFP7yOXIAVPg" name="Debug__B__Ex__IDLE">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move backwards::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JwcrYPH9EeaFP7yOXIAVPg" name="Debug__B__Ex__IDLE__347">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move backwards::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_Jwa2MvH9EeaFP7yOXIAVPg" name="Debug__B__Ac__move backwards">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Jwa2M_H9EeaFP7yOXIAVPg" name="Debug__B__Ac__move backwards">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move backwards::Region1::Debug__B__Ac__move backwards&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;move backwards&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JwdScPH9EeaFP7yOXIAVPg" name="Debug__B__Ac__move backwards__348">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move backwards::Region1::Debug__B__Ac__move backwards&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_JwbdQPH9EeaFP7yOXIAVPg" name="Debug__A__Ac__move backwards">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JwbdQfH9EeaFP7yOXIAVPg" name="Debug__A__Ac__move backwards">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move backwards::Region1::Debug__A__Ac__move backwards&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;move backwards&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;MOVING_BACKWARDS&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Jwd5gPH9EeaFP7yOXIAVPg" name="Debug__A__Ac__move backwards__349">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move backwards::Region1::Debug__A__Ac__move backwards&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_JwbdQvH9EeaFP7yOXIAVPg" name="Debug__A__En__MOVING_BACKWARDS">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JwbdQ_H9EeaFP7yOXIAVPg" name="Debug__A__En__MOVING_BACKWARDS">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move backwards::Region1::Debug__A__En__MOVING_BACKWARDS&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;MOVING_BACKWARDS&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JwegkPH9EeaFP7yOXIAVPg" name="Debug__A__En__MOVING_BACKWARDS__350">
                    <language>C++</language>
                    <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::UMLRT-Rover::EngineController::EngineControllerStateMachine::Region::Debug__C__move backwards::Region1::Debug__A__En__MOVING_BACKWARDS&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:State" xmi:id="_J1Q58PH9EeaFP7yOXIAVPg" name="Debug__InitState"/>
          </region>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_JPFDsfH9EeaFP7yOXIAVPg" name="Debug__variablesViewMethod" specification="_JPFDsPH9EeaFP7yOXIAVPg">
          <language>C++</language>
          <body>std::string tempS=&quot;&quot;;
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_JPFqw_H9EeaFP7yOXIAVPg" name="Debug__variablesChange" specification="_JPFDsvH9EeaFP7yOXIAVPg">
          <language>C++</language>
          <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);

    return false;
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_JQCtAvH9EeaFP7yOXIAVPg" name="Debug__sendEvent" specification="_JPjk0PH9EeaFP7yOXIAVPg">
          <language>C++</language>
          <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
        </ownedBehavior>
        <ownedOperation xmi:id="_JPFDsPH9EeaFP7yOXIAVPg" name="Debug__variablesView" visibility="private" method="_JPFDsfH9EeaFP7yOXIAVPg"/>
        <ownedOperation xmi:id="_JPFDsvH9EeaFP7yOXIAVPg" name="Debug__variablesChange" visibility="private" method="_JPFqw_H9EeaFP7yOXIAVPg">
          <ownedParameter xmi:id="_JPFqwPH9EeaFP7yOXIAVPg" name="methodReturn" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_JPFqwfH9EeaFP7yOXIAVPg" name="varName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_JPFqwvH9EeaFP7yOXIAVPg" name="varValue">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_JPjk0PH9EeaFP7yOXIAVPg" name="Debug__sendEvent" visibility="private" method="_JQCtAvH9EeaFP7yOXIAVPg">
          <ownedParameter xmi:id="_JPkL4PH9EeaFP7yOXIAVPg" name="eventSourceKind">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_JPq5kPH9EeaFP7yOXIAVPg" name="eventType">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_JPy1YPH9EeaFP7yOXIAVPg" name="instanceName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_JP6KIPH9EeaFP7yOXIAVPg" name="capsuleIndex">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_JP6KIfH9EeaFP7yOXIAVPg" name="signalName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_JQCF8PH9EeaFP7yOXIAVPg" name="capsuleName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_JQCF8fH9EeaFP7yOXIAVPg" name="sourceName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_JQCF8vH9EeaFP7yOXIAVPg" name="reserve1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_JQCtAPH9EeaFP7yOXIAVPg" name="reserve2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_JQCtAfH9EeaFP7yOXIAVPg" name="reserve3">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Artifact" xmi:id="_Y6tKIEj7EeaDOaB8rZNNSg" name="GPIOClass" fileName="">
        <nestedArtifact xmi:id="_ljw8YEj7EeaDOaB8rZNNSg"/>
      </packagedElement>
      <profileApplication xmi:id="_rZAnVEIZEeaoHPpII-6Tdw">
        <eAnnotations xmi:id="_rZAnVUIZEeaoHPpII-6Tdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard#/"/>
        </eAnnotations>
        <appliedProfile href="pathmap://UML_PROFILES/Standard.profile.uml#_0"/>
      </profileApplication>
      <profileApplication xmi:id="_rZAnVkIZEeaoHPpII-6Tdw">
        <eAnnotations xmi:id="_rZAnV0IZEeaoHPpII-6Tdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
        </eAnnotations>
        <appliedProfile href="pathmap://UML_RT_PROFILE/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
      </profileApplication>
      <profileApplication xmi:id="_rZAnWEIZEeaoHPpII-6Tdw">
        <eAnnotations xmi:id="_rZAnWUIZEeaoHPpII-6Tdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
        </eAnnotations>
        <appliedProfile href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
      </profileApplication>
      <profileApplication xmi:id="_x42mkEj3EeaDOaB8rZNNSg">
        <eAnnotations xmi:id="_x43NoEj3EeaDOaB8rZNNSg" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
        </eAnnotations>
        <appliedProfile href="pathmap://UMLRT_CPP/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
      </profileApplication>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_9dusUEhlEeaGrIS8kLT52w" name="Top" isActive="true">
      <ownedAttribute xmi:id="_FfiQgEhvEeaGrIS8kLT52w" name="controlSoftware" visibility="protected" type="_CFLpgEhvEeaGrIS8kLT52w" isOrdered="true" aggregation="composite">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_FfvE0EhvEeaGrIS8kLT52w" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ffvr4EhvEeaGrIS8kLT52w" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_uvJMcEhvEeaGrIS8kLT52w" name="rover" visibility="protected" type="_lJwmkEhvEeaGrIS8kLT52w" isOrdered="true" aggregation="composite">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_uvLBoEhvEeaGrIS8kLT52w" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_uvLosEhvEeaGrIS8kLT52w" value="1"/>
      </ownedAttribute>
      <ownedConnector xmi:id="_8kYd8EhvEeaGrIS8kLT52w" name="Connector1">
        <end xmi:id="_8kZsEEhvEeaGrIS8kLT52w" partWithPort="_FfiQgEhvEeaGrIS8kLT52w" role="_Q9hWwEhvEeaGrIS8kLT52w"/>
        <end xmi:id="_8kZsEUhvEeaGrIS8kLT52w" partWithPort="_uvJMcEhvEeaGrIS8kLT52w" role="_pekDoEhvEeaGrIS8kLT52w"/>
      </ownedConnector>
      <ownedConnector xmi:id="_9WyyUEhvEeaGrIS8kLT52w" name="Connector2">
        <end xmi:id="_9W0AcEhvEeaGrIS8kLT52w" partWithPort="_FfiQgEhvEeaGrIS8kLT52w" role="_O8LKEEhvEeaGrIS8kLT52w"/>
        <end xmi:id="_9W0ngEhvEeaGrIS8kLT52w" partWithPort="_uvJMcEhvEeaGrIS8kLT52w" role="_rhC4wEhvEeaGrIS8kLT52w"/>
      </ownedConnector>
      <ownedConnector xmi:id="_-HZI0EhvEeaGrIS8kLT52w" name="Connector3">
        <end xmi:id="_-HZv4EhvEeaGrIS8kLT52w" partWithPort="_FfiQgEhvEeaGrIS8kLT52w" role="_MlGlAEhvEeaGrIS8kLT52w"/>
        <end xmi:id="_-HZv4UhvEeaGrIS8kLT52w" partWithPort="_uvJMcEhvEeaGrIS8kLT52w" role="_tKPrMEhvEeaGrIS8kLT52w"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_CFLpgEhvEeaGrIS8kLT52w" name="ControlSoftware" classifierBehavior="_5icxAEj-EeaDOaB8rZNNSg" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_MlGlAEhvEeaGrIS8kLT52w" name="engine" visibility="public" type="_rZAALkIZEeaoHPpII-6Tdw" isOrdered="true" aggregation="composite" isBehavior="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_MlOg0EhvEeaGrIS8kLT52w" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_MlPH4EhvEeaGrIS8kLT52w" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_O8LKEEhvEeaGrIS8kLT52w" name="detection" visibility="public" type="_rZAASkIZEeaoHPpII-6Tdw" isOrdered="true" aggregation="composite" isBehavior="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O8NmUEhvEeaGrIS8kLT52w" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O8ONYEhvEeaGrIS8kLT52w" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_Q9hWwEhvEeaGrIS8kLT52w" name="temperature" visibility="public" type="_rZAAW0IZEeaoHPpII-6Tdw" isOrdered="true" aggregation="composite" isBehavior="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Q9ndYEhvEeaGrIS8kLT52w" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Q9oEcEhvEeaGrIS8kLT52w" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_cfYtoEkCEeazmIbzY62nkg" name="log" visibility="public" isOrdered="true" aggregation="composite" isBehavior="true">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_cfvS8EkCEeazmIbzY62nkg" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_cfv6AEkCEeazmIbzY62nkg" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ecDOoEkCEeazmIbzY62nkg" name="timer" visibility="public" isOrdered="true" aggregation="composite" isBehavior="true">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_ecJ8UEkCEeazmIbzY62nkg" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ecKjYEkCEeazmIbzY62nkg" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_wbWEMFTTEeaAD8nFYloOhg" name="threshold">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Real"/>
        <defaultValue xmi:type="uml:LiteralReal" xmi:id="_zDPTgFTTEeaAD8nFYloOhg" value="30.0"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_JI6KQPH9EeaFP7yOXIAVPg" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_JI-bsPH9EeaFP7yOXIAVPg" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_JI-bsfH9EeaFP7yOXIAVPg" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_JJHlo_H9EeaFP7yOXIAVPg" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_JJHlpPH9EeaFP7yOXIAVPg" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_JJHlpfH9EeaFP7yOXIAVPg" name="Debug__event"/>
      <ownedAttribute xmi:id="_JJO6YPH9EeaFP7yOXIAVPg" name="Debug__SRO"/>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_5icxAEj-EeaDOaB8rZNNSg" name="ControlSoftwareStateMachine" isReentrant="false">
        <region xmi:id="_5iiQkEj-EeaDOaB8rZNNSg" name="Region">
          <transition xmi:id="_GUMlMEj_EeaDOaB8rZNNSg" name="init" source="_JVM50PH9EeaFP7yOXIAVPg" target="_B4sDMEj_EeaDOaB8rZNNSg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVTngPH9EeaFP7yOXIAVPg" name="init__67">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::init&quot;,(char *)&quot;Debug__Path__init&quot;,(char *)&quot;STANDBY&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_G-xzQEj_EeaDOaB8rZNNSg" name="moving forward" source="_JfT4EPH9EeaFP7yOXIAVPg" target="__e_A4Ej-EeaDOaB8rZNNSg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jfbz4fH9EeaFP7yOXIAVPg" name="moving forward__165">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::moving forward&quot;,(char *)&quot;Debug__Path__moving forward&quot;,(char *)&quot;MOVING_FORWARD&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_NUjpkEj_EeaDOaB8rZNNSg" name="lowerThanThreshold" source="_JaC9kPH9EeaFP7yOXIAVPg" target="_4mW2cFTWEeaAD8nFYloOhg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_zHxXIEj_EeaDOaB8rZNNSg">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::lowerThanThreshold&quot;,(char *)&quot;Debug__Path__lowerThanThreshold&quot;,(char *)&quot;STOPPING_MOVING_FORWARD&quot;,(char *)&quot;&quot;);

log.log (&quot;distance less than threshold: %f &lt; %f&quot;, umlrtparam_distance, threshold);
detection.stopDetection().send();</body>
            </effect>
          </transition>
          <transition xmi:id="_E-L2IFTUEeaAD8nFYloOhg" name="greaterThan" kind="internal" source="_JVUOkPH9EeaFP7yOXIAVPg" target="__e_A4Ej-EeaDOaB8rZNNSg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_QMtkEFTUEeaAD8nFYloOhg">
              <language>C++</language>
              <body>log.log (&quot;distance greater than threshold: %f > %f&quot;, umlrtparam_distance, threshold);</body>
            </effect>
          </transition>
          <transition xmi:id="_JnomIFTXEeaAD8nFYloOhg" name="stopped" source="_JU5X0PH9EeaFP7yOXIAVPg" target="_HvR9YFTXEeaAD8nFYloOhg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVDv4PH9EeaFP7yOXIAVPg" name="stopped__24">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::stopped&quot;,(char *)&quot;Debug__Path__stopped&quot;,(char *)&quot;MOVING_BACKWARDS&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_Ze9EIFTXEeaAD8nFYloOhg" name="timeout" source="_JaMHgPH9EeaFP7yOXIAVPg" target="_qZ_B4FTXEeaAD8nFYloOhg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaVRcPH9EeaFP7yOXIAVPg" name="timeout__119">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::timeout&quot;,(char *)&quot;Debug__Path__timeout&quot;,(char *)&quot;STOPPING_MOVING_BACKWARDS&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_tcAocFTXEeaAD8nFYloOhg" name="stopped moving backwards" source="_JVEW8PH9EeaFP7yOXIAVPg" target="_YBwGUFTXEeaAD8nFYloOhg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVLrsfH9EeaFP7yOXIAVPg" name="stopped moving backwards__47">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::stopped moving backwards&quot;,(char *)&quot;Debug__Path__stopped moving backwards&quot;,(char *)&quot;ROTATING&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_DgyHMFTYEeaAD8nFYloOhg" name="turnedRight" source="_JaV4gPH9EeaFP7yOXIAVPg" target="__e_A4Ej-EeaDOaB8rZNNSg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JfSp8fH9EeaFP7yOXIAVPg" name="turnedRight__142">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::turnedRight&quot;,(char *)&quot;Debug__Path__turnedRight&quot;,(char *)&quot;MOVING_FORWARD&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_JU5-5PH9EeaFP7yOXIAVPg" name="Debug__stopped" source="_4mW2cFTWEeaAD8nFYloOhg" target="_JU5X0PH9EeaFP7yOXIAVPg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JU5-5fH9EeaFP7yOXIAVPg" name="Debug__stopped__3">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__stopped&quot;,(char *)&quot;STOPPING_MOVING_FORWARD&quot;,(char *)&quot;Debug__Path__stopped&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_MLVR8FTXEeaAD8nFYloOhg" event="_rZAAQ0IZEeaoHPpII-6Tdw" port="_MlGlAEhvEeaGrIS8kLT52w"/>
          </transition>
          <transition xmi:id="_JU6l8PH9EeaFP7yOXIAVPg" name="Debug__stopped__S" guard="_JU6l8vH9EeaFP7yOXIAVPg" source="_JU5X0PH9EeaFP7yOXIAVPg" target="_JU5-4vH9EeaFP7yOXIAVPg">
            <ownedRule xmi:id="_JU6l8vH9EeaFP7yOXIAVPg" name="Debug__Guardstopped">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_JU6l8fH9EeaFP7yOXIAVPg" name="Debug__Guardstopped">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;STOPPING_MOVING_FORWARD&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JU7NAPH9EeaFP7yOXIAVPg" name="Debug__stopped__S__5">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__stopped__S&quot;,(char *)&quot;Debug__Path__stopped&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_JU7NAfH9EeaFP7yOXIAVPg" name="Debug__stopped__E" source="_JU5-4_H9EeaFP7yOXIAVPg" target="_HvR9YFTXEeaAD8nFYloOhg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JU70EPH9EeaFP7yOXIAVPg" name="Debug__stopped__E__7">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__stopped__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;MOVING_BACKWARDS&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_JU70EfH9EeaFP7yOXIAVPg" name="Debug__stopped__dbg" source="_JU5-4PH9EeaFP7yOXIAVPg" target="_JU5-4PH9EeaFP7yOXIAVPg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JU8bIPH9EeaFP7yOXIAVPg" name="Debug__stopped__dbg__9">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__stopped__dbg&quot;,(char *)&quot;Debug__C__stopped&quot;,(char *)&quot;Debug__C__stopped&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_JU70EvH9EeaFP7yOXIAVPg" name="Debug__MSG" port="_JI6KQPH9EeaFP7yOXIAVPg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_JVEW9fH9EeaFP7yOXIAVPg" name="Debug__stopped moving backwards" source="_qZ_B4FTXEeaAD8nFYloOhg" target="_JVEW8PH9EeaFP7yOXIAVPg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVEW9vH9EeaFP7yOXIAVPg" name="Debug__stopped moving backwards__26">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__stopped moving backwards&quot;,(char *)&quot;STOPPING_MOVING_BACKWARDS&quot;,(char *)&quot;Debug__Path__stopped moving backwards&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_wXOcYFTXEeaAD8nFYloOhg" event="_rZAAQ0IZEeaoHPpII-6Tdw" port="_MlGlAEhvEeaGrIS8kLT52w"/>
          </transition>
          <transition xmi:id="_JVE-APH9EeaFP7yOXIAVPg" name="Debug__stopped moving backwards__S" guard="_JVE-AvH9EeaFP7yOXIAVPg" source="_JVEW8PH9EeaFP7yOXIAVPg" target="_JVEW8_H9EeaFP7yOXIAVPg">
            <ownedRule xmi:id="_JVE-AvH9EeaFP7yOXIAVPg" name="Debug__Guardstopped moving backwards">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_JVE-AfH9EeaFP7yOXIAVPg" name="Debug__Guardstopped moving backwards">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;STOPPING_MOVING_BACKWARDS&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVFlEPH9EeaFP7yOXIAVPg" name="Debug__stopped moving backwards__S__28">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__stopped moving backwards__S&quot;,(char *)&quot;Debug__Path__stopped moving backwards&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_JVFlEfH9EeaFP7yOXIAVPg" name="Debug__stopped moving backwards__E" source="_JVEW9PH9EeaFP7yOXIAVPg" target="_YBwGUFTXEeaAD8nFYloOhg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVFlEvH9EeaFP7yOXIAVPg" name="Debug__stopped moving backwards__E__30">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__stopped moving backwards__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;ROTATING&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_JVGMIPH9EeaFP7yOXIAVPg" name="Debug__stopped moving backwards__dbg" source="_JVEW8fH9EeaFP7yOXIAVPg" target="_JVEW8fH9EeaFP7yOXIAVPg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVGMIvH9EeaFP7yOXIAVPg" name="Debug__stopped moving backwards__dbg__32">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__stopped moving backwards__dbg&quot;,(char *)&quot;Debug__C__stopped moving backwards&quot;,(char *)&quot;Debug__C__stopped moving backwards&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_JVGMIfH9EeaFP7yOXIAVPg" name="Debug__MSG" port="_JI6KQPH9EeaFP7yOXIAVPg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_JVM51fH9EeaFP7yOXIAVPg" name="Debug__init" source="_JfdpEPH9EeaFP7yOXIAVPg" target="_JVM50PH9EeaFP7yOXIAVPg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVM51vH9EeaFP7yOXIAVPg" name="Debug__init__49">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;MOVING_FORWARD&quot;,&quot;greaterThan&quot;,&quot;MOVING_FORWARD&quot;,&quot;obstacleDetected&quot;,&quot;Detection&quot;);
Debug__SRO.addTransitionsFromState(&quot;ROTATING&quot;,&quot;turnedRight&quot;,&quot;MOVING_FORWARD&quot;,&quot;turnedRight&quot;,&quot;Engine&quot;);
Debug__SRO.addTransitionsFromState(&quot;MOVING_BACKWARDS&quot;,&quot;timeout&quot;,&quot;STOPPING_MOVING_BACKWARDS&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;STANDBY&quot;,&quot;moving forward&quot;,&quot;MOVING_FORWARD&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;STOPPING_MOVING_FORWARD&quot;,&quot;stopped&quot;,&quot;MOVING_BACKWARDS&quot;,&quot;stopped&quot;,&quot;Engine&quot;);
Debug__SRO.addTransitionsFromState(&quot;STOPPING_MOVING_BACKWARDS&quot;,&quot;stopped moving backwards&quot;,&quot;ROTATING&quot;,&quot;stopped&quot;,&quot;Engine&quot;);
Debug__SRO.addTransitionsFromState(&quot;MOVING_FORWARD&quot;,&quot;lowerThanThreshold&quot;,&quot;STOPPING_MOVING_FORWARD&quot;,&quot;obstacleDetected&quot;,&quot;Detection&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;init&quot;,&quot;STANDBY&quot;,&quot;&quot;,&quot;&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),(char *) &quot;&quot;,(char *) &quot;&quot;,(char *) &quot;&quot;,(char *)&quot;&quot;,(char *) &quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_JfdpE_H9EeaFP7yOXIAVPg" name="ConnectionEstablished" port="_JI6KQPH9EeaFP7yOXIAVPg">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_JVNg4PH9EeaFP7yOXIAVPg" name="Debug__init__S" guard="_JVNg4vH9EeaFP7yOXIAVPg" source="_JVM50PH9EeaFP7yOXIAVPg" target="_JVM50_H9EeaFP7yOXIAVPg">
            <ownedRule xmi:id="_JVNg4vH9EeaFP7yOXIAVPg" name="Debug__Guardinit">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_JVNg4fH9EeaFP7yOXIAVPg" name="Debug__Guardinit">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo1&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVNg4_H9EeaFP7yOXIAVPg" name="Debug__init__S__51">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__init__S&quot;,(char *)&quot;Debug__Path__init&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_JVOH8PH9EeaFP7yOXIAVPg" name="Debug__init__E" source="_JVM51PH9EeaFP7yOXIAVPg" target="_B4sDMEj_EeaDOaB8rZNNSg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVOH8fH9EeaFP7yOXIAVPg" name="Debug__init__E__53">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__init__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;STANDBY&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_JVOH8vH9EeaFP7yOXIAVPg" name="Debug__init__dbg" source="_JVM50fH9EeaFP7yOXIAVPg" target="_JVM50fH9EeaFP7yOXIAVPg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVOvAfH9EeaFP7yOXIAVPg" name="Debug__init__dbg__55">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__init__dbg&quot;,(char *)&quot;Debug__C__init&quot;,(char *)&quot;Debug__C__init&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_JVOvAPH9EeaFP7yOXIAVPg" name="Debug__MSG" port="_JI6KQPH9EeaFP7yOXIAVPg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_JVU1pPH9EeaFP7yOXIAVPg" name="Debug__greaterThan" guard="_emf3oFTVEeaAD8nFYloOhg" source="__e_A4Ej-EeaDOaB8rZNNSg" target="_JVUOkPH9EeaFP7yOXIAVPg">
            <ownedRule xmi:id="_emf3oFTVEeaAD8nFYloOhg" name="greaterThanThreshold">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_ixZx0FTVEeaAD8nFYloOhg">
                <language>C++</language>
                <body>return (umlrtparam_distance > threshold) || (umlrtparam_distance &lt; 0);</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVU1pfH9EeaFP7yOXIAVPg" name="Debug__greaterThan__69">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__greaterThan&quot;,(char *)&quot;MOVING_FORWARD&quot;,(char *)&quot;Debug__Path__greaterThan&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_LqHioFTUEeaAD8nFYloOhg" event="_rZAAWUIZEeaoHPpII-6Tdw" port="_O8LKEEhvEeaGrIS8kLT52w"/>
          </transition>
          <transition xmi:id="_JVVcsPH9EeaFP7yOXIAVPg" name="Debug__greaterThan__S" guard="_JZ_6QfH9EeaFP7yOXIAVPg" source="_JVUOkPH9EeaFP7yOXIAVPg" target="_JVU1ovH9EeaFP7yOXIAVPg">
            <ownedRule xmi:id="_JZ_6QfH9EeaFP7yOXIAVPg" name="Debug__GuardgreaterThan">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_JZ_6QPH9EeaFP7yOXIAVPg" name="Debug__GuardgreaterThan">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;MOVING_FORWARD&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JZ_6QvH9EeaFP7yOXIAVPg" name="Debug__greaterThan__S__71">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__greaterThan__S&quot;,(char *)&quot;Debug__Path__greaterThan&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_JaBIYPH9EeaFP7yOXIAVPg" name="Debug__greaterThan__E" source="_JVU1o_H9EeaFP7yOXIAVPg" target="__e_A4Ej-EeaDOaB8rZNNSg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaBIYfH9EeaFP7yOXIAVPg" name="Debug__greaterThan__E__73">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__greaterThan__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;MOVING_FORWARD&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_JaBvcPH9EeaFP7yOXIAVPg" name="Debug__greaterThan__dbg" source="_JVU1oPH9EeaFP7yOXIAVPg" target="_JVU1oPH9EeaFP7yOXIAVPg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaBvcvH9EeaFP7yOXIAVPg" name="Debug__greaterThan__dbg__75">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__greaterThan__dbg&quot;,(char *)&quot;Debug__C__greaterThan&quot;,(char *)&quot;Debug__C__greaterThan&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_JaBvcfH9EeaFP7yOXIAVPg" name="Debug__MSG" port="_JI6KQPH9EeaFP7yOXIAVPg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_JaDkpPH9EeaFP7yOXIAVPg" name="Debug__lowerThanThreshold" guard="_NPYa0FTVEeaAD8nFYloOhg" source="__e_A4Ej-EeaDOaB8rZNNSg" target="_JaC9kPH9EeaFP7yOXIAVPg">
            <ownedRule xmi:id="_NPYa0FTVEeaAD8nFYloOhg" name="lessThanThreshold">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_NPYa0VTVEeaAD8nFYloOhg">
                <language>C++</language>
                <body>return (umlrtparam_distance &lt; threshold) &amp;&amp; (umlrtparam_distance >= 0);</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaDkpfH9EeaFP7yOXIAVPg" name="Debug__lowerThanThreshold__77">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__lowerThanThreshold&quot;,(char *)&quot;MOVING_FORWARD&quot;,(char *)&quot;Debug__Path__lowerThanThreshold&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_voK1AEkFEeazmIbzY62nkg" event="_rZAAWUIZEeaoHPpII-6Tdw" port="_O8LKEEhvEeaGrIS8kLT52w"/>
          </transition>
          <transition xmi:id="_JaELsPH9EeaFP7yOXIAVPg" name="Debug__lowerThanThreshold__S" guard="_JaELsvH9EeaFP7yOXIAVPg" source="_JaC9kPH9EeaFP7yOXIAVPg" target="_JaDkovH9EeaFP7yOXIAVPg">
            <ownedRule xmi:id="_JaELsvH9EeaFP7yOXIAVPg" name="Debug__GuardlowerThanThreshold">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_JaELsfH9EeaFP7yOXIAVPg" name="Debug__GuardlowerThanThreshold">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;MOVING_FORWARD&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaELs_H9EeaFP7yOXIAVPg" name="Debug__lowerThanThreshold__S__79">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__lowerThanThreshold__S&quot;,(char *)&quot;Debug__Path__lowerThanThreshold&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_JaEywPH9EeaFP7yOXIAVPg" name="Debug__lowerThanThreshold__E" source="_JaDko_H9EeaFP7yOXIAVPg" target="_4mW2cFTWEeaAD8nFYloOhg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaEywfH9EeaFP7yOXIAVPg" name="Debug__lowerThanThreshold__E__81">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__lowerThanThreshold__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;STOPPING_MOVING_FORWARD&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_JaFZ0PH9EeaFP7yOXIAVPg" name="Debug__lowerThanThreshold__dbg" source="_JaDkoPH9EeaFP7yOXIAVPg" target="_JaDkoPH9EeaFP7yOXIAVPg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaFZ0vH9EeaFP7yOXIAVPg" name="Debug__lowerThanThreshold__dbg__83">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__lowerThanThreshold__dbg&quot;,(char *)&quot;Debug__C__lowerThanThreshold&quot;,(char *)&quot;Debug__C__lowerThanThreshold&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_JaFZ0fH9EeaFP7yOXIAVPg" name="Debug__MSG" port="_JI6KQPH9EeaFP7yOXIAVPg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_JaMukfH9EeaFP7yOXIAVPg" name="Debug__timeout" source="_HvR9YFTXEeaAD8nFYloOhg" target="_JaMHgPH9EeaFP7yOXIAVPg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaMukvH9EeaFP7yOXIAVPg" name="Debug__timeout__98">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__timeout&quot;,(char *)&quot;MOVING_BACKWARDS&quot;,(char *)&quot;Debug__Path__timeout&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_cJjpMFTXEeaAD8nFYloOhg" port="_ecDOoEkCEeazmIbzY62nkg">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_JaMuk_H9EeaFP7yOXIAVPg" name="Debug__timeout__S" guard="_JaNVofH9EeaFP7yOXIAVPg" source="_JaMHgPH9EeaFP7yOXIAVPg" target="_JaMHg_H9EeaFP7yOXIAVPg">
            <ownedRule xmi:id="_JaNVofH9EeaFP7yOXIAVPg" name="Debug__Guardtimeout">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_JaNVoPH9EeaFP7yOXIAVPg" name="Debug__Guardtimeout">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;MOVING_BACKWARDS&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaNVovH9EeaFP7yOXIAVPg" name="Debug__timeout__S__100">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__timeout__S&quot;,(char *)&quot;Debug__Path__timeout&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_JaNVo_H9EeaFP7yOXIAVPg" name="Debug__timeout__E" source="_JaMukPH9EeaFP7yOXIAVPg" target="_qZ_B4FTXEeaAD8nFYloOhg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaN8sPH9EeaFP7yOXIAVPg" name="Debug__timeout__E__102">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__timeout__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;STOPPING_MOVING_BACKWARDS&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_JaN8sfH9EeaFP7yOXIAVPg" name="Debug__timeout__dbg" source="_JaMHgfH9EeaFP7yOXIAVPg" target="_JaMHgfH9EeaFP7yOXIAVPg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaN8s_H9EeaFP7yOXIAVPg" name="Debug__timeout__dbg__104">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__timeout__dbg&quot;,(char *)&quot;Debug__C__timeout&quot;,(char *)&quot;Debug__C__timeout&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_JaN8svH9EeaFP7yOXIAVPg" name="Debug__MSG" port="_JI6KQPH9EeaFP7yOXIAVPg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_JaV4hfH9EeaFP7yOXIAVPg" name="Debug__turnedRight" source="_YBwGUFTXEeaAD8nFYloOhg" target="_JaV4gPH9EeaFP7yOXIAVPg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaWfkPH9EeaFP7yOXIAVPg" name="Debug__turnedRight__121">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__turnedRight&quot;,(char *)&quot;ROTATING&quot;,(char *)&quot;Debug__Path__turnedRight&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_GTs6wFTYEeaAD8nFYloOhg" event="_rZAAQkIZEeaoHPpII-6Tdw" port="_MlGlAEhvEeaGrIS8kLT52w"/>
          </transition>
          <transition xmi:id="_JaWfkfH9EeaFP7yOXIAVPg" name="Debug__turnedRight__S" guard="_JaWfk_H9EeaFP7yOXIAVPg" source="_JaV4gPH9EeaFP7yOXIAVPg" target="_JaV4g_H9EeaFP7yOXIAVPg">
            <ownedRule xmi:id="_JaWfk_H9EeaFP7yOXIAVPg" name="Debug__GuardturnedRight">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_JaWfkvH9EeaFP7yOXIAVPg" name="Debug__GuardturnedRight">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;ROTATING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaXGoPH9EeaFP7yOXIAVPg" name="Debug__turnedRight__S__123">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__turnedRight__S&quot;,(char *)&quot;Debug__Path__turnedRight&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_JaXGofH9EeaFP7yOXIAVPg" name="Debug__turnedRight__E" source="_JaV4hPH9EeaFP7yOXIAVPg" target="__e_A4Ej-EeaDOaB8rZNNSg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaXtsPH9EeaFP7yOXIAVPg" name="Debug__turnedRight__E__125">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__turnedRight__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;MOVING_FORWARD&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_JaXtsfH9EeaFP7yOXIAVPg" name="Debug__turnedRight__dbg" source="_JaV4gfH9EeaFP7yOXIAVPg" target="_JaV4gfH9EeaFP7yOXIAVPg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaXts_H9EeaFP7yOXIAVPg" name="Debug__turnedRight__dbg__127">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__turnedRight__dbg&quot;,(char *)&quot;Debug__C__turnedRight&quot;,(char *)&quot;Debug__C__turnedRight&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_JaXtsvH9EeaFP7yOXIAVPg" name="Debug__MSG" port="_JI6KQPH9EeaFP7yOXIAVPg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_JfT4FfH9EeaFP7yOXIAVPg" name="Debug__moving forward" source="_B4sDMEj_EeaDOaB8rZNNSg" target="_JfT4EPH9EeaFP7yOXIAVPg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JfT4FvH9EeaFP7yOXIAVPg" name="Debug__moving forward__144">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__moving forward&quot;,(char *)&quot;STANDBY&quot;,(char *)&quot;Debug__Path__moving forward&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_spwjIEkFEeazmIbzY62nkg" port="_ecDOoEkCEeazmIbzY62nkg">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_JfUfIPH9EeaFP7yOXIAVPg" name="Debug__moving forward__S" guard="_JfUfIvH9EeaFP7yOXIAVPg" source="_JfT4EPH9EeaFP7yOXIAVPg" target="_JfT4E_H9EeaFP7yOXIAVPg">
            <ownedRule xmi:id="_JfUfIvH9EeaFP7yOXIAVPg" name="Debug__Guardmoving forward">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_JfUfIfH9EeaFP7yOXIAVPg" name="Debug__Guardmoving forward">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;STANDBY&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JfVGMPH9EeaFP7yOXIAVPg" name="Debug__moving forward__S__146">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__moving forward__S&quot;,(char *)&quot;Debug__Path__moving forward&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_JfVGMfH9EeaFP7yOXIAVPg" name="Debug__moving forward__E" source="_JfT4FPH9EeaFP7yOXIAVPg" target="__e_A4Ej-EeaDOaB8rZNNSg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JfVGMvH9EeaFP7yOXIAVPg" name="Debug__moving forward__E__148">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__moving forward__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;MOVING_FORWARD&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_JfVtQPH9EeaFP7yOXIAVPg" name="Debug__moving forward__dbg" source="_JfT4EfH9EeaFP7yOXIAVPg" target="_JfT4EfH9EeaFP7yOXIAVPg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JfVtQvH9EeaFP7yOXIAVPg" name="Debug__moving forward__dbg__150">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__moving forward__dbg&quot;,(char *)&quot;Debug__C__moving forward&quot;,(char *)&quot;Debug__C__moving forward&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_JfVtQfH9EeaFP7yOXIAVPg" name="Debug__MSG" port="_JI6KQPH9EeaFP7yOXIAVPg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_JfdpEfH9EeaFP7yOXIAVPg" name="Debug__InitDebug" source="_5ikFwEj-EeaDOaB8rZNNSg" target="_JfdpEPH9EeaFP7yOXIAVPg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JfdpEvH9EeaFP7yOXIAVPg" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
std::string tempS;
std::cout&lt;&lt;&quot;Enter 1 for running in debug mode, any other key for normal model\n&quot;;
std::cin>> tempS;
if (tempS==&quot;1&quot;)
    this->Debug__SRO.setExecMode(Stepping);
else
    this->Debug__SRO.setExecMode(Running);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_5ikFwEj-EeaDOaB8rZNNSg" name="Pseudo1"/>
          <subvertex xmi:type="uml:State" xmi:id="__e_A4Ej-EeaDOaB8rZNNSg" name="MOVING_FORWARD">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_eLkqAEj_EeaDOaB8rZNNSg">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;MOVING_FORWARD&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::MOVING_FORWARD&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

log.log (&quot;moving forward&quot;);
engine.moveForward().send();
detection.startDetection().send();}</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JfkWwPH9EeaFP7yOXIAVPg" name="MOVING_FORWARD__171">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;MOVING_FORWARD&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::MOVING_FORWARD&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

}</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_B4sDMEj_EeaDOaB8rZNNSg" name="STANDBY">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_f5pVYEj_EeaDOaB8rZNNSg" name="">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;STANDBY&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::STANDBY&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

timer.informIn(UMLRTTimespec(4,0));
log.log (&quot;ControlSoftware standing by&quot;);}</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Jfh6gPH9EeaFP7yOXIAVPg" name="STANDBY__168">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;STANDBY&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::STANDBY&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

}</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_4mW2cFTWEeaAD8nFYloOhg" name="STOPPING_MOVING_FORWARD">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_C_YfwFTXEeaAD8nFYloOhg">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;STOPPING_MOVING_FORWARD&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::STOPPING_MOVING_FORWARD&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

log.log(&quot;Stopping moving forwards&quot;);
engine.stop().send();}</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JfjvsPH9EeaFP7yOXIAVPg" name="STOPPING_MOVING_FORWARD__170">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;STOPPING_MOVING_FORWARD&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::STOPPING_MOVING_FORWARD&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

}</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_HvR9YFTXEeaAD8nFYloOhg" name="MOVING_BACKWARDS">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_XB2vkFTXEeaAD8nFYloOhg">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;MOVING_BACKWARDS&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::MOVING_BACKWARDS&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

log.log(&quot;moving bacwards&quot;);
engine.moveBackwards().send();
timer.informIn(UMLRTTimespec(1,0));}</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JfihkPH9EeaFP7yOXIAVPg" name="MOVING_BACKWARDS__169">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;MOVING_BACKWARDS&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::MOVING_BACKWARDS&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

}</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_YBwGUFTXEeaAD8nFYloOhg" name="ROTATING">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_nzHGQFTXEeaAD8nFYloOhg">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;ROTATING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::ROTATING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

log.log(&quot;rotating&quot;);
engine.turnRight(138).send();}</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JfgFUPH9EeaFP7yOXIAVPg" name="ROTATING__166">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;ROTATING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::ROTATING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

}</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_qZ_B4FTXEeaAD8nFYloOhg" name="STOPPING_MOVING_BACKWARDS">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_1YWz8FTXEeaAD8nFYloOhg">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;STOPPING_MOVING_BACKWARDS&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::STOPPING_MOVING_BACKWARDS&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

log.log(&quot;stopping moving backwards&quot;);
engine.stop().send();}</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JfgsYPH9EeaFP7yOXIAVPg" name="STOPPING_MOVING_BACKWARDS__167">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;STOPPING_MOVING_BACKWARDS&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::STOPPING_MOVING_BACKWARDS&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

}</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_JU5X0PH9EeaFP7yOXIAVPg" name="Debug__Path__stopped" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_JU5-4PH9EeaFP7yOXIAVPg" name="Debug__C__stopped">
            <connectionPoint xmi:id="_JU5-4vH9EeaFP7yOXIAVPg" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_JU5-4_H9EeaFP7yOXIAVPg" name="ex" kind="exitPoint"/>
            <region xmi:id="_JU5-4fH9EeaFP7yOXIAVPg" name="Region1">
              <transition xmi:id="_JU-QUPH9EeaFP7yOXIAVPg" name="Debug__init__trans__stopped" source="_JU5-4vH9EeaFP7yOXIAVPg" target="_JU8bIfH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVBToPH9EeaFP7yOXIAVPg" name="Debug__init__trans__stopped__15">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped::Region1::Debug__init__trans__stopped&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__STOPPING_MOVING_FORWARD&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_JU-QUfH9EeaFP7yOXIAVPg" name="Debug__Ex__STOPPING_MOVING_FORWARD" source="_JU8bIfH9EeaFP7yOXIAVPg" target="_JU9CMPH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVB6sPH9EeaFP7yOXIAVPg" name="Debug__Ex__STOPPING_MOVING_FORWARD__17">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped::Region1::Debug__Ex__STOPPING_MOVING_FORWARD&quot;,(char *)&quot;Debug__B__Ex__STOPPING_MOVING_FORWARD&quot;,(char *)&quot;Debug__B__Ac__stopped&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_JU-QUvH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_JU-QU_H9EeaFP7yOXIAVPg" name="Debug__AC__stopped" source="_JU9CMPH9EeaFP7yOXIAVPg" target="_JU9CMvH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVChwPH9EeaFP7yOXIAVPg" name="Debug__AC__stopped__19">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped::Region1::Debug__AC__stopped&quot;,(char *)&quot;Debug__B__Ac__stopped&quot;,(char *)&quot;Debug__A__Ac__stopped&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_JU-QVPH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_JU-QVfH9EeaFP7yOXIAVPg" name="Debug__En__MOVING_BACKWARDS" source="_JU9CMvH9EeaFP7yOXIAVPg" target="_JU9pQPH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JU-QV_H9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped::Region1::Debug__En__MOVING_BACKWARDS&quot;,(char *)&quot;Debug__A__Ac__stopped&quot;,(char *)&quot;Debug__A__En__MOVING_BACKWARDS&quot;,(char *)&quot;&quot;);

log.log(&quot;moving bacwards&quot;);
engine.moveBackwards().send();
timer.informIn(UMLRTTimespec(1,0));</body>
                </effect>
                <trigger xmi:id="_JU-QVvH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_JU-QWPH9EeaFP7yOXIAVPg" name="Debug__end__trans__stopped" source="_JU9pQPH9EeaFP7yOXIAVPg" target="_JU5-4_H9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVDI0PH9EeaFP7yOXIAVPg" name="Debug__end__trans__stopped__22">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped::Region1::Debug__end__trans__stopped&quot;,(char *)&quot;Debug__A__En__MOVING_BACKWARDS&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_JU-QWfH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_JU8bIfH9EeaFP7yOXIAVPg" name="Debug__B__Ex__STOPPING_MOVING_FORWARD">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JU8bIvH9EeaFP7yOXIAVPg" name="Debug__B__Ex__STOPPING_MOVING_FORWARD">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped::Region1::Debug__B__Ex__STOPPING_MOVING_FORWARD&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;STOPPING_MOVING_FORWARD&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JU-3YPH9EeaFP7yOXIAVPg" name="Debug__B__Ex__STOPPING_MOVING_FORWARD__10">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped::Region1::Debug__B__Ex__STOPPING_MOVING_FORWARD&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_JU9CMPH9EeaFP7yOXIAVPg" name="Debug__B__Ac__stopped">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JU9CMfH9EeaFP7yOXIAVPg" name="Debug__B__Ac__stopped">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped::Region1::Debug__B__Ac__stopped&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;STOPPING_MOVING_FORWARD&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;stopped&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JU_ecPH9EeaFP7yOXIAVPg" name="Debug__B__Ac__stopped__11">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped::Region1::Debug__B__Ac__stopped&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_JU9CMvH9EeaFP7yOXIAVPg" name="Debug__A__Ac__stopped">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JU9CM_H9EeaFP7yOXIAVPg" name="Debug__A__Ac__stopped">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped::Region1::Debug__A__Ac__stopped&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;stopped&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;MOVING_BACKWARDS&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JVAFgPH9EeaFP7yOXIAVPg" name="Debug__A__Ac__stopped__12">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped::Region1::Debug__A__Ac__stopped&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_JU9pQPH9EeaFP7yOXIAVPg" name="Debug__A__En__MOVING_BACKWARDS">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JU9pQfH9EeaFP7yOXIAVPg" name="Debug__A__En__MOVING_BACKWARDS">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped::Region1::Debug__A__En__MOVING_BACKWARDS&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;MOVING_BACKWARDS&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JVAskPH9EeaFP7yOXIAVPg" name="Debug__A__En__MOVING_BACKWARDS__13">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped::Region1::Debug__A__En__MOVING_BACKWARDS&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_JVEW8PH9EeaFP7yOXIAVPg" name="Debug__Path__stopped moving backwards" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_JVEW8fH9EeaFP7yOXIAVPg" name="Debug__C__stopped moving backwards">
            <connectionPoint xmi:id="_JVEW8_H9EeaFP7yOXIAVPg" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_JVEW9PH9EeaFP7yOXIAVPg" name="ex" kind="exitPoint"/>
            <region xmi:id="_JVEW8vH9EeaFP7yOXIAVPg" name="Region1">
              <transition xmi:id="_JVHaQvH9EeaFP7yOXIAVPg" name="Debug__init__trans__stopped moving backwards" source="_JVEW8_H9EeaFP7yOXIAVPg" target="_JVGzMPH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVKdkPH9EeaFP7yOXIAVPg" name="Debug__init__trans__stopped moving backwards__38">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped moving backwards::Region1::Debug__init__trans__stopped moving backwards&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__STOPPING_MOVING_BACKWARDS&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_JVHaQ_H9EeaFP7yOXIAVPg" name="Debug__Ex__STOPPING_MOVING_BACKWARDS" source="_JVGzMPH9EeaFP7yOXIAVPg" target="_JVGzMvH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVKdkfH9EeaFP7yOXIAVPg" name="Debug__Ex__STOPPING_MOVING_BACKWARDS__40">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped moving backwards::Region1::Debug__Ex__STOPPING_MOVING_BACKWARDS&quot;,(char *)&quot;Debug__B__Ex__STOPPING_MOVING_BACKWARDS&quot;,(char *)&quot;Debug__B__Ac__stopped moving backwards&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_JVHaRPH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_JVIBUPH9EeaFP7yOXIAVPg" name="Debug__AC__stopped moving backwards" source="_JVGzMvH9EeaFP7yOXIAVPg" target="_JVGzNPH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVLEoPH9EeaFP7yOXIAVPg" name="Debug__AC__stopped moving backwards__42">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped moving backwards::Region1::Debug__AC__stopped moving backwards&quot;,(char *)&quot;Debug__B__Ac__stopped moving backwards&quot;,(char *)&quot;Debug__A__Ac__stopped moving backwards&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_JVIBUfH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_JVIBUvH9EeaFP7yOXIAVPg" name="Debug__En__ROTATING" source="_JVGzNPH9EeaFP7yOXIAVPg" target="_JVHaQPH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVIBVPH9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped moving backwards::Region1::Debug__En__ROTATING&quot;,(char *)&quot;Debug__A__Ac__stopped moving backwards&quot;,(char *)&quot;Debug__A__En__ROTATING&quot;,(char *)&quot;&quot;);

log.log(&quot;rotating&quot;);
engine.turnRight(138).send();</body>
                </effect>
                <trigger xmi:id="_JVIBU_H9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_JVIBVfH9EeaFP7yOXIAVPg" name="Debug__end__trans__stopped moving backwards" source="_JVHaQPH9EeaFP7yOXIAVPg" target="_JVEW9PH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVLrsPH9EeaFP7yOXIAVPg" name="Debug__end__trans__stopped moving backwards__45">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped moving backwards::Region1::Debug__end__trans__stopped moving backwards&quot;,(char *)&quot;Debug__A__En__ROTATING&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_JVIBVvH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_JVGzMPH9EeaFP7yOXIAVPg" name="Debug__B__Ex__STOPPING_MOVING_BACKWARDS">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JVGzMfH9EeaFP7yOXIAVPg" name="Debug__B__Ex__STOPPING_MOVING_BACKWARDS">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped moving backwards::Region1::Debug__B__Ex__STOPPING_MOVING_BACKWARDS&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;STOPPING_MOVING_BACKWARDS&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JVIBV_H9EeaFP7yOXIAVPg" name="Debug__B__Ex__STOPPING_MOVING_BACKWARDS__33">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped moving backwards::Region1::Debug__B__Ex__STOPPING_MOVING_BACKWARDS&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_JVGzMvH9EeaFP7yOXIAVPg" name="Debug__B__Ac__stopped moving backwards">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JVGzM_H9EeaFP7yOXIAVPg" name="Debug__B__Ac__stopped moving backwards">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped moving backwards::Region1::Debug__B__Ac__stopped moving backwards&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;STOPPING_MOVING_BACKWARDS&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;stopped moving backwards&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JVIoYPH9EeaFP7yOXIAVPg" name="Debug__B__Ac__stopped moving backwards__34">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped moving backwards::Region1::Debug__B__Ac__stopped moving backwards&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_JVGzNPH9EeaFP7yOXIAVPg" name="Debug__A__Ac__stopped moving backwards">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JVGzNfH9EeaFP7yOXIAVPg" name="Debug__A__Ac__stopped moving backwards">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped moving backwards::Region1::Debug__A__Ac__stopped moving backwards&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;stopped moving backwards&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;ROTATING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JVJPcPH9EeaFP7yOXIAVPg" name="Debug__A__Ac__stopped moving backwards__35">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped moving backwards::Region1::Debug__A__Ac__stopped moving backwards&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_JVHaQPH9EeaFP7yOXIAVPg" name="Debug__A__En__ROTATING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JVHaQfH9EeaFP7yOXIAVPg" name="Debug__A__En__ROTATING">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped moving backwards::Region1::Debug__A__En__ROTATING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;ROTATING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JVJPcfH9EeaFP7yOXIAVPg" name="Debug__A__En__ROTATING__36">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__stopped moving backwards::Region1::Debug__A__En__ROTATING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_JVM50PH9EeaFP7yOXIAVPg" name="Debug__Path__init" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_JVM50fH9EeaFP7yOXIAVPg" name="Debug__C__init">
            <connectionPoint xmi:id="_JVM50_H9EeaFP7yOXIAVPg" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_JVM51PH9EeaFP7yOXIAVPg" name="ex" kind="exitPoint"/>
            <region xmi:id="_JVM50vH9EeaFP7yOXIAVPg" name="Region1">
              <transition xmi:id="_JVP9IPH9EeaFP7yOXIAVPg" name="Debug__init__trans__init" source="_JVM50_H9EeaFP7yOXIAVPg" target="_JVOvAvH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVRyUPH9EeaFP7yOXIAVPg" name="Debug__init__trans__init__60">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__init::Region1::Debug__init__trans__init&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__init&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_JVP9IfH9EeaFP7yOXIAVPg" name="Debug__Ac__init" source="_JVOvAvH9EeaFP7yOXIAVPg" target="_JVPWEPH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVSZYPH9EeaFP7yOXIAVPg" name="Debug__Ac__init__62">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__init::Region1::Debug__Ac__init&quot;,(char *)&quot;Debug__B__Ac__init&quot;,(char *)&quot;Debug__A__Ac__init&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_JVP9IvH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_JVP9I_H9EeaFP7yOXIAVPg" name="Debug__En__STANDBY" source="_JVPWEPH9EeaFP7yOXIAVPg" target="_JVPWEvH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVP9JfH9EeaFP7yOXIAVPg" name="" visibility="public" isReentrant="true">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__init::Region1::Debug__En__STANDBY&quot;,(char *)&quot;Debug__A__Ac__init&quot;,(char *)&quot;Debug__A__En__init&quot;,(char *)&quot;&quot;);

timer.informIn(UMLRTTimespec(4,0));
log.log (&quot;ControlSoftware standing by&quot;);</body>
                </effect>
                <trigger xmi:id="_JVP9JPH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_JVP9JvH9EeaFP7yOXIAVPg" name="Debug__end__trans__init" source="_JVPWEvH9EeaFP7yOXIAVPg" target="_JVM51PH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JVTAcPH9EeaFP7yOXIAVPg" name="Debug__end__trans__init__65">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__init::Region1::Debug__end__trans__init&quot;,(char *)&quot;Debug__A__En__init&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_JVP9J_H9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_JVOvAvH9EeaFP7yOXIAVPg" name="Debug__B__Ac__init">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JVOvA_H9EeaFP7yOXIAVPg" name="Debug__B__Ac__init">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__init::Region1::Debug__B__Ac__init&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;init&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JVQkMPH9EeaFP7yOXIAVPg" name="Debug__B__Ac__init__56">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__init::Region1::Debug__B__Ac__init&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_JVPWEPH9EeaFP7yOXIAVPg" name="Debug__A__Ac__init">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JVPWEfH9EeaFP7yOXIAVPg" name="Debug__A__Ac__init">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__init::Region1::Debug__A__Ac__init&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;init&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;STANDBY&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JVQkMfH9EeaFP7yOXIAVPg" name="Debug__A__Ac__init__57">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__init::Region1::Debug__A__Ac__init&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_JVPWEvH9EeaFP7yOXIAVPg" name="Debug__A__En__init">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JVPWE_H9EeaFP7yOXIAVPg" name="Debug__A__En__init">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__init::Region1::Debug__A__En__init&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;STANDBY&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JVRLQPH9EeaFP7yOXIAVPg" name="Debug__A__En__init__58">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__init::Region1::Debug__A__En__init&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_JVUOkPH9EeaFP7yOXIAVPg" name="Debug__Path__greaterThan" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_JVU1oPH9EeaFP7yOXIAVPg" name="Debug__C__greaterThan">
            <connectionPoint xmi:id="_JVU1ovH9EeaFP7yOXIAVPg" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_JVU1o_H9EeaFP7yOXIAVPg" name="ex" kind="exitPoint"/>
            <region xmi:id="_JVU1ofH9EeaFP7yOXIAVPg" name="Region1"/>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_JaC9kPH9EeaFP7yOXIAVPg" name="Debug__Path__lowerThanThreshold" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_JaDkoPH9EeaFP7yOXIAVPg" name="Debug__C__lowerThanThreshold">
            <connectionPoint xmi:id="_JaDkovH9EeaFP7yOXIAVPg" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_JaDko_H9EeaFP7yOXIAVPg" name="ex" kind="exitPoint"/>
            <region xmi:id="_JaDkofH9EeaFP7yOXIAVPg" name="Region1">
              <transition xmi:id="_JaHPAPH9EeaFP7yOXIAVPg" name="Debug__init__trans__lowerThanThreshold" source="_JaDkovH9EeaFP7yOXIAVPg" target="_JaGA4PH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaJrQPH9EeaFP7yOXIAVPg" name="Debug__init__trans__lowerThanThreshold__89">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__lowerThanThreshold::Region1::Debug__init__trans__lowerThanThreshold&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__MOVING_FORWARD&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_JaHPAfH9EeaFP7yOXIAVPg" name="Debug__Ex__MOVING_FORWARD" source="_JaGA4PH9EeaFP7yOXIAVPg" target="_JaGA4vH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaJrQfH9EeaFP7yOXIAVPg" name="Debug__Ex__MOVING_FORWARD__91">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__lowerThanThreshold::Region1::Debug__Ex__MOVING_FORWARD&quot;,(char *)&quot;Debug__B__Ex__MOVING_FORWARD&quot;,(char *)&quot;Debug__B__Ac__lowerThanThreshold&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_JaHPAvH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_JaHPA_H9EeaFP7yOXIAVPg" name="Debug__AC__lowerThanThreshold" source="_JaGA4vH9EeaFP7yOXIAVPg" target="_JaGn8PH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaHPBfH9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__lowerThanThreshold::Region1::Debug__AC__lowerThanThreshold&quot;,(char *)&quot;Debug__B__Ac__lowerThanThreshold&quot;,(char *)&quot;Debug__A__Ac__lowerThanThreshold&quot;,(char *)&quot;&quot;);

log.log (&quot;distance less than threshold: %f &lt; %f&quot;, umlrtparam_distance, threshold);
detection.stopDetection().send();</body>
                </effect>
                <trigger xmi:id="_JaHPBPH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_JaHPBvH9EeaFP7yOXIAVPg" name="Debug__En__STOPPING_MOVING_FORWARD" source="_JaGn8PH9EeaFP7yOXIAVPg" target="_JaGn8vH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaHPCPH9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__lowerThanThreshold::Region1::Debug__En__STOPPING_MOVING_FORWARD&quot;,(char *)&quot;Debug__A__Ac__lowerThanThreshold&quot;,(char *)&quot;Debug__A__En__STOPPING_MOVING_FORWARD&quot;,(char *)&quot;&quot;);

log.log(&quot;Stopping moving forwards&quot;);
engine.stop().send();</body>
                </effect>
                <trigger xmi:id="_JaHPB_H9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_JaHPCfH9EeaFP7yOXIAVPg" name="Debug__end__trans__lowerThanThreshold" source="_JaGn8vH9EeaFP7yOXIAVPg" target="_JaDko_H9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaLgcPH9EeaFP7yOXIAVPg" name="Debug__end__trans__lowerThanThreshold__95">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__lowerThanThreshold::Region1::Debug__end__trans__lowerThanThreshold&quot;,(char *)&quot;Debug__A__En__STOPPING_MOVING_FORWARD&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_JaHPCvH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_JaGA4PH9EeaFP7yOXIAVPg" name="Debug__B__Ex__MOVING_FORWARD">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JaGA4fH9EeaFP7yOXIAVPg" name="Debug__B__Ex__MOVING_FORWARD">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__lowerThanThreshold::Region1::Debug__B__Ex__MOVING_FORWARD&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;MOVING_FORWARD&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JaH2EPH9EeaFP7yOXIAVPg" name="Debug__B__Ex__MOVING_FORWARD__84">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__lowerThanThreshold::Region1::Debug__B__Ex__MOVING_FORWARD&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_JaGA4vH9EeaFP7yOXIAVPg" name="Debug__B__Ac__lowerThanThreshold">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JaGA4_H9EeaFP7yOXIAVPg" name="Debug__B__Ac__lowerThanThreshold">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__lowerThanThreshold::Region1::Debug__B__Ac__lowerThanThreshold&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;MOVING_FORWARD&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;lowerThanThreshold&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JaH2EfH9EeaFP7yOXIAVPg" name="Debug__B__Ac__lowerThanThreshold__85">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__lowerThanThreshold::Region1::Debug__B__Ac__lowerThanThreshold&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_JaGn8PH9EeaFP7yOXIAVPg" name="Debug__A__Ac__lowerThanThreshold">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JaGn8fH9EeaFP7yOXIAVPg" name="Debug__A__Ac__lowerThanThreshold">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__lowerThanThreshold::Region1::Debug__A__Ac__lowerThanThreshold&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;lowerThanThreshold&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;STOPPING_MOVING_FORWARD&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JaIdIPH9EeaFP7yOXIAVPg" name="Debug__A__Ac__lowerThanThreshold__86">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__lowerThanThreshold::Region1::Debug__A__Ac__lowerThanThreshold&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_JaGn8vH9EeaFP7yOXIAVPg" name="Debug__A__En__STOPPING_MOVING_FORWARD">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JaGn8_H9EeaFP7yOXIAVPg" name="Debug__A__En__STOPPING_MOVING_FORWARD">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__lowerThanThreshold::Region1::Debug__A__En__STOPPING_MOVING_FORWARD&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;STOPPING_MOVING_FORWARD&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JaJEMPH9EeaFP7yOXIAVPg" name="Debug__A__En__STOPPING_MOVING_FORWARD__87">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__lowerThanThreshold::Region1::Debug__A__En__STOPPING_MOVING_FORWARD&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_JaMHgPH9EeaFP7yOXIAVPg" name="Debug__Path__timeout" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_JaMHgfH9EeaFP7yOXIAVPg" name="Debug__C__timeout">
            <connectionPoint xmi:id="_JaMHg_H9EeaFP7yOXIAVPg" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_JaMukPH9EeaFP7yOXIAVPg" name="ex" kind="exitPoint"/>
            <region xmi:id="_JaMHgvH9EeaFP7yOXIAVPg" name="Region1">
              <transition xmi:id="_JaPx4PH9EeaFP7yOXIAVPg" name="Debug__init__trans__timeout" source="_JaMHg_H9EeaFP7yOXIAVPg" target="_JaOjwPH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaS1MPH9EeaFP7yOXIAVPg" name="Debug__init__trans__timeout__110">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__timeout::Region1::Debug__init__trans__timeout&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__MOVING_BACKWARDS&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_JaPx4fH9EeaFP7yOXIAVPg" name="Debug__Ex__MOVING_BACKWARDS" source="_JaOjwPH9EeaFP7yOXIAVPg" target="_JaOjwvH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaS1MfH9EeaFP7yOXIAVPg" name="Debug__Ex__MOVING_BACKWARDS__112">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__timeout::Region1::Debug__Ex__MOVING_BACKWARDS&quot;,(char *)&quot;Debug__B__Ex__MOVING_BACKWARDS&quot;,(char *)&quot;Debug__B__Ac__timeout&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_JaPx4vH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_JaPx4_H9EeaFP7yOXIAVPg" name="Debug__AC__timeout" source="_JaOjwvH9EeaFP7yOXIAVPg" target="_JaPK0PH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaTcQPH9EeaFP7yOXIAVPg" name="Debug__AC__timeout__114">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__timeout::Region1::Debug__AC__timeout&quot;,(char *)&quot;Debug__B__Ac__timeout&quot;,(char *)&quot;Debug__A__Ac__timeout&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_JaQY8PH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_JaQY8fH9EeaFP7yOXIAVPg" name="Debug__En__STOPPING_MOVING_BACKWARDS" source="_JaPK0PH9EeaFP7yOXIAVPg" target="_JaPK0vH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaQY8_H9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__timeout::Region1::Debug__En__STOPPING_MOVING_BACKWARDS&quot;,(char *)&quot;Debug__A__Ac__timeout&quot;,(char *)&quot;Debug__A__En__STOPPING_MOVING_BACKWARDS&quot;,(char *)&quot;&quot;);

log.log(&quot;stopping moving backwards&quot;);
engine.stop().send();</body>
                </effect>
                <trigger xmi:id="_JaQY8vH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_JaQY9PH9EeaFP7yOXIAVPg" name="Debug__end__trans__timeout" source="_JaPK0vH9EeaFP7yOXIAVPg" target="_JaMukPH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaUqYPH9EeaFP7yOXIAVPg" name="Debug__end__trans__timeout__117">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__timeout::Region1::Debug__end__trans__timeout&quot;,(char *)&quot;Debug__A__En__STOPPING_MOVING_BACKWARDS&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_JaQY9fH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_JaOjwPH9EeaFP7yOXIAVPg" name="Debug__B__Ex__MOVING_BACKWARDS">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JaOjwfH9EeaFP7yOXIAVPg" name="Debug__B__Ex__MOVING_BACKWARDS">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ex__MOVING_BACKWARDS&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;MOVING_BACKWARDS&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JaQY9vH9EeaFP7yOXIAVPg" name="Debug__B__Ex__MOVING_BACKWARDS__105">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ex__MOVING_BACKWARDS&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_JaOjwvH9EeaFP7yOXIAVPg" name="Debug__B__Ac__timeout">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JaOjw_H9EeaFP7yOXIAVPg" name="Debug__B__Ac__timeout">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;MOVING_BACKWARDS&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;timeout&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JaRAAPH9EeaFP7yOXIAVPg" name="Debug__B__Ac__timeout__106">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_JaPK0PH9EeaFP7yOXIAVPg" name="Debug__A__Ac__timeout">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JaPK0fH9EeaFP7yOXIAVPg" name="Debug__A__Ac__timeout">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__timeout::Region1::Debug__A__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;timeout&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;STOPPING_MOVING_BACKWARDS&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JaRnEPH9EeaFP7yOXIAVPg" name="Debug__A__Ac__timeout__107">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__timeout::Region1::Debug__A__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_JaPK0vH9EeaFP7yOXIAVPg" name="Debug__A__En__STOPPING_MOVING_BACKWARDS">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JaPK0_H9EeaFP7yOXIAVPg" name="Debug__A__En__STOPPING_MOVING_BACKWARDS">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__timeout::Region1::Debug__A__En__STOPPING_MOVING_BACKWARDS&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;STOPPING_MOVING_BACKWARDS&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JaSOIPH9EeaFP7yOXIAVPg" name="Debug__A__En__STOPPING_MOVING_BACKWARDS__108">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__timeout::Region1::Debug__A__En__STOPPING_MOVING_BACKWARDS&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_JaV4gPH9EeaFP7yOXIAVPg" name="Debug__Path__turnedRight" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_JaV4gfH9EeaFP7yOXIAVPg" name="Debug__C__turnedRight">
            <connectionPoint xmi:id="_JaV4g_H9EeaFP7yOXIAVPg" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_JaV4hPH9EeaFP7yOXIAVPg" name="ex" kind="exitPoint"/>
            <region xmi:id="_JaV4gvH9EeaFP7yOXIAVPg" name="Region1">
              <transition xmi:id="_JaZi4PH9EeaFP7yOXIAVPg" name="Debug__init__trans__turnedRight" source="_JaV4g_H9EeaFP7yOXIAVPg" target="_JaYUwPH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jab_IPH9EeaFP7yOXIAVPg" name="Debug__init__trans__turnedRight__133">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__turnedRight::Region1::Debug__init__trans__turnedRight&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__ROTATING&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_JaZi4fH9EeaFP7yOXIAVPg" name="Debug__Ex__ROTATING" source="_JaYUwPH9EeaFP7yOXIAVPg" target="_JaYUwvH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JfQNsPH9EeaFP7yOXIAVPg" name="Debug__Ex__ROTATING__135">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__turnedRight::Region1::Debug__Ex__ROTATING&quot;,(char *)&quot;Debug__B__Ex__ROTATING&quot;,(char *)&quot;Debug__B__Ac__turnedRight&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_JaZi4vH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_JaZi4_H9EeaFP7yOXIAVPg" name="Debug__AC__turnedRight" source="_JaYUwvH9EeaFP7yOXIAVPg" target="_JaY70PH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JfRb0PH9EeaFP7yOXIAVPg" name="Debug__AC__turnedRight__137">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__turnedRight::Region1::Debug__AC__turnedRight&quot;,(char *)&quot;Debug__B__Ac__turnedRight&quot;,(char *)&quot;Debug__A__Ac__turnedRight&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_JaZi5PH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_JaZi5fH9EeaFP7yOXIAVPg" name="Debug__En__MOVING_FORWARD" source="_JaY70PH9EeaFP7yOXIAVPg" target="_JaY70vH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JaZi5_H9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__turnedRight::Region1::Debug__En__MOVING_FORWARD&quot;,(char *)&quot;Debug__A__Ac__turnedRight&quot;,(char *)&quot;Debug__A__En__MOVING_FORWARD&quot;,(char *)&quot;&quot;);

log.log (&quot;moving forward&quot;);
engine.moveForward().send();
detection.startDetection().send();</body>
                </effect>
                <trigger xmi:id="_JaZi5vH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_JaZi6PH9EeaFP7yOXIAVPg" name="Debug__end__trans__turnedRight" source="_JaY70vH9EeaFP7yOXIAVPg" target="_JaV4hPH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JfSp8PH9EeaFP7yOXIAVPg" name="Debug__end__trans__turnedRight__140">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__turnedRight::Region1::Debug__end__trans__turnedRight&quot;,(char *)&quot;Debug__A__En__MOVING_FORWARD&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_JaaJ8PH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_JaYUwPH9EeaFP7yOXIAVPg" name="Debug__B__Ex__ROTATING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JaYUwfH9EeaFP7yOXIAVPg" name="Debug__B__Ex__ROTATING">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__turnedRight::Region1::Debug__B__Ex__ROTATING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;ROTATING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JaaJ8fH9EeaFP7yOXIAVPg" name="Debug__B__Ex__ROTATING__128">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__turnedRight::Region1::Debug__B__Ex__ROTATING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_JaYUwvH9EeaFP7yOXIAVPg" name="Debug__B__Ac__turnedRight">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JaYUw_H9EeaFP7yOXIAVPg" name="Debug__B__Ac__turnedRight">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__turnedRight::Region1::Debug__B__Ac__turnedRight&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;ROTATING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;turnedRight&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JaaxAPH9EeaFP7yOXIAVPg" name="Debug__B__Ac__turnedRight__129">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__turnedRight::Region1::Debug__B__Ac__turnedRight&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_JaY70PH9EeaFP7yOXIAVPg" name="Debug__A__Ac__turnedRight">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JaY70fH9EeaFP7yOXIAVPg" name="Debug__A__Ac__turnedRight">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__turnedRight::Region1::Debug__A__Ac__turnedRight&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;turnedRight&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;MOVING_FORWARD&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JabYEPH9EeaFP7yOXIAVPg" name="Debug__A__Ac__turnedRight__130">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__turnedRight::Region1::Debug__A__Ac__turnedRight&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_JaY70vH9EeaFP7yOXIAVPg" name="Debug__A__En__MOVING_FORWARD">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JaY70_H9EeaFP7yOXIAVPg" name="Debug__A__En__MOVING_FORWARD">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__turnedRight::Region1::Debug__A__En__MOVING_FORWARD&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;MOVING_FORWARD&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JabYEfH9EeaFP7yOXIAVPg" name="Debug__A__En__MOVING_FORWARD__131">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__turnedRight::Region1::Debug__A__En__MOVING_FORWARD&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_JfT4EPH9EeaFP7yOXIAVPg" name="Debug__Path__moving forward" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_JfT4EfH9EeaFP7yOXIAVPg" name="Debug__C__moving forward">
            <connectionPoint xmi:id="_JfT4E_H9EeaFP7yOXIAVPg" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_JfT4FPH9EeaFP7yOXIAVPg" name="ex" kind="exitPoint"/>
            <region xmi:id="_JfT4EvH9EeaFP7yOXIAVPg" name="Region1">
              <transition xmi:id="_JfXicvH9EeaFP7yOXIAVPg" name="Debug__init__trans__moving forward" source="_JfT4E_H9EeaFP7yOXIAVPg" target="_JfWUUPH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JfZ-sPH9EeaFP7yOXIAVPg" name="Debug__init__trans__moving forward__156">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__moving forward::Region1::Debug__init__trans__moving forward&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__STANDBY&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_JfXic_H9EeaFP7yOXIAVPg" name="Debug__Ex__STANDBY" source="_JfWUUPH9EeaFP7yOXIAVPg" target="_JfW7YPH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JfalwPH9EeaFP7yOXIAVPg" name="Debug__Ex__STANDBY__158">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__moving forward::Region1::Debug__Ex__STANDBY&quot;,(char *)&quot;Debug__B__Ex__STANDBY&quot;,(char *)&quot;Debug__B__Ac__moving forward&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_JfXidPH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_JfXidfH9EeaFP7yOXIAVPg" name="Debug__AC__moving forward" source="_JfW7YPH9EeaFP7yOXIAVPg" target="_JfW7YvH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JfbM0PH9EeaFP7yOXIAVPg" name="Debug__AC__moving forward__160">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__moving forward::Region1::Debug__AC__moving forward&quot;,(char *)&quot;Debug__B__Ac__moving forward&quot;,(char *)&quot;Debug__A__Ac__moving forward&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_JfXidvH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_JfXid_H9EeaFP7yOXIAVPg" name="Debug__En__MOVING_FORWARD" source="_JfW7YvH9EeaFP7yOXIAVPg" target="_JfXicPH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JfYJgPH9EeaFP7yOXIAVPg" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__moving forward::Region1::Debug__En__MOVING_FORWARD&quot;,(char *)&quot;Debug__A__Ac__moving forward&quot;,(char *)&quot;Debug__A__En__MOVING_FORWARD&quot;,(char *)&quot;&quot;);

log.log (&quot;moving forward&quot;);
engine.moveForward().send();
detection.startDetection().send();</body>
                </effect>
                <trigger xmi:id="_JfXiePH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_JfYJgfH9EeaFP7yOXIAVPg" name="Debug__end__trans__moving forward" source="_JfXicPH9EeaFP7yOXIAVPg" target="_JfT4FPH9EeaFP7yOXIAVPg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Jfbz4PH9EeaFP7yOXIAVPg" name="Debug__end__trans__moving forward__163">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__moving forward::Region1::Debug__end__trans__moving forward&quot;,(char *)&quot;Debug__A__En__MOVING_FORWARD&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_JfYJgvH9EeaFP7yOXIAVPg" name="Debug__Exec" port="_JI6KQPH9EeaFP7yOXIAVPg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_JfWUUPH9EeaFP7yOXIAVPg" name="Debug__B__Ex__STANDBY">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JfWUUfH9EeaFP7yOXIAVPg" name="Debug__B__Ex__STANDBY">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__moving forward::Region1::Debug__B__Ex__STANDBY&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;STANDBY&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JfYJg_H9EeaFP7yOXIAVPg" name="Debug__B__Ex__STANDBY__151">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__moving forward::Region1::Debug__B__Ex__STANDBY&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_JfW7YPH9EeaFP7yOXIAVPg" name="Debug__B__Ac__moving forward">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JfW7YfH9EeaFP7yOXIAVPg" name="Debug__B__Ac__moving forward">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__moving forward::Region1::Debug__B__Ac__moving forward&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;STANDBY&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;moving forward&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JfYwkPH9EeaFP7yOXIAVPg" name="Debug__B__Ac__moving forward__152">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__moving forward::Region1::Debug__B__Ac__moving forward&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_JfW7YvH9EeaFP7yOXIAVPg" name="Debug__A__Ac__moving forward">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JfW7Y_H9EeaFP7yOXIAVPg" name="Debug__A__Ac__moving forward">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__moving forward::Region1::Debug__A__Ac__moving forward&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;moving forward&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;MOVING_FORWARD&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JfZXoPH9EeaFP7yOXIAVPg" name="Debug__A__Ac__moving forward__153">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__moving forward::Region1::Debug__A__Ac__moving forward&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_JfXicPH9EeaFP7yOXIAVPg" name="Debug__A__En__MOVING_FORWARD">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JfXicfH9EeaFP7yOXIAVPg" name="Debug__A__En__MOVING_FORWARD">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__moving forward::Region1::Debug__A__En__MOVING_FORWARD&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;MOVING_FORWARD&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_JfZXofH9EeaFP7yOXIAVPg" name="Debug__A__En__MOVING_FORWARD__154">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;rover::ControlSoftware::ControlSoftwareStateMachine::Region::Debug__C__moving forward::Region1::Debug__A__En__MOVING_FORWARD&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_JfdpEPH9EeaFP7yOXIAVPg" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_JJGXgfH9EeaFP7yOXIAVPg" name="Debug__variablesViewMethod" specification="_JJGXgPH9EeaFP7yOXIAVPg">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;threshold,&quot;);
tempS.append(&quot;Real,&quot;);
if(threshold!=0){
    char tempR[20];
    sprintf(tempR,&quot;%lf&quot;,threshold);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else{
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
}
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_JJHlovH9EeaFP7yOXIAVPg" name="Debug__variablesChange" specification="_JJG-kPH9EeaFP7yOXIAVPg">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;threshold&quot;==tempVarName){
    threshold=atof(varValue);
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_JO1zIvH9EeaFP7yOXIAVPg" name="Debug__sendEvent" specification="_JJpKEPH9EeaFP7yOXIAVPg">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_JJGXgPH9EeaFP7yOXIAVPg" name="Debug__variablesView" visibility="private" method="_JJGXgfH9EeaFP7yOXIAVPg"/>
      <ownedOperation xmi:id="_JJG-kPH9EeaFP7yOXIAVPg" name="Debug__variablesChange" visibility="private" method="_JJHlovH9EeaFP7yOXIAVPg">
        <ownedParameter xmi:id="_JJG-kfH9EeaFP7yOXIAVPg" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_JJHloPH9EeaFP7yOXIAVPg" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_JJHlofH9EeaFP7yOXIAVPg" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_JJpKEPH9EeaFP7yOXIAVPg" name="Debug__sendEvent" visibility="private" method="_JO1zIvH9EeaFP7yOXIAVPg">
        <ownedParameter xmi:id="_JJpKEfH9EeaFP7yOXIAVPg" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_JJwe0PH9EeaFP7yOXIAVPg" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_JJ3zkPH9EeaFP7yOXIAVPg" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_JJ_IUPH9EeaFP7yOXIAVPg" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_JJ_IUfH9EeaFP7yOXIAVPg" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_JO1MEPH9EeaFP7yOXIAVPg" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_JO1MEfH9EeaFP7yOXIAVPg" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_JO1MEvH9EeaFP7yOXIAVPg" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_JO1zIPH9EeaFP7yOXIAVPg" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_JO1zIfH9EeaFP7yOXIAVPg" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_I3FacPH9EeaFP7yOXIAVPg" name="Debug__Top">
      <ownedAttribute xmi:id="_I31BUPH9EeaFP7yOXIAVPg" name="Debug__Gateway">
        <type xmi:type="uml:Class" href="../CommGateWay/model.uml#_XIyCcAdxEeadtKuU2t6fMg"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_I34rsfH9EeaFP7yOXIAVPg" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_I35SwPH9EeaFP7yOXIAVPg" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_I_4xIPH9EeaFP7yOXIAVPg" name="Debug__Top" type="_9dusUEhlEeaGrIS8kLT52w">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_I_9CkfH9EeaFP7yOXIAVPg" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_I_9CkvH9EeaFP7yOXIAVPg" value="1"/>
      </ownedAttribute>
    </packagedElement>
    <profileApplication xmi:id="_rZAnWkIZEeaoHPpII-6Tdw">
      <eAnnotations xmi:id="_rZAnW0IZEeaoHPpII-6Tdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:id="_rZAnXEIZEeaoHPpII-6Tdw">
      <eAnnotations xmi:id="_rZAnXUIZEeaoHPpII-6Tdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_PROFILES/Standard.profile.uml#_0"/>
    </profileApplication>
    <profileApplication xmi:id="_rZAnXkIZEeaoHPpII-6Tdw">
      <eAnnotations xmi:id="_rZAnX0IZEeaoHPpII-6Tdw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
    <profileApplication xmi:id="_9_1t4Ej0EeaDOaB8rZNNSg">
      <eAnnotations xmi:id="_9_3jEEj0EeaDOaB8rZNNSg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://PAPYRUS_ACTIONLANGUAGE_PROFILE/ActionLanguage-Profile.profile.uml#_Kv8EIKFXEeS_KNX0nfvIVQ"/>
      </eAnnotations>
      <appliedProfile href="pathmap://PAPYRUS_ACTIONLANGUAGE_PROFILE/ActionLanguage-Profile.profile.uml#ActionLanguage"/>
    </profileApplication>
    <profileApplication xmi:id="_mENZYPGkEeaWSdyBmduHig">
      <eAnnotations xmi:id="_mEQcsPGkEeaWSdyBmduHig" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UMLRT_CPP/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
  </uml:Model>
  <standard:ModelLibrary xmi:id="_rZAnYEIZEeaoHPpII-6Tdw" base_Package="_rZAAEEIZEeaoHPpII-6Tdw"/>
  <UMLRealTime:ProtocolContainer xmi:id="_rZAnYUIZEeaoHPpII-6Tdw" base_Package="_rZAALUIZEeaoHPpII-6Tdw"/>
  <UMLRealTime:RTMessageSet xmi:id="_rZAnYkIZEeaoHPpII-6Tdw" base_Interface="_rZAAMUIZEeaoHPpII-6Tdw"/>
  <UMLRealTime:RTMessageSet xmi:id="_rZAnY0IZEeaoHPpII-6Tdw" base_Interface="_rZAANUIZEeaoHPpII-6Tdw" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_rZAnZEIZEeaoHPpII-6Tdw" base_Interface="_rZAAP0IZEeaoHPpII-6Tdw" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_rZAnZUIZEeaoHPpII-6Tdw" base_Collaboration="_rZAALkIZEeaoHPpII-6Tdw"/>
  <UMLRealTime:ProtocolContainer xmi:id="_rZAnZkIZEeaoHPpII-6Tdw" base_Package="_rZAASUIZEeaoHPpII-6Tdw"/>
  <UMLRealTime:RTMessageSet xmi:id="_rZAnZ0IZEeaoHPpII-6Tdw" base_Interface="_rZAATUIZEeaoHPpII-6Tdw"/>
  <UMLRealTime:RTMessageSet xmi:id="_rZAnaEIZEeaoHPpII-6Tdw" base_Interface="_rZAAUEIZEeaoHPpII-6Tdw" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_rZAnaUIZEeaoHPpII-6Tdw" base_Interface="_rZAAVUIZEeaoHPpII-6Tdw" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_rZAnakIZEeaoHPpII-6Tdw" base_Collaboration="_rZAASkIZEeaoHPpII-6Tdw"/>
  <UMLRealTime:ProtocolContainer xmi:id="_rZAna0IZEeaoHPpII-6Tdw" base_Package="_rZAAWkIZEeaoHPpII-6Tdw"/>
  <UMLRealTime:RTMessageSet xmi:id="_rZAnbEIZEeaoHPpII-6Tdw" base_Interface="_rZAAXkIZEeaoHPpII-6Tdw"/>
  <UMLRealTime:RTMessageSet xmi:id="_rZAnbUIZEeaoHPpII-6Tdw" base_Interface="_rZAAYUIZEeaoHPpII-6Tdw" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_rZAnbkIZEeaoHPpII-6Tdw" base_Interface="_rZAAZkIZEeaoHPpII-6Tdw" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_rZAnb0IZEeaoHPpII-6Tdw" base_Collaboration="_rZAAW0IZEeaoHPpII-6Tdw"/>
  <UMLRealTime:Capsule xmi:id="_9eZasEhlEeaGrIS8kLT52w" base_Class="_9dusUEhlEeaGrIS8kLT52w"/>
  <UMLRealTime:Capsule xmi:id="_CFjc8EhvEeaGrIS8kLT52w" base_Class="_CFLpgEhvEeaGrIS8kLT52w"/>
  <UMLRealTime:CapsulePart xmi:id="_Ffw6AEhvEeaGrIS8kLT52w" base_Property="_FfiQgEhvEeaGrIS8kLT52w"/>
  <UMLRealTime:RTPort xmi:id="_MlQWAEhvEeaGrIS8kLT52w" base_Port="_MlGlAEhvEeaGrIS8kLT52w"/>
  <UMLRealTime:RTPort xmi:id="_O8O0cEhvEeaGrIS8kLT52w" base_Port="_O8LKEEhvEeaGrIS8kLT52w"/>
  <UMLRealTime:RTPort xmi:id="_Q9orgEhvEeaGrIS8kLT52w" base_Port="_Q9hWwEhvEeaGrIS8kLT52w"/>
  <UMLRealTime:Capsule xmi:id="_lKF9wEhvEeaGrIS8kLT52w" base_Class="_lJwmkEhvEeaGrIS8kLT52w"/>
  <UMLRealTime:RTPort xmi:id="_peoVEEhvEeaGrIS8kLT52w" base_Port="_pekDoEhvEeaGrIS8kLT52w"/>
  <UMLRealTime:RTPort xmi:id="_rhMpwEhvEeaGrIS8kLT52w" base_Port="_rhC4wEhvEeaGrIS8kLT52w"/>
  <UMLRealTime:RTPort xmi:id="_tKT8oEhvEeaGrIS8kLT52w" base_Port="_tKPrMEhvEeaGrIS8kLT52w"/>
  <UMLRealTime:CapsulePart xmi:id="_uvLosUhvEeaGrIS8kLT52w" base_Property="_uvJMcEhvEeaGrIS8kLT52w"/>
  <UMLRealTime:Capsule xmi:id="_RcA0IEhwEeaGrIS8kLT52w" base_Class="_Rbq14EhwEeaGrIS8kLT52w"/>
  <UMLRealTime:Capsule xmi:id="_W-zHQEhwEeaGrIS8kLT52w" base_Class="_W-iBgEhwEeaGrIS8kLT52w"/>
  <UMLRealTime:Capsule xmi:id="_Y3xbEEhwEeaGrIS8kLT52w" base_Class="_Y3d5EEhwEeaGrIS8kLT52w"/>
  <UMLRealTime:RTPort xmi:id="_eOzKIEhwEeaGrIS8kLT52w" base_Port="_eOwG0EhwEeaGrIS8kLT52w"/>
  <UMLRealTime:RTPort xmi:id="_64ThMEhwEeaGrIS8kLT52w" base_Port="_64Qd4EhwEeaGrIS8kLT52w"/>
  <UMLRealTime:RTPort xmi:id="_-HfaAEhwEeaGrIS8kLT52w" base_Port="_-HcWsEhwEeaGrIS8kLT52w"/>
  <UMLRealTime:CapsulePart xmi:id="_K160cEhxEeaGrIS8kLT52w" base_Property="_K14YMEhxEeaGrIS8kLT52w"/>
  <UMLRealTime:CapsulePart xmi:id="_K1_F4UhxEeaGrIS8kLT52w" base_Property="_K19QsEhxEeaGrIS8kLT52w"/>
  <UMLRealTime:CapsulePart xmi:id="_K2DXUEhxEeaGrIS8kLT52w" base_Property="_K2A7EEhxEeaGrIS8kLT52w"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_e-BLIEhxEeaGrIS8kLT52w" base_Pseudostate="_e9-u4EhxEeaGrIS8kLT52w"/>
  <UMLRTStateMachines:RTRegion xmi:id="_e-CZQEhxEeaGrIS8kLT52w" base_Region="_e985sEhxEeaGrIS8kLT52w"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_e-VUMEhxEeaGrIS8kLT52w" base_StateMachine="_e95PUEhxEeaGrIS8kLT52w"/>
  <UMLRealTime:RTPort xmi:id="_mCkEkEh0EeaGrIS8kLT52w" base_Port="_mCfzIEh0EeaGrIS8kLT52w"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_LeEqEEj0EeaDOaB8rZNNSg" base_Pseudostate="_LeAYoEj0EeaDOaB8rZNNSg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_LeReYEj0EeaDOaB8rZNNSg" base_Region="_Ld8HMEj0EeaDOaB8rZNNSg"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_LfJBEEj0EeaDOaB8rZNNSg" base_StateMachine="_LdxvIEj0EeaDOaB8rZNNSg"/>
  <UMLRealTime:RTPort xmi:id="_t2g54Ej0EeaDOaB8rZNNSg" base_Port="_t2UsoEj0EeaDOaB8rZNNSg"/>
  <ActionLanguage:TextualRepresentation xmi:id="_9_7NcEj0EeaDOaB8rZNNSg" base_Comment="_97WPcEj0EeaDOaB8rZNNSg" language="org.eclipse.papyrus.uml.textedit.transition.xtext.UmlTransition"/>
  <RTCppProperties:AttributeProperties xmi:id="_J2pKgEj6EeaDOaB8rZNNSg" type="GPIOClass" base_Property="_9RZ9wEj4EeaDOaB8rZNNSg"/>
  <RTCppProperties:AttributeProperties xmi:id="_cQPYAEj6EeaDOaB8rZNNSg" type="GPIOClass" base_Property="_c6o1UEj5EeaDOaB8rZNNSg"/>
  <RTCppProperties:AttributeProperties xmi:id="_nb0foEj6EeaDOaB8rZNNSg" type="GPIOClass" base_Property="_gSHugEj5EeaDOaB8rZNNSg"/>
  <RTCppProperties:AttributeProperties xmi:id="_qGzfMEj6EeaDOaB8rZNNSg" type="GPIOClass" base_Property="_s5v9YEj5EeaDOaB8rZNNSg"/>
  <RTCppProperties:AttributeProperties xmi:id="_r9R4oEj6EeaDOaB8rZNNSg" type="GPIOClass" base_Property="_wyUKYEj5EeaDOaB8rZNNSg"/>
  <RTCppProperties:AttributeProperties xmi:id="_t4WeMEj6EeaDOaB8rZNNSg" type="GPIOClass" base_Property="_zryR4Ej5EeaDOaB8rZNNSg"/>
  <RTCppProperties:ArtifactProperties xmi:id="_cafDsEj7EeaDOaB8rZNNSg" base_Artifact="_Y6tKIEj7EeaDOaB8rZNNSg" includeFile="#include &lt;string>&#xA;using namespace std;&#xA;/* GPIO Class&#xA; * Purpose: Each object instantiated from this class will control a GPIO pin&#xA; * The GPIO pin number must be passed to the overloaded class constructor&#xA; */&#xA;class GPIOClass&#xA;{&#xA;public:&#xA;    GPIOClass();  // create a GPIO object that controls GPIO4 (default&#xA;    GPIOClass(string x); // create a GPIO object that controls GPIOx, where x is passed to this constructor&#xA;    int export_gpio(); // exports GPIO&#xA;    int unexport_gpio(); // unexport GPIO&#xA;    int setdir_gpio(string dir); // Set GPIO Direction&#xA;    int setval_gpio(string val); // Set GPIO Value (putput pins)&#xA;    int getval_gpio(string&amp; val); // Get GPIO Value (input/ output pins)&#xA;    string get_gpionum(); // return the GPIO number associated with the instance of an object&#xA;private:&#xA;    string gpionum; // GPIO number associated with the instance of an object&#xA;};" sourceFile="#include &lt;fstream>&#xA;#include &lt;string>&#xA;#include &lt;iostream>&#xA;#include &lt;sstream>&#xA;#include &quot;GPIOClass.hh&quot;&#xA;&#xA;using namespace std;&#xA;&#xA;GPIOClass::GPIOClass()&#xA;{&#xA;    this->gpionum = &quot;4&quot;; //GPIO4 is default&#xA;}&#xA;&#xA;GPIOClass::GPIOClass(string gnum)&#xA;{&#xA;    this->gpionum = gnum;  //Instatiate GPIOClass object for GPIO pin number &quot;gnum&quot;&#xA;}&#xA;&#xA;int GPIOClass::export_gpio()&#xA;{&#xA;    string export_str = &quot;/sys/class/gpio/export&quot;;&#xA;    ofstream exportgpio(export_str.c_str()); // Open &quot;export&quot; file. Convert C++ string to C string. Required for all Linux pathnames&#xA;    if (exportgpio &lt; 0){&#xA;        cout &lt;&lt; &quot; OPERATION FAILED: Unable to export GPIO&quot;&lt;&lt; this->gpionum &lt;&lt;&quot; .&quot;&lt;&lt; endl;&#xA;        return -1;&#xA;    }&#xA;&#xA;    exportgpio &lt;&lt; this->gpionum ; //write GPIO number to export&#xA;    exportgpio.close(); //close export file&#xA;    return 0;&#xA;}&#xA;&#xA;int GPIOClass::unexport_gpio()&#xA;{&#xA;    string unexport_str = &quot;/sys/class/gpio/unexport&quot;;&#xA;    ofstream unexportgpio(unexport_str.c_str()); //Open unexport file&#xA;    if (unexportgpio &lt; 0){&#xA;        cout &lt;&lt; &quot; OPERATION FAILED: Unable to unexport GPIO&quot;&lt;&lt; this->gpionum &lt;&lt;&quot; .&quot;&lt;&lt; endl;&#xA;        return -1;&#xA;    }&#xA;&#xA;    unexportgpio &lt;&lt; this->gpionum ; //write GPIO number to unexport&#xA;    unexportgpio.close(); //close unexport file&#xA;    return 0;&#xA;}&#xA;&#xA;int GPIOClass::setdir_gpio(string dir)&#xA;{&#xA;&#xA;    string setdir_str =&quot;/sys/class/gpio/gpio&quot; + this->gpionum + &quot;/direction&quot;;&#xA;    ofstream setdirgpio(setdir_str.c_str()); // open direction file for gpio&#xA;        if (setdirgpio &lt; 0){&#xA;            cout &lt;&lt; &quot; OPERATION FAILED: Unable to set direction of GPIO&quot;&lt;&lt; this->gpionum &lt;&lt;&quot; .&quot;&lt;&lt; endl;&#xA;            return -1;&#xA;        }&#xA;&#xA;        setdirgpio &lt;&lt; dir; //write direction to direction file&#xA;        setdirgpio.close(); // close direction file&#xA;        return 0;&#xA;}&#xA;&#xA;int GPIOClass::setval_gpio(string val)&#xA;{&#xA;&#xA;    string setval_str = &quot;/sys/class/gpio/gpio&quot; + this->gpionum + &quot;/value&quot;;&#xA;    ofstream setvalgpio(setval_str.c_str()); // open value file for gpio&#xA;        if (setvalgpio &lt; 0){&#xA;            cout &lt;&lt; &quot; OPERATION FAILED: Unable to set the value of GPIO&quot;&lt;&lt; this->gpionum &lt;&lt;&quot; .&quot;&lt;&lt; endl;&#xA;            return -1;&#xA;        }&#xA;&#xA;        setvalgpio &lt;&lt; val ;//write value to value file&#xA;        setvalgpio.close();// close value file&#xA;        return 0;&#xA;}&#xA;&#xA;int GPIOClass::getval_gpio(string&amp; val){&#xA;&#xA;    string getval_str = &quot;/sys/class/gpio/gpio&quot; + this->gpionum + &quot;/value&quot;;&#xA;    ifstream getvalgpio(getval_str.c_str());// open value file for gpio&#xA;    if (getvalgpio &lt; 0){&#xA;        cout &lt;&lt; &quot; OPERATION FAILED: Unable to get value of GPIO&quot;&lt;&lt; this->gpionum &lt;&lt;&quot; .&quot;&lt;&lt; endl;&#xA;        return -1;&#xA;            }&#xA;&#xA;    getvalgpio >> val ;  //read gpio value&#xA;&#xA;    if(val != &quot;0&quot;)&#xA;        val = &quot;1&quot;;&#xA;    else&#xA;        val = &quot;0&quot;;&#xA;&#xA;    getvalgpio.close(); //close the value file&#xA;    return 0;&#xA;}&#xA;&#xA;string GPIOClass::get_gpionum(){&#xA;&#xA;return this->gpionum;&#xA;&#xA;}"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5il68Ej-EeaDOaB8rZNNSg" base_Pseudostate="_5ikFwEj-EeaDOaB8rZNNSg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_5imiAEj-EeaDOaB8rZNNSg" base_Region="_5iiQkEj-EeaDOaB8rZNNSg"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_5jRQYEj-EeaDOaB8rZNNSg" base_StateMachine="_5icxAEj-EeaDOaB8rZNNSg"/>
  <UMLRealTime:RTPort xmi:id="_cfxvMEkCEeazmIbzY62nkg" base_Port="_cfYtoEkCEeazmIbzY62nkg"/>
  <UMLRealTime:RTPort xmi:id="_ecLKcEkCEeazmIbzY62nkg" base_Port="_ecDOoEkCEeazmIbzY62nkg"/>
  <RTCppProperties:CapsuleProperties xmi:id="_8QvmcEkCEeazmIbzY62nkg" headerPreface="#include &quot;GPIOClass.hh&quot;&#xA;#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" implementationPreface="#include &quot;GPIOClass.hh&quot;" base_Class="_Rbq14EhwEeaGrIS8kLT52w"/>
  <RTCppProperties:CapsuleProperties xmi:id="_BvnC4EkDEeazmIbzY62nkg" headerPreface="#include &quot;GPIOClass.hh&quot;&#xA;#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" implementationPreface="#include &quot;GPIOClass.hh&quot;" base_Class="_Y3d5EEhwEeaGrIS8kLT52w"/>
  <UMLRealTime:RTPort xmi:id="_-fqfoEkDEeazmIbzY62nkg" base_Port="_-fhVsEkDEeazmIbzY62nkg"/>
  <UMLRealTime:RTConnector xmi:id="_MKE50EkHEeazmIbzY62nkg" base_Connector="_8kYd8EhvEeaGrIS8kLT52w"/>
  <UMLRealTime:RTConnector xmi:id="_NCdTUEkHEeazmIbzY62nkg" base_Connector="_9WyyUEhvEeaGrIS8kLT52w"/>
  <UMLRealTime:RTConnector xmi:id="_NvupAEkHEeazmIbzY62nkg" base_Connector="_-HZI0EhvEeaGrIS8kLT52w"/>
  <UMLRealTime:RTConnector xmi:id="_PWKbUEkHEeazmIbzY62nkg" base_Connector="_ZnMQYEhxEeaGrIS8kLT52w"/>
  <UMLRealTime:RTPort xmi:id="_KAM7UFTQEeaAD8nFYloOhg" base_Port="_J81eQFTQEeaAD8nFYloOhg"/>
  <UMLRealTime:CapsulePart xmi:id="_uikEAFTbEeaAD8nFYloOhg" base_Property="_uigZoFTbEeaAD8nFYloOhg"/>
  <UMLRealTime:RTConnector xmi:id="_7cDe8FTbEeaAD8nFYloOhg" base_Connector="_5xYs4FTbEeaAD8nFYloOhg"/>
  <UMLRealTime:Capsule xmi:id="_I3ylEPH9EeaFP7yOXIAVPg" base_Class="_I3FacPH9EeaFP7yOXIAVPg"/>
  <UMLRealTime:CapsulePart xmi:id="_I34rsPH9EeaFP7yOXIAVPg" base_Property="_I31BUPH9EeaFP7yOXIAVPg"/>
  <UMLRealTime:CapsulePart xmi:id="_I_9CkPH9EeaFP7yOXIAVPg" base_Property="_I_4xIPH9EeaFP7yOXIAVPg"/>
  <UMLRealTime:RTPort xmi:id="_JADJMPH9EeaFP7yOXIAVPg" isNotification="true" isWired="false" base_Port="_I__e0PH9EeaFP7yOXIAVPg"/>
  <RTCppProperties:AttributeProperties xmi:id="_JAP9gPH9EeaFP7yOXIAVPg" type="debugEvents::Event" base_Property="_JAMTJ_H9EeaFP7yOXIAVPg"/>
  <RTCppProperties:AttributeProperties xmi:id="_JAX5UPH9EeaFP7yOXIAVPg" type="SROManager" base_Property="_JATn4PH9EeaFP7yOXIAVPg"/>
  <RTCppProperties:ParameterProperties xmi:id="_JAt3kPH9EeaFP7yOXIAVPg" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_JApmIfH9EeaFP7yOXIAVPg"/>
  <RTCppProperties:ParameterProperties xmi:id="_JA1MUPH9EeaFP7yOXIAVPg" type="debugEvents::EVENTTYPE" base_Parameter="_JAxh8PH9EeaFP7yOXIAVPg"/>
  <RTCppProperties:ParameterProperties xmi:id="_JA8hEPH9EeaFP7yOXIAVPg" type="const char *" base_Parameter="_JA42sPH9EeaFP7yOXIAVPg"/>
  <RTCppProperties:ParameterProperties xmi:id="_JI0DoPH9EeaFP7yOXIAVPg" type="const char *" base_Parameter="_JIwZQfH9EeaFP7yOXIAVPg"/>
  <UMLRealTime:RTPort xmi:id="_JI90oPH9EeaFP7yOXIAVPg" isNotification="true" isWired="false" base_Port="_JI6KQPH9EeaFP7yOXIAVPg"/>
  <RTCppProperties:AttributeProperties xmi:id="_JJLQAPH9EeaFP7yOXIAVPg" type="debugEvents::Event" base_Property="_JJHlpfH9EeaFP7yOXIAVPg"/>
  <RTCppProperties:AttributeProperties xmi:id="_JJSkwPH9EeaFP7yOXIAVPg" type="SROManager" base_Property="_JJO6YPH9EeaFP7yOXIAVPg"/>
  <RTCppProperties:CapsuleProperties xmi:id="_JJagkPH9EeaFP7yOXIAVPg" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_CFLpgEhvEeaGrIS8kLT52w"/>
  <RTCppProperties:ParameterProperties xmi:id="_JJs0cPH9EeaFP7yOXIAVPg" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_JJpKEfH9EeaFP7yOXIAVPg"/>
  <RTCppProperties:ParameterProperties xmi:id="_JJ0JMPH9EeaFP7yOXIAVPg" type="debugEvents::EVENTTYPE" base_Parameter="_JJwe0PH9EeaFP7yOXIAVPg"/>
  <RTCppProperties:ParameterProperties xmi:id="_JJ7d8PH9EeaFP7yOXIAVPg" type="const char *" base_Parameter="_JJ3zkPH9EeaFP7yOXIAVPg"/>
  <RTCppProperties:ParameterProperties xmi:id="_JKDZwPH9EeaFP7yOXIAVPg" type="const char *" base_Parameter="_JJ_IUfH9EeaFP7yOXIAVPg"/>
  <UMLRealTime:RTPort xmi:id="_JO8g0PH9EeaFP7yOXIAVPg" isNotification="true" isWired="false" base_Port="_JO3oUPH9EeaFP7yOXIAVPg"/>
  <RTCppProperties:AttributeProperties xmi:id="_JPJVIPH9EeaFP7yOXIAVPg" type="debugEvents::Event" base_Property="_JPFqxvH9EeaFP7yOXIAVPg"/>
  <RTCppProperties:AttributeProperties xmi:id="_JPQp4PH9EeaFP7yOXIAVPg" type="SROManager" base_Property="_JPM_gPH9EeaFP7yOXIAVPg"/>
  <RTCppProperties:ParameterProperties xmi:id="_JPn2QPH9EeaFP7yOXIAVPg" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_JPkL4PH9EeaFP7yOXIAVPg"/>
  <RTCppProperties:ParameterProperties xmi:id="_JPuj8PH9EeaFP7yOXIAVPg" type="debugEvents::EVENTTYPE" base_Parameter="_JPq5kPH9EeaFP7yOXIAVPg"/>
  <RTCppProperties:ParameterProperties xmi:id="_JP2fwPH9EeaFP7yOXIAVPg" type="const char *" base_Parameter="_JPy1YPH9EeaFP7yOXIAVPg"/>
  <RTCppProperties:ParameterProperties xmi:id="_JP-bkPH9EeaFP7yOXIAVPg" type="const char *" base_Parameter="_JP6KIfH9EeaFP7yOXIAVPg"/>
</xmi:XMI>
