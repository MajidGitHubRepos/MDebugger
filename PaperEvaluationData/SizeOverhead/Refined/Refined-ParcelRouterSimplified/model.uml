<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_nx1tkML5EeaSH8bbL43htA" name="RootElement">
    <eAnnotations xmi:id="_IbhgEML7EeaSH8bbL43htA" source="UMLRT_Default_top">
      <details xmi:id="_IbjVQML7EeaSH8bbL43htA" key="top_name" value="Debug__Top"/>
    </eAnnotations>
    <packageImport xmi:id="_Q-n_8Pb4EeaMSqHUbqLyYA">
      <importedPackage xmi:type="uml:Model" href="../CommGateWay/model.uml#_MZw7AAdxEeadtKuU2t6fMg"/>
    </packageImport>
    <packagedElement xmi:type="uml:Class" xmi:id="_9X86YML5EeaSH8bbL43htA" name="Parcer_Router" isActive="true">
      <ownedAttribute xmi:id="_o9z8AML6EeaSH8bbL43htA" name="gen" visibility="protected" type="_GuPUUML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_sW4woML6EeaSH8bbL43htA" name="top" visibility="protected" type="_IuNA8ML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_uWG2YML6EeaSH8bbL43htA" name="right" visibility="protected" type="_IuNA8ML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_wW-h8ML6EeaSH8bbL43htA" name="left" visibility="protected" type="_IuNA8ML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_zY9sQML6EeaSH8bbL43htA" name="bin1" visibility="protected" type="_LOPUwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_YaaZIMMQEeaSH8bbL43htA" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_YaWHsMMQEeaSH8bbL43htA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_bKsIYMMQEeaSH8bbL43htA" name="bin2" visibility="protected" type="_LOPUwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_ex4RgMMQEeaSH8bbL43htA" name="bin3" visibility="protected" type="_LOPUwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_gzot4MMQEeaSH8bbL43htA" name="bin0" visibility="protected" type="_LOPUwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite"/>
      <ownedConnector xmi:id="_9hn-UML6EeaSH8bbL43htA" name="RTConnector1">
        <end xmi:id="_9hsPwML6EeaSH8bbL43htA" partWithPort="_o9z8AML6EeaSH8bbL43htA" role="_a5ynoML6EeaSH8bbL43htA"/>
        <end xmi:id="_9hs20ML6EeaSH8bbL43htA" partWithPort="_sW4woML6EeaSH8bbL43htA" role="_ejuiwML6EeaSH8bbL43htA"/>
      </ownedConnector>
      <ownedConnector xmi:id="_-P5ZkML6EeaSH8bbL43htA" name="RTConnector2">
        <end xmi:id="_-P8c4ML6EeaSH8bbL43htA" partWithPort="_sW4woML6EeaSH8bbL43htA" role="_gvpnwML6EeaSH8bbL43htA"/>
        <end xmi:id="_-P8c4cL6EeaSH8bbL43htA" partWithPort="_uWG2YML6EeaSH8bbL43htA" role="_ejuiwML6EeaSH8bbL43htA"/>
      </ownedConnector>
      <ownedConnector xmi:id="_-9PnwML6EeaSH8bbL43htA" name="RTConnector3">
        <end xmi:id="_-9SEAML6EeaSH8bbL43htA" partWithPort="_sW4woML6EeaSH8bbL43htA" role="_ieg9UML6EeaSH8bbL43htA"/>
        <end xmi:id="_-9SrEML6EeaSH8bbL43htA" partWithPort="_wW-h8ML6EeaSH8bbL43htA" role="_ejuiwML6EeaSH8bbL43htA"/>
      </ownedConnector>
      <ownedConnector xmi:id="_0KAiIMMPEeaSH8bbL43htA" name="RTConnector4">
        <end xmi:id="_0KCXUMMPEeaSH8bbL43htA" partWithPort="_uWG2YML6EeaSH8bbL43htA" role="_gvpnwML6EeaSH8bbL43htA"/>
        <end xmi:id="_0KCXUcMPEeaSH8bbL43htA" partWithPort="_ex4RgMMQEeaSH8bbL43htA" role="_l2PuIML6EeaSH8bbL43htA"/>
      </ownedConnector>
      <ownedConnector xmi:id="_02AFcMMPEeaSH8bbL43htA" name="RTConnector5">
        <end xmi:id="_02B6oMMPEeaSH8bbL43htA" partWithPort="_uWG2YML6EeaSH8bbL43htA" role="_ieg9UML6EeaSH8bbL43htA"/>
        <end xmi:id="_02B6ocMPEeaSH8bbL43htA" partWithPort="_bKsIYMMQEeaSH8bbL43htA" role="_l2PuIML6EeaSH8bbL43htA"/>
      </ownedConnector>
      <ownedConnector xmi:id="_13afIMMPEeaSH8bbL43htA" name="RTConnector6">
        <end xmi:id="_13btQMMPEeaSH8bbL43htA" partWithPort="_wW-h8ML6EeaSH8bbL43htA" role="_gvpnwML6EeaSH8bbL43htA"/>
        <end xmi:id="_13cUUMMPEeaSH8bbL43htA" partWithPort="_zY9sQML6EeaSH8bbL43htA" role="_l2PuIML6EeaSH8bbL43htA"/>
      </ownedConnector>
      <ownedConnector xmi:id="_2pVrUMMPEeaSH8bbL43htA" name="RTConnector7">
        <end xmi:id="_2pXggMMPEeaSH8bbL43htA" partWithPort="_wW-h8ML6EeaSH8bbL43htA" role="_ieg9UML6EeaSH8bbL43htA"/>
        <end xmi:id="_2pXggcMPEeaSH8bbL43htA" partWithPort="_gzot4MMQEeaSH8bbL43htA" role="_l2PuIML6EeaSH8bbL43htA"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_GuPUUML6EeaSH8bbL43htA" name="Gen" classifierBehavior="_sgJk4ML7EeaSH8bbL43htA" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_a5ynoML6EeaSH8bbL43htA" name="enter" visibility="public" type="_Qq5xwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ihPrwML7EeaSH8bbL43htA" name="timer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_TGKoYML8EeaSH8bbL43htA" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_37GIwML8EeaSH8bbL43htA" name="parcel" type="_aEoEwML7EeaSH8bbL43htA">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_48hwkML8EeaSH8bbL43htA"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_48kM0ML8EeaSH8bbL43htA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_zN4IcMYtEeaYV5cb1Zesag" name="delay">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_9chtwMYtEeaYV5cb1Zesag" value="8"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_RETxMPb4EeaMSqHUbqLyYA" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_REXbkPb4EeaMSqHUbqLyYA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_REXbkfb4EeaMSqHUbqLyYA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_REf-dfb4EeaMSqHUbqLyYA" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_REglgPb4EeaMSqHUbqLyYA" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_REglgfb4EeaMSqHUbqLyYA" name="Debug__event"/>
      <ownedAttribute xmi:id="_REnTMPb4EeaMSqHUbqLyYA" name="Debug__SRO"/>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_sgJk4ML7EeaSH8bbL43htA" name="GenStateMachine" isReentrant="false">
        <region xmi:id="_sgSu0ML7EeaSH8bbL43htA" name="Region">
          <transition xmi:id="_sgjNgML7EeaSH8bbL43htA" name="Initial" source="_RGAaUPb4EeaMSqHUbqLyYA" target="_sgeVAML7EeaSH8bbL43htA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_6ZnPEML7EeaSH8bbL43htA">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;GENERATING&quot;,(char *)&quot;&quot;);

srand(time(0));
timer.informEvery(UMLRTTimespec(4,0));</body>
            </effect>
          </transition>
          <transition xmi:id="_yYjisML7EeaSH8bbL43htA" name="GENERATING__GENERATING__3" source="_RGNOoPb4EeaMSqHUbqLyYA" target="_sgeVAML7EeaSH8bbL43htA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_I7aroML8EeaSH8bbL43htA" name="generation">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::GENERATING__GENERATING__3&quot;,(char *)&quot;Debug__Path__GENERATING__GENERATING__3&quot;,(char *)&quot;GENERATING&quot;,(char *)&quot;&quot;);

    int random = rand() % 4;
    parcel = Parcel();
    parcel.number = random;
    parcel.stage = 0; // 0 for &quot;top&quot;, 1 for &quot;left&quot;, 2 for &quot;right&quot;
    parcel.level = 2;
    enter.transmit(parcel).send();
    log.show(&quot;generating a parcel %d on stage %d\n&quot;, random, parcel.stage);
</body>
            </effect>
          </transition>
          <transition xmi:id="_RGBBYfb4EeaMSqHUbqLyYA" name="Debug__Initial" source="_RGW_oPb4EeaMSqHUbqLyYA" target="_RGAaUPb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGBBYvb4EeaMSqHUbqLyYA" name="Debug__Initial__72">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;GENERATING&quot;,&quot;&quot;,&quot;GENERATING&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;reception&quot;,&quot;OCCUPIED&quot;,&quot;transmit&quot;,&quot;transmission&quot;);
Debug__SRO.addTransitionsFromState(&quot;OCCUPIED&quot;,&quot;transmission&quot;,&quot;IDLE&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;GENERATING&quot;,&quot;&quot;,&quot;&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),(char *) &quot;&quot;,(char *) &quot;&quot;,(char *) &quot;&quot;,(char *)&quot;&quot;,(char *) &quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_RGW_o_b4EeaMSqHUbqLyYA" name="ConnectionEstablished" port="_RETxMPb4EeaMSqHUbqLyYA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_RGBocPb4EeaMSqHUbqLyYA" name="Debug__Initial__S" guard="_RGBocvb4EeaMSqHUbqLyYA" source="_RGAaUPb4EeaMSqHUbqLyYA" target="_RGAaU_b4EeaMSqHUbqLyYA">
            <ownedRule xmi:id="_RGBocvb4EeaMSqHUbqLyYA" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_RGBocfb4EeaMSqHUbqLyYA" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo2&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGBoc_b4EeaMSqHUbqLyYA" name="Debug__Initial__S__74">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RGCPgPb4EeaMSqHUbqLyYA" name="Debug__Initial__E" source="_RGBBYPb4EeaMSqHUbqLyYA" target="_sgeVAML7EeaSH8bbL43htA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGCPgfb4EeaMSqHUbqLyYA" name="Debug__Initial__E__76">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;GENERATING&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RGC2kPb4EeaMSqHUbqLyYA" name="Debug__Initial__dbg" source="_RGAaUfb4EeaMSqHUbqLyYA" target="_RGAaUfb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGC2kvb4EeaMSqHUbqLyYA" name="Debug__Initial__dbg__78">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__Initial__dbg&quot;,(char *)&quot;Debug__C__Initial&quot;,(char *)&quot;Debug__C__Initial&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_RGC2kfb4EeaMSqHUbqLyYA" name="Debug__MSG" port="_RETxMPb4EeaMSqHUbqLyYA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_RGN1tPb4EeaMSqHUbqLyYA" name="Debug__GENERATING__GENERATING__3" source="_sgeVAML7EeaSH8bbL43htA" target="_RGNOoPb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGN1tfb4EeaMSqHUbqLyYA" name="Debug__GENERATING__GENERATING__3__91">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__GENERATING__GENERATING__3&quot;,(char *)&quot;GENERATING&quot;,(char *)&quot;Debug__Path__GENERATING__GENERATING__3&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_1e0JAML7EeaSH8bbL43htA" port="_ihPrwML7EeaSH8bbL43htA">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_RGOcwPb4EeaMSqHUbqLyYA" name="Debug__GENERATING__GENERATING__3__S" guard="_RGOcwvb4EeaMSqHUbqLyYA" source="_RGNOoPb4EeaMSqHUbqLyYA" target="_RGN1svb4EeaMSqHUbqLyYA">
            <ownedRule xmi:id="_RGOcwvb4EeaMSqHUbqLyYA" name="Debug__GuardGENERATING__GENERATING__3">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_RGOcwfb4EeaMSqHUbqLyYA" name="Debug__GuardGENERATING__GENERATING__3">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;GENERATING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGPD0Pb4EeaMSqHUbqLyYA" name="Debug__GENERATING__GENERATING__3__S__93">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__GENERATING__GENERATING__3__S&quot;,(char *)&quot;Debug__Path__GENERATING__GENERATING__3&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RGPD0fb4EeaMSqHUbqLyYA" name="Debug__GENERATING__GENERATING__3__E" source="_RGN1s_b4EeaMSqHUbqLyYA" target="_sgeVAML7EeaSH8bbL43htA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGPq4Pb4EeaMSqHUbqLyYA" name="Debug__GENERATING__GENERATING__3__E__95">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__GENERATING__GENERATING__3__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;GENERATING&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RGPq4fb4EeaMSqHUbqLyYA" name="Debug__GENERATING__GENERATING__3__dbg" source="_RGN1sPb4EeaMSqHUbqLyYA" target="_RGN1sPb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGQR8Pb4EeaMSqHUbqLyYA" name="Debug__GENERATING__GENERATING__3__dbg__97">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__GENERATING__GENERATING__3__dbg&quot;,(char *)&quot;Debug__C__GENERATING__GENERATING__3&quot;,(char *)&quot;Debug__C__GENERATING__GENERATING__3&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_RGPq4vb4EeaMSqHUbqLyYA" name="Debug__MSG" port="_RETxMPb4EeaMSqHUbqLyYA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_RGW_ofb4EeaMSqHUbqLyYA" name="Debug__InitDebug" source="_sgYOYML7EeaSH8bbL43htA" target="_RGW_oPb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGW_ovb4EeaMSqHUbqLyYA" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
std::string tempS;
std::cout&lt;&lt;&quot;Enter 1 for running in debug mode, any other key for normal model\n&quot;;
std::cin>> tempS;
if (tempS==&quot;1&quot;)
    this->Debug__SRO.setExecMode(Stepping);
else
    this->Debug__SRO.setExecMode(Running);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_sgYOYML7EeaSH8bbL43htA" name="Pseudo2"/>
          <subvertex xmi:type="uml:State" xmi:id="_sgeVAML7EeaSH8bbL43htA" name="GENERATING">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RGZb4Pb4EeaMSqHUbqLyYA" name="GENERATING__112">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;GENERATING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::GENERATING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);


}</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RGZb4fb4EeaMSqHUbqLyYA" name="GENERATING__113">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;GENERATING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::GENERATING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);


}</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_RGAaUPb4EeaMSqHUbqLyYA" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_RGAaUfb4EeaMSqHUbqLyYA" name="Debug__C__Initial">
            <connectionPoint xmi:id="_RGAaU_b4EeaMSqHUbqLyYA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_RGBBYPb4EeaMSqHUbqLyYA" name="ex" kind="exitPoint"/>
            <region xmi:id="_RGAaUvb4EeaMSqHUbqLyYA" name="Region1">
              <transition xmi:id="_RGEEsPb4EeaMSqHUbqLyYA" name="Debug__init__trans__Initial" source="_RGAaU_b4EeaMSqHUbqLyYA" target="_RGC2k_b4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGF54Pb4EeaMSqHUbqLyYA" name="Debug__init__trans__Initial__83">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_RGEEsfb4EeaMSqHUbqLyYA" name="Debug__Ac__Initial" source="_RGC2k_b4EeaMSqHUbqLyYA" target="_RGDdoPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGEEs_b4EeaMSqHUbqLyYA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;);

srand(time(0));
timer.informEvery(UMLRTTimespec(4,0));</body>
                </effect>
                <trigger xmi:id="_RGEEsvb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RETxMPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RGEEtPb4EeaMSqHUbqLyYA" name="Debug__En__GENERATING" source="_RGDdoPb4EeaMSqHUbqLyYA" target="_RGDdovb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGGg8Pb4EeaMSqHUbqLyYA" name="Debug__En__GENERATING__86">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__Initial::Region1::Debug__En__GENERATING&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RGEEtfb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RETxMPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RGEEtvb4EeaMSqHUbqLyYA" name="Debug__end__trans__Initial" source="_RGDdovb4EeaMSqHUbqLyYA" target="_RGBBYPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGHIAPb4EeaMSqHUbqLyYA" name="Debug__end__trans__Initial__88">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RGEEt_b4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RETxMPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_RGC2k_b4EeaMSqHUbqLyYA" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RGC2lPb4EeaMSqHUbqLyYA" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RGEEuPb4EeaMSqHUbqLyYA" name="Debug__B__Ac__Initial__79">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RGDdoPb4EeaMSqHUbqLyYA" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RGDdofb4EeaMSqHUbqLyYA" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;GENERATING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RGErwPb4EeaMSqHUbqLyYA" name="Debug__A__Ac__Initial__80">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RGDdovb4EeaMSqHUbqLyYA" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RGDdo_b4EeaMSqHUbqLyYA" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;GENERATING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RGFS0Pb4EeaMSqHUbqLyYA" name="Debug__A__En__Initial__81">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_RGNOoPb4EeaMSqHUbqLyYA" name="Debug__Path__GENERATING__GENERATING__3" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_RGN1sPb4EeaMSqHUbqLyYA" name="Debug__C__GENERATING__GENERATING__3">
            <connectionPoint xmi:id="_RGN1svb4EeaMSqHUbqLyYA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_RGN1s_b4EeaMSqHUbqLyYA" name="ex" kind="exitPoint"/>
            <region xmi:id="_RGN1sfb4EeaMSqHUbqLyYA" name="Region1">
              <transition xmi:id="_RGRgEvb4EeaMSqHUbqLyYA" name="Debug__init__trans__GENERATING__GENERATING__3" source="_RGN1svb4EeaMSqHUbqLyYA" target="_RGQR8fb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGUjYPb4EeaMSqHUbqLyYA" name="Debug__init__trans__GENERATING__GENERATING__3__103">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__3::Region1::Debug__init__trans__GENERATING__GENERATING__3&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__GENERATING&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_RGRgE_b4EeaMSqHUbqLyYA" name="Debug__Ex__GENERATING" source="_RGQR8fb4EeaMSqHUbqLyYA" target="_RGQ5APb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGUjYfb4EeaMSqHUbqLyYA" name="Debug__Ex__GENERATING__105">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__3::Region1::Debug__Ex__GENERATING&quot;,(char *)&quot;Debug__B__Ex__GENERATING&quot;,(char *)&quot;Debug__B__Ac__GENERATING__GENERATING__3&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RGRgFPb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RETxMPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RGSHIPb4EeaMSqHUbqLyYA" name="Debug__AC__GENERATING__GENERATING__3" source="_RGQ5APb4EeaMSqHUbqLyYA" target="_RGQ5Avb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGSHIvb4EeaMSqHUbqLyYA" name="generation" visibility="public" isReentrant="true">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__3::Region1::Debug__AC__GENERATING__GENERATING__3&quot;,(char *)&quot;Debug__B__Ac__GENERATING__GENERATING__3&quot;,(char *)&quot;Debug__A__Ac__GENERATING__GENERATING__3&quot;,(char *)&quot;&quot;);

    int random = rand() % 4;
    parcel = Parcel();
    parcel.number = random;
    parcel.stage = 0; // 0 for &quot;top&quot;, 1 for &quot;left&quot;, 2 for &quot;right&quot;
    parcel.level = 2;
    enter.transmit(parcel).send();
    log.show(&quot;generating a parcel %d on stage %d\n&quot;, random, parcel.stage);
</body>
                </effect>
                <trigger xmi:id="_RGSHIfb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RETxMPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RGSHI_b4EeaMSqHUbqLyYA" name="Debug__En__GENERATING" source="_RGQ5Avb4EeaMSqHUbqLyYA" target="_RGRgEPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGVxgPb4EeaMSqHUbqLyYA" name="Debug__En__GENERATING__108">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__3::Region1::Debug__En__GENERATING&quot;,(char *)&quot;Debug__A__Ac__GENERATING__GENERATING__3&quot;,(char *)&quot;Debug__A__En__GENERATING&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RGSHJPb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RETxMPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RGSHJfb4EeaMSqHUbqLyYA" name="Debug__end__trans__GENERATING__GENERATING__3" source="_RGRgEPb4EeaMSqHUbqLyYA" target="_RGN1s_b4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGVxgfb4EeaMSqHUbqLyYA" name="Debug__end__trans__GENERATING__GENERATING__3__110">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__3::Region1::Debug__end__trans__GENERATING__GENERATING__3&quot;,(char *)&quot;Debug__A__En__GENERATING&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RGSHJvb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RETxMPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_RGQR8fb4EeaMSqHUbqLyYA" name="Debug__B__Ex__GENERATING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RGQR8vb4EeaMSqHUbqLyYA" name="Debug__B__Ex__GENERATING">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__3::Region1::Debug__B__Ex__GENERATING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;GENERATING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RGSHJ_b4EeaMSqHUbqLyYA" name="Debug__B__Ex__GENERATING__98">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__3::Region1::Debug__B__Ex__GENERATING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RGQ5APb4EeaMSqHUbqLyYA" name="Debug__B__Ac__GENERATING__GENERATING__3">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RGQ5Afb4EeaMSqHUbqLyYA" name="Debug__B__Ac__GENERATING__GENERATING__3">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__3::Region1::Debug__B__Ac__GENERATING__GENERATING__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;GENERATING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;GENERATING__GENERATING__3&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RGSuMPb4EeaMSqHUbqLyYA" name="Debug__B__Ac__GENERATING__GENERATING__3__99">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__3::Region1::Debug__B__Ac__GENERATING__GENERATING__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RGQ5Avb4EeaMSqHUbqLyYA" name="Debug__A__Ac__GENERATING__GENERATING__3">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RGQ5A_b4EeaMSqHUbqLyYA" name="Debug__A__Ac__GENERATING__GENERATING__3">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__3::Region1::Debug__A__Ac__GENERATING__GENERATING__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;GENERATING__GENERATING__3&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;GENERATING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RGTVQPb4EeaMSqHUbqLyYA" name="Debug__A__Ac__GENERATING__GENERATING__3__100">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__3::Region1::Debug__A__Ac__GENERATING__GENERATING__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RGRgEPb4EeaMSqHUbqLyYA" name="Debug__A__En__GENERATING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RGRgEfb4EeaMSqHUbqLyYA" name="Debug__A__En__GENERATING">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__3::Region1::Debug__A__En__GENERATING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;GENERATING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RGT8UPb4EeaMSqHUbqLyYA" name="Debug__A__En__GENERATING__101">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__3::Region1::Debug__A__En__GENERATING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_RGW_oPb4EeaMSqHUbqLyYA" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_REewUfb4EeaMSqHUbqLyYA" name="Debug__variablesViewMethod" specification="_REewUPb4EeaMSqHUbqLyYA">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;delay,&quot;);
tempS.append(&quot;Integer,&quot;);
if(delay!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,delay);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_REf-dPb4EeaMSqHUbqLyYA" name="Debug__variablesChange" specification="_REf-cPb4EeaMSqHUbqLyYA">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;delay&quot;==tempVarName){
    delay=atoi(varValue);
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_RFdnw_b4EeaMSqHUbqLyYA" name="Debug__sendEvent" specification="_RE_tsPb4EeaMSqHUbqLyYA">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_REewUPb4EeaMSqHUbqLyYA" name="Debug__variablesView" visibility="private" method="_REewUfb4EeaMSqHUbqLyYA"/>
      <ownedOperation xmi:id="_REf-cPb4EeaMSqHUbqLyYA" name="Debug__variablesChange" visibility="private" method="_REf-dPb4EeaMSqHUbqLyYA">
        <ownedParameter xmi:id="_REf-cfb4EeaMSqHUbqLyYA" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_REf-cvb4EeaMSqHUbqLyYA" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_REf-c_b4EeaMSqHUbqLyYA" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_RE_tsPb4EeaMSqHUbqLyYA" name="Debug__sendEvent" visibility="private" method="_RFdnw_b4EeaMSqHUbqLyYA">
        <ownedParameter xmi:id="_RE_tsfb4EeaMSqHUbqLyYA" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RFHCcPb4EeaMSqHUbqLyYA" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RFNwIPb4EeaMSqHUbqLyYA" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RFVE4Pb4EeaMSqHUbqLyYA" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RFVE4fb4EeaMSqHUbqLyYA" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RFdAsPb4EeaMSqHUbqLyYA" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RFdAsfb4EeaMSqHUbqLyYA" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RFdnwPb4EeaMSqHUbqLyYA" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RFdnwfb4EeaMSqHUbqLyYA" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RFdnwvb4EeaMSqHUbqLyYA" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_IuNA8ML6EeaSH8bbL43htA" name="Stage" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ejuiwML6EeaSH8bbL43htA" name="enter" visibility="public" type="_Qq5xwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_gvpnwML6EeaSH8bbL43htA" name="right" visibility="public" type="_Qq5xwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ieg9UML6EeaSH8bbL43htA" name="left" visibility="public" type="_Qq5xwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_Ko_yUML9EeaSH8bbL43htA" name="parcel" type="_aEoEwML7EeaSH8bbL43htA">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ko_yUcL9EeaSH8bbL43htA"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ko_yUsL9EeaSH8bbL43htA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_QkCwQMMEEeaSH8bbL43htA" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_8dMHMMM5EeahHehXumVB-w" name="chute1" visibility="protected" type="_jvOOEMM4EeahHehXumVB-w" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_ANvnsMM6EeahHehXumVB-w" name="chute2" visibility="protected" type="_jvOOEMM4EeahHehXumVB-w" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_Dpq8AMM6EeahHehXumVB-w" name="sensor" visibility="protected" type="_AJLGMMM5EeahHehXumVB-w" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_KElJ8MM6EeahHehXumVB-w" name="switcher" visibility="protected" type="_O_UbEMM5EeahHehXumVB-w" isOrdered="true" aggregation="composite"/>
      <ownedConnector xmi:id="_GmpDcMM6EeahHehXumVB-w" name="RTConnector1">
        <end xmi:id="_GmrfsMM6EeahHehXumVB-w" partWithPort="_8dMHMMM5EeahHehXumVB-w" role="_v-KQIMM4EeahHehXumVB-w"/>
        <end xmi:id="_GmrfscM6EeahHehXumVB-w" partWithPort="_Dpq8AMM6EeahHehXumVB-w" role="_CHUN4MM5EeahHehXumVB-w"/>
      </ownedConnector>
      <ownedConnector xmi:id="_JFiHwMM6EeahHehXumVB-w" name="RTConnector2">
        <end xmi:id="_JFkkAMM6EeahHehXumVB-w" partWithPort="_8dMHMMM5EeahHehXumVB-w" role="_sK7PEMM4EeahHehXumVB-w"/>
        <end xmi:id="_JFkkAcM6EeahHehXumVB-w" partWithPort="_ANvnsMM6EeahHehXumVB-w" role="_p1u5UMM4EeahHehXumVB-w"/>
      </ownedConnector>
      <ownedConnector xmi:id="_Ni2AkMM6EeahHehXumVB-w" name="RTConnector3">
        <end xmi:id="_Ni31wMM6EeahHehXumVB-w" partWithPort="_Dpq8AMM6EeahHehXumVB-w" role="_m5dgAMM5EeahHehXumVB-w"/>
        <end xmi:id="_Ni31wcM6EeahHehXumVB-w" partWithPort="_KElJ8MM6EeahHehXumVB-w" role="_gMZLEMM5EeahHehXumVB-w"/>
      </ownedConnector>
      <ownedConnector xmi:id="_Q2rv4MM6EeahHehXumVB-w" name="RTConnector4">
        <end xmi:id="_Q2uMIMM6EeahHehXumVB-w" role="_ejuiwML6EeaSH8bbL43htA"/>
        <end xmi:id="_Q2uMIcM6EeahHehXumVB-w" partWithPort="_8dMHMMM5EeahHehXumVB-w" role="_p1u5UMM4EeahHehXumVB-w"/>
      </ownedConnector>
      <ownedConnector xmi:id="_TMcGUMM6EeahHehXumVB-w" name="RTConnector5">
        <end xmi:id="_TMfJoMM6EeahHehXumVB-w" partWithPort="_KElJ8MM6EeahHehXumVB-w" role="_0cp_QMM5EeahHehXumVB-w"/>
        <end xmi:id="_TMfwsMM6EeahHehXumVB-w" role="_gvpnwML6EeaSH8bbL43htA"/>
      </ownedConnector>
      <ownedConnector xmi:id="_T-SaAMM6EeahHehXumVB-w" name="RTConnector6">
        <end xmi:id="_T-VdUMM6EeahHehXumVB-w" partWithPort="_KElJ8MM6EeahHehXumVB-w" role="_3tk9cMM5EeahHehXumVB-w"/>
        <end xmi:id="_T-WEYMM6EeahHehXumVB-w" role="_ieg9UML6EeaSH8bbL43htA"/>
      </ownedConnector>
      <ownedConnector xmi:id="_fBuSQMM6EeahHehXumVB-w" name="RTConnector7">
        <end xmi:id="_fBwHcMM6EeahHehXumVB-w" partWithPort="_ANvnsMM6EeahHehXumVB-w" role="_sK7PEMM4EeahHehXumVB-w"/>
        <end xmi:id="_fBwHccM6EeahHehXumVB-w" partWithPort="_KElJ8MM6EeahHehXumVB-w" role="_VxKF0MM6EeahHehXumVB-w"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_LOPUwML6EeaSH8bbL43htA" name="Bin" classifierBehavior="_SAHMAMMMEeaSH8bbL43htA" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_l2PuIML6EeaSH8bbL43htA" name="enter" visibility="public" type="_Qq5xwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_K51lgMMPEeaSH8bbL43htA" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_K5yiMMMPEeaSH8bbL43htA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_LhdrYML9EeaSH8bbL43htA" name="parcels" type="_aEoEwML7EeaSH8bbL43htA">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_LhdrYcL9EeaSH8bbL43htA"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_LhdrYsL9EeaSH8bbL43htA" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_P-w_UMMMEeaSH8bbL43htA" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_RDKhsPb4EeaMSqHUbqLyYA" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_RDOzIPb4EeaMSqHUbqLyYA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_RDOzIfb4EeaMSqHUbqLyYA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_RDWu8Pb4EeaMSqHUbqLyYA" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_RDWu8fb4EeaMSqHUbqLyYA" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_RDWu8vb4EeaMSqHUbqLyYA" name="Debug__event"/>
      <ownedAttribute xmi:id="_RDeDsPb4EeaMSqHUbqLyYA" name="Debug__SRO"/>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_SAHMAMMMEeaSH8bbL43htA" name="BinStateMachine" isReentrant="false">
        <region xmi:id="_SAKPUMMMEeaSH8bbL43htA" name="Region">
          <transition xmi:id="_SAPH0cMMEeaSH8bbL43htA" name="Initial" source="_RHdy4Pb4EeaMSqHUbqLyYA" target="_SAN5sMMMEeaSH8bbL43htA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JNwIoMX4EeaYV5cb1Zesag">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_YPSEAMMMEeaSH8bbL43htA" name="IDLE__IDLE__8" source="_RHlHoPb4EeaMSqHUbqLyYA" target="_SAN5sMMMEeaSH8bbL43htA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_mJFFYMMMEeaSH8bbL43htA">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::IDLE__IDLE__8&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__8&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

    log.show(&quot;%s received Parcel (%d)\n&quot;, getName(), p.number);
</body>
            </effect>
          </transition>
          <transition xmi:id="_RHdy5fb4EeaMSqHUbqLyYA" name="Debug__Initial" source="_RHu4oPb4EeaMSqHUbqLyYA" target="_RHdy4Pb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHdy5vb4EeaMSqHUbqLyYA" name="Debug__Initial__228">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;transmit&quot;,&quot;transmission&quot;);
Debug__SRO.addTransitionsFromState(&quot;GENERATING&quot;,&quot;&quot;,&quot;GENERATING&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;setSwitch&quot;,&quot;switchProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;reception&quot;,&quot;OCCUPIED&quot;,&quot;transmit&quot;,&quot;transmission&quot;);
Debug__SRO.addTransitionsFromState(&quot;OCCUPIED&quot;,&quot;transmission&quot;,&quot;IDLE&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;OCCUPIED&quot;,&quot;setSwitch&quot;,&quot;switchProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;GENERATING&quot;,&quot;&quot;,&quot;&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),(char *) &quot;&quot;,(char *) &quot;&quot;,(char *) &quot;&quot;,(char *)&quot;&quot;,(char *) &quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_RHu4o_b4EeaMSqHUbqLyYA" name="ConnectionEstablished" port="_RDKhsPb4EeaMSqHUbqLyYA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_RHeZ8Pb4EeaMSqHUbqLyYA" name="Debug__Initial__S" guard="_RHeZ8vb4EeaMSqHUbqLyYA" source="_RHdy4Pb4EeaMSqHUbqLyYA" target="_RHdy4_b4EeaMSqHUbqLyYA">
            <ownedRule xmi:id="_RHeZ8vb4EeaMSqHUbqLyYA" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_RHeZ8fb4EeaMSqHUbqLyYA" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo7&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHfBAPb4EeaMSqHUbqLyYA" name="Debug__Initial__S__230">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RHfBAfb4EeaMSqHUbqLyYA" name="Debug__Initial__E" source="_RHdy5Pb4EeaMSqHUbqLyYA" target="_SAN5sMMMEeaSH8bbL43htA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHfBAvb4EeaMSqHUbqLyYA" name="Debug__Initial__E__232">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RHfoEPb4EeaMSqHUbqLyYA" name="Debug__Initial__dbg" source="_RHdy4fb4EeaMSqHUbqLyYA" target="_RHdy4fb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHfoEvb4EeaMSqHUbqLyYA" name="Debug__Initial__dbg__234">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__Initial__dbg&quot;,(char *)&quot;Debug__C__Initial&quot;,(char *)&quot;Debug__C__Initial&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_RHfoEfb4EeaMSqHUbqLyYA" name="Debug__MSG" port="_RDKhsPb4EeaMSqHUbqLyYA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_RHlHpfb4EeaMSqHUbqLyYA" name="Debug__IDLE__IDLE__8" source="_SAN5sMMMEeaSH8bbL43htA" target="_RHlHoPb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHlusPb4EeaMSqHUbqLyYA" name="Debug__IDLE__IDLE__8__247">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__IDLE__IDLE__8&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__8&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_bX4MoMMMEeaSH8bbL43htA" event="_SR6HoMMBEeaSH8bbL43htA" port="_l2PuIML6EeaSH8bbL43htA"/>
          </transition>
          <transition xmi:id="_RHlusfb4EeaMSqHUbqLyYA" name="Debug__IDLE__IDLE__8__S" guard="_RHlus_b4EeaMSqHUbqLyYA" source="_RHlHoPb4EeaMSqHUbqLyYA" target="_RHlHo_b4EeaMSqHUbqLyYA">
            <ownedRule xmi:id="_RHlus_b4EeaMSqHUbqLyYA" name="Debug__GuardIDLE__IDLE__8">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_RHlusvb4EeaMSqHUbqLyYA" name="Debug__GuardIDLE__IDLE__8">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHmVwPb4EeaMSqHUbqLyYA" name="Debug__IDLE__IDLE__8__S__249">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__IDLE__IDLE__8__S&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__8&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RHmVwfb4EeaMSqHUbqLyYA" name="Debug__IDLE__IDLE__8__E" source="_RHlHpPb4EeaMSqHUbqLyYA" target="_SAN5sMMMEeaSH8bbL43htA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHmVwvb4EeaMSqHUbqLyYA" name="Debug__IDLE__IDLE__8__E__251">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__IDLE__IDLE__8__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RHm80Pb4EeaMSqHUbqLyYA" name="Debug__IDLE__IDLE__8__dbg" source="_RHlHofb4EeaMSqHUbqLyYA" target="_RHlHofb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHm80vb4EeaMSqHUbqLyYA" name="Debug__IDLE__IDLE__8__dbg__253">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__IDLE__IDLE__8__dbg&quot;,(char *)&quot;Debug__C__IDLE__IDLE__8&quot;,(char *)&quot;Debug__C__IDLE__IDLE__8&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_RHm80fb4EeaMSqHUbqLyYA" name="Debug__MSG" port="_RDKhsPb4EeaMSqHUbqLyYA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_RHu4ofb4EeaMSqHUbqLyYA" name="Debug__InitDebug" source="_SAMEgMMMEeaSH8bbL43htA" target="_RHu4oPb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHu4ovb4EeaMSqHUbqLyYA" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
std::string tempS;
std::cout&lt;&lt;&quot;Enter 1 for running in debug mode, any other key for normal model\n&quot;;
std::cin>> tempS;
if (tempS==&quot;1&quot;)
    this->Debug__SRO.setExecMode(Stepping);
else
    this->Debug__SRO.setExecMode(Running);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_SAMEgMMMEeaSH8bbL43htA" name="Pseudo7"/>
          <subvertex xmi:type="uml:State" xmi:id="_SAN5sMMMEeaSH8bbL43htA" name="IDLE">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RHxU4Pb4EeaMSqHUbqLyYA" name="IDLE__268">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);


}</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RHxU4fb4EeaMSqHUbqLyYA" name="IDLE__269">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);


}</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_RHdy4Pb4EeaMSqHUbqLyYA" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_RHdy4fb4EeaMSqHUbqLyYA" name="Debug__C__Initial">
            <connectionPoint xmi:id="_RHdy4_b4EeaMSqHUbqLyYA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_RHdy5Pb4EeaMSqHUbqLyYA" name="ex" kind="exitPoint"/>
            <region xmi:id="_RHdy4vb4EeaMSqHUbqLyYA" name="Region1">
              <transition xmi:id="_RHg2Mvb4EeaMSqHUbqLyYA" name="Debug__init__trans__Initial" source="_RHdy4_b4EeaMSqHUbqLyYA" target="_RHgPIPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHirYPb4EeaMSqHUbqLyYA" name="Debug__init__trans__Initial__239">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_RHg2M_b4EeaMSqHUbqLyYA" name="Debug__Ac__Initial" source="_RHgPIPb4EeaMSqHUbqLyYA" target="_RHgPIvb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHg2Nfb4EeaMSqHUbqLyYA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RHg2NPb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RDKhsPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RHg2Nvb4EeaMSqHUbqLyYA" name="Debug__En__IDLE" source="_RHgPIvb4EeaMSqHUbqLyYA" target="_RHg2MPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHjScPb4EeaMSqHUbqLyYA" name="Debug__En__IDLE__242">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__Initial::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RHg2N_b4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RDKhsPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RHg2OPb4EeaMSqHUbqLyYA" name="Debug__end__trans__Initial" source="_RHg2MPb4EeaMSqHUbqLyYA" target="_RHdy5Pb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHj5gPb4EeaMSqHUbqLyYA" name="Debug__end__trans__Initial__244">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RHhdQPb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RDKhsPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_RHgPIPb4EeaMSqHUbqLyYA" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RHgPIfb4EeaMSqHUbqLyYA" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RHhdQfb4EeaMSqHUbqLyYA" name="Debug__B__Ac__Initial__235">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RHgPIvb4EeaMSqHUbqLyYA" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RHgPI_b4EeaMSqHUbqLyYA" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RHiEUPb4EeaMSqHUbqLyYA" name="Debug__A__Ac__Initial__236">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RHg2MPb4EeaMSqHUbqLyYA" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RHg2Mfb4EeaMSqHUbqLyYA" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RHiEUfb4EeaMSqHUbqLyYA" name="Debug__A__En__Initial__237">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_RHlHoPb4EeaMSqHUbqLyYA" name="Debug__Path__IDLE__IDLE__8" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_RHlHofb4EeaMSqHUbqLyYA" name="Debug__C__IDLE__IDLE__8">
            <connectionPoint xmi:id="_RHlHo_b4EeaMSqHUbqLyYA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_RHlHpPb4EeaMSqHUbqLyYA" name="ex" kind="exitPoint"/>
            <region xmi:id="_RHlHovb4EeaMSqHUbqLyYA" name="Region1">
              <transition xmi:id="_RHoyAvb4EeaMSqHUbqLyYA" name="Debug__init__trans__IDLE__IDLE__8" source="_RHlHo_b4EeaMSqHUbqLyYA" target="_RHnj4Pb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHscYPb4EeaMSqHUbqLyYA" name="Debug__init__trans__IDLE__IDLE__8__259">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__8::Region1::Debug__init__trans__IDLE__IDLE__8&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_RHoyA_b4EeaMSqHUbqLyYA" name="Debug__Ex__IDLE" source="_RHnj4Pb4EeaMSqHUbqLyYA" target="_RHnj4vb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHscYfb4EeaMSqHUbqLyYA" name="Debug__Ex__IDLE__261">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__8::Region1::Debug__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ac__IDLE__IDLE__8&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RHoyBPb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RDKhsPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RHoyBfb4EeaMSqHUbqLyYA" name="Debug__AC__IDLE__IDLE__8" source="_RHnj4vb4EeaMSqHUbqLyYA" target="_RHoK8Pb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHpZEPb4EeaMSqHUbqLyYA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__8::Region1::Debug__AC__IDLE__IDLE__8&quot;,(char *)&quot;Debug__B__Ac__IDLE__IDLE__8&quot;,(char *)&quot;Debug__A__Ac__IDLE__IDLE__8&quot;,(char *)&quot;&quot;);

    log.show(&quot;%s received Parcel (%d)\n&quot;, getName(), p.number);
</body>
                </effect>
                <trigger xmi:id="_RHoyBvb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RDKhsPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RHpZEfb4EeaMSqHUbqLyYA" name="Debug__En__IDLE" source="_RHoK8Pb4EeaMSqHUbqLyYA" target="_RHoyAPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHtqgPb4EeaMSqHUbqLyYA" name="Debug__En__IDLE__264">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__8::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__IDLE__IDLE__8&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RHpZEvb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RDKhsPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RHpZE_b4EeaMSqHUbqLyYA" name="Debug__end__trans__IDLE__IDLE__8" source="_RHoyAPb4EeaMSqHUbqLyYA" target="_RHlHpPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHtqgfb4EeaMSqHUbqLyYA" name="Debug__end__trans__IDLE__IDLE__8__266">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__8::Region1::Debug__end__trans__IDLE__IDLE__8&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RHpZFPb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RDKhsPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_RHnj4Pb4EeaMSqHUbqLyYA" name="Debug__B__Ex__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RHnj4fb4EeaMSqHUbqLyYA" name="Debug__B__Ex__IDLE">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__8::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RHpZFfb4EeaMSqHUbqLyYA" name="Debug__B__Ex__IDLE__254">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__8::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RHnj4vb4EeaMSqHUbqLyYA" name="Debug__B__Ac__IDLE__IDLE__8">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RHnj4_b4EeaMSqHUbqLyYA" name="Debug__B__Ac__IDLE__IDLE__8">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__8::Region1::Debug__B__Ac__IDLE__IDLE__8&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE__IDLE__8&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RHqAIPb4EeaMSqHUbqLyYA" name="Debug__B__Ac__IDLE__IDLE__8__255">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__8::Region1::Debug__B__Ac__IDLE__IDLE__8&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RHoK8Pb4EeaMSqHUbqLyYA" name="Debug__A__Ac__IDLE__IDLE__8">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RHoK8fb4EeaMSqHUbqLyYA" name="Debug__A__Ac__IDLE__IDLE__8">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__8::Region1::Debug__A__Ac__IDLE__IDLE__8&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE__IDLE__8&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RHrOQPb4EeaMSqHUbqLyYA" name="Debug__A__Ac__IDLE__IDLE__8__256">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__8::Region1::Debug__A__Ac__IDLE__IDLE__8&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RHoyAPb4EeaMSqHUbqLyYA" name="Debug__A__En__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RHoyAfb4EeaMSqHUbqLyYA" name="Debug__A__En__IDLE">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__8::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RHr1UPb4EeaMSqHUbqLyYA" name="Debug__A__En__IDLE__257">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__8::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_RHu4oPb4EeaMSqHUbqLyYA" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_RDVg0fb4EeaMSqHUbqLyYA" name="Debug__variablesViewMethod" specification="_RDVg0Pb4EeaMSqHUbqLyYA">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_RDWH5Pb4EeaMSqHUbqLyYA" name="Debug__variablesChange" specification="_RDWH4Pb4EeaMSqHUbqLyYA">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);

    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_RESjFPb4EeaMSqHUbqLyYA" name="Debug__sendEvent" specification="_RD13IPb4EeaMSqHUbqLyYA">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_RDVg0Pb4EeaMSqHUbqLyYA" name="Debug__variablesView" visibility="private" method="_RDVg0fb4EeaMSqHUbqLyYA"/>
      <ownedOperation xmi:id="_RDWH4Pb4EeaMSqHUbqLyYA" name="Debug__variablesChange" visibility="private" method="_RDWH5Pb4EeaMSqHUbqLyYA">
        <ownedParameter xmi:id="_RDWH4fb4EeaMSqHUbqLyYA" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RDWH4vb4EeaMSqHUbqLyYA" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RDWH4_b4EeaMSqHUbqLyYA" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_RD13IPb4EeaMSqHUbqLyYA" name="Debug__sendEvent" visibility="private" method="_RESjFPb4EeaMSqHUbqLyYA">
        <ownedParameter xmi:id="_RD2eMPb4EeaMSqHUbqLyYA" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RD8k0Pb4EeaMSqHUbqLyYA" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_REEgoPb4EeaMSqHUbqLyYA" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RELOUPb4EeaMSqHUbqLyYA" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RELOUfb4EeaMSqHUbqLyYA" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RER8APb4EeaMSqHUbqLyYA" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RESjEPb4EeaMSqHUbqLyYA" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RESjEfb4EeaMSqHUbqLyYA" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RESjEvb4EeaMSqHUbqLyYA" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RESjE_b4EeaMSqHUbqLyYA" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_QrBtkML6EeaSH8bbL43htA" name="transmission">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_Qq5xwML6EeaSH8bbL43htA" name="transmission">
        <interfaceRealization xmi:id="_QrQXEML6EeaSH8bbL43htA" client="_Qq5xwML6EeaSH8bbL43htA" supplier="_QrKQcML6EeaSH8bbL43htA" contract="_QrKQcML6EeaSH8bbL43htA"/>
        <interfaceRealization xmi:id="_QreZgML6EeaSH8bbL43htA" client="_Qq5xwML6EeaSH8bbL43htA" supplier="_QrZhAML6EeaSH8bbL43htA" contract="_QrZhAML6EeaSH8bbL43htA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_QrKQcML6EeaSH8bbL43htA" name="transmission"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_QrSzUML6EeaSH8bbL43htA" name="transmission~">
        <ownedOperation xmi:id="_PIeRgMMBEeaSH8bbL43htA" name="transmit">
          <ownedParameter xmi:id="_QFxAMMMBEeaSH8bbL43htA" name="p" type="_aEoEwML7EeaSH8bbL43htA"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_QrXr0ML6EeaSH8bbL43htA" client="_Qq5xwML6EeaSH8bbL43htA" supplier="_QrSzUML6EeaSH8bbL43htA"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_QrY58ML6EeaSH8bbL43htA" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_QrZhAML6EeaSH8bbL43htA" name="transmissionIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_QrfnoML6EeaSH8bbL43htA" client="_Qq5xwML6EeaSH8bbL43htA" supplier="_QrZhAML6EeaSH8bbL43htA"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_SR6HoMMBEeaSH8bbL43htA" operation="_PIeRgMMBEeaSH8bbL43htA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_aEoEwML7EeaSH8bbL43htA" name="Parcel">
      <ownedAttribute xmi:id="_cj_qMML7EeaSH8bbL43htA" name="number" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_2upQ0MMJEeaSH8bbL43htA" name="level">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_wiSxYMMLEeaSH8bbL43htA" value="2"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_BxJI8N5pEeakB9CQglrL_g" name="stage" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_jvOOEMM4EeahHehXumVB-w" name="Chute" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_p1u5UMM4EeahHehXumVB-w" name="enter" visibility="public" type="_Qq5xwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_sK7PEMM4EeahHehXumVB-w" name="exit" visibility="public" type="_Qq5xwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_v-KQIMM4EeahHehXumVB-w" name="detection" visibility="public" type="_wvKPQMM4EeahHehXumVB-w" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:id="_4iC8wMM4EeahHehXumVB-w" name="parcel" type="_aEoEwML7EeaSH8bbL43htA">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_8_D6oMM4EeahHehXumVB-w"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_8_HlAMM4EeahHehXumVB-w" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_qxGOYMX2EeaYV5cb1Zesag" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_WbYyIMX5EeaYV5cb1Zesag" name="timer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_oc-oIMYhEeaYV5cb1Zesag" name="delay">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_1Wbm0MYhEeaYV5cb1Zesag" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_RAPJgPb4EeaMSqHUbqLyYA" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_RATa8fb4EeaMSqHUbqLyYA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_RATa8vb4EeaMSqHUbqLyYA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_RAdzAPb4EeaMSqHUbqLyYA" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_RAdzAfb4EeaMSqHUbqLyYA" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_RAdzAvb4EeaMSqHUbqLyYA" name="Debug__event"/>
      <ownedAttribute xmi:id="_RAlu0Pb4EeaMSqHUbqLyYA" name="Debug__SRO"/>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_mXBE0MM6EeahHehXumVB-w" name="ChuteStateMachine" isReentrant="false">
        <region xmi:id="_mXBE0cM6EeahHehXumVB-w" name="Region">
          <transition xmi:id="_mXBE0sM6EeahHehXumVB-w" name="Initial" source="_RFgEAPb4EeaMSqHUbqLyYA" target="_mXBE2MM6EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RFnYwPb4EeaMSqHUbqLyYA" name="Initial__22">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_mXBE1MM6EeahHehXumVB-w" name="reception" source="_RFn_0Pb4EeaMSqHUbqLyYA" target="_k2uPwMX4EeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_mXBE1cM6EeahHehXumVB-w">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::reception&quot;,(char *)&quot;Debug__Path__reception&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;&quot;);

    this->parcel = Parcel();
    this->parcel.number = p.number;
    this->parcel.level = p.level;
    this->parcel.stage = p.stage;
    log.show(&quot;Chute %s of stage %d becomes occupied\n&quot;, this->getName(), p.stage);
    timer.informIn(UMLRTTimespec(this->delay,0));
</body>
            </effect>
          </transition>
          <transition xmi:id="_9Jw84MX4EeaYV5cb1Zesag" name="transmission" source="_RFxw0Pb4EeaMSqHUbqLyYA" target="_mXBE2MM6EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_aOTjAPPAEeajSJ5GKhFEgA">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::transmission&quot;,(char *)&quot;Debug__Path__transmission&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

    detection.detect(this->parcel).send();
    exit.transmit(this->parcel).send();
    log.show(&quot;Chute %s of stage %d is now free\n&quot;, this->getName(), this->parcel.stage);
</body>
            </effect>
          </transition>
          <transition xmi:id="_RFgrEvb4EeaMSqHUbqLyYA" name="Debug__Initial" source="_RF8I4Pb4EeaMSqHUbqLyYA" target="_RFgEAPb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RFgrE_b4EeaMSqHUbqLyYA" name="Debug__Initial__3">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;reception&quot;,&quot;OCCUPIED&quot;,&quot;transmit&quot;,&quot;transmission&quot;);
Debug__SRO.addTransitionsFromState(&quot;OCCUPIED&quot;,&quot;transmission&quot;,&quot;IDLE&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),(char *) &quot;&quot;,(char *) &quot;&quot;,(char *) &quot;&quot;,(char *)&quot;&quot;,(char *) &quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_RF8I4_b4EeaMSqHUbqLyYA" name="ConnectionEstablished" port="_RAPJgPb4EeaMSqHUbqLyYA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_RFhSIPb4EeaMSqHUbqLyYA" name="Debug__Initial__S" guard="_RFhSIvb4EeaMSqHUbqLyYA" source="_RFgEAPb4EeaMSqHUbqLyYA" target="_RFgrEPb4EeaMSqHUbqLyYA">
            <ownedRule xmi:id="_RFhSIvb4EeaMSqHUbqLyYA" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_RFhSIfb4EeaMSqHUbqLyYA" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo1&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RFhSI_b4EeaMSqHUbqLyYA" name="Debug__Initial__S__5">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RFh5MPb4EeaMSqHUbqLyYA" name="Debug__Initial__E" source="_RFgrEfb4EeaMSqHUbqLyYA" target="_mXBE2MM6EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RFh5Mfb4EeaMSqHUbqLyYA" name="Debug__Initial__E__7">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RFh5Mvb4EeaMSqHUbqLyYA" name="Debug__Initial__dbg" source="_RFgEAfb4EeaMSqHUbqLyYA" target="_RFgEAfb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RFigQfb4EeaMSqHUbqLyYA" name="Debug__Initial__dbg__9">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__Initial__dbg&quot;,(char *)&quot;Debug__C__Initial&quot;,(char *)&quot;Debug__C__Initial&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_RFigQPb4EeaMSqHUbqLyYA" name="Debug__MSG" port="_RAPJgPb4EeaMSqHUbqLyYA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_RFom4Pb4EeaMSqHUbqLyYA" name="Debug__reception" source="_mXBE2MM6EeahHehXumVB-w" target="_RFn_0Pb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RFom4fb4EeaMSqHUbqLyYA" name="Debug__reception__24">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__reception&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;Debug__Path__reception&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_mXBE1sM6EeahHehXumVB-w" event="_SR6HoMMBEeaSH8bbL43htA" port="_p1u5UMM4EeahHehXumVB-w"/>
          </transition>
          <transition xmi:id="_RFpN8Pb4EeaMSqHUbqLyYA" name="Debug__reception__S" guard="_RFpN8vb4EeaMSqHUbqLyYA" source="_RFn_0Pb4EeaMSqHUbqLyYA" target="_RFn_0_b4EeaMSqHUbqLyYA">
            <ownedRule xmi:id="_RFpN8vb4EeaMSqHUbqLyYA" name="Debug__Guardreception">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_RFpN8fb4EeaMSqHUbqLyYA" name="Debug__Guardreception">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RFpN8_b4EeaMSqHUbqLyYA" name="Debug__reception__S__26">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__reception__S&quot;,(char *)&quot;Debug__Path__reception&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RFp1APb4EeaMSqHUbqLyYA" name="Debug__reception__E" source="_RFn_1Pb4EeaMSqHUbqLyYA" target="_k2uPwMX4EeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RFp1Afb4EeaMSqHUbqLyYA" name="Debug__reception__E__28">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__reception__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RFp1Avb4EeaMSqHUbqLyYA" name="Debug__reception__dbg" source="_RFn_0fb4EeaMSqHUbqLyYA" target="_RFn_0fb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RFqcEPb4EeaMSqHUbqLyYA" name="Debug__reception__dbg__30">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__reception__dbg&quot;,(char *)&quot;Debug__C__reception&quot;,(char *)&quot;Debug__C__reception&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_RFp1A_b4EeaMSqHUbqLyYA" name="Debug__MSG" port="_RAPJgPb4EeaMSqHUbqLyYA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_RFxw1fb4EeaMSqHUbqLyYA" name="Debug__transmission" source="_k2uPwMX4EeaYV5cb1Zesag" target="_RFxw0Pb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RFyX4Pb4EeaMSqHUbqLyYA" name="Debug__transmission__46">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__transmission&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;Debug__Path__transmission&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_w7wScMX5EeaYV5cb1Zesag" port="_WbYyIMX5EeaYV5cb1Zesag">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_RFyX4fb4EeaMSqHUbqLyYA" name="Debug__transmission__S" guard="_RFy-8fb4EeaMSqHUbqLyYA" source="_RFxw0Pb4EeaMSqHUbqLyYA" target="_RFxw0_b4EeaMSqHUbqLyYA">
            <ownedRule xmi:id="_RFy-8fb4EeaMSqHUbqLyYA" name="Debug__Guardtransmission">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_RFy-8Pb4EeaMSqHUbqLyYA" name="Debug__Guardtransmission">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RFy-8vb4EeaMSqHUbqLyYA" name="Debug__transmission__S__48">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__transmission__S&quot;,(char *)&quot;Debug__Path__transmission&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RFzmAPb4EeaMSqHUbqLyYA" name="Debug__transmission__E" source="_RFxw1Pb4EeaMSqHUbqLyYA" target="_mXBE2MM6EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RFzmAfb4EeaMSqHUbqLyYA" name="Debug__transmission__E__50">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__transmission__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RF0NEPb4EeaMSqHUbqLyYA" name="Debug__transmission__dbg" source="_RFxw0fb4EeaMSqHUbqLyYA" target="_RFxw0fb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RF0NEvb4EeaMSqHUbqLyYA" name="Debug__transmission__dbg__52">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__transmission__dbg&quot;,(char *)&quot;Debug__C__transmission&quot;,(char *)&quot;Debug__C__transmission&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_RF0NEfb4EeaMSqHUbqLyYA" name="Debug__MSG" port="_RAPJgPb4EeaMSqHUbqLyYA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_RF8I4fb4EeaMSqHUbqLyYA" name="Debug__InitDebug" source="_mXBE18M6EeahHehXumVB-w" target="_RF8I4Pb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RF8I4vb4EeaMSqHUbqLyYA" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
std::string tempS;
std::cout&lt;&lt;&quot;Enter 1 for running in debug mode, any other key for normal model\n&quot;;
std::cin>> tempS;
if (tempS==&quot;1&quot;)
    this->Debug__SRO.setExecMode(Stepping);
else
    this->Debug__SRO.setExecMode(Running);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_mXBE18M6EeahHehXumVB-w" name="Pseudo1"/>
          <subvertex xmi:type="uml:State" xmi:id="_mXBE2MM6EeahHehXumVB-w" name="IDLE">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RF9XAPb4EeaMSqHUbqLyYA" name="IDLE__67">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);


}</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RF9XAfb4EeaMSqHUbqLyYA" name="IDLE__68">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);


}</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_k2uPwMX4EeaYV5cb1Zesag" name="OCCUPIED">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RF-lIPb4EeaMSqHUbqLyYA" name="OCCUPIED__69">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);


}</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RF-lIfb4EeaMSqHUbqLyYA" name="OCCUPIED__70">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);


}</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_RFgEAPb4EeaMSqHUbqLyYA" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_RFgEAfb4EeaMSqHUbqLyYA" name="Debug__C__Initial">
            <connectionPoint xmi:id="_RFgrEPb4EeaMSqHUbqLyYA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_RFgrEfb4EeaMSqHUbqLyYA" name="ex" kind="exitPoint"/>
            <region xmi:id="_RFgEAvb4EeaMSqHUbqLyYA" name="Region1">
              <transition xmi:id="_RFjuYvb4EeaMSqHUbqLyYA" name="Debug__init__trans__Initial" source="_RFgrEPb4EeaMSqHUbqLyYA" target="_RFjHUPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RFljkfb4EeaMSqHUbqLyYA" name="Debug__init__trans__Initial__14">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_RFjuY_b4EeaMSqHUbqLyYA" name="Debug__Ac__Initial" source="_RFjHUPb4EeaMSqHUbqLyYA" target="_RFjHUvb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RFmKoPb4EeaMSqHUbqLyYA" name="Debug__Ac__Initial__16">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RFjuZPb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RAPJgPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RFjuZfb4EeaMSqHUbqLyYA" name="Debug__En__IDLE" source="_RFjHUvb4EeaMSqHUbqLyYA" target="_RFjuYPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RFmxsPb4EeaMSqHUbqLyYA" name="Debug__En__IDLE__18">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__Initial::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RFjuZvb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RAPJgPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RFjuZ_b4EeaMSqHUbqLyYA" name="Debug__end__trans__Initial" source="_RFjuYPb4EeaMSqHUbqLyYA" target="_RFgrEfb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RFmxsfb4EeaMSqHUbqLyYA" name="Debug__end__trans__Initial__20">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RFjuaPb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RAPJgPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_RFjHUPb4EeaMSqHUbqLyYA" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RFjHUfb4EeaMSqHUbqLyYA" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RFkVcPb4EeaMSqHUbqLyYA" name="Debug__B__Ac__Initial__10">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RFjHUvb4EeaMSqHUbqLyYA" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RFjHU_b4EeaMSqHUbqLyYA" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RFk8gPb4EeaMSqHUbqLyYA" name="Debug__A__Ac__Initial__11">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RFjuYPb4EeaMSqHUbqLyYA" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RFjuYfb4EeaMSqHUbqLyYA" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RFljkPb4EeaMSqHUbqLyYA" name="Debug__A__En__Initial__12">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_RFn_0Pb4EeaMSqHUbqLyYA" name="Debug__Path__reception" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_RFn_0fb4EeaMSqHUbqLyYA" name="Debug__C__reception">
            <connectionPoint xmi:id="_RFn_0_b4EeaMSqHUbqLyYA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_RFn_1Pb4EeaMSqHUbqLyYA" name="ex" kind="exitPoint"/>
            <region xmi:id="_RFn_0vb4EeaMSqHUbqLyYA" name="Region1">
              <transition xmi:id="_RFrqMvb4EeaMSqHUbqLyYA" name="Debug__init__trans__reception" source="_RFn_0_b4EeaMSqHUbqLyYA" target="_RFqcEfb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RFuGcfb4EeaMSqHUbqLyYA" name="Debug__init__trans__reception__36">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__init__trans__reception&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_RFrqM_b4EeaMSqHUbqLyYA" name="Debug__Ex__IDLE" source="_RFqcEfb4EeaMSqHUbqLyYA" target="_RFrDIPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RFutgPb4EeaMSqHUbqLyYA" name="Debug__Ex__IDLE__38">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ac__reception&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RFrqNPb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RAPJgPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RFrqNfb4EeaMSqHUbqLyYA" name="Debug__AC__reception" source="_RFrDIPb4EeaMSqHUbqLyYA" target="_RFrDIvb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RFrqN_b4EeaMSqHUbqLyYA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__AC__reception&quot;,(char *)&quot;Debug__B__Ac__reception&quot;,(char *)&quot;Debug__A__Ac__reception&quot;,(char *)&quot;&quot;);

    this->parcel = Parcel();
    this->parcel.number = p.number;
    this->parcel.level = p.level;
    this->parcel.stage = p.stage;
    log.show(&quot;Chute %s of stage %d becomes occupied\n&quot;, this->getName(), p.stage);
    timer.informIn(UMLRTTimespec(this->delay,0));
</body>
                </effect>
                <trigger xmi:id="_RFrqNvb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RAPJgPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RFrqOPb4EeaMSqHUbqLyYA" name="Debug__En__OCCUPIED" source="_RFrDIvb4EeaMSqHUbqLyYA" target="_RFrqMPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RFv7oPb4EeaMSqHUbqLyYA" name="Debug__En__OCCUPIED__41">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__En__OCCUPIED&quot;,(char *)&quot;Debug__A__Ac__reception&quot;,(char *)&quot;Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RFsRQPb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RAPJgPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RFsRQfb4EeaMSqHUbqLyYA" name="Debug__end__trans__reception" source="_RFrqMPb4EeaMSqHUbqLyYA" target="_RFn_1Pb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RFwisPb4EeaMSqHUbqLyYA" name="Debug__end__trans__reception__43">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__end__trans__reception&quot;,(char *)&quot;Debug__A__En__OCCUPIED&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RFsRQvb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RAPJgPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_RFqcEfb4EeaMSqHUbqLyYA" name="Debug__B__Ex__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RFqcEvb4EeaMSqHUbqLyYA" name="Debug__B__Ex__IDLE">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RFsRQ_b4EeaMSqHUbqLyYA" name="Debug__B__Ex__IDLE__31">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RFrDIPb4EeaMSqHUbqLyYA" name="Debug__B__Ac__reception">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RFrDIfb4EeaMSqHUbqLyYA" name="Debug__B__Ac__reception">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__B__Ac__reception&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;reception&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RFs4UPb4EeaMSqHUbqLyYA" name="Debug__B__Ac__reception__32">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__B__Ac__reception&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RFrDIvb4EeaMSqHUbqLyYA" name="Debug__A__Ac__reception">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RFrDI_b4EeaMSqHUbqLyYA" name="Debug__A__Ac__reception">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__A__Ac__reception&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;reception&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RFtfYPb4EeaMSqHUbqLyYA" name="Debug__A__Ac__reception__33">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__A__Ac__reception&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RFrqMPb4EeaMSqHUbqLyYA" name="Debug__A__En__OCCUPIED">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RFrqMfb4EeaMSqHUbqLyYA" name="Debug__A__En__OCCUPIED">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RFuGcPb4EeaMSqHUbqLyYA" name="Debug__A__En__OCCUPIED__34">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_RFxw0Pb4EeaMSqHUbqLyYA" name="Debug__Path__transmission" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_RFxw0fb4EeaMSqHUbqLyYA" name="Debug__C__transmission">
            <connectionPoint xmi:id="_RFxw0_b4EeaMSqHUbqLyYA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_RFxw1Pb4EeaMSqHUbqLyYA" name="ex" kind="exitPoint"/>
            <region xmi:id="_RFxw0vb4EeaMSqHUbqLyYA" name="Region1">
              <transition xmi:id="_RF2CQvb4EeaMSqHUbqLyYA" name="Debug__init__trans__transmission" source="_RFxw0_b4EeaMSqHUbqLyYA" target="_RF00IPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RF5FkPb4EeaMSqHUbqLyYA" name="Debug__init__trans__transmission__58">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__transmission::Region1::Debug__init__trans__transmission&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_RF2CQ_b4EeaMSqHUbqLyYA" name="Debug__Ex__OCCUPIED" source="_RF00IPb4EeaMSqHUbqLyYA" target="_RF00Ivb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RF5soPb4EeaMSqHUbqLyYA" name="Debug__Ex__OCCUPIED__60">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__transmission::Region1::Debug__Ex__OCCUPIED&quot;,(char *)&quot;Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;Debug__B__Ac__transmission&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RF2CRPb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RAPJgPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RF2CRfb4EeaMSqHUbqLyYA" name="Debug__AC__transmission" source="_RF00Ivb4EeaMSqHUbqLyYA" target="_RF1bMPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RF2CR_b4EeaMSqHUbqLyYA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__transmission::Region1::Debug__AC__transmission&quot;,(char *)&quot;Debug__B__Ac__transmission&quot;,(char *)&quot;Debug__A__Ac__transmission&quot;,(char *)&quot;&quot;);

    detection.detect(this->parcel).send();
    exit.transmit(this->parcel).send();
    log.show(&quot;Chute %s of stage %d is now free\n&quot;, this->getName(), this->parcel.stage);
</body>
                </effect>
                <trigger xmi:id="_RF2CRvb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RAPJgPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RF2pUPb4EeaMSqHUbqLyYA" name="Debug__En__IDLE" source="_RF1bMPb4EeaMSqHUbqLyYA" target="_RF2CQPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RF6TsPb4EeaMSqHUbqLyYA" name="Debug__En__IDLE__63">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__transmission::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__transmission&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RF2pUfb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RAPJgPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RF2pUvb4EeaMSqHUbqLyYA" name="Debug__end__trans__transmission" source="_RF2CQPb4EeaMSqHUbqLyYA" target="_RFxw1Pb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RF66wPb4EeaMSqHUbqLyYA" name="Debug__end__trans__transmission__65">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__transmission::Region1::Debug__end__trans__transmission&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RF2pU_b4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RAPJgPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_RF00IPb4EeaMSqHUbqLyYA" name="Debug__B__Ex__OCCUPIED">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RF00Ifb4EeaMSqHUbqLyYA" name="Debug__B__Ex__OCCUPIED">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__transmission::Region1::Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RF2pVPb4EeaMSqHUbqLyYA" name="Debug__B__Ex__OCCUPIED__53">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__transmission::Region1::Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RF00Ivb4EeaMSqHUbqLyYA" name="Debug__B__Ac__transmission">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RF00I_b4EeaMSqHUbqLyYA" name="Debug__B__Ac__transmission">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__transmission::Region1::Debug__B__Ac__transmission&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;transmission&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RF3QYPb4EeaMSqHUbqLyYA" name="Debug__B__Ac__transmission__54">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__transmission::Region1::Debug__B__Ac__transmission&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RF1bMPb4EeaMSqHUbqLyYA" name="Debug__A__Ac__transmission">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RF1bMfb4EeaMSqHUbqLyYA" name="Debug__A__Ac__transmission">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__transmission::Region1::Debug__A__Ac__transmission&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;transmission&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RF33cPb4EeaMSqHUbqLyYA" name="Debug__A__Ac__transmission__55">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__transmission::Region1::Debug__A__Ac__transmission&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RF2CQPb4EeaMSqHUbqLyYA" name="Debug__A__En__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RF2CQfb4EeaMSqHUbqLyYA" name="Debug__A__En__IDLE">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__transmission::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RF4egPb4EeaMSqHUbqLyYA" name="Debug__A__En__IDLE__56">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__transmission::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_RF8I4Pb4EeaMSqHUbqLyYA" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_RAck4Pb4EeaMSqHUbqLyYA" name="Debug__variablesViewMethod" specification="_RAb90Pb4EeaMSqHUbqLyYA">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;delay,&quot;);
tempS.append(&quot;Integer,&quot;);
if(delay!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,delay);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_RAdL9Pb4EeaMSqHUbqLyYA" name="Debug__variablesChange" specification="_RAdL8Pb4EeaMSqHUbqLyYA">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;delay&quot;==tempVarName){
    delay=atoi(varValue);
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_RBpexPb4EeaMSqHUbqLyYA" name="Debug__sendEvent" specification="_RBDo4Pb4EeaMSqHUbqLyYA">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_RAb90Pb4EeaMSqHUbqLyYA" name="Debug__variablesView" visibility="private" method="_RAck4Pb4EeaMSqHUbqLyYA"/>
      <ownedOperation xmi:id="_RAdL8Pb4EeaMSqHUbqLyYA" name="Debug__variablesChange" visibility="private" method="_RAdL9Pb4EeaMSqHUbqLyYA">
        <ownedParameter xmi:id="_RAdL8fb4EeaMSqHUbqLyYA" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RAdL8vb4EeaMSqHUbqLyYA" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RAdL8_b4EeaMSqHUbqLyYA" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_RBDo4Pb4EeaMSqHUbqLyYA" name="Debug__sendEvent" visibility="private" method="_RBpexPb4EeaMSqHUbqLyYA">
        <ownedParameter xmi:id="_RBEP8Pb4EeaMSqHUbqLyYA" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RBOA8Pb4EeaMSqHUbqLyYA" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RBV8wPb4EeaMSqHUbqLyYA" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RBgU0Pb4EeaMSqHUbqLyYA" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RBg74Pb4EeaMSqHUbqLyYA" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RBo3sPb4EeaMSqHUbqLyYA" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RBpewPb4EeaMSqHUbqLyYA" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RBpewfb4EeaMSqHUbqLyYA" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RBpewvb4EeaMSqHUbqLyYA" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RBpew_b4EeaMSqHUbqLyYA" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_wvPHwMM4EeahHehXumVB-w" name="detection">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_wvKPQMM4EeahHehXumVB-w" name="detection">
        <interfaceRealization xmi:id="_wvat8MM4EeahHehXumVB-w" client="_wvKPQMM4EeahHehXumVB-w" supplier="_wvV1cMM4EeahHehXumVB-w" contract="_wvV1cMM4EeahHehXumVB-w"/>
        <interfaceRealization xmi:id="_wvltEMM4EeahHehXumVB-w" client="_wvKPQMM4EeahHehXumVB-w" supplier="_wviCsMM4EeahHehXumVB-w" contract="_wviCsMM4EeahHehXumVB-w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_wvV1cMM4EeahHehXumVB-w" name="detection"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_wvcjIMM4EeahHehXumVB-w" name="detection~">
        <ownedOperation xmi:id="_F05S4MM5EeahHehXumVB-w" name="detect">
          <ownedParameter xmi:id="_G2MX0MM5EeahHehXumVB-w" name="p" type="_aEoEwML7EeaSH8bbL43htA"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_wvgNgMM4EeahHehXumVB-w" client="_wvKPQMM4EeahHehXumVB-w" supplier="_wvcjIMM4EeahHehXumVB-w"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_wvhboMM4EeahHehXumVB-w" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_wviCsMM4EeahHehXumVB-w" name="detectionIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_wvmUIMM4EeahHehXumVB-w" client="_wvKPQMM4EeahHehXumVB-w" supplier="_wviCsMM4EeahHehXumVB-w"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Mh59cMM5EeahHehXumVB-w" operation="_F05S4MM5EeahHehXumVB-w"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_AJLGMMM5EeahHehXumVB-w" name="Sensor" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_CHUN4MM5EeahHehXumVB-w" name="detection" visibility="public" type="_wvKPQMM4EeahHehXumVB-w" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_m5dgAMM5EeahHehXumVB-w" name="switchProtocol" visibility="public" type="_RDbn4MM5EeahHehXumVB-w" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_uL2LsMM9EeahHehXumVB-w" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_Q-3QgPb4EeaMSqHUbqLyYA" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Q-7h8fb4EeaMSqHUbqLyYA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_Q-7h8vb4EeaMSqHUbqLyYA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_Q_FS9Pb4EeaMSqHUbqLyYA" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_Q_F6APb4EeaMSqHUbqLyYA" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_Q_F6Afb4EeaMSqHUbqLyYA" name="Debug__event"/>
      <ownedAttribute xmi:id="_Q_NOwPb4EeaMSqHUbqLyYA" name="Debug__SRO"/>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_IdCu8MM7EeahHehXumVB-w" name="SensorStateMachine" isReentrant="false">
        <region xmi:id="_IdCu8cM7EeahHehXumVB-w" name="Region">
          <transition xmi:id="_IdDWAMM7EeahHehXumVB-w" name="Initial" source="_RH_-YPb4EeaMSqHUbqLyYA" target="_IdDWBsM7EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RIGsEPb4EeaMSqHUbqLyYA" name="Initial__312">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IdDWAsM7EeahHehXumVB-w" name="IDLE__IDLE__9" source="_RHzKEPb4EeaMSqHUbqLyYA" target="_IdDWBsM7EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IdDWA8M7EeahHehXumVB-w">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::IDLE__IDLE__9&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__9&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

    int reducedNumber = p.number/p.level; 
    int isOdd = reducedNumber % 2;
    if (isOdd == 0) {
    log.show(&quot;At stage %s (%d), turn left.\n&quot;, getName(), p.level);
    switchProtocol.setSwitch(0).send();
    }
    else {
    log.show(&quot;At stage %s (%d), turn right.\n&quot;, getName(), p.level);
    switchProtocol.setSwitch(1).send();
    }
</body>
            </effect>
          </transition>
          <transition xmi:id="_RHzxJPb4EeaMSqHUbqLyYA" name="Debug__IDLE__IDLE__9" source="_IdDWBsM7EeahHehXumVB-w" target="_RHzKEPb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHzxJfb4EeaMSqHUbqLyYA" name="Debug__IDLE__IDLE__9__271">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__IDLE__IDLE__9&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__9&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_PGM0QMM7EeahHehXumVB-w" event="_Mh59cMM5EeahHehXumVB-w" port="_CHUN4MM5EeahHehXumVB-w"/>
          </transition>
          <transition xmi:id="_RH0YMPb4EeaMSqHUbqLyYA" name="Debug__IDLE__IDLE__9__S" guard="_RH0YMvb4EeaMSqHUbqLyYA" source="_RHzKEPb4EeaMSqHUbqLyYA" target="_RHzxIvb4EeaMSqHUbqLyYA">
            <ownedRule xmi:id="_RH0YMvb4EeaMSqHUbqLyYA" name="Debug__GuardIDLE__IDLE__9">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_RH0YMfb4EeaMSqHUbqLyYA" name="Debug__GuardIDLE__IDLE__9">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RH0YM_b4EeaMSqHUbqLyYA" name="Debug__IDLE__IDLE__9__S__273">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__IDLE__IDLE__9__S&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__9&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RH0_QPb4EeaMSqHUbqLyYA" name="Debug__IDLE__IDLE__9__E" source="_RHzxI_b4EeaMSqHUbqLyYA" target="_IdDWBsM7EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RH0_Qfb4EeaMSqHUbqLyYA" name="Debug__IDLE__IDLE__9__E__275">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__IDLE__IDLE__9__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RH1mUPb4EeaMSqHUbqLyYA" name="Debug__IDLE__IDLE__9__dbg" source="_RHzxIPb4EeaMSqHUbqLyYA" target="_RHzxIPb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RH1mUvb4EeaMSqHUbqLyYA" name="Debug__IDLE__IDLE__9__dbg__277">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__IDLE__IDLE__9__dbg&quot;,(char *)&quot;Debug__C__IDLE__IDLE__9&quot;,(char *)&quot;Debug__C__IDLE__IDLE__9&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_RH1mUfb4EeaMSqHUbqLyYA" name="Debug__MSG" port="_Q-3QgPb4EeaMSqHUbqLyYA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_RH_-Zfb4EeaMSqHUbqLyYA" name="Debug__Initial" source="_RIHTIPb4EeaMSqHUbqLyYA" target="_RH_-YPb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RH_-Zvb4EeaMSqHUbqLyYA" name="Debug__Initial__293">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;transmit&quot;,&quot;transmission&quot;);
Debug__SRO.addTransitionsFromState(&quot;GENERATING&quot;,&quot;&quot;,&quot;GENERATING&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;setSwitch&quot;,&quot;switchProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;reception&quot;,&quot;OCCUPIED&quot;,&quot;transmit&quot;,&quot;transmission&quot;);
Debug__SRO.addTransitionsFromState(&quot;OCCUPIED&quot;,&quot;transmission&quot;,&quot;IDLE&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;OCCUPIED&quot;,&quot;setSwitch&quot;,&quot;switchProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;detect&quot;,&quot;detection&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;GENERATING&quot;,&quot;&quot;,&quot;&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),(char *) &quot;&quot;,(char *) &quot;&quot;,(char *) &quot;&quot;,(char *)&quot;&quot;,(char *) &quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_RIH6MPb4EeaMSqHUbqLyYA" name="ConnectionEstablished" port="_Q-3QgPb4EeaMSqHUbqLyYA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_RIAlcPb4EeaMSqHUbqLyYA" name="Debug__Initial__S" guard="_RIAlcvb4EeaMSqHUbqLyYA" source="_RH_-YPb4EeaMSqHUbqLyYA" target="_RH_-Y_b4EeaMSqHUbqLyYA">
            <ownedRule xmi:id="_RIAlcvb4EeaMSqHUbqLyYA" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_RIAlcfb4EeaMSqHUbqLyYA" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo10&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RIAlc_b4EeaMSqHUbqLyYA" name="Debug__Initial__S__295">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RIBMgPb4EeaMSqHUbqLyYA" name="Debug__Initial__E" source="_RH_-ZPb4EeaMSqHUbqLyYA" target="_IdDWBsM7EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RIBMgfb4EeaMSqHUbqLyYA" name="Debug__Initial__E__297">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RIBzkPb4EeaMSqHUbqLyYA" name="Debug__Initial__dbg" source="_RH_-Yfb4EeaMSqHUbqLyYA" target="_RH_-Yfb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RIBzkvb4EeaMSqHUbqLyYA" name="Debug__Initial__dbg__299">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__Initial__dbg&quot;,(char *)&quot;Debug__C__Initial&quot;,(char *)&quot;Debug__C__Initial&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_RIBzkfb4EeaMSqHUbqLyYA" name="Debug__MSG" port="_Q-3QgPb4EeaMSqHUbqLyYA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_RIHTIfb4EeaMSqHUbqLyYA" name="Debug__InitDebug" source="_IdDWBcM7EeahHehXumVB-w" target="_RIHTIPb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RIHTIvb4EeaMSqHUbqLyYA" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
std::string tempS;
std::cout&lt;&lt;&quot;Enter 1 for running in debug mode, any other key for normal model\n&quot;;
std::cin>> tempS;
if (tempS==&quot;1&quot;)
    this->Debug__SRO.setExecMode(Stepping);
else
    this->Debug__SRO.setExecMode(Running);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_IdDWBcM7EeahHehXumVB-w" name="Pseudo10"/>
          <subvertex xmi:type="uml:State" xmi:id="_IdDWBsM7EeahHehXumVB-w" name="IDLE">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RIKWcPb4EeaMSqHUbqLyYA" name="IDLE__313">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);


}</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RIKWcfb4EeaMSqHUbqLyYA" name="IDLE__314">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);


}</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_RHzKEPb4EeaMSqHUbqLyYA" name="Debug__Path__IDLE__IDLE__9" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_RHzxIPb4EeaMSqHUbqLyYA" name="Debug__C__IDLE__IDLE__9">
            <connectionPoint xmi:id="_RHzxIvb4EeaMSqHUbqLyYA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_RHzxI_b4EeaMSqHUbqLyYA" name="ex" kind="exitPoint"/>
            <region xmi:id="_RHzxIfb4EeaMSqHUbqLyYA" name="Region1">
              <transition xmi:id="_RH3bgPb4EeaMSqHUbqLyYA" name="Debug__init__trans__IDLE__IDLE__9" source="_RHzxIvb4EeaMSqHUbqLyYA" target="_RH1mU_b4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RH87EPb4EeaMSqHUbqLyYA" name="Debug__init__trans__IDLE__IDLE__9__283">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__init__trans__IDLE__IDLE__9&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_RH3bgfb4EeaMSqHUbqLyYA" name="Debug__Ex__IDLE" source="_RH1mU_b4EeaMSqHUbqLyYA" target="_RH2NYPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RH9iIPb4EeaMSqHUbqLyYA" name="Debug__Ex__IDLE__285">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ac__IDLE__IDLE__9&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RH3bgvb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_Q-3QgPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RH3bg_b4EeaMSqHUbqLyYA" name="Debug__AC__IDLE__IDLE__9" source="_RH2NYPb4EeaMSqHUbqLyYA" target="_RH2NYvb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RH3bhfb4EeaMSqHUbqLyYA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__AC__IDLE__IDLE__9&quot;,(char *)&quot;Debug__B__Ac__IDLE__IDLE__9&quot;,(char *)&quot;Debug__A__Ac__IDLE__IDLE__9&quot;,(char *)&quot;&quot;);

    int reducedNumber = p.number/p.level; 
    int isOdd = reducedNumber % 2;
    if (isOdd == 0) {
    log.show(&quot;At stage %s (%d), turn left.\n&quot;, getName(), p.level);
    switchProtocol.setSwitch(0).send();
    }
    else {
    log.show(&quot;At stage %s (%d), turn right.\n&quot;, getName(), p.level);
    switchProtocol.setSwitch(1).send();
    }
</body>
                </effect>
                <trigger xmi:id="_RH3bhPb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_Q-3QgPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RH3bhvb4EeaMSqHUbqLyYA" name="Debug__En__IDLE" source="_RH2NYvb4EeaMSqHUbqLyYA" target="_RH20cPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RH-JMPb4EeaMSqHUbqLyYA" name="Debug__En__IDLE__288">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__IDLE__IDLE__9&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RH3bh_b4EeaMSqHUbqLyYA" name="Debug__Exec" port="_Q-3QgPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RH3biPb4EeaMSqHUbqLyYA" name="Debug__end__trans__IDLE__IDLE__9" source="_RH20cPb4EeaMSqHUbqLyYA" target="_RHzxI_b4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RH-wQPb4EeaMSqHUbqLyYA" name="Debug__end__trans__IDLE__IDLE__9__290">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__end__trans__IDLE__IDLE__9&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RH3bifb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_Q-3QgPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_RH1mU_b4EeaMSqHUbqLyYA" name="Debug__B__Ex__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RH1mVPb4EeaMSqHUbqLyYA" name="Debug__B__Ex__IDLE">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RH3bivb4EeaMSqHUbqLyYA" name="Debug__B__Ex__IDLE__278">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RH2NYPb4EeaMSqHUbqLyYA" name="Debug__B__Ac__IDLE__IDLE__9">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RH2NYfb4EeaMSqHUbqLyYA" name="Debug__B__Ac__IDLE__IDLE__9">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__B__Ac__IDLE__IDLE__9&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE__IDLE__9&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RH4CkPb4EeaMSqHUbqLyYA" name="Debug__B__Ac__IDLE__IDLE__9__279">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__B__Ac__IDLE__IDLE__9&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RH2NYvb4EeaMSqHUbqLyYA" name="Debug__A__Ac__IDLE__IDLE__9">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RH2NY_b4EeaMSqHUbqLyYA" name="Debug__A__Ac__IDLE__IDLE__9">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__A__Ac__IDLE__IDLE__9&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE__IDLE__9&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RH4poPb4EeaMSqHUbqLyYA" name="Debug__A__Ac__IDLE__IDLE__9__280">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__A__Ac__IDLE__IDLE__9&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RH20cPb4EeaMSqHUbqLyYA" name="Debug__A__En__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RH20cfb4EeaMSqHUbqLyYA" name="Debug__A__En__IDLE">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RH5QsPb4EeaMSqHUbqLyYA" name="Debug__A__En__IDLE__281">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_RH_-YPb4EeaMSqHUbqLyYA" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_RH_-Yfb4EeaMSqHUbqLyYA" name="Debug__C__Initial">
            <connectionPoint xmi:id="_RH_-Y_b4EeaMSqHUbqLyYA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_RH_-ZPb4EeaMSqHUbqLyYA" name="ex" kind="exitPoint"/>
            <region xmi:id="_RH_-Yvb4EeaMSqHUbqLyYA" name="Region1">
              <transition xmi:id="_RIDBsvb4EeaMSqHUbqLyYA" name="Debug__init__trans__Initial" source="_RH_-Y_b4EeaMSqHUbqLyYA" target="_RICaoPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RIE24Pb4EeaMSqHUbqLyYA" name="Debug__init__trans__Initial__304">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_RIDBs_b4EeaMSqHUbqLyYA" name="Debug__Ac__Initial" source="_RICaoPb4EeaMSqHUbqLyYA" target="_RICaovb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RIFd8Pb4EeaMSqHUbqLyYA" name="Debug__Ac__Initial__306">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RIDBtPb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_Q-3QgPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RIDBtfb4EeaMSqHUbqLyYA" name="Debug__En__IDLE" source="_RICaovb4EeaMSqHUbqLyYA" target="_RIDBsPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RIGFAPb4EeaMSqHUbqLyYA" name="Debug__En__IDLE__308">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__Initial::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RIDBtvb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_Q-3QgPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RIDBt_b4EeaMSqHUbqLyYA" name="Debug__end__trans__Initial" source="_RIDBsPb4EeaMSqHUbqLyYA" target="_RH_-ZPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RIGFAfb4EeaMSqHUbqLyYA" name="Debug__end__trans__Initial__310">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RIDowPb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_Q-3QgPb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_RICaoPb4EeaMSqHUbqLyYA" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RICaofb4EeaMSqHUbqLyYA" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RIDowfb4EeaMSqHUbqLyYA" name="Debug__B__Ac__Initial__300">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RICaovb4EeaMSqHUbqLyYA" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RICao_b4EeaMSqHUbqLyYA" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RIEP0Pb4EeaMSqHUbqLyYA" name="Debug__A__Ac__Initial__301">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RIDBsPb4EeaMSqHUbqLyYA" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RIDBsfb4EeaMSqHUbqLyYA" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RIEP0fb4EeaMSqHUbqLyYA" name="Debug__A__En__Initial__302">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_RIHTIPb4EeaMSqHUbqLyYA" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_Q_EE0fb4EeaMSqHUbqLyYA" name="Debug__variablesViewMethod" specification="_Q_EE0Pb4EeaMSqHUbqLyYA">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_Q_FS8_b4EeaMSqHUbqLyYA" name="Debug__variablesChange" specification="_Q_Er4Pb4EeaMSqHUbqLyYA">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);

    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_RAOic_b4EeaMSqHUbqLyYA" name="Debug__sendEvent" specification="_Q_qhwPb4EeaMSqHUbqLyYA">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_Q_EE0Pb4EeaMSqHUbqLyYA" name="Debug__variablesView" visibility="private" method="_Q_EE0fb4EeaMSqHUbqLyYA"/>
      <ownedOperation xmi:id="_Q_Er4Pb4EeaMSqHUbqLyYA" name="Debug__variablesChange" visibility="private" method="_Q_FS8_b4EeaMSqHUbqLyYA">
        <ownedParameter xmi:id="_Q_FS8Pb4EeaMSqHUbqLyYA" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Q_FS8fb4EeaMSqHUbqLyYA" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Q_FS8vb4EeaMSqHUbqLyYA" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_Q_qhwPb4EeaMSqHUbqLyYA" name="Debug__sendEvent" visibility="private" method="_RAOic_b4EeaMSqHUbqLyYA">
        <ownedParameter xmi:id="_Q_qhwfb4EeaMSqHUbqLyYA" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Q_zEoPb4EeaMSqHUbqLyYA" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Q_7ngPb4EeaMSqHUbqLyYA" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RAExcPb4EeaMSqHUbqLyYA" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RAExcfb4EeaMSqHUbqLyYA" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RAN7YPb4EeaMSqHUbqLyYA" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RAN7Yfb4EeaMSqHUbqLyYA" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RAOicPb4EeaMSqHUbqLyYA" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RAOicfb4EeaMSqHUbqLyYA" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RAOicvb4EeaMSqHUbqLyYA" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_O_UbEMM5EeahHehXumVB-w" name="Switcher" classifierBehavior="_yUE3QMM7EeahHehXumVB-w" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_gMZLEMM5EeahHehXumVB-w" name="switchProtocol" visibility="public" type="_RDbn4MM5EeahHehXumVB-w" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_0cp_QMM5EeahHehXumVB-w" name="right" visibility="public" type="_Qq5xwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_3tk9cMM5EeahHehXumVB-w" name="left" visibility="public" type="_Qq5xwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_VxKF0MM6EeahHehXumVB-w" name="enter" visibility="public" type="_Qq5xwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:id="_tx4ecMM7EeahHehXumVB-w" name="choice">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_Yk87wMM9EeahHehXumVB-w" name="parcel" type="_aEoEwML7EeaSH8bbL43htA"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_x2tmMMX2EeaYV5cb1Zesag" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_b1lNUMYiEeaYV5cb1Zesag" name="delay">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_eEeGwMYiEeaYV5cb1Zesag" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_4c8vAMYlEeaYV5cb1Zesag" name="timer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_RBqF0Pb4EeaMSqHUbqLyYA" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_RBuXQfb4EeaMSqHUbqLyYA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_RBuXQvb4EeaMSqHUbqLyYA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_RB59dfb4EeaMSqHUbqLyYA" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_RB59dvb4EeaMSqHUbqLyYA" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_RB59d_b4EeaMSqHUbqLyYA" name="Debug__event"/>
      <ownedAttribute xmi:id="_RCCgUPb4EeaMSqHUbqLyYA" name="Debug__SRO"/>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_yUE3QMM7EeahHehXumVB-w" name="SwitcherStateMachine" isReentrant="false">
        <region xmi:id="_yUMMAMM7EeahHehXumVB-w" name="Region">
          <transition xmi:id="_yUTgwcM7EeahHehXumVB-w" name="Initial" source="_RG1gwPb4EeaMSqHUbqLyYA" target="_yUSSoMM7EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RG-qsfb4EeaMSqHUbqLyYA" name="Initial__178">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_2LEW8MM7EeahHehXumVB-w" name="IDLE__IDLE__6" source="_RHNUMPb4EeaMSqHUbqLyYA" target="_yUSSoMM7EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Ci9gsMM8EeahHehXumVB-w">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::IDLE__IDLE__6&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__6&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

    this->choice = c;
</body>
            </effect>
          </transition>
          <transition xmi:id="_GIbLgMM8EeahHehXumVB-w" name="reception" source="_RG_40Pb4EeaMSqHUbqLyYA" target="_GOTbgMYlEeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fAyMMMM8EeahHehXumVB-w">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::reception&quot;,(char *)&quot;Debug__Path__reception&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;&quot;);

    this->parcel = Parcel();
    this->parcel.number = p.number;
    this->parcel.level = p.level;
    this->parcel.stage = p.stage;
    log.show(&quot;Switcher %s of stage %d becomes occupied\n&quot;, this->getName(), p.stage);
    timer.informIn(UMLRTTimespec(this->delay,0));
</body>
            </effect>
          </transition>
          <transition xmi:id="_BK59oMYmEeaYV5cb1Zesag" name="transmission" source="_RGcfMPb4EeaMSqHUbqLyYA" target="_yUSSoMM7EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_qAissPPAEeajSJ5GKhFEgA">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::transmission&quot;,(char *)&quot;Debug__Path__transmission&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

    this->parcel.level--;
    log.show(&quot;Switcher %s of stage %d is now free\n&quot;, this->getName(), this->parcel.stage);
    if (choice == 0) {
    this->parcel.stage = 1;
    left.transmit(this->parcel).send();
    }
    else {
    this->parcel.stage = 2;
    right.transmit(this->parcel).send();
    }
</body>
            </effect>
          </transition>
          <transition xmi:id="_i9e1YMYoEeaYV5cb1Zesag" name="OCCUPIED__OCCUPIED__4" source="_RGpTgPb4EeaMSqHUbqLyYA" target="_GOTbgMYlEeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yidmMMYoEeaYV5cb1Zesag">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::OCCUPIED__OCCUPIED__4&quot;,(char *)&quot;Debug__Path__OCCUPIED__OCCUPIED__4&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;&quot;);

    log.show(&quot;Impossible to activate the switch of %s: the switch gate is obstructed by a parcel\n&quot;, this->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_RGdGRPb4EeaMSqHUbqLyYA" name="Debug__transmission" source="_GOTbgMYlEeaYV5cb1Zesag" target="_RGcfMPb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGdGRfb4EeaMSqHUbqLyYA" name="Debug__transmission__115">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__transmission&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;Debug__Path__transmission&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_E7SfAMYmEeaYV5cb1Zesag" port="_4c8vAMYlEeaYV5cb1Zesag">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_RGeUYPb4EeaMSqHUbqLyYA" name="Debug__transmission__S" guard="_RGeUYvb4EeaMSqHUbqLyYA" source="_RGcfMPb4EeaMSqHUbqLyYA" target="_RGdGQvb4EeaMSqHUbqLyYA">
            <ownedRule xmi:id="_RGeUYvb4EeaMSqHUbqLyYA" name="Debug__Guardtransmission">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_RGeUYfb4EeaMSqHUbqLyYA" name="Debug__Guardtransmission">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGe7cPb4EeaMSqHUbqLyYA" name="Debug__transmission__S__117">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__transmission__S&quot;,(char *)&quot;Debug__Path__transmission&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RGfigPb4EeaMSqHUbqLyYA" name="Debug__transmission__E" source="_RGdGQ_b4EeaMSqHUbqLyYA" target="_yUSSoMM7EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGfigfb4EeaMSqHUbqLyYA" name="Debug__transmission__E__119">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__transmission__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RGgJkPb4EeaMSqHUbqLyYA" name="Debug__transmission__dbg" source="_RGdGQPb4EeaMSqHUbqLyYA" target="_RGdGQPb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGgJkvb4EeaMSqHUbqLyYA" name="Debug__transmission__dbg__121">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__transmission__dbg&quot;,(char *)&quot;Debug__C__transmission&quot;,(char *)&quot;Debug__C__transmission&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_RGgJkfb4EeaMSqHUbqLyYA" name="Debug__MSG" port="_RBqF0Pb4EeaMSqHUbqLyYA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_RGp6lPb4EeaMSqHUbqLyYA" name="Debug__OCCUPIED__OCCUPIED__4" source="_GOTbgMYlEeaYV5cb1Zesag" target="_RGpTgPb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGp6lfb4EeaMSqHUbqLyYA" name="Debug__OCCUPIED__OCCUPIED__4__137">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__OCCUPIED__OCCUPIED__4&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;Debug__Path__OCCUPIED__OCCUPIED__4&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_oHSAwMYoEeaYV5cb1Zesag" event="_cjDs4MM5EeahHehXumVB-w" port="_gMZLEMM5EeahHehXumVB-w"/>
          </transition>
          <transition xmi:id="_RGqhoPb4EeaMSqHUbqLyYA" name="Debug__OCCUPIED__OCCUPIED__4__S" guard="_RGqhovb4EeaMSqHUbqLyYA" source="_RGpTgPb4EeaMSqHUbqLyYA" target="_RGp6kvb4EeaMSqHUbqLyYA">
            <ownedRule xmi:id="_RGqhovb4EeaMSqHUbqLyYA" name="Debug__GuardOCCUPIED__OCCUPIED__4">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_RGqhofb4EeaMSqHUbqLyYA" name="Debug__GuardOCCUPIED__OCCUPIED__4">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGqho_b4EeaMSqHUbqLyYA" name="Debug__OCCUPIED__OCCUPIED__4__S__139">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__OCCUPIED__OCCUPIED__4__S&quot;,(char *)&quot;Debug__Path__OCCUPIED__OCCUPIED__4&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RGrIsPb4EeaMSqHUbqLyYA" name="Debug__OCCUPIED__OCCUPIED__4__E" source="_RGp6k_b4EeaMSqHUbqLyYA" target="_GOTbgMYlEeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGrIsfb4EeaMSqHUbqLyYA" name="Debug__OCCUPIED__OCCUPIED__4__E__141">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__OCCUPIED__OCCUPIED__4__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RGrvwPb4EeaMSqHUbqLyYA" name="Debug__OCCUPIED__OCCUPIED__4__dbg" source="_RGp6kPb4EeaMSqHUbqLyYA" target="_RGp6kPb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGrvwvb4EeaMSqHUbqLyYA" name="Debug__OCCUPIED__OCCUPIED__4__dbg__143">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__OCCUPIED__OCCUPIED__4__dbg&quot;,(char *)&quot;Debug__C__OCCUPIED__OCCUPIED__4&quot;,(char *)&quot;Debug__C__OCCUPIED__OCCUPIED__4&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_RGrvwfb4EeaMSqHUbqLyYA" name="Debug__MSG" port="_RBqF0Pb4EeaMSqHUbqLyYA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_RG2H0vb4EeaMSqHUbqLyYA" name="Debug__Initial" source="_RHXFMPb4EeaMSqHUbqLyYA" target="_RG1gwPb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RG2H0_b4EeaMSqHUbqLyYA" name="Debug__Initial__159">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;GENERATING&quot;,&quot;&quot;,&quot;GENERATING&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;setSwitch&quot;,&quot;switchProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;reception&quot;,&quot;OCCUPIED&quot;,&quot;transmit&quot;,&quot;transmission&quot;);
Debug__SRO.addTransitionsFromState(&quot;OCCUPIED&quot;,&quot;transmission&quot;,&quot;IDLE&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;OCCUPIED&quot;,&quot;setSwitch&quot;,&quot;switchProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;GENERATING&quot;,&quot;&quot;,&quot;&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),(char *) &quot;&quot;,(char *) &quot;&quot;,(char *) &quot;&quot;,(char *)&quot;&quot;,(char *) &quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_RHXsQfb4EeaMSqHUbqLyYA" name="ConnectionEstablished" port="_RBqF0Pb4EeaMSqHUbqLyYA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_RG2u4Pb4EeaMSqHUbqLyYA" name="Debug__Initial__S" guard="_RG2u4vb4EeaMSqHUbqLyYA" source="_RG1gwPb4EeaMSqHUbqLyYA" target="_RG2H0Pb4EeaMSqHUbqLyYA">
            <ownedRule xmi:id="_RG2u4vb4EeaMSqHUbqLyYA" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_RG2u4fb4EeaMSqHUbqLyYA" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo5&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RG3V8Pb4EeaMSqHUbqLyYA" name="Debug__Initial__S__161">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RG3V8fb4EeaMSqHUbqLyYA" name="Debug__Initial__E" source="_RG2H0fb4EeaMSqHUbqLyYA" target="_yUSSoMM7EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RG39APb4EeaMSqHUbqLyYA" name="Debug__Initial__E__163">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RG39Afb4EeaMSqHUbqLyYA" name="Debug__Initial__dbg" source="_RG1gwfb4EeaMSqHUbqLyYA" target="_RG1gwfb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RG4kEPb4EeaMSqHUbqLyYA" name="Debug__Initial__dbg__165">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__Initial__dbg&quot;,(char *)&quot;Debug__C__Initial&quot;,(char *)&quot;Debug__C__Initial&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_RG39Avb4EeaMSqHUbqLyYA" name="Debug__MSG" port="_RBqF0Pb4EeaMSqHUbqLyYA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_RG_41fb4EeaMSqHUbqLyYA" name="Debug__reception" source="_yUSSoMM7EeahHehXumVB-w" target="_RG_40Pb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHAf4Pb4EeaMSqHUbqLyYA" name="Debug__reception__180">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__reception&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;Debug__Path__reception&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_J-RbsMM8EeahHehXumVB-w" event="_SR6HoMMBEeaSH8bbL43htA" port="_VxKF0MM6EeahHehXumVB-w"/>
          </transition>
          <transition xmi:id="_RHBG8Pb4EeaMSqHUbqLyYA" name="Debug__reception__S" guard="_RHBG8vb4EeaMSqHUbqLyYA" source="_RG_40Pb4EeaMSqHUbqLyYA" target="_RG_40_b4EeaMSqHUbqLyYA">
            <ownedRule xmi:id="_RHBG8vb4EeaMSqHUbqLyYA" name="Debug__Guardreception">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_RHBG8fb4EeaMSqHUbqLyYA" name="Debug__Guardreception">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHBuAPb4EeaMSqHUbqLyYA" name="Debug__reception__S__182">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__reception__S&quot;,(char *)&quot;Debug__Path__reception&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RHC8IPb4EeaMSqHUbqLyYA" name="Debug__reception__E" source="_RG_41Pb4EeaMSqHUbqLyYA" target="_GOTbgMYlEeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHC8Ifb4EeaMSqHUbqLyYA" name="Debug__reception__E__184">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__reception__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RHDjMPb4EeaMSqHUbqLyYA" name="Debug__reception__dbg" source="_RG_40fb4EeaMSqHUbqLyYA" target="_RG_40fb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHEKQPb4EeaMSqHUbqLyYA" name="Debug__reception__dbg__186">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__reception__dbg&quot;,(char *)&quot;Debug__C__reception&quot;,(char *)&quot;Debug__C__reception&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_RHDjMfb4EeaMSqHUbqLyYA" name="Debug__MSG" port="_RBqF0Pb4EeaMSqHUbqLyYA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_RHNUNfb4EeaMSqHUbqLyYA" name="Debug__IDLE__IDLE__6" source="_yUSSoMM7EeahHehXumVB-w" target="_RHNUMPb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHNUNvb4EeaMSqHUbqLyYA" name="Debug__IDLE__IDLE__6__202">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__IDLE__IDLE__6&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__6&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_82qsQMM7EeahHehXumVB-w" event="_cjDs4MM5EeahHehXumVB-w" port="_gMZLEMM5EeahHehXumVB-w"/>
          </transition>
          <transition xmi:id="_RHN7QPb4EeaMSqHUbqLyYA" name="Debug__IDLE__IDLE__6__S" guard="_RHN7Qvb4EeaMSqHUbqLyYA" source="_RHNUMPb4EeaMSqHUbqLyYA" target="_RHNUM_b4EeaMSqHUbqLyYA">
            <ownedRule xmi:id="_RHN7Qvb4EeaMSqHUbqLyYA" name="Debug__GuardIDLE__IDLE__6">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_RHN7Qfb4EeaMSqHUbqLyYA" name="Debug__GuardIDLE__IDLE__6">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHN7Q_b4EeaMSqHUbqLyYA" name="Debug__IDLE__IDLE__6__S__204">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__IDLE__IDLE__6__S&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__6&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RHOiUPb4EeaMSqHUbqLyYA" name="Debug__IDLE__IDLE__6__E" source="_RHNUNPb4EeaMSqHUbqLyYA" target="_yUSSoMM7EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHOiUfb4EeaMSqHUbqLyYA" name="Debug__IDLE__IDLE__6__E__206">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__IDLE__IDLE__6__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_RHPJYPb4EeaMSqHUbqLyYA" name="Debug__IDLE__IDLE__6__dbg" source="_RHNUMfb4EeaMSqHUbqLyYA" target="_RHNUMfb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHPJYvb4EeaMSqHUbqLyYA" name="Debug__IDLE__IDLE__6__dbg__208">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__IDLE__IDLE__6__dbg&quot;,(char *)&quot;Debug__C__IDLE__IDLE__6&quot;,(char *)&quot;Debug__C__IDLE__IDLE__6&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_RHPJYfb4EeaMSqHUbqLyYA" name="Debug__MSG" port="_RBqF0Pb4EeaMSqHUbqLyYA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_RHXFMfb4EeaMSqHUbqLyYA" name="Debug__InitDebug" source="_yUOoQMM7EeahHehXumVB-w" target="_RHXFMPb4EeaMSqHUbqLyYA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHXsQPb4EeaMSqHUbqLyYA" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
std::string tempS;
std::cout&lt;&lt;&quot;Enter 1 for running in debug mode, any other key for normal model\n&quot;;
std::cin>> tempS;
if (tempS==&quot;1&quot;)
    this->Debug__SRO.setExecMode(Stepping);
else
    this->Debug__SRO.setExecMode(Running);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_yUOoQMM7EeahHehXumVB-w" name="Pseudo5"/>
          <subvertex xmi:type="uml:State" xmi:id="_yUSSoMM7EeahHehXumVB-w" name="IDLE">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RHavkPb4EeaMSqHUbqLyYA" name="IDLE__223">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);


}</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RHavkfb4EeaMSqHUbqLyYA" name="IDLE__224">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);


}</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_GOTbgMYlEeaYV5cb1Zesag" name="OCCUPIED">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RHbWoPb4EeaMSqHUbqLyYA" name="OCCUPIED__225">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);


}</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RHbWofb4EeaMSqHUbqLyYA" name="OCCUPIED__226">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);


}</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_RGcfMPb4EeaMSqHUbqLyYA" name="Debug__Path__transmission" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_RGdGQPb4EeaMSqHUbqLyYA" name="Debug__C__transmission">
            <connectionPoint xmi:id="_RGdGQvb4EeaMSqHUbqLyYA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_RGdGQ_b4EeaMSqHUbqLyYA" name="ex" kind="exitPoint"/>
            <region xmi:id="_RGdGQfb4EeaMSqHUbqLyYA" name="Region1">
              <transition xmi:id="_RGh-wvb4EeaMSqHUbqLyYA" name="Debug__init__trans__transmission" source="_RGdGQvb4EeaMSqHUbqLyYA" target="_RGgwoPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGmQMPb4EeaMSqHUbqLyYA" name="Debug__init__trans__transmission__127">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__transmission::Region1::Debug__init__trans__transmission&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_RGil0Pb4EeaMSqHUbqLyYA" name="Debug__Ex__OCCUPIED" source="_RGgwoPb4EeaMSqHUbqLyYA" target="_RGgwovb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGm3QPb4EeaMSqHUbqLyYA" name="Debug__Ex__OCCUPIED__129">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__transmission::Region1::Debug__Ex__OCCUPIED&quot;,(char *)&quot;Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;Debug__B__Ac__transmission&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RGil0fb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RBqF0Pb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RGil0vb4EeaMSqHUbqLyYA" name="Debug__AC__transmission" source="_RGgwovb4EeaMSqHUbqLyYA" target="_RGhXsPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGil1Pb4EeaMSqHUbqLyYA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__transmission::Region1::Debug__AC__transmission&quot;,(char *)&quot;Debug__B__Ac__transmission&quot;,(char *)&quot;Debug__A__Ac__transmission&quot;,(char *)&quot;&quot;);

    this->parcel.level--;
    log.show(&quot;Switcher %s of stage %d is now free\n&quot;, this->getName(), this->parcel.stage);
    if (choice == 0) {
    this->parcel.stage = 1;
    left.transmit(this->parcel).send();
    }
    else {
    this->parcel.stage = 2;
    right.transmit(this->parcel).send();
    }
</body>
                </effect>
                <trigger xmi:id="_RGil0_b4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RBqF0Pb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RGil1fb4EeaMSqHUbqLyYA" name="Debug__En__IDLE" source="_RGhXsPb4EeaMSqHUbqLyYA" target="_RGh-wPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGoFYPb4EeaMSqHUbqLyYA" name="Debug__En__IDLE__132">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__transmission::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__transmission&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RGil1vb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RBqF0Pb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RGjM4Pb4EeaMSqHUbqLyYA" name="Debug__end__trans__transmission" source="_RGh-wPb4EeaMSqHUbqLyYA" target="_RGdGQ_b4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGoFYfb4EeaMSqHUbqLyYA" name="Debug__end__trans__transmission__134">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__transmission::Region1::Debug__end__trans__transmission&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RGjM4fb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RBqF0Pb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_RGgwoPb4EeaMSqHUbqLyYA" name="Debug__B__Ex__OCCUPIED">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RGgwofb4EeaMSqHUbqLyYA" name="Debug__B__Ex__OCCUPIED">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__transmission::Region1::Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RGjM4vb4EeaMSqHUbqLyYA" name="Debug__B__Ex__OCCUPIED__122">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__transmission::Region1::Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RGgwovb4EeaMSqHUbqLyYA" name="Debug__B__Ac__transmission">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RGgwo_b4EeaMSqHUbqLyYA" name="Debug__B__Ac__transmission">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__transmission::Region1::Debug__B__Ac__transmission&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;transmission&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RGkbAPb4EeaMSqHUbqLyYA" name="Debug__B__Ac__transmission__123">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__transmission::Region1::Debug__B__Ac__transmission&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RGhXsPb4EeaMSqHUbqLyYA" name="Debug__A__Ac__transmission">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RGhXsfb4EeaMSqHUbqLyYA" name="Debug__A__Ac__transmission">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__transmission::Region1::Debug__A__Ac__transmission&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;transmission&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RGkbAfb4EeaMSqHUbqLyYA" name="Debug__A__Ac__transmission__124">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__transmission::Region1::Debug__A__Ac__transmission&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RGh-wPb4EeaMSqHUbqLyYA" name="Debug__A__En__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RGh-wfb4EeaMSqHUbqLyYA" name="Debug__A__En__IDLE">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__transmission::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RGlpIPb4EeaMSqHUbqLyYA" name="Debug__A__En__IDLE__125">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__transmission::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_RGpTgPb4EeaMSqHUbqLyYA" name="Debug__Path__OCCUPIED__OCCUPIED__4" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_RGp6kPb4EeaMSqHUbqLyYA" name="Debug__C__OCCUPIED__OCCUPIED__4">
            <connectionPoint xmi:id="_RGp6kvb4EeaMSqHUbqLyYA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_RGp6k_b4EeaMSqHUbqLyYA" name="ex" kind="exitPoint"/>
            <region xmi:id="_RGp6kfb4EeaMSqHUbqLyYA" name="Region1">
              <transition xmi:id="_RGuMAvb4EeaMSqHUbqLyYA" name="Debug__init__trans__OCCUPIED__OCCUPIED__4" source="_RGp6kvb4EeaMSqHUbqLyYA" target="_RGsW0Pb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGx2YPb4EeaMSqHUbqLyYA" name="Debug__init__trans__OCCUPIED__OCCUPIED__4__149">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__4::Region1::Debug__init__trans__OCCUPIED__OCCUPIED__4&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_RGuMA_b4EeaMSqHUbqLyYA" name="Debug__Ex__OCCUPIED" source="_RGsW0Pb4EeaMSqHUbqLyYA" target="_RGsW0vb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGx2Yfb4EeaMSqHUbqLyYA" name="Debug__Ex__OCCUPIED__151">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__4::Region1::Debug__Ex__OCCUPIED&quot;,(char *)&quot;Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;Debug__B__Ac__OCCUPIED__OCCUPIED__4&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RGuMBPb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RBqF0Pb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RGuMBfb4EeaMSqHUbqLyYA" name="Debug__AC__OCCUPIED__OCCUPIED__4" source="_RGsW0vb4EeaMSqHUbqLyYA" target="_RGs94Pb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGuMB_b4EeaMSqHUbqLyYA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__4::Region1::Debug__AC__OCCUPIED__OCCUPIED__4&quot;,(char *)&quot;Debug__B__Ac__OCCUPIED__OCCUPIED__4&quot;,(char *)&quot;Debug__A__Ac__OCCUPIED__OCCUPIED__4&quot;,(char *)&quot;&quot;);

    log.show(&quot;Impossible to activate the switch of %s: the switch gate is obstructed by a parcel\n&quot;, this->getName());
</body>
                </effect>
                <trigger xmi:id="_RGuMBvb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RBqF0Pb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RGuzEPb4EeaMSqHUbqLyYA" name="Debug__En__OCCUPIED" source="_RGs94Pb4EeaMSqHUbqLyYA" target="_RGuMAPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RGzEgPb4EeaMSqHUbqLyYA" name="Debug__En__OCCUPIED__154">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__4::Region1::Debug__En__OCCUPIED&quot;,(char *)&quot;Debug__A__Ac__OCCUPIED__OCCUPIED__4&quot;,(char *)&quot;Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RGuzEfb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RBqF0Pb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RGuzEvb4EeaMSqHUbqLyYA" name="Debug__end__trans__OCCUPIED__OCCUPIED__4" source="_RGuMAPb4EeaMSqHUbqLyYA" target="_RGp6k_b4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RG0SoPb4EeaMSqHUbqLyYA" name="Debug__end__trans__OCCUPIED__OCCUPIED__4__156">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__4::Region1::Debug__end__trans__OCCUPIED__OCCUPIED__4&quot;,(char *)&quot;Debug__A__En__OCCUPIED&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RGuzE_b4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RBqF0Pb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_RGsW0Pb4EeaMSqHUbqLyYA" name="Debug__B__Ex__OCCUPIED">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RGsW0fb4EeaMSqHUbqLyYA" name="Debug__B__Ex__OCCUPIED">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__4::Region1::Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RGuzFPb4EeaMSqHUbqLyYA" name="Debug__B__Ex__OCCUPIED__144">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__4::Region1::Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RGsW0vb4EeaMSqHUbqLyYA" name="Debug__B__Ac__OCCUPIED__OCCUPIED__4">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RGsW0_b4EeaMSqHUbqLyYA" name="Debug__B__Ac__OCCUPIED__OCCUPIED__4">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__4::Region1::Debug__B__Ac__OCCUPIED__OCCUPIED__4&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;OCCUPIED__OCCUPIED__4&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RGvaIPb4EeaMSqHUbqLyYA" name="Debug__B__Ac__OCCUPIED__OCCUPIED__4__145">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__4::Region1::Debug__B__Ac__OCCUPIED__OCCUPIED__4&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RGs94Pb4EeaMSqHUbqLyYA" name="Debug__A__Ac__OCCUPIED__OCCUPIED__4">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RGtk8Pb4EeaMSqHUbqLyYA" name="Debug__A__Ac__OCCUPIED__OCCUPIED__4">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__4::Region1::Debug__A__Ac__OCCUPIED__OCCUPIED__4&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED__OCCUPIED__4&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RGwBMPb4EeaMSqHUbqLyYA" name="Debug__A__Ac__OCCUPIED__OCCUPIED__4__146">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__4::Region1::Debug__A__Ac__OCCUPIED__OCCUPIED__4&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RGuMAPb4EeaMSqHUbqLyYA" name="Debug__A__En__OCCUPIED">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RGuMAfb4EeaMSqHUbqLyYA" name="Debug__A__En__OCCUPIED">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__4::Region1::Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RGwoQPb4EeaMSqHUbqLyYA" name="Debug__A__En__OCCUPIED__147">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__4::Region1::Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_RG1gwPb4EeaMSqHUbqLyYA" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_RG1gwfb4EeaMSqHUbqLyYA" name="Debug__C__Initial">
            <connectionPoint xmi:id="_RG2H0Pb4EeaMSqHUbqLyYA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_RG2H0fb4EeaMSqHUbqLyYA" name="ex" kind="exitPoint"/>
            <region xmi:id="_RG1gwvb4EeaMSqHUbqLyYA" name="Region1">
              <transition xmi:id="_RG5yMPb4EeaMSqHUbqLyYA" name="Debug__init__trans__Initial" source="_RG2H0Pb4EeaMSqHUbqLyYA" target="_RG4kEfb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RG8OcPb4EeaMSqHUbqLyYA" name="Debug__init__trans__Initial__170">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_RG5yMfb4EeaMSqHUbqLyYA" name="Debug__Ac__Initial" source="_RG4kEfb4EeaMSqHUbqLyYA" target="_RG5LIPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RG9ckPb4EeaMSqHUbqLyYA" name="Debug__Ac__Initial__172">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RG5yMvb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RBqF0Pb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RG5yM_b4EeaMSqHUbqLyYA" name="Debug__En__IDLE" source="_RG5LIPb4EeaMSqHUbqLyYA" target="_RG5LIvb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RG-DoPb4EeaMSqHUbqLyYA" name="Debug__En__IDLE__174">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Initial::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RG5yNPb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RBqF0Pb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RG5yNfb4EeaMSqHUbqLyYA" name="Debug__end__trans__Initial" source="_RG5LIvb4EeaMSqHUbqLyYA" target="_RG2H0fb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RG-qsPb4EeaMSqHUbqLyYA" name="Debug__end__trans__Initial__176">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RG5yNvb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RBqF0Pb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_RG4kEfb4EeaMSqHUbqLyYA" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RG4kEvb4EeaMSqHUbqLyYA" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RG5yN_b4EeaMSqHUbqLyYA" name="Debug__B__Ac__Initial__166">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RG5LIPb4EeaMSqHUbqLyYA" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RG5LIfb4EeaMSqHUbqLyYA" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RG6ZQPb4EeaMSqHUbqLyYA" name="Debug__A__Ac__Initial__167">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RG5LIvb4EeaMSqHUbqLyYA" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RG5LI_b4EeaMSqHUbqLyYA" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RG7nYPb4EeaMSqHUbqLyYA" name="Debug__A__En__Initial__168">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_RG_40Pb4EeaMSqHUbqLyYA" name="Debug__Path__reception" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_RG_40fb4EeaMSqHUbqLyYA" name="Debug__C__reception">
            <connectionPoint xmi:id="_RG_40_b4EeaMSqHUbqLyYA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_RG_41Pb4EeaMSqHUbqLyYA" name="ex" kind="exitPoint"/>
            <region xmi:id="_RG_40vb4EeaMSqHUbqLyYA" name="Region1">
              <transition xmi:id="_RHHNkPb4EeaMSqHUbqLyYA" name="Debug__init__trans__reception" source="_RG_40_b4EeaMSqHUbqLyYA" target="_RHExUPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHJp0Pb4EeaMSqHUbqLyYA" name="Debug__init__trans__reception__192">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__init__trans__reception&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_RHHNkfb4EeaMSqHUbqLyYA" name="Debug__Ex__IDLE" source="_RHExUPb4EeaMSqHUbqLyYA" target="_RHExUvb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHKQ4Pb4EeaMSqHUbqLyYA" name="Debug__Ex__IDLE__194">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ac__reception&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RHHNkvb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RBqF0Pb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RHHNk_b4EeaMSqHUbqLyYA" name="Debug__AC__reception" source="_RHExUvb4EeaMSqHUbqLyYA" target="_RHF_cPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHHNlfb4EeaMSqHUbqLyYA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__AC__reception&quot;,(char *)&quot;Debug__B__Ac__reception&quot;,(char *)&quot;Debug__A__Ac__reception&quot;,(char *)&quot;&quot;);

    this->parcel = Parcel();
    this->parcel.number = p.number;
    this->parcel.level = p.level;
    this->parcel.stage = p.stage;
    log.show(&quot;Switcher %s of stage %d becomes occupied\n&quot;, this->getName(), p.stage);
    timer.informIn(UMLRTTimespec(this->delay,0));
</body>
                </effect>
                <trigger xmi:id="_RHHNlPb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RBqF0Pb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RHHNlvb4EeaMSqHUbqLyYA" name="Debug__En__OCCUPIED" source="_RHF_cPb4EeaMSqHUbqLyYA" target="_RHGmgPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHLfAPb4EeaMSqHUbqLyYA" name="Debug__En__OCCUPIED__197">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__En__OCCUPIED&quot;,(char *)&quot;Debug__A__Ac__reception&quot;,(char *)&quot;Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RHHNl_b4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RBqF0Pb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RHHNmPb4EeaMSqHUbqLyYA" name="Debug__end__trans__reception" source="_RHGmgPb4EeaMSqHUbqLyYA" target="_RG_41Pb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHLfAfb4EeaMSqHUbqLyYA" name="Debug__end__trans__reception__199">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__end__trans__reception&quot;,(char *)&quot;Debug__A__En__OCCUPIED&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RHHNmfb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RBqF0Pb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_RHExUPb4EeaMSqHUbqLyYA" name="Debug__B__Ex__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RHExUfb4EeaMSqHUbqLyYA" name="Debug__B__Ex__IDLE">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RHH0oPb4EeaMSqHUbqLyYA" name="Debug__B__Ex__IDLE__187">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RHExUvb4EeaMSqHUbqLyYA" name="Debug__B__Ac__reception">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RHFYYPb4EeaMSqHUbqLyYA" name="Debug__B__Ac__reception">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__B__Ac__reception&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;reception&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RHIbsPb4EeaMSqHUbqLyYA" name="Debug__B__Ac__reception__188">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__B__Ac__reception&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RHF_cPb4EeaMSqHUbqLyYA" name="Debug__A__Ac__reception">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RHF_cfb4EeaMSqHUbqLyYA" name="Debug__A__Ac__reception">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__A__Ac__reception&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;reception&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RHJCwPb4EeaMSqHUbqLyYA" name="Debug__A__Ac__reception__189">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__A__Ac__reception&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RHGmgPb4EeaMSqHUbqLyYA" name="Debug__A__En__OCCUPIED">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RHGmgfb4EeaMSqHUbqLyYA" name="Debug__A__En__OCCUPIED">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RHJCwfb4EeaMSqHUbqLyYA" name="Debug__A__En__OCCUPIED__190">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_RHNUMPb4EeaMSqHUbqLyYA" name="Debug__Path__IDLE__IDLE__6" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_RHNUMfb4EeaMSqHUbqLyYA" name="Debug__C__IDLE__IDLE__6">
            <connectionPoint xmi:id="_RHNUM_b4EeaMSqHUbqLyYA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_RHNUNPb4EeaMSqHUbqLyYA" name="ex" kind="exitPoint"/>
            <region xmi:id="_RHNUMvb4EeaMSqHUbqLyYA" name="Region1">
              <transition xmi:id="_RHQ-kvb4EeaMSqHUbqLyYA" name="Debug__init__trans__IDLE__IDLE__6" source="_RHNUM_b4EeaMSqHUbqLyYA" target="_RHPwcPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHUB4Pb4EeaMSqHUbqLyYA" name="Debug__init__trans__IDLE__IDLE__6__214">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__init__trans__IDLE__IDLE__6&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_RHQ-k_b4EeaMSqHUbqLyYA" name="Debug__Ex__IDLE" source="_RHPwcPb4EeaMSqHUbqLyYA" target="_RHQXgPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHUo8Pb4EeaMSqHUbqLyYA" name="Debug__Ex__IDLE__216">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ac__IDLE__IDLE__6&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RHQ-lPb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RBqF0Pb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RHQ-lfb4EeaMSqHUbqLyYA" name="Debug__AC__IDLE__IDLE__6" source="_RHQXgPb4EeaMSqHUbqLyYA" target="_RHQXgvb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHRlofb4EeaMSqHUbqLyYA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__AC__IDLE__IDLE__6&quot;,(char *)&quot;Debug__B__Ac__IDLE__IDLE__6&quot;,(char *)&quot;Debug__A__Ac__IDLE__IDLE__6&quot;,(char *)&quot;&quot;);

    this->choice = c;
</body>
                </effect>
                <trigger xmi:id="_RHRloPb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RBqF0Pb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RHRlovb4EeaMSqHUbqLyYA" name="Debug__En__IDLE" source="_RHQXgvb4EeaMSqHUbqLyYA" target="_RHQ-kPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHVQAPb4EeaMSqHUbqLyYA" name="Debug__En__IDLE__219">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__IDLE__IDLE__6&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RHRlo_b4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RBqF0Pb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_RHRlpPb4EeaMSqHUbqLyYA" name="Debug__end__trans__IDLE__IDLE__6" source="_RHQ-kPb4EeaMSqHUbqLyYA" target="_RHNUNPb4EeaMSqHUbqLyYA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RHV3EPb4EeaMSqHUbqLyYA" name="Debug__end__trans__IDLE__IDLE__6__221">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__end__trans__IDLE__IDLE__6&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_RHSMsPb4EeaMSqHUbqLyYA" name="Debug__Exec" port="_RBqF0Pb4EeaMSqHUbqLyYA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_RHPwcPb4EeaMSqHUbqLyYA" name="Debug__B__Ex__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RHPwcfb4EeaMSqHUbqLyYA" name="Debug__B__Ex__IDLE">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RHSMsfb4EeaMSqHUbqLyYA" name="Debug__B__Ex__IDLE__209">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RHQXgPb4EeaMSqHUbqLyYA" name="Debug__B__Ac__IDLE__IDLE__6">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RHQXgfb4EeaMSqHUbqLyYA" name="Debug__B__Ac__IDLE__IDLE__6">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__B__Ac__IDLE__IDLE__6&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE__IDLE__6&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RHSzwPb4EeaMSqHUbqLyYA" name="Debug__B__Ac__IDLE__IDLE__6__210">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__B__Ac__IDLE__IDLE__6&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RHQXgvb4EeaMSqHUbqLyYA" name="Debug__A__Ac__IDLE__IDLE__6">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RHQXg_b4EeaMSqHUbqLyYA" name="Debug__A__Ac__IDLE__IDLE__6">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__A__Ac__IDLE__IDLE__6&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE__IDLE__6&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RHSzwfb4EeaMSqHUbqLyYA" name="Debug__A__Ac__IDLE__IDLE__6__211">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__A__Ac__IDLE__IDLE__6&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_RHQ-kPb4EeaMSqHUbqLyYA" name="Debug__A__En__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RHQ-kfb4EeaMSqHUbqLyYA" name="Debug__A__En__IDLE">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_RHTa0Pb4EeaMSqHUbqLyYA" name="Debug__A__En__IDLE__212">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_RHXFMPb4EeaMSqHUbqLyYA" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_RB4vUfb4EeaMSqHUbqLyYA" name="Debug__variablesViewMethod" specification="_RB4vUPb4EeaMSqHUbqLyYA">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;choice,&quot;);
tempS.append(&quot;Integer,&quot;);
if(choice!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,choice);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
tempS.append(&quot;delay,&quot;);
tempS.append(&quot;Integer,&quot;);
if(delay!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,delay);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_RB59dPb4EeaMSqHUbqLyYA" name="Debug__variablesChange" specification="_RB59cPb4EeaMSqHUbqLyYA">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;delay&quot;==tempVarName){
    delay=atoi(varValue);
    return true;
}else if (&quot;choice&quot;==tempVarName){
    choice=atoi(varValue);
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_RDJTlfb4EeaMSqHUbqLyYA" name="Debug__sendEvent" specification="_RCelMPb4EeaMSqHUbqLyYA">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_RB4vUPb4EeaMSqHUbqLyYA" name="Debug__variablesView" visibility="private" method="_RB4vUfb4EeaMSqHUbqLyYA"/>
      <ownedOperation xmi:id="_RB59cPb4EeaMSqHUbqLyYA" name="Debug__variablesChange" visibility="private" method="_RB59dPb4EeaMSqHUbqLyYA">
        <ownedParameter xmi:id="_RB59cfb4EeaMSqHUbqLyYA" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RB59cvb4EeaMSqHUbqLyYA" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RB59c_b4EeaMSqHUbqLyYA" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_RCelMPb4EeaMSqHUbqLyYA" name="Debug__sendEvent" visibility="private" method="_RDJTlfb4EeaMSqHUbqLyYA">
        <ownedParameter xmi:id="_RCelMfb4EeaMSqHUbqLyYA" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RCnIEPb4EeaMSqHUbqLyYA" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RC6qEPb4EeaMSqHUbqLyYA" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RDB-0Pb4EeaMSqHUbqLyYA" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RDB-0fb4EeaMSqHUbqLyYA" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RDJTkPb4EeaMSqHUbqLyYA" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RDJTkfb4EeaMSqHUbqLyYA" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RDJTkvb4EeaMSqHUbqLyYA" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RDJTk_b4EeaMSqHUbqLyYA" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_RDJTlPb4EeaMSqHUbqLyYA" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_RDfSQMM5EeahHehXumVB-w" name="switchProtocol">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_RDbn4MM5EeahHehXumVB-w" name="switchProtocol">
        <interfaceRealization xmi:id="_RDkx0MM5EeahHehXumVB-w" client="_RDbn4MM5EeahHehXumVB-w" supplier="_RDiVkMM5EeahHehXumVB-w" contract="_RDiVkMM5EeahHehXumVB-w"/>
        <interfaceRealization xmi:id="_RDsGkMM5EeahHehXumVB-w" client="_RDbn4MM5EeahHehXumVB-w" supplier="_RDpDQMM5EeahHehXumVB-w" contract="_RDpDQMM5EeahHehXumVB-w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_RDiVkMM5EeahHehXumVB-w" name="switchProtocol"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_RDlY4MM5EeahHehXumVB-w" name="switchProtocol~">
        <ownedOperation xmi:id="_XR2R8MM5EeahHehXumVB-w" name="setSwitch">
          <ownedParameter xmi:id="_YFqUgMM5EeahHehXumVB-w" name="c">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_RDn1IMM5EeahHehXumVB-w" client="_RDbn4MM5EeahHehXumVB-w" supplier="_RDlY4MM5EeahHehXumVB-w"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_RDocMMM5EeahHehXumVB-w" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_RDpDQMM5EeahHehXumVB-w" name="switchProtocolIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_RDtUsMM5EeahHehXumVB-w" client="_RDbn4MM5EeahHehXumVB-w" supplier="_RDpDQMM5EeahHehXumVB-w"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_cjDs4MM5EeahHehXumVB-w" operation="_XR2R8MM5EeahHehXumVB-w"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_Q9q9sPb4EeaMSqHUbqLyYA" name="Debug__Top">
      <ownedAttribute xmi:id="_Q-pOEPb4EeaMSqHUbqLyYA" name="Debug__Gateway">
        <type xmi:type="uml:Class" href="../CommGateWay/model.uml#_XIyCcAdxEeadtKuU2t6fMg"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Q-tfgfb4EeaMSqHUbqLyYA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_Q-tfgvb4EeaMSqHUbqLyYA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_Q-wi0Pb4EeaMSqHUbqLyYA" name="Debug__Parcer_Router" type="_9X86YML5EeaSH8bbL43htA">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Q-1bUfb4EeaMSqHUbqLyYA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_Q-1bUvb4EeaMSqHUbqLyYA" value="1"/>
      </ownedAttribute>
    </packagedElement>
    <profileApplication xmi:id="_nykGUML5EeaSH8bbL43htA">
      <eAnnotations xmi:id="_nyl7gML5EeaSH8bbL43htA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:id="_8dJfAML5EeaSH8bbL43htA">
      <eAnnotations xmi:id="_8dKtIML5EeaSH8bbL43htA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UMLRT_CPP/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
    <profileApplication xmi:id="_8dLUMML5EeaSH8bbL43htA">
      <eAnnotations xmi:id="_8dL7QML5EeaSH8bbL43htA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:Capsule xmi:id="_9cQyoML5EeaSH8bbL43htA" base_Class="_9X86YML5EeaSH8bbL43htA"/>
  <UMLRealTime:Capsule xmi:id="_Gu9tEML6EeaSH8bbL43htA" base_Class="_GuPUUML6EeaSH8bbL43htA"/>
  <UMLRealTime:Capsule xmi:id="_Iu5kgML6EeaSH8bbL43htA" base_Class="_IuNA8ML6EeaSH8bbL43htA"/>
  <UMLRealTime:Capsule xmi:id="_LOpkcML6EeaSH8bbL43htA" base_Class="_LOPUwML6EeaSH8bbL43htA"/>
  <UMLRealTime:ProtocolContainer xmi:id="_QrF_AML6EeaSH8bbL43htA" base_Package="_QrBtkML6EeaSH8bbL43htA"/>
  <UMLRealTime:RTMessageSet xmi:id="_QrOh4ML6EeaSH8bbL43htA" base_Interface="_QrKQcML6EeaSH8bbL43htA"/>
  <UMLRealTime:RTMessageSet xmi:id="_QrWdsML6EeaSH8bbL43htA" base_Interface="_QrSzUML6EeaSH8bbL43htA" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_QrckUML6EeaSH8bbL43htA" base_Interface="_QrZhAML6EeaSH8bbL43htA" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_QrgOsML6EeaSH8bbL43htA" base_Collaboration="_Qq5xwML6EeaSH8bbL43htA"/>
  <UMLRealTime:RTPort xmi:id="_a5_b8ML6EeaSH8bbL43htA" base_Port="_a5ynoML6EeaSH8bbL43htA"/>
  <UMLRealTime:RTPort xmi:id="_ej0CUML6EeaSH8bbL43htA" base_Port="_ejuiwML6EeaSH8bbL43htA"/>
  <UMLRealTime:RTPort xmi:id="_gvt5MML6EeaSH8bbL43htA" base_Port="_gvpnwML6EeaSH8bbL43htA"/>
  <UMLRealTime:RTPort xmi:id="_ieknsML6EeaSH8bbL43htA" base_Port="_ieg9UML6EeaSH8bbL43htA"/>
  <UMLRealTime:RTPort xmi:id="_l2SKYML6EeaSH8bbL43htA" base_Port="_l2PuIML6EeaSH8bbL43htA"/>
  <UMLRealTime:CapsulePart xmi:id="_o94NcML6EeaSH8bbL43htA" base_Property="_o9z8AML6EeaSH8bbL43htA"/>
  <UMLRealTime:CapsulePart xmi:id="_sW7z8ML6EeaSH8bbL43htA" base_Property="_sW4woML6EeaSH8bbL43htA"/>
  <UMLRealTime:CapsulePart xmi:id="_uWJ5sML6EeaSH8bbL43htA" base_Property="_uWG2YML6EeaSH8bbL43htA"/>
  <UMLRealTime:CapsulePart xmi:id="_wXCMUML6EeaSH8bbL43htA" base_Property="_wW-h8ML6EeaSH8bbL43htA"/>
  <UMLRealTime:CapsulePart xmi:id="_zZAIgML6EeaSH8bbL43htA" base_Property="_zY9sQML6EeaSH8bbL43htA"/>
  <UMLRealTime:RTConnector xmi:id="_9hs20cL6EeaSH8bbL43htA" base_Connector="_9hn-UML6EeaSH8bbL43htA"/>
  <UMLRealTime:RTConnector xmi:id="_-P8c4sL6EeaSH8bbL43htA" base_Connector="_-P5ZkML6EeaSH8bbL43htA"/>
  <UMLRealTime:RTConnector xmi:id="_-9SrEcL6EeaSH8bbL43htA" base_Connector="_-9PnwML6EeaSH8bbL43htA"/>
  <UMLRealTime:RTPort xmi:id="_ihRg8ML7EeaSH8bbL43htA" isWired="false" base_Port="_ihPrwML7EeaSH8bbL43htA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_sgbRsML7EeaSH8bbL43htA" base_Pseudostate="_sgYOYML7EeaSH8bbL43htA"/>
  <UMLRTStateMachines:RTState xmi:id="_sggKMML7EeaSH8bbL43htA" base_State="_sgeVAML7EeaSH8bbL43htA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_sglCsML7EeaSH8bbL43htA" base_Region="_sgSu0ML7EeaSH8bbL43htA"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_shjTEML7EeaSH8bbL43htA" base_StateMachine="_sgJk4ML7EeaSH8bbL43htA"/>
  <UMLRealTime:RTPort xmi:id="_TGQH8ML8EeaSH8bbL43htA" isWired="false" base_Port="_TGKoYML8EeaSH8bbL43htA"/>
  <UMLRealTime:RTPort xmi:id="_QkHBsMMEEeaSH8bbL43htA" isWired="false" base_Port="_QkCwQMMEEeaSH8bbL43htA"/>
  <UMLRealTime:RTPort xmi:id="_P-0CoMMMEeaSH8bbL43htA" isWired="false" base_Port="_P-w_UMMMEeaSH8bbL43htA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_SANSoMMMEeaSH8bbL43htA" base_Pseudostate="_SAMEgMMMEeaSH8bbL43htA"/>
  <UMLRTStateMachines:RTState xmi:id="_SAPH0MMMEeaSH8bbL43htA" base_State="_SAN5sMMMEeaSH8bbL43htA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_SAPu4MMMEeaSH8bbL43htA" base_Region="_SAKPUMMMEeaSH8bbL43htA"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_SBGqkMMMEeaSH8bbL43htA" base_StateMachine="_SAHMAMMMEeaSH8bbL43htA"/>
  <UMLRealTime:RTConnector xmi:id="_0KCXUsMPEeaSH8bbL43htA" base_Connector="_0KAiIMMPEeaSH8bbL43htA"/>
  <UMLRealTime:RTConnector xmi:id="_02B6osMPEeaSH8bbL43htA" base_Connector="_02AFcMMPEeaSH8bbL43htA"/>
  <UMLRealTime:RTConnector xmi:id="_13cUUcMPEeaSH8bbL43htA" base_Connector="_13afIMMPEeaSH8bbL43htA"/>
  <UMLRealTime:RTConnector xmi:id="_2pYHkMMPEeaSH8bbL43htA" base_Connector="_2pVrUMMPEeaSH8bbL43htA"/>
  <UMLRealTime:CapsulePart xmi:id="_bKtWgMMQEeaSH8bbL43htA" base_Property="_bKsIYMMQEeaSH8bbL43htA"/>
  <UMLRealTime:CapsulePart xmi:id="_ex6GsMMQEeaSH8bbL43htA" base_Property="_ex4RgMMQEeaSH8bbL43htA"/>
  <UMLRealTime:CapsulePart xmi:id="_gzrKIMMQEeaSH8bbL43htA" base_Property="_gzot4MMQEeaSH8bbL43htA"/>
  <UMLRealTime:Capsule xmi:id="_j0w1YMM4EeahHehXumVB-w" base_Class="_jvOOEMM4EeahHehXumVB-w"/>
  <UMLRealTime:RTPort xmi:id="_p187wMM4EeahHehXumVB-w" base_Port="_p1u5UMM4EeahHehXumVB-w"/>
  <UMLRealTime:RTPort xmi:id="_sK-SYMM4EeahHehXumVB-w" base_Port="_sK7PEMM4EeahHehXumVB-w"/>
  <UMLRealTime:RTPort xmi:id="_v-PIoMM4EeahHehXumVB-w" base_Port="_v-KQIMM4EeahHehXumVB-w"/>
  <UMLRealTime:ProtocolContainer xmi:id="_wvSyIMM4EeahHehXumVB-w" base_Package="_wvPHwMM4EeahHehXumVB-w"/>
  <UMLRealTime:RTMessageSet xmi:id="_wvY4wMM4EeahHehXumVB-w" base_Interface="_wvV1cMM4EeahHehXumVB-w"/>
  <UMLRealTime:RTMessageSet xmi:id="_wve_YMM4EeahHehXumVB-w" base_Interface="_wvcjIMM4EeahHehXumVB-w" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_wvke8MM4EeahHehXumVB-w" base_Interface="_wviCsMM4EeahHehXumVB-w" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_wvniQMM4EeahHehXumVB-w" base_Collaboration="_wvKPQMM4EeahHehXumVB-w"/>
  <UMLRealTime:Capsule xmi:id="_AJ77MMM5EeahHehXumVB-w" base_Class="_AJLGMMM5EeahHehXumVB-w"/>
  <UMLRealTime:RTPort xmi:id="_CHYfUMM5EeahHehXumVB-w" base_Port="_CHUN4MM5EeahHehXumVB-w"/>
  <UMLRealTime:Capsule xmi:id="_O_8GIMM5EeahHehXumVB-w" base_Class="_O_UbEMM5EeahHehXumVB-w"/>
  <UMLRealTime:ProtocolContainer xmi:id="_RDhugMM5EeahHehXumVB-w" base_Package="_RDfSQMM5EeahHehXumVB-w"/>
  <UMLRealTime:RTMessageSet xmi:id="_RDkKwMM5EeahHehXumVB-w" base_Interface="_RDiVkMM5EeahHehXumVB-w"/>
  <UMLRealTime:RTMessageSet xmi:id="_RDnOEMM5EeahHehXumVB-w" base_Interface="_RDlY4MM5EeahHehXumVB-w" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_RDrfgMM5EeahHehXumVB-w" base_Interface="_RDpDQMM5EeahHehXumVB-w" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_RDt7wMM5EeahHehXumVB-w" base_Collaboration="_RDbn4MM5EeahHehXumVB-w"/>
  <UMLRealTime:RTPort xmi:id="_gMcOYMM5EeahHehXumVB-w" base_Port="_gMZLEMM5EeahHehXumVB-w"/>
  <UMLRealTime:RTPort xmi:id="_m5f8QMM5EeahHehXumVB-w" base_Port="_m5dgAMM5EeahHehXumVB-w"/>
  <UMLRealTime:RTPort xmi:id="_0csbgMM5EeahHehXumVB-w" base_Port="_0cp_QMM5EeahHehXumVB-w"/>
  <UMLRealTime:RTPort xmi:id="_3ton0MM5EeahHehXumVB-w" base_Port="_3tk9cMM5EeahHehXumVB-w"/>
  <UMLRealTime:CapsulePart xmi:id="_8dOjcMM5EeahHehXumVB-w" base_Property="_8dMHMMM5EeahHehXumVB-w"/>
  <UMLRealTime:CapsulePart xmi:id="_ANxc4MM6EeahHehXumVB-w" base_Property="_ANvnsMM6EeahHehXumVB-w"/>
  <UMLRealTime:CapsulePart xmi:id="_DptYQMM6EeahHehXumVB-w" base_Property="_Dpq8AMM6EeahHehXumVB-w"/>
  <UMLRealTime:RTConnector xmi:id="_GmrfssM6EeahHehXumVB-w" base_Connector="_GmpDcMM6EeahHehXumVB-w"/>
  <UMLRealTime:RTConnector xmi:id="_JFkkAsM6EeahHehXumVB-w" base_Connector="_JFiHwMM6EeahHehXumVB-w"/>
  <UMLRealTime:CapsulePart xmi:id="_KEoNQMM6EeahHehXumVB-w" base_Property="_KElJ8MM6EeahHehXumVB-w"/>
  <UMLRealTime:RTConnector xmi:id="_Ni31wsM6EeahHehXumVB-w" base_Connector="_Ni2AkMM6EeahHehXumVB-w"/>
  <UMLRealTime:RTConnector xmi:id="_Q2uzMMM6EeahHehXumVB-w" base_Connector="_Q2rv4MM6EeahHehXumVB-w"/>
  <UMLRealTime:RTConnector xmi:id="_TMfwscM6EeahHehXumVB-w" base_Connector="_TMcGUMM6EeahHehXumVB-w"/>
  <UMLRealTime:RTConnector xmi:id="_T-WEYcM6EeahHehXumVB-w" base_Connector="_T-SaAMM6EeahHehXumVB-w"/>
  <UMLRealTime:RTPort xmi:id="_VxL7AMM6EeahHehXumVB-w" base_Port="_VxKF0MM6EeahHehXumVB-w"/>
  <UMLRealTime:RTConnector xmi:id="_fBwHcsM6EeahHehXumVB-w" base_Connector="_fBuSQMM6EeahHehXumVB-w"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_mXF9UMM6EeahHehXumVB-w" base_StateMachine="_mXBE0MM6EeahHehXumVB-w"/>
  <UMLRTStateMachines:RTRegion xmi:id="_mXGkYMM6EeahHehXumVB-w" base_Region="_mXBE0cM6EeahHehXumVB-w"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_mXHLcMM6EeahHehXumVB-w" base_Pseudostate="_mXBE18M6EeahHehXumVB-w"/>
  <UMLRTStateMachines:RTState xmi:id="_mXHygMM6EeahHehXumVB-w" base_State="_mXBE2MM6EeahHehXumVB-w"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_IdGZUMM7EeahHehXumVB-w" base_StateMachine="_IdCu8MM7EeahHehXumVB-w"/>
  <UMLRTStateMachines:RTRegion xmi:id="_IdHAYMM7EeahHehXumVB-w" base_Region="_IdCu8cM7EeahHehXumVB-w"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_IdHncMM7EeahHehXumVB-w" base_Pseudostate="_IdDWBcM7EeahHehXumVB-w"/>
  <UMLRTStateMachines:RTState xmi:id="_IdHnccM7EeahHehXumVB-w" base_State="_IdDWBsM7EeahHehXumVB-w"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_yUREgMM7EeahHehXumVB-w" base_Pseudostate="_yUOoQMM7EeahHehXumVB-w"/>
  <UMLRTStateMachines:RTState xmi:id="_yUTgwMM7EeahHehXumVB-w" base_State="_yUSSoMM7EeahHehXumVB-w"/>
  <UMLRTStateMachines:RTRegion xmi:id="_yUUu4MM7EeahHehXumVB-w" base_Region="_yUMMAMM7EeahHehXumVB-w"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_yVXQsMM7EeahHehXumVB-w" base_StateMachine="_yUE3QMM7EeahHehXumVB-w"/>
  <UMLRealTime:RTPort xmi:id="_uL4n8MM9EeahHehXumVB-w" isWired="false" base_Port="_uL2LsMM9EeahHehXumVB-w"/>
  <UMLRealTime:RTPort xmi:id="_qxaXcMX2EeaYV5cb1Zesag" isWired="false" base_Port="_qxGOYMX2EeaYV5cb1Zesag"/>
  <UMLRealTime:RTPort xmi:id="_x2xQkMX2EeaYV5cb1Zesag" isWired="false" base_Port="_x2tmMMX2EeaYV5cb1Zesag"/>
  <UMLRTStateMachines:RTState xmi:id="_k2x6IMX4EeaYV5cb1Zesag" base_State="_k2uPwMX4EeaYV5cb1Zesag"/>
  <UMLRealTime:RTPort xmi:id="_Wbb1cMX5EeaYV5cb1Zesag" isWired="false" base_Port="_WbYyIMX5EeaYV5cb1Zesag"/>
  <UMLRTStateMachines:RTState xmi:id="_GOUpoMYlEeaYV5cb1Zesag" base_State="_GOTbgMYlEeaYV5cb1Zesag"/>
  <UMLRealTime:RTPort xmi:id="_4c99IMYlEeaYV5cb1Zesag" isWired="false" base_Port="_4c8vAMYlEeaYV5cb1Zesag"/>
  <RTCppProperties:PassiveClassProperties xmi:id="_TuYcgN5nEeakB9CQglrL_g" headerPreface="" base_Class="_aEoEwML7EeaSH8bbL43htA" privateDeclarations="" publicDeclarations=""/>
  <UMLRealTime:Capsule xmi:id="_Q-nY4Pb4EeaMSqHUbqLyYA" base_Class="_Q9q9sPb4EeaMSqHUbqLyYA"/>
  <UMLRealTime:CapsulePart xmi:id="_Q-tfgPb4EeaMSqHUbqLyYA" base_Property="_Q-pOEPb4EeaMSqHUbqLyYA"/>
  <UMLRealTime:CapsulePart xmi:id="_Q-1bUPb4EeaMSqHUbqLyYA" base_Property="_Q-wi0Pb4EeaMSqHUbqLyYA"/>
  <UMLRealTime:RTPort xmi:id="_Q-7h8Pb4EeaMSqHUbqLyYA" isNotification="true" isWired="false" base_Port="_Q-3QgPb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:AttributeProperties xmi:id="_Q_KLcPb4EeaMSqHUbqLyYA" type="debugEvents::Event" base_Property="_Q_F6Afb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:AttributeProperties xmi:id="_Q_RgMPb4EeaMSqHUbqLyYA" type="SROManager" base_Property="_Q_NOwPb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:CapsuleProperties xmi:id="_Q_aDEPb4EeaMSqHUbqLyYA" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_AJLGMMM5EeahHehXumVB-w"/>
  <RTCppProperties:ParameterProperties xmi:id="_Q_vaQPb4EeaMSqHUbqLyYA" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_Q_qhwfb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:ParameterProperties xmi:id="_Q_3WEPb4EeaMSqHUbqLyYA" type="debugEvents::EVENTTYPE" base_Parameter="_Q_zEoPb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:ParameterProperties xmi:id="_Q__48Pb4EeaMSqHUbqLyYA" type="const char *" base_Parameter="_Q_7ngPb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:ParameterProperties xmi:id="_RAIb0Pb4EeaMSqHUbqLyYA" type="const char *" base_Parameter="_RAExcfb4EeaMSqHUbqLyYA"/>
  <UMLRealTime:RTPort xmi:id="_RATa8Pb4EeaMSqHUbqLyYA" isNotification="true" isWired="false" base_Port="_RAPJgPb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:AttributeProperties xmi:id="_RAiEcPb4EeaMSqHUbqLyYA" type="debugEvents::Event" base_Property="_RAdzAvb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:AttributeProperties xmi:id="_RAqnUPb4EeaMSqHUbqLyYA" type="SROManager" base_Property="_RAlu0Pb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:CapsuleProperties xmi:id="_RAyjIPb4EeaMSqHUbqLyYA" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_jvOOEMM4EeahHehXumVB-w"/>
  <RTCppProperties:ParameterProperties xmi:id="_RBIhYPb4EeaMSqHUbqLyYA" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_RBEP8Pb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:ParameterProperties xmi:id="_RBSSYPb4EeaMSqHUbqLyYA" type="debugEvents::EVENTTYPE" base_Parameter="_RBOA8Pb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:ParameterProperties xmi:id="_RBcDYPb4EeaMSqHUbqLyYA" type="const char *" base_Parameter="_RBV8wPb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:ParameterProperties xmi:id="_RBkmQPb4EeaMSqHUbqLyYA" type="const char *" base_Parameter="_RBg74Pb4EeaMSqHUbqLyYA"/>
  <UMLRealTime:RTPort xmi:id="_RBuXQPb4EeaMSqHUbqLyYA" isNotification="true" isWired="false" base_Port="_RBqF0Pb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:AttributeProperties xmi:id="_RB-18Pb4EeaMSqHUbqLyYA" type="debugEvents::Event" base_Property="_RB59d_b4EeaMSqHUbqLyYA"/>
  <RTCppProperties:AttributeProperties xmi:id="_RCGKsPb4EeaMSqHUbqLyYA" type="SROManager" base_Property="_RCCgUPb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:CapsuleProperties xmi:id="_RCOGgPb4EeaMSqHUbqLyYA" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_O_UbEMM5EeahHehXumVB-w"/>
  <RTCppProperties:ParameterProperties xmi:id="_RCi2oPb4EeaMSqHUbqLyYA" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_RCelMfb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:ParameterProperties xmi:id="_RCqycPb4EeaMSqHUbqLyYA" type="debugEvents::EVENTTYPE" base_Parameter="_RCnIEPb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:ParameterProperties xmi:id="_RC-UcPb4EeaMSqHUbqLyYA" type="const char *" base_Parameter="_RC6qEPb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:ParameterProperties xmi:id="_RDFpMPb4EeaMSqHUbqLyYA" type="const char *" base_Parameter="_RDB-0fb4EeaMSqHUbqLyYA"/>
  <UMLRealTime:RTPort xmi:id="_RDOMEPb4EeaMSqHUbqLyYA" isNotification="true" isWired="false" base_Port="_RDKhsPb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:AttributeProperties xmi:id="_RDaZUPb4EeaMSqHUbqLyYA" type="debugEvents::Event" base_Property="_RDWu8vb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:AttributeProperties xmi:id="_RDhHAPb4EeaMSqHUbqLyYA" type="SROManager" base_Property="_RDeDsPb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:CapsuleProperties xmi:id="_RDn0sPb4EeaMSqHUbqLyYA" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_LOPUwML6EeaSH8bbL43htA"/>
  <RTCppProperties:ParameterProperties xmi:id="_RD5hgPb4EeaMSqHUbqLyYA" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_RD2eMPb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:ParameterProperties xmi:id="_REAPMPb4EeaMSqHUbqLyYA" type="debugEvents::EVENTTYPE" base_Parameter="_RD8k0Pb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:ParameterProperties xmi:id="_REHj8Pb4EeaMSqHUbqLyYA" type="const char *" base_Parameter="_REEgoPb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:ParameterProperties xmi:id="_REO4sPb4EeaMSqHUbqLyYA" type="const char *" base_Parameter="_RELOUfb4EeaMSqHUbqLyYA"/>
  <UMLRealTime:RTPort xmi:id="_REW0gPb4EeaMSqHUbqLyYA" isNotification="true" isWired="false" base_Port="_RETxMPb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:AttributeProperties xmi:id="_REjo0Pb4EeaMSqHUbqLyYA" type="debugEvents::Event" base_Property="_REglgfb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:AttributeProperties xmi:id="_REq9kPb4EeaMSqHUbqLyYA" type="SROManager" base_Property="_REnTMPb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:CapsuleProperties xmi:id="_REySUPb4EeaMSqHUbqLyYA" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_GuPUUML6EeaSH8bbL43htA"/>
  <RTCppProperties:ParameterProperties xmi:id="_RFDYEPb4EeaMSqHUbqLyYA" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_RE_tsfb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:ParameterProperties xmi:id="_RFKs0Pb4EeaMSqHUbqLyYA" type="debugEvents::EVENTTYPE" base_Parameter="_RFHCcPb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:ParameterProperties xmi:id="_RFRagPb4EeaMSqHUbqLyYA" type="const char *" base_Parameter="_RFNwIPb4EeaMSqHUbqLyYA"/>
  <RTCppProperties:ParameterProperties xmi:id="_RFYvQPb4EeaMSqHUbqLyYA" type="const char *" base_Parameter="_RFVE4fb4EeaMSqHUbqLyYA"/>
</xmi:XMI>
