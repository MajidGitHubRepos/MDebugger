<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_nx1tkML5EeaSH8bbL43htA" name="RootElement">
    <eAnnotations xmi:id="_IbhgEML7EeaSH8bbL43htA" source="UMLRT_Default_top">
      <details xmi:id="_IbjVQML7EeaSH8bbL43htA" key="top_name" value="Debug__Top"/>
    </eAnnotations>
    <packageImport xmi:id="_IJSbgPJZEeauO5SNGpOV7w">
      <importedPackage xmi:type="uml:Model" href="../CommGateWay/model.uml#_MZw7AAdxEeadtKuU2t6fMg"/>
    </packageImport>
    <packagedElement xmi:type="uml:Class" xmi:id="_9X86YML5EeaSH8bbL43htA" name="Parcer_Router" isActive="true">
      <ownedAttribute xmi:id="_o9z8AML6EeaSH8bbL43htA" name="gen" visibility="protected" type="_GuPUUML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_sW4woML6EeaSH8bbL43htA" name="top" visibility="protected" type="_IuNA8ML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_uWG2YML6EeaSH8bbL43htA" name="right" visibility="protected" type="_IuNA8ML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_wW-h8ML6EeaSH8bbL43htA" name="left" visibility="protected" type="_IuNA8ML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_zY9sQML6EeaSH8bbL43htA" name="bin1" visibility="protected" type="_LOPUwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_YaaZIMMQEeaSH8bbL43htA" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_YaWHsMMQEeaSH8bbL43htA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_bKsIYMMQEeaSH8bbL43htA" name="bin2" visibility="protected" type="_LOPUwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_ex4RgMMQEeaSH8bbL43htA" name="bin3" visibility="protected" type="_LOPUwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_gzot4MMQEeaSH8bbL43htA" name="bin0" visibility="protected" type="_LOPUwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite"/>
      <ownedConnector xmi:id="_9hn-UML6EeaSH8bbL43htA" name="RTConnector1">
        <end xmi:id="_9hsPwML6EeaSH8bbL43htA" partWithPort="_o9z8AML6EeaSH8bbL43htA" role="_a5ynoML6EeaSH8bbL43htA"/>
        <end xmi:id="_9hs20ML6EeaSH8bbL43htA" partWithPort="_sW4woML6EeaSH8bbL43htA" role="_ejuiwML6EeaSH8bbL43htA"/>
      </ownedConnector>
      <ownedConnector xmi:id="_-P5ZkML6EeaSH8bbL43htA" name="RTConnector2">
        <end xmi:id="_-P8c4ML6EeaSH8bbL43htA" partWithPort="_sW4woML6EeaSH8bbL43htA" role="_gvpnwML6EeaSH8bbL43htA"/>
        <end xmi:id="_-P8c4cL6EeaSH8bbL43htA" partWithPort="_uWG2YML6EeaSH8bbL43htA" role="_ejuiwML6EeaSH8bbL43htA"/>
      </ownedConnector>
      <ownedConnector xmi:id="_-9PnwML6EeaSH8bbL43htA" name="RTConnector3">
        <end xmi:id="_-9SEAML6EeaSH8bbL43htA" partWithPort="_sW4woML6EeaSH8bbL43htA" role="_ieg9UML6EeaSH8bbL43htA"/>
        <end xmi:id="_-9SrEML6EeaSH8bbL43htA" partWithPort="_wW-h8ML6EeaSH8bbL43htA" role="_ejuiwML6EeaSH8bbL43htA"/>
      </ownedConnector>
      <ownedConnector xmi:id="_0KAiIMMPEeaSH8bbL43htA" name="RTConnector4">
        <end xmi:id="_0KCXUMMPEeaSH8bbL43htA" partWithPort="_uWG2YML6EeaSH8bbL43htA" role="_gvpnwML6EeaSH8bbL43htA"/>
        <end xmi:id="_0KCXUcMPEeaSH8bbL43htA" partWithPort="_ex4RgMMQEeaSH8bbL43htA" role="_l2PuIML6EeaSH8bbL43htA"/>
      </ownedConnector>
      <ownedConnector xmi:id="_02AFcMMPEeaSH8bbL43htA" name="RTConnector5">
        <end xmi:id="_02B6oMMPEeaSH8bbL43htA" partWithPort="_uWG2YML6EeaSH8bbL43htA" role="_ieg9UML6EeaSH8bbL43htA"/>
        <end xmi:id="_02B6ocMPEeaSH8bbL43htA" partWithPort="_bKsIYMMQEeaSH8bbL43htA" role="_l2PuIML6EeaSH8bbL43htA"/>
      </ownedConnector>
      <ownedConnector xmi:id="_13afIMMPEeaSH8bbL43htA" name="RTConnector6">
        <end xmi:id="_13btQMMPEeaSH8bbL43htA" partWithPort="_wW-h8ML6EeaSH8bbL43htA" role="_gvpnwML6EeaSH8bbL43htA"/>
        <end xmi:id="_13cUUMMPEeaSH8bbL43htA" partWithPort="_zY9sQML6EeaSH8bbL43htA" role="_l2PuIML6EeaSH8bbL43htA"/>
      </ownedConnector>
      <ownedConnector xmi:id="_2pVrUMMPEeaSH8bbL43htA" name="RTConnector7">
        <end xmi:id="_2pXggMMPEeaSH8bbL43htA" partWithPort="_wW-h8ML6EeaSH8bbL43htA" role="_ieg9UML6EeaSH8bbL43htA"/>
        <end xmi:id="_2pXggcMPEeaSH8bbL43htA" partWithPort="_gzot4MMQEeaSH8bbL43htA" role="_l2PuIML6EeaSH8bbL43htA"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_GuPUUML6EeaSH8bbL43htA" name="Gen" classifierBehavior="_sgJk4ML7EeaSH8bbL43htA" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_a5ynoML6EeaSH8bbL43htA" name="enter" visibility="public" type="_Qq5xwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ihPrwML7EeaSH8bbL43htA" name="timer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_TGKoYML8EeaSH8bbL43htA" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_37GIwML8EeaSH8bbL43htA" name="parcel" type="_aEoEwML7EeaSH8bbL43htA">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_48hwkML8EeaSH8bbL43htA"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_48kM0ML8EeaSH8bbL43htA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_zN4IcMYtEeaYV5cb1Zesag" name="delay">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_9chtwMYtEeaYV5cb1Zesag" value="8"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_BH5zUMYuEeaYV5cb1Zesag" name="successorFree">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_IMguoPJZEeauO5SNGpOV7w" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_IMjx8fJZEeauO5SNGpOV7w" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_IMkZAPJZEeauO5SNGpOV7w" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_IMuKAPJZEeauO5SNGpOV7w" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_IMuKAfJZEeauO5SNGpOV7w" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_IMuKAvJZEeauO5SNGpOV7w" name="Debug__event"/>
      <ownedAttribute xmi:id="_IM1ewPJZEeauO5SNGpOV7w" name="Debug__SRO"/>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_sgJk4ML7EeaSH8bbL43htA" name="GenStateMachine" isReentrant="false">
        <region xmi:id="_sgSu0ML7EeaSH8bbL43htA" name="Region">
          <transition xmi:id="_sgjNgML7EeaSH8bbL43htA" name="Initial" source="_ITT6MPJZEeauO5SNGpOV7w" target="_sgeVAML7EeaSH8bbL43htA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_6ZnPEML7EeaSH8bbL43htA">
              <language>C++</language>
              <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;GENERATING&quot;,(char *)&quot;&quot;);
    srand(time(0));
    timer.informEvery(UMLRTTimespec(4,0));
</body>
            </effect>
          </transition>
          <transition xmi:id="_yYjisML7EeaSH8bbL43htA" name="GENERATING__GENERATING__19" source="_ITan4PJZEeauO5SNGpOV7w" target="_sgeVAML7EeaSH8bbL43htA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_I7aroML8EeaSH8bbL43htA" name="generation">
              <language>C++</language>
              <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::GENERATING__GENERATING__19&quot;,(char *)&quot;Debug__Path__GENERATING__GENERATING__19&quot;,(char *)&quot;GENERATING&quot;,(char *)&quot;&quot;);
    if (!this->successorFree) {
    log.show(&quot;impossible to generate a new parcel: the first chute is obfuscated\n&quot;);
    }
    else {  
    int random = rand() % 4;
    parcel = Parcel();
    parcel.number = random;
    parcel.stage = 0; // 0 for &quot;top&quot;, 1 for &quot;left&quot;, 2 for &quot;right&quot;
    parcel.level = 2;
    enter.transmit(parcel).send();
    log.show(&quot;generating a parcel %d on stage %d\n&quot;, random, parcel.stage);
    this->successorFree = false;
    }
</body>
            </effect>
          </transition>
          <transition xmi:id="_mEQaEMYdEeaYV5cb1Zesag" name="GENERATING__GENERATING__17" source="_ITKwQPJZEeauO5SNGpOV7w" target="_sgeVAML7EeaSH8bbL43htA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_GNInwMYuEeaYV5cb1Zesag">
              <language>C++</language>
              <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::GENERATING__GENERATING__17&quot;,(char *)&quot;Debug__Path__GENERATING__GENERATING__17&quot;,(char *)&quot;GENERATING&quot;,(char *)&quot;&quot;);
    this->successorFree = free;
</body>
            </effect>
          </transition>
          <transition xmi:id="_ITLXUPJZEeauO5SNGpOV7w" name="Debug__GENERATING__GENERATING__17" source="_sgeVAML7EeaSH8bbL43htA" target="_ITKwQPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITLXUfJZEeauO5SNGpOV7w" name="Debug__GENERATING__GENERATING__17__420">
              <language>C++</language>
              <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__GENERATING__GENERATING__17&quot;,(char *)&quot;GENERATING&quot;,(char *)&quot;Debug__Path__GENERATING__GENERATING__17&quot;,(char *)&quot;&quot;);
</body>
            </effect>
            <trigger xmi:id="_rdPQ8MYdEeaYV5cb1Zesag" event="_OTwdgMOlEeaV4cHHWddkKg" port="_a5ynoML6EeaSH8bbL43htA"/>
          </transition>
          <transition xmi:id="_ITLXUvJZEeauO5SNGpOV7w" name="Debug__GENERATING__GENERATING__17__S" guard="_ITL-YfJZEeauO5SNGpOV7w" source="_ITKwQPJZEeauO5SNGpOV7w" target="_ITKwQ_JZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_ITL-YfJZEeauO5SNGpOV7w" name="Debug__GuardGENERATING__GENERATING__17">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_ITL-YPJZEeauO5SNGpOV7w" name="Debug__GuardGENERATING__GENERATING__17">
                <language>C++</language>
                <body>    return Debug__SRO.checkDebug(&quot;GENERATING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITL-YvJZEeauO5SNGpOV7w" name="Debug__GENERATING__GENERATING__17__S__422">
              <language>C++</language>
              <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__GENERATING__GENERATING__17__S&quot;,(char *)&quot;Debug__Path__GENERATING__GENERATING__17&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_ITMlcPJZEeauO5SNGpOV7w" name="Debug__GENERATING__GENERATING__17__E" source="_ITKwRPJZEeauO5SNGpOV7w" target="_sgeVAML7EeaSH8bbL43htA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITMlcfJZEeauO5SNGpOV7w" name="Debug__GENERATING__GENERATING__17__E__424">
              <language>C++</language>
              <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__GENERATING__GENERATING__17__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;GENERATING&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_ITMlcvJZEeauO5SNGpOV7w" name="Debug__GENERATING__GENERATING__17__dbg" source="_ITKwQfJZEeauO5SNGpOV7w" target="_ITKwQfJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITNMgPJZEeauO5SNGpOV7w" name="Debug__GENERATING__GENERATING__17__dbg__426">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__GENERATING__GENERATING__17__dbg&quot;,(char *)&quot;Debug__C__GENERATING__GENERATING__17&quot;,(char *)&quot;Debug__C__GENERATING__GENERATING__17&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_ITMlc_JZEeauO5SNGpOV7w" name="Debug__MSG" port="_IMguoPJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_ITT6NfJZEeauO5SNGpOV7w" name="Debug__Initial" source="_ITjKwPJZEeauO5SNGpOV7w" target="_ITT6MPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITT6NvJZEeauO5SNGpOV7w" name="Debug__Initial__442">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;transmit&quot;,&quot;transmission&quot;);
Debug__SRO.addTransitionsFromState(&quot;OCCUPIED&quot;,&quot;transmission&quot;,&quot;jam ?&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;setSwitch&quot;,&quot;switchProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;jam ?&quot;,&quot;&quot;,&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;jam ?&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;reception&quot;,&quot;OCCUPIED&quot;,&quot;transmit&quot;,&quot;transmission&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;setFree&quot;,&quot;transmission&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;GENERATING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;GENERATING&quot;,&quot;&quot;,&quot;GENERATING&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Jam ?&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;OCCUPIED&quot;,&quot;setFree&quot;,&quot;transmission&quot;);
Debug__SRO.addTransitionsFromState(&quot;Jam ?&quot;,&quot;&quot;,&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;OCCUPIED&quot;,&quot;transmission&quot;,&quot;Jam ?&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;OCCUPIED&quot;,&quot;setSwitch&quot;,&quot;switchProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;GENERATING&quot;,&quot;&quot;,&quot;GENERATING&quot;,&quot;setFree&quot;,&quot;transmission&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),(char *) &quot;&quot;,(char *) &quot;&quot;,(char *) &quot;&quot;,(char *)&quot;&quot;,(char *) &quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_ITjx0fJZEeauO5SNGpOV7w" name="ConnectionEstablished" port="_IMguoPJZEeauO5SNGpOV7w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_ITUhQPJZEeauO5SNGpOV7w" name="Debug__Initial__S" guard="_ITUhQvJZEeauO5SNGpOV7w" source="_ITT6MPJZEeauO5SNGpOV7w" target="_ITT6M_JZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_ITUhQvJZEeauO5SNGpOV7w" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_ITUhQfJZEeauO5SNGpOV7w" name="Debug__GuardInitial">
                <language>C++</language>
                <body>    return Debug__SRO.checkDebug(&quot;Pseudo18&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITUhQ_JZEeauO5SNGpOV7w" name="Debug__Initial__S__444">
              <language>C++</language>
              <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_ITVIUPJZEeauO5SNGpOV7w" name="Debug__Initial__E" source="_ITT6NPJZEeauO5SNGpOV7w" target="_sgeVAML7EeaSH8bbL43htA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITVIUfJZEeauO5SNGpOV7w" name="Debug__Initial__E__446">
              <language>C++</language>
              <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;GENERATING&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_ITVIUvJZEeauO5SNGpOV7w" name="Debug__Initial__dbg" source="_ITT6MfJZEeauO5SNGpOV7w" target="_ITT6MfJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITVvYfJZEeauO5SNGpOV7w" name="Debug__Initial__dbg__448">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__Initial__dbg&quot;,(char *)&quot;Debug__C__Initial&quot;,(char *)&quot;Debug__C__Initial&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_ITVvYPJZEeauO5SNGpOV7w" name="Debug__MSG" port="_IMguoPJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_ITbO9PJZEeauO5SNGpOV7w" name="Debug__GENERATING__GENERATING__19" source="_sgeVAML7EeaSH8bbL43htA" target="_ITan4PJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITbO9fJZEeauO5SNGpOV7w" name="Debug__GENERATING__GENERATING__19__461">
              <language>C++</language>
              <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__GENERATING__GENERATING__19&quot;,(char *)&quot;GENERATING&quot;,(char *)&quot;Debug__Path__GENERATING__GENERATING__19&quot;,(char *)&quot;&quot;);
</body>
            </effect>
            <trigger xmi:id="_1e0JAML7EeaSH8bbL43htA" port="_ihPrwML7EeaSH8bbL43htA">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_ITb2APJZEeauO5SNGpOV7w" name="Debug__GENERATING__GENERATING__19__S" guard="_ITb2AvJZEeauO5SNGpOV7w" source="_ITan4PJZEeauO5SNGpOV7w" target="_ITbO8vJZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_ITb2AvJZEeauO5SNGpOV7w" name="Debug__GuardGENERATING__GENERATING__19">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_ITb2AfJZEeauO5SNGpOV7w" name="Debug__GuardGENERATING__GENERATING__19">
                <language>C++</language>
                <body>    return Debug__SRO.checkDebug(&quot;GENERATING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITb2A_JZEeauO5SNGpOV7w" name="Debug__GENERATING__GENERATING__19__S__463">
              <language>C++</language>
              <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__GENERATING__GENERATING__19__S&quot;,(char *)&quot;Debug__Path__GENERATING__GENERATING__19&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_ITcdEPJZEeauO5SNGpOV7w" name="Debug__GENERATING__GENERATING__19__E" source="_ITbO8_JZEeauO5SNGpOV7w" target="_sgeVAML7EeaSH8bbL43htA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITcdEfJZEeauO5SNGpOV7w" name="Debug__GENERATING__GENERATING__19__E__465">
              <language>C++</language>
              <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__GENERATING__GENERATING__19__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;GENERATING&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_ITcdEvJZEeauO5SNGpOV7w" name="Debug__GENERATING__GENERATING__19__dbg" source="_ITbO8PJZEeauO5SNGpOV7w" target="_ITbO8PJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITdEIPJZEeauO5SNGpOV7w" name="Debug__GENERATING__GENERATING__19__dbg__467">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__GENERATING__GENERATING__19__dbg&quot;,(char *)&quot;Debug__C__GENERATING__GENERATING__19&quot;,(char *)&quot;Debug__C__GENERATING__GENERATING__19&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_ITcdE_JZEeauO5SNGpOV7w" name="Debug__MSG" port="_IMguoPJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_ITjKwfJZEeauO5SNGpOV7w" name="Debug__InitDebug" source="_sgYOYML7EeaSH8bbL43htA" target="_ITjKwPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITjx0PJZEeauO5SNGpOV7w" name="DebugCheck">
              <language>C++</language>
              <body>    std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    std::string tempS;
    std::cout&lt;&lt;&quot;Enter 1 for running in debug mode, any other key for normal model\n&quot;;
    std::cin>> tempS;
    if (tempS==&quot;1&quot;)
    this->Debug__SRO.setExecMode(Stepping);
    else
    this->Debug__SRO.setExecMode(Running);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_sgYOYML7EeaSH8bbL43htA" name="Pseudo18"/>
          <subvertex xmi:type="uml:State" xmi:id="_sgeVAML7EeaSH8bbL43htA" name="GENERATING">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IToDQPJZEeauO5SNGpOV7w" name="GENERATING__482">
              <language>C++</language>
              <body>    if( not Debug__SRO.checkDebug(&quot;GENERATING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::GENERATING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
    }
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IToDQfJZEeauO5SNGpOV7w" name="GENERATING__483">
              <language>C++</language>
              <body>    if( not Debug__SRO.checkDebug(&quot;GENERATING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::GENERATING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
    }
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_ITKwQPJZEeauO5SNGpOV7w" name="Debug__Path__GENERATING__GENERATING__17" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_ITKwQfJZEeauO5SNGpOV7w" name="Debug__C__GENERATING__GENERATING__17">
            <connectionPoint xmi:id="_ITKwQ_JZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_ITKwRPJZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_ITKwQvJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_ITOaovJZEeauO5SNGpOV7w" name="Debug__init__trans__GENERATING__GENERATING__17" source="_ITKwQ_JZEeauO5SNGpOV7w" target="_ITNMgfJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITQ24PJZEeauO5SNGpOV7w" name="Debug__init__trans__GENERATING__GENERATING__17__432">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__17::Region1::Debug__init__trans__GENERATING__GENERATING__17&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__GENERATING&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_ITOao_JZEeauO5SNGpOV7w" name="Debug__Ex__GENERATING" source="_ITNMgfJZEeauO5SNGpOV7w" target="_ITNMg_JZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITRd8PJZEeauO5SNGpOV7w" name="Debug__Ex__GENERATING__434">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__17::Region1::Debug__Ex__GENERATING&quot;,(char *)&quot;Debug__B__Ex__GENERATING&quot;,(char *)&quot;Debug__B__Ac__GENERATING__GENERATING__17&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_ITOapPJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IMguoPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ITOapfJZEeauO5SNGpOV7w" name="Debug__AC__GENERATING__GENERATING__17" source="_ITNMg_JZEeauO5SNGpOV7w" target="_ITNzkPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITOap_JZEeauO5SNGpOV7w" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__17::Region1::Debug__AC__GENERATING__GENERATING__17&quot;,(char *)&quot;Debug__B__Ac__GENERATING__GENERATING__17&quot;,(char *)&quot;Debug__A__Ac__GENERATING__GENERATING__17&quot;,(char *)&quot;&quot;);
    this->successorFree = free;
</body>
                </effect>
                <trigger xmi:id="_ITOapvJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IMguoPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ITPBsPJZEeauO5SNGpOV7w" name="Debug__En__GENERATING" source="_ITNzkPJZEeauO5SNGpOV7w" target="_ITOaoPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITSFAPJZEeauO5SNGpOV7w" name="Debug__En__GENERATING__437">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__17::Region1::Debug__En__GENERATING&quot;,(char *)&quot;Debug__A__Ac__GENERATING__GENERATING__17&quot;,(char *)&quot;Debug__A__En__GENERATING&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_ITPBsfJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IMguoPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ITPBsvJZEeauO5SNGpOV7w" name="Debug__end__trans__GENERATING__GENERATING__17" source="_ITOaoPJZEeauO5SNGpOV7w" target="_ITKwRPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITSsEPJZEeauO5SNGpOV7w" name="Debug__end__trans__GENERATING__GENERATING__17__439">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__17::Region1::Debug__end__trans__GENERATING__GENERATING__17&quot;,(char *)&quot;Debug__A__En__GENERATING&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_ITPBs_JZEeauO5SNGpOV7w" name="Debug__Exec" port="_IMguoPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_ITNMgfJZEeauO5SNGpOV7w" name="Debug__B__Ex__GENERATING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ITNMgvJZEeauO5SNGpOV7w" name="Debug__B__Ex__GENERATING">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__17::Region1::Debug__B__Ex__GENERATING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
    if (not(Debug__SRO.checkDebug(&quot;GENERATING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
    extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ITPBtPJZEeauO5SNGpOV7w" name="Debug__B__Ex__GENERATING__427">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__17::Region1::Debug__B__Ex__GENERATING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ITNMg_JZEeauO5SNGpOV7w" name="Debug__B__Ac__GENERATING__GENERATING__17">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ITNMhPJZEeauO5SNGpOV7w" name="Debug__B__Ac__GENERATING__GENERATING__17">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__17::Region1::Debug__B__Ac__GENERATING__GENERATING__17&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
    if (not(Debug__SRO.checkDebug(&quot;GENERATING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;GENERATING__GENERATING__17&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
    extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ITPowPJZEeauO5SNGpOV7w" name="Debug__B__Ac__GENERATING__GENERATING__17__428">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__17::Region1::Debug__B__Ac__GENERATING__GENERATING__17&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ITNzkPJZEeauO5SNGpOV7w" name="Debug__A__Ac__GENERATING__GENERATING__17">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ITNzkfJZEeauO5SNGpOV7w" name="Debug__A__Ac__GENERATING__GENERATING__17">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__17::Region1::Debug__A__Ac__GENERATING__GENERATING__17&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
    if (not(Debug__SRO.checkDebug(&quot;GENERATING__GENERATING__17&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;GENERATING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
    extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ITQP0PJZEeauO5SNGpOV7w" name="Debug__A__Ac__GENERATING__GENERATING__17__429">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__17::Region1::Debug__A__Ac__GENERATING__GENERATING__17&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ITOaoPJZEeauO5SNGpOV7w" name="Debug__A__En__GENERATING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ITOaofJZEeauO5SNGpOV7w" name="Debug__A__En__GENERATING">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__17::Region1::Debug__A__En__GENERATING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
    if (not(Debug__SRO.checkDebug(&quot;GENERATING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
    extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ITQP0fJZEeauO5SNGpOV7w" name="Debug__A__En__GENERATING__430">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__17::Region1::Debug__A__En__GENERATING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_ITT6MPJZEeauO5SNGpOV7w" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_ITT6MfJZEeauO5SNGpOV7w" name="Debug__C__Initial">
            <connectionPoint xmi:id="_ITT6M_JZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_ITT6NPJZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_ITT6MvJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_ITWWdPJZEeauO5SNGpOV7w" name="Debug__init__trans__Initial" source="_ITT6M_JZEeauO5SNGpOV7w" target="_ITVvYvJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITYLofJZEeauO5SNGpOV7w" name="Debug__init__trans__Initial__453">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_ITWWdfJZEeauO5SNGpOV7w" name="Debug__Ac__Initial" source="_ITVvYvJZEeauO5SNGpOV7w" target="_ITWWcPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITW9gfJZEeauO5SNGpOV7w" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;);
    srand(time(0));
    timer.informEvery(UMLRTTimespec(4,0));
</body>
                </effect>
                <trigger xmi:id="_ITW9gPJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IMguoPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ITW9gvJZEeauO5SNGpOV7w" name="Debug__En__GENERATING" source="_ITWWcPJZEeauO5SNGpOV7w" target="_ITWWcvJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITZZwPJZEeauO5SNGpOV7w" name="Debug__En__GENERATING__456">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__Initial::Region1::Debug__En__GENERATING&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_ITW9g_JZEeauO5SNGpOV7w" name="Debug__Exec" port="_IMguoPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ITW9hPJZEeauO5SNGpOV7w" name="Debug__end__trans__Initial" source="_ITWWcvJZEeauO5SNGpOV7w" target="_ITT6NPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITZZwfJZEeauO5SNGpOV7w" name="Debug__end__trans__Initial__458">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_ITW9hfJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IMguoPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_ITVvYvJZEeauO5SNGpOV7w" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ITVvY_JZEeauO5SNGpOV7w" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
    if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
    extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ITW9hvJZEeauO5SNGpOV7w" name="Debug__B__Ac__Initial__449">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ITWWcPJZEeauO5SNGpOV7w" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ITWWcfJZEeauO5SNGpOV7w" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
    if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;GENERATING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
    extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ITXkkPJZEeauO5SNGpOV7w" name="Debug__A__Ac__Initial__450">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ITWWcvJZEeauO5SNGpOV7w" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ITWWc_JZEeauO5SNGpOV7w" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
    if (not(Debug__SRO.checkDebug(&quot;GENERATING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
    extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ITYLoPJZEeauO5SNGpOV7w" name="Debug__A__En__Initial__451">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_ITan4PJZEeauO5SNGpOV7w" name="Debug__Path__GENERATING__GENERATING__19" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_ITbO8PJZEeauO5SNGpOV7w" name="Debug__C__GENERATING__GENERATING__19">
            <connectionPoint xmi:id="_ITbO8vJZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_ITbO8_JZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_ITbO8fJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_ITeSQvJZEeauO5SNGpOV7w" name="Debug__init__trans__GENERATING__GENERATING__19" source="_ITbO8vJZEeauO5SNGpOV7w" target="_ITdEIfJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITgugfJZEeauO5SNGpOV7w" name="Debug__init__trans__GENERATING__GENERATING__19__473">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__19::Region1::Debug__init__trans__GENERATING__GENERATING__19&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__GENERATING&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_ITeSQ_JZEeauO5SNGpOV7w" name="Debug__Ex__GENERATING" source="_ITdEIfJZEeauO5SNGpOV7w" target="_ITdrMPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IThVkPJZEeauO5SNGpOV7w" name="Debug__Ex__GENERATING__475">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__19::Region1::Debug__Ex__GENERATING&quot;,(char *)&quot;Debug__B__Ex__GENERATING&quot;,(char *)&quot;Debug__B__Ac__GENERATING__GENERATING__19&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_ITeSRPJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IMguoPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ITeSRfJZEeauO5SNGpOV7w" name="Debug__AC__GENERATING__GENERATING__19" source="_ITdrMPJZEeauO5SNGpOV7w" target="_ITdrMvJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITeSR_JZEeauO5SNGpOV7w" name="generation" visibility="public" isReentrant="true">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__19::Region1::Debug__AC__GENERATING__GENERATING__19&quot;,(char *)&quot;Debug__B__Ac__GENERATING__GENERATING__19&quot;,(char *)&quot;Debug__A__Ac__GENERATING__GENERATING__19&quot;,(char *)&quot;&quot;);
    if (!this->successorFree) {
    log.show(&quot;impossible to generate a new parcel: the first chute is obfuscated\n&quot;);
    }
    else {  
    int random = rand() % 4;
    parcel = Parcel();
    parcel.number = random;
    parcel.stage = 0; // 0 for &quot;top&quot;, 1 for &quot;left&quot;, 2 for &quot;right&quot;
    parcel.level = 2;
    enter.transmit(parcel).send();
    log.show(&quot;generating a parcel %d on stage %d\n&quot;, random, parcel.stage);
    this->successorFree = false;
    }
</body>
                </effect>
                <trigger xmi:id="_ITeSRvJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IMguoPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ITeSSPJZEeauO5SNGpOV7w" name="Debug__En__GENERATING" source="_ITdrMvJZEeauO5SNGpOV7w" target="_ITeSQPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITh8oPJZEeauO5SNGpOV7w" name="Debug__En__GENERATING__478">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__19::Region1::Debug__En__GENERATING&quot;,(char *)&quot;Debug__A__Ac__GENERATING__GENERATING__19&quot;,(char *)&quot;Debug__A__En__GENERATING&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_ITeSSfJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IMguoPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ITeSSvJZEeauO5SNGpOV7w" name="Debug__end__trans__GENERATING__GENERATING__19" source="_ITeSQPJZEeauO5SNGpOV7w" target="_ITbO8_JZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITijsPJZEeauO5SNGpOV7w" name="Debug__end__trans__GENERATING__GENERATING__19__480">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__19::Region1::Debug__end__trans__GENERATING__GENERATING__19&quot;,(char *)&quot;Debug__A__En__GENERATING&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_ITe5UPJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IMguoPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_ITdEIfJZEeauO5SNGpOV7w" name="Debug__B__Ex__GENERATING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ITdEIvJZEeauO5SNGpOV7w" name="Debug__B__Ex__GENERATING">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__19::Region1::Debug__B__Ex__GENERATING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
    if (not(Debug__SRO.checkDebug(&quot;GENERATING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
    extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ITe5UfJZEeauO5SNGpOV7w" name="Debug__B__Ex__GENERATING__468">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__19::Region1::Debug__B__Ex__GENERATING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ITdrMPJZEeauO5SNGpOV7w" name="Debug__B__Ac__GENERATING__GENERATING__19">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ITdrMfJZEeauO5SNGpOV7w" name="Debug__B__Ac__GENERATING__GENERATING__19">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__19::Region1::Debug__B__Ac__GENERATING__GENERATING__19&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
    if (not(Debug__SRO.checkDebug(&quot;GENERATING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;GENERATING__GENERATING__19&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
    extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ITe5UvJZEeauO5SNGpOV7w" name="Debug__B__Ac__GENERATING__GENERATING__19__469">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__19::Region1::Debug__B__Ac__GENERATING__GENERATING__19&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ITdrMvJZEeauO5SNGpOV7w" name="Debug__A__Ac__GENERATING__GENERATING__19">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ITdrM_JZEeauO5SNGpOV7w" name="Debug__A__Ac__GENERATING__GENERATING__19">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__19::Region1::Debug__A__Ac__GENERATING__GENERATING__19&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
    if (not(Debug__SRO.checkDebug(&quot;GENERATING__GENERATING__19&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;GENERATING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
    extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ITfgYPJZEeauO5SNGpOV7w" name="Debug__A__Ac__GENERATING__GENERATING__19__470">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__19::Region1::Debug__A__Ac__GENERATING__GENERATING__19&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ITeSQPJZEeauO5SNGpOV7w" name="Debug__A__En__GENERATING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ITeSQfJZEeauO5SNGpOV7w" name="Debug__A__En__GENERATING">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__19::Region1::Debug__A__En__GENERATING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
    if (not(Debug__SRO.checkDebug(&quot;GENERATING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
    extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ITgugPJZEeauO5SNGpOV7w" name="Debug__A__En__GENERATING__471">
                  <language>C++</language>
                  <body>    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Gen::GenStateMachine::Region::Debug__C__GENERATING__GENERATING__19::Region1::Debug__A__En__GENERATING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_ITjKwPJZEeauO5SNGpOV7w" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IMsU0fJZEeauO5SNGpOV7w" name="Debug__variablesViewMethod" specification="_IMsU0PJZEeauO5SNGpOV7w">
        <language>C++</language>
        <body>    std::string tempS=&quot;&quot;;
    tempS.append(&quot;delay,&quot;);
    tempS.append(&quot;Integer,&quot;);
    if(delay!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,delay);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
    }else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
    };
    tempS.append(&quot;successorFree,&quot;);
    tempS.append(&quot;Boolean,&quot;);
    if(successorFree==true){
    tempS.append(&quot;true&quot;);
    tempS.append(&quot;\n&quot;);
    }else {
    tempS.append(&quot;false&quot;);
    tempS.append(&quot;\n&quot;);
    };
    if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
    else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
    strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IMti9PJZEeauO5SNGpOV7w" name="Debug__variablesChange" specification="_IMti8PJZEeauO5SNGpOV7w">
        <language>C++</language>
        <body>    std::string tempVarName=&quot;&quot;;
    tempVarName.append(varName);
    if (&quot;delay&quot;==tempVarName){
    delay=atoi(varValue);
    return true;
    }else if (&quot;successorFree&quot;==tempVarName){
    if(strcmp(varValue,&quot;true&quot;)==0)
    successorFree=true;
    else 
    successorFree=false;
    return true;
    }else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_INp-IfJZEeauO5SNGpOV7w" name="Debug__sendEvent" specification="_INN5QPJZEeauO5SNGpOV7w">
        <language>C++</language>
        <body>    this->Debug__variablesView();
    this->Debug__event.clearEventPayload();
    this->Debug__event.generateEventID();
    this->Debug__event.setCpuTik();
    this->Debug__event.setTimePointToNow();
    this->Debug__event.setEventSourceKind(eventSourceKind);
    this->Debug__event.setEventType(eventType);
    this->Debug__event.setCapsuleName(capsuleName);
    this->Debug__event.setCapsuleInstance(instanceName);
    this->Debug__event.setCapsuleIndex(capsuleIndex);
    this->Debug__event.setSourceName(sourceName);
    this->Debug__event.setVariableData(this->Debug__variablesData);
    if (eventSourceKind==debugEvents::TRANISTION){
    this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
    this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
    this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
    }
    std::string tempS=this->Debug__event.serialize();
    char eventStr[tempS.length()+1];
    strcpy(eventStr,tempS.c_str());
    extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_IMsU0PJZEeauO5SNGpOV7w" name="Debug__variablesView" visibility="private" method="_IMsU0fJZEeauO5SNGpOV7w"/>
      <ownedOperation xmi:id="_IMti8PJZEeauO5SNGpOV7w" name="Debug__variablesChange" visibility="private" method="_IMti9PJZEeauO5SNGpOV7w">
        <ownedParameter xmi:id="_IMti8fJZEeauO5SNGpOV7w" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IMti8vJZEeauO5SNGpOV7w" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IMti8_JZEeauO5SNGpOV7w" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_INN5QPJZEeauO5SNGpOV7w" name="Debug__sendEvent" visibility="private" method="_INp-IfJZEeauO5SNGpOV7w">
        <ownedParameter xmi:id="_INN5QfJZEeauO5SNGpOV7w" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_INUm8PJZEeauO5SNGpOV7w" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_INbUoPJZEeauO5SNGpOV7w" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_INipYPJZEeauO5SNGpOV7w" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_INipYfJZEeauO5SNGpOV7w" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_INpXEPJZEeauO5SNGpOV7w" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_INpXEfJZEeauO5SNGpOV7w" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_INpXEvJZEeauO5SNGpOV7w" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_INpXE_JZEeauO5SNGpOV7w" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_INp-IPJZEeauO5SNGpOV7w" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_IuNA8ML6EeaSH8bbL43htA" name="Stage" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ejuiwML6EeaSH8bbL43htA" name="enter" visibility="public" type="_Qq5xwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_gvpnwML6EeaSH8bbL43htA" name="right" visibility="public" type="_Qq5xwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ieg9UML6EeaSH8bbL43htA" name="left" visibility="public" type="_Qq5xwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_Ko_yUML9EeaSH8bbL43htA" name="parcel" type="_aEoEwML7EeaSH8bbL43htA">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ko_yUcL9EeaSH8bbL43htA"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ko_yUsL9EeaSH8bbL43htA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_QkCwQMMEEeaSH8bbL43htA" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_8dMHMMM5EeahHehXumVB-w" name="chute1" visibility="protected" type="_jvOOEMM4EeahHehXumVB-w" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_ANvnsMM6EeahHehXumVB-w" name="chute2" visibility="protected" type="_jvOOEMM4EeahHehXumVB-w" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_Dpq8AMM6EeahHehXumVB-w" name="sensor" visibility="protected" type="_AJLGMMM5EeahHehXumVB-w" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_KElJ8MM6EeahHehXumVB-w" name="switcher" visibility="protected" type="_O_UbEMM5EeahHehXumVB-w" isOrdered="true" aggregation="composite"/>
      <ownedConnector xmi:id="_GmpDcMM6EeahHehXumVB-w" name="RTConnector1">
        <end xmi:id="_GmrfsMM6EeahHehXumVB-w" partWithPort="_8dMHMMM5EeahHehXumVB-w" role="_v-KQIMM4EeahHehXumVB-w"/>
        <end xmi:id="_GmrfscM6EeahHehXumVB-w" partWithPort="_Dpq8AMM6EeahHehXumVB-w" role="_CHUN4MM5EeahHehXumVB-w"/>
      </ownedConnector>
      <ownedConnector xmi:id="_JFiHwMM6EeahHehXumVB-w" name="RTConnector2">
        <end xmi:id="_JFkkAMM6EeahHehXumVB-w" partWithPort="_8dMHMMM5EeahHehXumVB-w" role="_sK7PEMM4EeahHehXumVB-w"/>
        <end xmi:id="_JFkkAcM6EeahHehXumVB-w" partWithPort="_ANvnsMM6EeahHehXumVB-w" role="_p1u5UMM4EeahHehXumVB-w"/>
      </ownedConnector>
      <ownedConnector xmi:id="_Ni2AkMM6EeahHehXumVB-w" name="RTConnector3">
        <end xmi:id="_Ni31wMM6EeahHehXumVB-w" partWithPort="_Dpq8AMM6EeahHehXumVB-w" role="_m5dgAMM5EeahHehXumVB-w"/>
        <end xmi:id="_Ni31wcM6EeahHehXumVB-w" partWithPort="_KElJ8MM6EeahHehXumVB-w" role="_gMZLEMM5EeahHehXumVB-w"/>
      </ownedConnector>
      <ownedConnector xmi:id="_Q2rv4MM6EeahHehXumVB-w" name="RTConnector4">
        <end xmi:id="_Q2uMIMM6EeahHehXumVB-w" role="_ejuiwML6EeaSH8bbL43htA"/>
        <end xmi:id="_Q2uMIcM6EeahHehXumVB-w" partWithPort="_8dMHMMM5EeahHehXumVB-w" role="_p1u5UMM4EeahHehXumVB-w"/>
      </ownedConnector>
      <ownedConnector xmi:id="_TMcGUMM6EeahHehXumVB-w" name="RTConnector5">
        <end xmi:id="_TMfJoMM6EeahHehXumVB-w" partWithPort="_KElJ8MM6EeahHehXumVB-w" role="_0cp_QMM5EeahHehXumVB-w"/>
        <end xmi:id="_TMfwsMM6EeahHehXumVB-w" role="_gvpnwML6EeaSH8bbL43htA"/>
      </ownedConnector>
      <ownedConnector xmi:id="_T-SaAMM6EeahHehXumVB-w" name="RTConnector6">
        <end xmi:id="_T-VdUMM6EeahHehXumVB-w" partWithPort="_KElJ8MM6EeahHehXumVB-w" role="_3tk9cMM5EeahHehXumVB-w"/>
        <end xmi:id="_T-WEYMM6EeahHehXumVB-w" role="_ieg9UML6EeaSH8bbL43htA"/>
      </ownedConnector>
      <ownedConnector xmi:id="_fBuSQMM6EeahHehXumVB-w" name="RTConnector7">
        <end xmi:id="_fBwHcMM6EeahHehXumVB-w" partWithPort="_ANvnsMM6EeahHehXumVB-w" role="_sK7PEMM4EeahHehXumVB-w"/>
        <end xmi:id="_fBwHccM6EeahHehXumVB-w" partWithPort="_KElJ8MM6EeahHehXumVB-w" role="_VxKF0MM6EeahHehXumVB-w"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_LOPUwML6EeaSH8bbL43htA" name="Bin" classifierBehavior="_SAHMAMMMEeaSH8bbL43htA" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_l2PuIML6EeaSH8bbL43htA" name="enter" visibility="public" type="_Qq5xwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_K51lgMMPEeaSH8bbL43htA" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_K5yiMMMPEeaSH8bbL43htA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_LhdrYML9EeaSH8bbL43htA" name="parcels" type="_aEoEwML7EeaSH8bbL43htA">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_LhdrYcL9EeaSH8bbL43htA"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_LhdrYsL9EeaSH8bbL43htA" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_P-w_UMMMEeaSH8bbL43htA" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ILBg4PJZEeauO5SNGpOV7w" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_ILFyUPJZEeauO5SNGpOV7w" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_ILFyUfJZEeauO5SNGpOV7w" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_ILO8RfJZEeauO5SNGpOV7w" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_ILPjUPJZEeauO5SNGpOV7w" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_ILPjUfJZEeauO5SNGpOV7w" name="Debug__event"/>
      <ownedAttribute xmi:id="_ILYGMPJZEeauO5SNGpOV7w" name="Debug__SRO"/>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_SAHMAMMMEeaSH8bbL43htA" name="BinStateMachine" isReentrant="false">
        <region xmi:id="_SAKPUMMMEeaSH8bbL43htA" name="Region">
          <transition xmi:id="_SAPH0cMMEeaSH8bbL43htA" name="Initial" source="_IQTCcPJZEeauO5SNGpOV7w" target="_SAN5sMMMEeaSH8bbL43htA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JNwIoMX4EeaYV5cb1Zesag">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

enter.setFree(true).send();</body>
            </effect>
          </transition>
          <transition xmi:id="_YPSEAMMMEeaSH8bbL43htA" name="IDLE__IDLE__1" source="_IP-SUPJZEeauO5SNGpOV7w" target="_SAN5sMMMEeaSH8bbL43htA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_mJFFYMMMEeaSH8bbL43htA">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::IDLE__IDLE__1&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__1&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

    log.show(&quot;%s received Parcel (%d)\n&quot;, getName(), umlrtparam_p.number);
    enter.setFree(true).send();
</body>
            </effect>
          </transition>
          <transition xmi:id="_IP-SVfJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__1" source="_SAN5sMMMEeaSH8bbL43htA" target="_IP-SUPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IP-SVvJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__1__3">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__IDLE__IDLE__1&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__1&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_bX4MoMMMEeaSH8bbL43htA" event="_SR6HoMMBEeaSH8bbL43htA" port="_l2PuIML6EeaSH8bbL43htA"/>
          </transition>
          <transition xmi:id="_IP-5YPJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__1__S" guard="_IP-5YvJZEeauO5SNGpOV7w" source="_IP-SUPJZEeauO5SNGpOV7w" target="_IP-SU_JZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_IP-5YvJZEeauO5SNGpOV7w" name="Debug__GuardIDLE__IDLE__1">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_IP-5YfJZEeauO5SNGpOV7w" name="Debug__GuardIDLE__IDLE__1">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IP-5Y_JZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__1__S__5">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__IDLE__IDLE__1__S&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__1&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IP_gcPJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__1__E" source="_IP-SVPJZEeauO5SNGpOV7w" target="_SAN5sMMMEeaSH8bbL43htA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IP_gcfJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__1__E__7">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__IDLE__IDLE__1__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IQAHgPJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__1__dbg" source="_IP-SUfJZEeauO5SNGpOV7w" target="_IP-SUfJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQAHgvJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__1__dbg__9">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__IDLE__IDLE__1__dbg&quot;,(char *)&quot;Debug__C__IDLE__IDLE__1&quot;,(char *)&quot;Debug__C__IDLE__IDLE__1&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_IQAHgfJZEeauO5SNGpOV7w" name="Debug__MSG" port="_ILBg4PJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_IQTphPJZEeauO5SNGpOV7w" name="Debug__Initial" source="_IQaXMPJZEeauO5SNGpOV7w" target="_IQTCcPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQTphfJZEeauO5SNGpOV7w" name="Debug__Initial__25">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;transmit&quot;,&quot;transmission&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),(char *) &quot;&quot;,(char *) &quot;&quot;,(char *) &quot;&quot;,(char *)&quot;&quot;,(char *) &quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_IQa-QPJZEeauO5SNGpOV7w" name="ConnectionEstablished" port="_ILBg4PJZEeauO5SNGpOV7w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_IQUQkPJZEeauO5SNGpOV7w" name="Debug__Initial__S" guard="_IQUQkvJZEeauO5SNGpOV7w" source="_IQTCcPJZEeauO5SNGpOV7w" target="_IQTpgvJZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_IQUQkvJZEeauO5SNGpOV7w" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_IQUQkfJZEeauO5SNGpOV7w" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo2&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQUQk_JZEeauO5SNGpOV7w" name="Debug__Initial__S__27">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IQU3oPJZEeauO5SNGpOV7w" name="Debug__Initial__E" source="_IQTpg_JZEeauO5SNGpOV7w" target="_SAN5sMMMEeaSH8bbL43htA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQU3ofJZEeauO5SNGpOV7w" name="Debug__Initial__E__29">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IQU3ovJZEeauO5SNGpOV7w" name="Debug__Initial__dbg" source="_IQTpgPJZEeauO5SNGpOV7w" target="_IQTpgPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQU3pPJZEeauO5SNGpOV7w" name="Debug__Initial__dbg__31">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__Initial__dbg&quot;,(char *)&quot;Debug__C__Initial&quot;,(char *)&quot;Debug__C__Initial&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_IQU3o_JZEeauO5SNGpOV7w" name="Debug__MSG" port="_ILBg4PJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_IQaXMfJZEeauO5SNGpOV7w" name="Debug__InitDebug" source="_SAMEgMMMEeaSH8bbL43htA" target="_IQaXMPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQaXMvJZEeauO5SNGpOV7w" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
std::string tempS;
std::cout&lt;&lt;&quot;Enter 1 for running in debug mode, any other key for normal model\n&quot;;
std::cin>> tempS;
if (tempS==&quot;1&quot;)
    this->Debug__SRO.setExecMode(Stepping);
else
    this->Debug__SRO.setExecMode(Running);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_SAMEgMMMEeaSH8bbL43htA" name="Pseudo2"/>
          <subvertex xmi:type="uml:State" xmi:id="_SAN5sMMMEeaSH8bbL43htA" name="IDLE">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IQblUPJZEeauO5SNGpOV7w" name="IDLE__43">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

}</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IQblUfJZEeauO5SNGpOV7w" name="IDLE__44">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

}</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_IP-SUPJZEeauO5SNGpOV7w" name="Debug__Path__IDLE__IDLE__1" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_IP-SUfJZEeauO5SNGpOV7w" name="Debug__C__IDLE__IDLE__1">
            <connectionPoint xmi:id="_IP-SU_JZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_IP-SVPJZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_IP-SUvJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_IQB8sPJZEeauO5SNGpOV7w" name="Debug__init__trans__IDLE__IDLE__1" source="_IP-SU_JZEeauO5SNGpOV7w" target="_IQAukPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQEY8PJZEeauO5SNGpOV7w" name="Debug__init__trans__IDLE__IDLE__1__15">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__1::Region1::Debug__init__trans__IDLE__IDLE__1&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_IQB8sfJZEeauO5SNGpOV7w" name="Debug__Ex__IDLE" source="_IQAukPJZEeauO5SNGpOV7w" target="_IQAukvJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQQmMPJZEeauO5SNGpOV7w" name="Debug__Ex__IDLE__17">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__1::Region1::Debug__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ac__IDLE__IDLE__1&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IQB8svJZEeauO5SNGpOV7w" name="Debug__Exec" port="_ILBg4PJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IQB8s_JZEeauO5SNGpOV7w" name="Debug__AC__IDLE__IDLE__1" source="_IQAukvJZEeauO5SNGpOV7w" target="_IQBVoPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQB8tfJZEeauO5SNGpOV7w" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__1::Region1::Debug__AC__IDLE__IDLE__1&quot;,(char *)&quot;Debug__B__Ac__IDLE__IDLE__1&quot;,(char *)&quot;Debug__A__Ac__IDLE__IDLE__1&quot;,(char *)&quot;&quot;);

    log.show(&quot;%s received Parcel (%d)\n&quot;, getName(), umlrtparam_p.number);
    enter.setFree(true).send();
</body>
                </effect>
                <trigger xmi:id="_IQB8tPJZEeauO5SNGpOV7w" name="Debug__Exec" port="_ILBg4PJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IQB8tvJZEeauO5SNGpOV7w" name="Debug__En__IDLE" source="_IQBVoPJZEeauO5SNGpOV7w" target="_IQBVovJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQRNQPJZEeauO5SNGpOV7w" name="Debug__En__IDLE__20">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__1::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__IDLE__IDLE__1&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IQB8t_JZEeauO5SNGpOV7w" name="Debug__Exec" port="_ILBg4PJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IQB8uPJZEeauO5SNGpOV7w" name="Debug__end__trans__IDLE__IDLE__1" source="_IQBVovJZEeauO5SNGpOV7w" target="_IP-SVPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQR0UPJZEeauO5SNGpOV7w" name="Debug__end__trans__IDLE__IDLE__1__22">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__1::Region1::Debug__end__trans__IDLE__IDLE__1&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IQB8ufJZEeauO5SNGpOV7w" name="Debug__Exec" port="_ILBg4PJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_IQAukPJZEeauO5SNGpOV7w" name="Debug__B__Ex__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IQAukfJZEeauO5SNGpOV7w" name="Debug__B__Ex__IDLE">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__1::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IQCjwPJZEeauO5SNGpOV7w" name="Debug__B__Ex__IDLE__10">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__1::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IQAukvJZEeauO5SNGpOV7w" name="Debug__B__Ac__IDLE__IDLE__1">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IQAuk_JZEeauO5SNGpOV7w" name="Debug__B__Ac__IDLE__IDLE__1">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__1::Region1::Debug__B__Ac__IDLE__IDLE__1&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE__IDLE__1&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IQCjwfJZEeauO5SNGpOV7w" name="Debug__B__Ac__IDLE__IDLE__1__11">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__1::Region1::Debug__B__Ac__IDLE__IDLE__1&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IQBVoPJZEeauO5SNGpOV7w" name="Debug__A__Ac__IDLE__IDLE__1">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IQBVofJZEeauO5SNGpOV7w" name="Debug__A__Ac__IDLE__IDLE__1">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__1::Region1::Debug__A__Ac__IDLE__IDLE__1&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE__IDLE__1&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IQDK0PJZEeauO5SNGpOV7w" name="Debug__A__Ac__IDLE__IDLE__1__12">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__1::Region1::Debug__A__Ac__IDLE__IDLE__1&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IQBVovJZEeauO5SNGpOV7w" name="Debug__A__En__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IQBVo_JZEeauO5SNGpOV7w" name="Debug__A__En__IDLE">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__1::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IQDx4PJZEeauO5SNGpOV7w" name="Debug__A__En__IDLE__13">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__IDLE__IDLE__1::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_IQTCcPJZEeauO5SNGpOV7w" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_IQTpgPJZEeauO5SNGpOV7w" name="Debug__C__Initial">
            <connectionPoint xmi:id="_IQTpgvJZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_IQTpg_JZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_IQTpgfJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_IQWFwvJZEeauO5SNGpOV7w" name="Debug__init__trans__Initial" source="_IQTpgvJZEeauO5SNGpOV7w" target="_IQVesPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQX68PJZEeauO5SNGpOV7w" name="Debug__init__trans__Initial__36">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_IQWFw_JZEeauO5SNGpOV7w" name="Debug__Ac__Initial" source="_IQVesPJZEeauO5SNGpOV7w" target="_IQVesvJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQWFxfJZEeauO5SNGpOV7w" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;);

enter.setFree(true).send();</body>
                </effect>
                <trigger xmi:id="_IQWFxPJZEeauO5SNGpOV7w" name="Debug__Exec" port="_ILBg4PJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IQWFxvJZEeauO5SNGpOV7w" name="Debug__En__IDLE" source="_IQVesvJZEeauO5SNGpOV7w" target="_IQWFwPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQZJEPJZEeauO5SNGpOV7w" name="Debug__En__IDLE__39">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__Initial::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IQWFx_JZEeauO5SNGpOV7w" name="Debug__Exec" port="_ILBg4PJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IQWFyPJZEeauO5SNGpOV7w" name="Debug__end__trans__Initial" source="_IQWFwPJZEeauO5SNGpOV7w" target="_IQTpg_JZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQZwIPJZEeauO5SNGpOV7w" name="Debug__end__trans__Initial__41">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IQWs0PJZEeauO5SNGpOV7w" name="Debug__Exec" port="_ILBg4PJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_IQVesPJZEeauO5SNGpOV7w" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IQVesfJZEeauO5SNGpOV7w" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IQWs0fJZEeauO5SNGpOV7w" name="Debug__B__Ac__Initial__32">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IQVesvJZEeauO5SNGpOV7w" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IQVes_JZEeauO5SNGpOV7w" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IQWs0vJZEeauO5SNGpOV7w" name="Debug__A__Ac__Initial__33">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IQWFwPJZEeauO5SNGpOV7w" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IQWFwfJZEeauO5SNGpOV7w" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IQXT4PJZEeauO5SNGpOV7w" name="Debug__A__En__Initial__34">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Bin::BinStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_IQaXMPJZEeauO5SNGpOV7w" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_ILOVMfJZEeauO5SNGpOV7w" name="Debug__variablesViewMethod" specification="_ILOVMPJZEeauO5SNGpOV7w">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_ILO8RPJZEeauO5SNGpOV7w" name="Debug__variablesChange" specification="_ILO8QPJZEeauO5SNGpOV7w">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);

    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IMgHlPJZEeauO5SNGpOV7w" name="Debug__sendEvent" specification="_IL1ZMPJZEeauO5SNGpOV7w">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_ILOVMPJZEeauO5SNGpOV7w" name="Debug__variablesView" visibility="private" method="_ILOVMfJZEeauO5SNGpOV7w"/>
      <ownedOperation xmi:id="_ILO8QPJZEeauO5SNGpOV7w" name="Debug__variablesChange" visibility="private" method="_ILO8RPJZEeauO5SNGpOV7w">
        <ownedParameter xmi:id="_ILO8QfJZEeauO5SNGpOV7w" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_ILO8QvJZEeauO5SNGpOV7w" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_ILO8Q_JZEeauO5SNGpOV7w" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_IL1ZMPJZEeauO5SNGpOV7w" name="Debug__sendEvent" visibility="private" method="_IMgHlPJZEeauO5SNGpOV7w">
        <ownedParameter xmi:id="_IL1ZMfJZEeauO5SNGpOV7w" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IMKJUPJZEeauO5SNGpOV7w" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IMReEPJZEeauO5SNGpOV7w" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IMYy0PJZEeauO5SNGpOV7w" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IMYy0fJZEeauO5SNGpOV7w" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IMfggPJZEeauO5SNGpOV7w" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IMgHkPJZEeauO5SNGpOV7w" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IMgHkfJZEeauO5SNGpOV7w" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IMgHkvJZEeauO5SNGpOV7w" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IMgHk_JZEeauO5SNGpOV7w" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_QrBtkML6EeaSH8bbL43htA" name="transmission">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_Qq5xwML6EeaSH8bbL43htA" name="transmission">
        <interfaceRealization xmi:id="_QrQXEML6EeaSH8bbL43htA" client="_Qq5xwML6EeaSH8bbL43htA" supplier="_QrKQcML6EeaSH8bbL43htA" contract="_QrKQcML6EeaSH8bbL43htA"/>
        <interfaceRealization xmi:id="_QreZgML6EeaSH8bbL43htA" client="_Qq5xwML6EeaSH8bbL43htA" supplier="_QrZhAML6EeaSH8bbL43htA" contract="_QrZhAML6EeaSH8bbL43htA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_QrKQcML6EeaSH8bbL43htA" name="transmission">
        <ownedOperation xmi:id="_NmRscMOlEeaV4cHHWddkKg" name="setFree">
          <ownedParameter xmi:id="_2eSnwMOlEeaV4cHHWddkKg" name="free">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_QrSzUML6EeaSH8bbL43htA" name="transmission~">
        <ownedOperation xmi:id="_PIeRgMMBEeaSH8bbL43htA" name="transmit">
          <ownedParameter xmi:id="_QFxAMMMBEeaSH8bbL43htA" name="p" type="_aEoEwML7EeaSH8bbL43htA"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_QrXr0ML6EeaSH8bbL43htA" client="_Qq5xwML6EeaSH8bbL43htA" supplier="_QrSzUML6EeaSH8bbL43htA"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_QrY58ML6EeaSH8bbL43htA" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_QrZhAML6EeaSH8bbL43htA" name="transmissionIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_QrfnoML6EeaSH8bbL43htA" client="_Qq5xwML6EeaSH8bbL43htA" supplier="_QrZhAML6EeaSH8bbL43htA"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_SR6HoMMBEeaSH8bbL43htA" operation="_PIeRgMMBEeaSH8bbL43htA"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_OTwdgMOlEeaV4cHHWddkKg" operation="_NmRscMOlEeaV4cHHWddkKg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_aEoEwML7EeaSH8bbL43htA" name="Parcel">
      <ownedAttribute xmi:id="_cj_qMML7EeaSH8bbL43htA" name="number" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_2upQ0MMJEeaSH8bbL43htA" name="level">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_wiSxYMMLEeaSH8bbL43htA" value="2"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_BxJI8N5pEeakB9CQglrL_g" name="stage" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_jvOOEMM4EeahHehXumVB-w" name="Chute" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_p1u5UMM4EeahHehXumVB-w" name="enter" visibility="public" type="_Qq5xwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_sK7PEMM4EeahHehXumVB-w" name="exit" visibility="public" type="_Qq5xwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_v-KQIMM4EeahHehXumVB-w" name="detection" visibility="public" type="_wvKPQMM4EeahHehXumVB-w" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:id="_4iC8wMM4EeahHehXumVB-w" name="parcel" type="_aEoEwML7EeaSH8bbL43htA">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_8_D6oMM4EeahHehXumVB-w"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_8_HlAMM4EeahHehXumVB-w" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_gQNcAMOlEeaV4cHHWddkKg" name="successorFree">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_qxGOYMX2EeaYV5cb1Zesag" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_WbYyIMX5EeaYV5cb1Zesag" name="timer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_oc-oIMYhEeaYV5cb1Zesag" name="delay">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_1Wbm0MYhEeaYV5cb1Zesag" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_INqlMPJZEeauO5SNGpOV7w" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_INuPkPJZEeauO5SNGpOV7w" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_INuPkfJZEeauO5SNGpOV7w" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_IN4AkPJZEeauO5SNGpOV7w" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_IN4AkfJZEeauO5SNGpOV7w" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_IN4AkvJZEeauO5SNGpOV7w" name="Debug__event"/>
      <ownedAttribute xmi:id="_IN-uQPJZEeauO5SNGpOV7w" name="Debug__SRO"/>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_mXBE0MM6EeahHehXumVB-w" name="ChuteStateMachine" isReentrant="false">
        <region xmi:id="_mXBE0cM6EeahHehXumVB-w" name="Region">
          <transition xmi:id="_mXBE0sM6EeahHehXumVB-w" name="Initial" source="_ISKqsPJZEeauO5SNGpOV7w" target="_mXBE2MM6EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISQxUPJZEeauO5SNGpOV7w" name="Initial__294">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_mXBE1MM6EeahHehXumVB-w" name="reception" source="_ISRYYPJZEeauO5SNGpOV7w" target="_k2uPwMX4EeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_mXBE1cM6EeahHehXumVB-w">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::reception&quot;,(char *)&quot;Debug__Path__reception&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;&quot;);

this->parcel = Parcel();
this->parcel.number = umlrtparam_p.number;
this->parcel.level = umlrtparam_p.level;
this->parcel.stage = umlrtparam_p.stage;

log.show(&quot;Chute %s of stage %d becomes occupied\n&quot;, this->getName(), umlrtparam_p.stage);
timer.informIn(UMLRTTimespec(this->delay,0));</body>
            </effect>
          </transition>
          <transition xmi:id="_nnQiEMOlEeaV4cHHWddkKg" name="IDLE__IDLE__15" source="_ISqZ8PJZEeauO5SNGpOV7w" target="_mXBE2MM6EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_AMB4YMOmEeaV4cHHWddkKg">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::IDLE__IDLE__15&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__15&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

this->successorFree = umlrtparam_free;</body>
            </effect>
          </transition>
          <transition xmi:id="_9Jw84MX4EeaYV5cb1Zesag" name="transmission" source="_IS64oPJZEeauO5SNGpOV7w" target="_aLwP8MX6EeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITDbgfJZEeauO5SNGpOV7w" name="transmission__415">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::transmission&quot;,(char *)&quot;Debug__Path__transmission&quot;,(char *)&quot;jam ?&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_DR_fYMX5EeaYV5cb1Zesag" name="OCCUPIED__OCCUPIED__14" source="_ISh3EPJZEeauO5SNGpOV7w" target="_k2uPwMX4EeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LH2oYMX5EeaYV5cb1Zesag">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::OCCUPIED__OCCUPIED__14&quot;,(char *)&quot;Debug__Path__OCCUPIED__OCCUPIED__14&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;&quot;);

this->successorFree = umlrtparam_free;</body>
            </effect>
          </transition>
          <transition xmi:id="_eK17sMX6EeaYV5cb1Zesag" name="jam ?__IDLE__16" source="_ISzj4PJZEeauO5SNGpOV7w" target="_mXBE2MM6EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5gzAMMX6EeaYV5cb1Zesag">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::jam ?__IDLE__16&quot;,(char *)&quot;Debug__Path__jam ?__IDLE__16&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

	detection.detect(this->parcel).send();
	exit.transmit(this->parcel).send();
	this->successorFree = false;
log.show(&quot;Chute %s of stage %d is now free\n&quot;, this->getName(), this->parcel.stage);</body>
            </effect>
          </transition>
          <transition xmi:id="_toofYMX6EeaYV5cb1Zesag" name="jam ?__OCCUPIED__13" source="_ISaiUPJZEeauO5SNGpOV7w" target="_k2uPwMX4EeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Br9q0MX7EeaYV5cb1Zesag">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::jam ?__OCCUPIED__13&quot;,(char *)&quot;Debug__Path__jam ?__OCCUPIED__13&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;&quot;);

log.show(&quot;JAM detected in %s of stage %d\n&quot;, this->getName(), this->parcel.level-1);
timer.informIn(UMLRTTimespec(this->delay,0));</body>
            </effect>
          </transition>
          <transition xmi:id="_ISKqtfJZEeauO5SNGpOV7w" name="Debug__Initial" source="_ITEpoPJZEeauO5SNGpOV7w" target="_ISKqsPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISKqtvJZEeauO5SNGpOV7w" name="Debug__Initial__276">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;transmit&quot;,&quot;transmission&quot;);
Debug__SRO.addTransitionsFromState(&quot;OCCUPIED&quot;,&quot;transmission&quot;,&quot;jam ?&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;setSwitch&quot;,&quot;switchProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;jam ?&quot;,&quot;&quot;,&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;jam ?&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;reception&quot;,&quot;OCCUPIED&quot;,&quot;transmit&quot;,&quot;transmission&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;setFree&quot;,&quot;transmission&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Jam ?&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;OCCUPIED&quot;,&quot;setFree&quot;,&quot;transmission&quot;);
Debug__SRO.addTransitionsFromState(&quot;Jam ?&quot;,&quot;&quot;,&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;OCCUPIED&quot;,&quot;transmission&quot;,&quot;Jam ?&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;OCCUPIED&quot;,&quot;setSwitch&quot;,&quot;switchProtocol&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),(char *) &quot;&quot;,(char *) &quot;&quot;,(char *) &quot;&quot;,(char *)&quot;&quot;,(char *) &quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_ITEpo_JZEeauO5SNGpOV7w" name="ConnectionEstablished" port="_INqlMPJZEeauO5SNGpOV7w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_ISLRwPJZEeauO5SNGpOV7w" name="Debug__Initial__S" guard="_ISLRwvJZEeauO5SNGpOV7w" source="_ISKqsPJZEeauO5SNGpOV7w" target="_ISKqs_JZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_ISLRwvJZEeauO5SNGpOV7w" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_ISLRwfJZEeauO5SNGpOV7w" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo12&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISLRw_JZEeauO5SNGpOV7w" name="Debug__Initial__S__278">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_ISL40PJZEeauO5SNGpOV7w" name="Debug__Initial__E" source="_ISKqtPJZEeauO5SNGpOV7w" target="_mXBE2MM6EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISL40fJZEeauO5SNGpOV7w" name="Debug__Initial__E__280">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_ISL40vJZEeauO5SNGpOV7w" name="Debug__Initial__dbg" source="_ISKqsfJZEeauO5SNGpOV7w" target="_ISKqsfJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISMf4fJZEeauO5SNGpOV7w" name="Debug__Initial__dbg__282">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__Initial__dbg&quot;,(char *)&quot;Debug__C__Initial&quot;,(char *)&quot;Debug__C__Initial&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_ISMf4PJZEeauO5SNGpOV7w" name="Debug__MSG" port="_INqlMPJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_ISR_cPJZEeauO5SNGpOV7w" name="Debug__reception" source="_mXBE2MM6EeahHehXumVB-w" target="_ISRYYPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISR_cfJZEeauO5SNGpOV7w" name="Debug__reception__296">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__reception&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;Debug__Path__reception&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_mXBE1sM6EeahHehXumVB-w" event="_SR6HoMMBEeaSH8bbL43htA" port="_p1u5UMM4EeahHehXumVB-w"/>
          </transition>
          <transition xmi:id="_ISR_cvJZEeauO5SNGpOV7w" name="Debug__reception__S" guard="_ISSmgfJZEeauO5SNGpOV7w" source="_ISRYYPJZEeauO5SNGpOV7w" target="_ISRYY_JZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_ISSmgfJZEeauO5SNGpOV7w" name="Debug__Guardreception">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_ISSmgPJZEeauO5SNGpOV7w" name="Debug__Guardreception">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISSmgvJZEeauO5SNGpOV7w" name="Debug__reception__S__298">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__reception__S&quot;,(char *)&quot;Debug__Path__reception&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_ISTNkPJZEeauO5SNGpOV7w" name="Debug__reception__E" source="_ISRYZPJZEeauO5SNGpOV7w" target="_k2uPwMX4EeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISTNkfJZEeauO5SNGpOV7w" name="Debug__reception__E__300">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__reception__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IST0oPJZEeauO5SNGpOV7w" name="Debug__reception__dbg" source="_ISRYYfJZEeauO5SNGpOV7w" target="_ISRYYfJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IST0ovJZEeauO5SNGpOV7w" name="Debug__reception__dbg__302">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__reception__dbg&quot;,(char *)&quot;Debug__C__reception&quot;,(char *)&quot;Debug__C__reception&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_IST0ofJZEeauO5SNGpOV7w" name="Debug__MSG" port="_INqlMPJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_ISaiVfJZEeauO5SNGpOV7w" name="Debug__jam ?__OCCUPIED__13" guard="_z09ewMX6EeaYV5cb1Zesag" source="_aLwP8MX6EeaYV5cb1Zesag" target="_ISaiUPJZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_z09ewMX6EeaYV5cb1Zesag">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_z09ewcX6EeaYV5cb1Zesag">
                <language>C++</language>
                <body>return !this->successorFree;</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISaiVvJZEeauO5SNGpOV7w" name="Debug__jam ?__OCCUPIED__13__318">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__jam ?__OCCUPIED__13&quot;,(char *)&quot;jam ?&quot;,(char *)&quot;Debug__Path__jam ?__OCCUPIED__13&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_ISbJYPJZEeauO5SNGpOV7w" name="Debug__jam ?__OCCUPIED__13__S" guard="_ISbJYvJZEeauO5SNGpOV7w" source="_ISaiUPJZEeauO5SNGpOV7w" target="_ISaiU_JZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_ISbJYvJZEeauO5SNGpOV7w" name="Debug__Guardjam ?__OCCUPIED__13">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_ISbJYfJZEeauO5SNGpOV7w" name="Debug__Guardjam ?__OCCUPIED__13">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;jam ?&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISbJY_JZEeauO5SNGpOV7w" name="Debug__jam ?__OCCUPIED__13__S__320">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__jam ?__OCCUPIED__13__S&quot;,(char *)&quot;Debug__Path__jam ?__OCCUPIED__13&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_ISbwcPJZEeauO5SNGpOV7w" name="Debug__jam ?__OCCUPIED__13__E" source="_ISaiVPJZEeauO5SNGpOV7w" target="_k2uPwMX4EeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISbwcfJZEeauO5SNGpOV7w" name="Debug__jam ?__OCCUPIED__13__E__322">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__jam ?__OCCUPIED__13__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_ISbwcvJZEeauO5SNGpOV7w" name="Debug__jam ?__OCCUPIED__13__dbg" source="_ISaiUfJZEeauO5SNGpOV7w" target="_ISaiUfJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IScXgfJZEeauO5SNGpOV7w" name="Debug__jam ?__OCCUPIED__13__dbg__324">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__jam ?__OCCUPIED__13__dbg&quot;,(char *)&quot;Debug__C__jam ?__OCCUPIED__13&quot;,(char *)&quot;Debug__C__jam ?__OCCUPIED__13&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_IScXgPJZEeauO5SNGpOV7w" name="Debug__MSG" port="_INqlMPJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_ISh3FfJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__14" source="_k2uPwMX4EeaYV5cb1Zesag" target="_ISh3EPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISh3FvJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__14__337">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__OCCUPIED__OCCUPIED__14&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;Debug__Path__OCCUPIED__OCCUPIED__14&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_I-QeoMX5EeaYV5cb1Zesag" event="_OTwdgMOlEeaV4cHHWddkKg" port="_sK7PEMM4EeahHehXumVB-w"/>
          </transition>
          <transition xmi:id="_ISieIPJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__14__S" guard="_ISieIvJZEeauO5SNGpOV7w" source="_ISh3EPJZEeauO5SNGpOV7w" target="_ISh3E_JZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_ISieIvJZEeauO5SNGpOV7w" name="Debug__GuardOCCUPIED__OCCUPIED__14">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_ISieIfJZEeauO5SNGpOV7w" name="Debug__GuardOCCUPIED__OCCUPIED__14">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISjFMPJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__14__S__339">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__OCCUPIED__OCCUPIED__14__S&quot;,(char *)&quot;Debug__Path__OCCUPIED__OCCUPIED__14&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_ISjFMfJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__14__E" source="_ISh3FPJZEeauO5SNGpOV7w" target="_k2uPwMX4EeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISjFMvJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__14__E__341">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__OCCUPIED__OCCUPIED__14__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_ISjsQPJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__14__dbg" source="_ISh3EfJZEeauO5SNGpOV7w" target="_ISh3EfJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISjsQvJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__14__dbg__343">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__OCCUPIED__OCCUPIED__14__dbg&quot;,(char *)&quot;Debug__C__OCCUPIED__OCCUPIED__14&quot;,(char *)&quot;Debug__C__OCCUPIED__OCCUPIED__14&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_ISjsQfJZEeauO5SNGpOV7w" name="Debug__MSG" port="_INqlMPJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_ISrBAPJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__15" source="_mXBE2MM6EeahHehXumVB-w" target="_ISqZ8PJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISrBAfJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__15__359">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__IDLE__IDLE__15&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__15&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_8Oj9QMOlEeaV4cHHWddkKg" event="_OTwdgMOlEeaV4cHHWddkKg" port="_sK7PEMM4EeahHehXumVB-w"/>
          </transition>
          <transition xmi:id="_ISrBAvJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__15__S" guard="_ISroEfJZEeauO5SNGpOV7w" source="_ISqZ8PJZEeauO5SNGpOV7w" target="_ISqZ8_JZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_ISroEfJZEeauO5SNGpOV7w" name="Debug__GuardIDLE__IDLE__15">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_ISroEPJZEeauO5SNGpOV7w" name="Debug__GuardIDLE__IDLE__15">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISroEvJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__15__S__361">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__IDLE__IDLE__15__S&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__15&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_ISsPIPJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__15__E" source="_ISqZ9PJZEeauO5SNGpOV7w" target="_mXBE2MM6EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISsPIfJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__15__E__363">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__IDLE__IDLE__15__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_ISsPIvJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__15__dbg" source="_ISqZ8fJZEeauO5SNGpOV7w" target="_ISqZ8fJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISsPJPJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__15__dbg__365">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__IDLE__IDLE__15__dbg&quot;,(char *)&quot;Debug__C__IDLE__IDLE__15&quot;,(char *)&quot;Debug__C__IDLE__IDLE__15&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_ISsPI_JZEeauO5SNGpOV7w" name="Debug__MSG" port="_INqlMPJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_ISzj5fJZEeauO5SNGpOV7w" name="Debug__jam ?__IDLE__16" guard="_pg8RQMX6EeaYV5cb1Zesag" source="_aLwP8MX6EeaYV5cb1Zesag" target="_ISzj4PJZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_pg8RQMX6EeaYV5cb1Zesag">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_pg8RQcX6EeaYV5cb1Zesag">
                <language>C++</language>
                <body>return this->successorFree;</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISzj5vJZEeauO5SNGpOV7w" name="Debug__jam ?__IDLE__16__380">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__jam ?__IDLE__16&quot;,(char *)&quot;jam ?&quot;,(char *)&quot;Debug__Path__jam ?__IDLE__16&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IS0K8PJZEeauO5SNGpOV7w" name="Debug__jam ?__IDLE__16__S" guard="_IS0K8vJZEeauO5SNGpOV7w" source="_ISzj4PJZEeauO5SNGpOV7w" target="_ISzj4_JZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_IS0K8vJZEeauO5SNGpOV7w" name="Debug__Guardjam ?__IDLE__16">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_IS0K8fJZEeauO5SNGpOV7w" name="Debug__Guardjam ?__IDLE__16">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;jam ?&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IS0K8_JZEeauO5SNGpOV7w" name="Debug__jam ?__IDLE__16__S__382">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__jam ?__IDLE__16__S&quot;,(char *)&quot;Debug__Path__jam ?__IDLE__16&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IS0yAPJZEeauO5SNGpOV7w" name="Debug__jam ?__IDLE__16__E" source="_ISzj5PJZEeauO5SNGpOV7w" target="_mXBE2MM6EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IS0yAfJZEeauO5SNGpOV7w" name="Debug__jam ?__IDLE__16__E__384">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__jam ?__IDLE__16__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IS0yAvJZEeauO5SNGpOV7w" name="Debug__jam ?__IDLE__16__dbg" source="_ISzj4fJZEeauO5SNGpOV7w" target="_ISzj4fJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IS1ZEfJZEeauO5SNGpOV7w" name="Debug__jam ?__IDLE__16__dbg__386">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__jam ?__IDLE__16__dbg&quot;,(char *)&quot;Debug__C__jam ?__IDLE__16&quot;,(char *)&quot;Debug__C__jam ?__IDLE__16&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_IS1ZEPJZEeauO5SNGpOV7w" name="Debug__MSG" port="_INqlMPJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_IS64pfJZEeauO5SNGpOV7w" name="Debug__transmission" source="_k2uPwMX4EeaYV5cb1Zesag" target="_IS64oPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IS7fsPJZEeauO5SNGpOV7w" name="Debug__transmission__398">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__transmission&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;Debug__Path__transmission&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_w7wScMX5EeaYV5cb1Zesag" port="_WbYyIMX5EeaYV5cb1Zesag">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_IS7fsfJZEeauO5SNGpOV7w" name="Debug__transmission__S" guard="_IS8GwfJZEeauO5SNGpOV7w" source="_IS64oPJZEeauO5SNGpOV7w" target="_IS64o_JZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_IS8GwfJZEeauO5SNGpOV7w" name="Debug__Guardtransmission">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_IS8GwPJZEeauO5SNGpOV7w" name="Debug__Guardtransmission">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IS8GwvJZEeauO5SNGpOV7w" name="Debug__transmission__S__400">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__transmission__S&quot;,(char *)&quot;Debug__Path__transmission&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IS8Gw_JZEeauO5SNGpOV7w" name="Debug__transmission__E" source="_IS64pPJZEeauO5SNGpOV7w" target="_aLwP8MX6EeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IS8GxPJZEeauO5SNGpOV7w" name="Debug__transmission__E__402">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__transmission__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;jam ?&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IS8t0PJZEeauO5SNGpOV7w" name="Debug__transmission__dbg" source="_IS64ofJZEeauO5SNGpOV7w" target="_IS64ofJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IS8t0vJZEeauO5SNGpOV7w" name="Debug__transmission__dbg__404">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__transmission__dbg&quot;,(char *)&quot;Debug__C__transmission&quot;,(char *)&quot;Debug__C__transmission&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_IS8t0fJZEeauO5SNGpOV7w" name="Debug__MSG" port="_INqlMPJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_ITEpofJZEeauO5SNGpOV7w" name="Debug__InitDebug" source="_mXBE18M6EeahHehXumVB-w" target="_ITEpoPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITEpovJZEeauO5SNGpOV7w" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
std::string tempS;
std::cout&lt;&lt;&quot;Enter 1 for running in debug mode, any other key for normal model\n&quot;;
std::cin>> tempS;
if (tempS==&quot;1&quot;)
    this->Debug__SRO.setExecMode(Stepping);
else
    this->Debug__SRO.setExecMode(Running);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_mXBE18M6EeahHehXumVB-w" name="Pseudo12"/>
          <subvertex xmi:type="uml:State" xmi:id="_mXBE2MM6EeahHehXumVB-w" name="IDLE">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_t4ekIMX4EeaYV5cb1Zesag" name="setFree">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

enter.setFree(true).send();}</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ITI7EPJZEeauO5SNGpOV7w" name="IDLE__418">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

}</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_k2uPwMX4EeaYV5cb1Zesag" name="OCCUPIED">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ITHs8PJZEeauO5SNGpOV7w" name="OCCUPIED__416">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

}</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ITIUAPJZEeauO5SNGpOV7w" name="OCCUPIED__417">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

}</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_aLwP8MX6EeaYV5cb1Zesag" name="jam ?" kind="choice"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_ISKqsPJZEeauO5SNGpOV7w" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_ISKqsfJZEeauO5SNGpOV7w" name="Debug__C__Initial">
            <connectionPoint xmi:id="_ISKqs_JZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_ISKqtPJZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_ISKqsvJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_ISNG9PJZEeauO5SNGpOV7w" name="Debug__init__trans__Initial" source="_ISKqs_JZEeauO5SNGpOV7w" target="_ISMf4vJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISPjMPJZEeauO5SNGpOV7w" name="Debug__init__trans__Initial__287">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_ISNG9fJZEeauO5SNGpOV7w" name="Debug__Ac__Initial" source="_ISMf4vJZEeauO5SNGpOV7w" target="_ISNG8PJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISPjMfJZEeauO5SNGpOV7w" name="Debug__Ac__Initial__289">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_ISNG9vJZEeauO5SNGpOV7w" name="Debug__Exec" port="_INqlMPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ISNuAPJZEeauO5SNGpOV7w" name="Debug__En__IDLE" source="_ISNG8PJZEeauO5SNGpOV7w" target="_ISNG8vJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISNuAvJZEeauO5SNGpOV7w" name="setFree" visibility="public" isReentrant="true">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__Initial::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;&quot;);

enter.setFree(true).send();</body>
                </effect>
                <trigger xmi:id="_ISNuAfJZEeauO5SNGpOV7w" name="Debug__Exec" port="_INqlMPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ISNuA_JZEeauO5SNGpOV7w" name="Debug__end__trans__Initial" source="_ISNG8vJZEeauO5SNGpOV7w" target="_ISKqtPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISQKQPJZEeauO5SNGpOV7w" name="Debug__end__trans__Initial__292">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_ISNuBPJZEeauO5SNGpOV7w" name="Debug__Exec" port="_INqlMPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_ISMf4vJZEeauO5SNGpOV7w" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ISMf4_JZEeauO5SNGpOV7w" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ISNuBfJZEeauO5SNGpOV7w" name="Debug__B__Ac__Initial__283">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ISNG8PJZEeauO5SNGpOV7w" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ISNG8fJZEeauO5SNGpOV7w" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ISOVEPJZEeauO5SNGpOV7w" name="Debug__A__Ac__Initial__284">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ISNG8vJZEeauO5SNGpOV7w" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ISNG8_JZEeauO5SNGpOV7w" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ISO8IPJZEeauO5SNGpOV7w" name="Debug__A__En__Initial__285">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_ISRYYPJZEeauO5SNGpOV7w" name="Debug__Path__reception" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_ISRYYfJZEeauO5SNGpOV7w" name="Debug__C__reception">
            <connectionPoint xmi:id="_ISRYY_JZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_ISRYZPJZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_ISRYYvJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_ISVCwvJZEeauO5SNGpOV7w" name="Debug__init__trans__reception" source="_ISRYY_JZEeauO5SNGpOV7w" target="_IST0o_JZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISXfAPJZEeauO5SNGpOV7w" name="Debug__init__trans__reception__308">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__init__trans__reception&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_ISVCw_JZEeauO5SNGpOV7w" name="Debug__Ex__IDLE" source="_IST0o_JZEeauO5SNGpOV7w" target="_ISUbsPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISXfAfJZEeauO5SNGpOV7w" name="Debug__Ex__IDLE__310">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ac__reception&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_ISVCxPJZEeauO5SNGpOV7w" name="Debug__Exec" port="_INqlMPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ISVCxfJZEeauO5SNGpOV7w" name="Debug__AC__reception" source="_ISUbsPJZEeauO5SNGpOV7w" target="_ISUbsvJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISVCx_JZEeauO5SNGpOV7w" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__AC__reception&quot;,(char *)&quot;Debug__B__Ac__reception&quot;,(char *)&quot;Debug__A__Ac__reception&quot;,(char *)&quot;&quot;);

this->parcel = Parcel();
this->parcel.number = umlrtparam_p.number;
this->parcel.level = umlrtparam_p.level;
this->parcel.stage = umlrtparam_p.stage;

log.show(&quot;Chute %s of stage %d becomes occupied\n&quot;, this->getName(), umlrtparam_p.stage);
timer.informIn(UMLRTTimespec(this->delay,0));</body>
                </effect>
                <trigger xmi:id="_ISVCxvJZEeauO5SNGpOV7w" name="Debug__Exec" port="_INqlMPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ISVCyPJZEeauO5SNGpOV7w" name="Debug__En__OCCUPIED" source="_ISUbsvJZEeauO5SNGpOV7w" target="_ISVCwPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISYGEPJZEeauO5SNGpOV7w" name="Debug__En__OCCUPIED__313">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__En__OCCUPIED&quot;,(char *)&quot;Debug__A__Ac__reception&quot;,(char *)&quot;Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_ISVCyfJZEeauO5SNGpOV7w" name="Debug__Exec" port="_INqlMPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ISVp0PJZEeauO5SNGpOV7w" name="Debug__end__trans__reception" source="_ISVCwPJZEeauO5SNGpOV7w" target="_ISRYZPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISYtIPJZEeauO5SNGpOV7w" name="Debug__end__trans__reception__315">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__end__trans__reception&quot;,(char *)&quot;Debug__A__En__OCCUPIED&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_ISVp0fJZEeauO5SNGpOV7w" name="Debug__Exec" port="_INqlMPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_IST0o_JZEeauO5SNGpOV7w" name="Debug__B__Ex__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IST0pPJZEeauO5SNGpOV7w" name="Debug__B__Ex__IDLE">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ISVp0vJZEeauO5SNGpOV7w" name="Debug__B__Ex__IDLE__303">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ISUbsPJZEeauO5SNGpOV7w" name="Debug__B__Ac__reception">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ISUbsfJZEeauO5SNGpOV7w" name="Debug__B__Ac__reception">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__B__Ac__reception&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;reception&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ISWQ4PJZEeauO5SNGpOV7w" name="Debug__B__Ac__reception__304">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__B__Ac__reception&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ISUbsvJZEeauO5SNGpOV7w" name="Debug__A__Ac__reception">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ISUbs_JZEeauO5SNGpOV7w" name="Debug__A__Ac__reception">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__A__Ac__reception&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;reception&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ISWQ4fJZEeauO5SNGpOV7w" name="Debug__A__Ac__reception__305">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__A__Ac__reception&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ISVCwPJZEeauO5SNGpOV7w" name="Debug__A__En__OCCUPIED">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ISVCwfJZEeauO5SNGpOV7w" name="Debug__A__En__OCCUPIED">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ISW38PJZEeauO5SNGpOV7w" name="Debug__A__En__OCCUPIED__306">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__reception::Region1::Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_ISaiUPJZEeauO5SNGpOV7w" name="Debug__Path__jam ?__OCCUPIED__13" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_ISaiUfJZEeauO5SNGpOV7w" name="Debug__C__jam ?__OCCUPIED__13">
            <connectionPoint xmi:id="_ISaiU_JZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_ISaiVPJZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_ISaiUvJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_ISdlovJZEeauO5SNGpOV7w" name="Debug__init__trans__jam ?__OCCUPIED__13" source="_ISaiU_JZEeauO5SNGpOV7w" target="_ISc-kPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISfa0PJZEeauO5SNGpOV7w" name="Debug__init__trans__jam ?__OCCUPIED__13__329">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__jam ?__OCCUPIED__13::Region1::Debug__init__trans__jam ?__OCCUPIED__13&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__jam ?__OCCUPIED__13&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_ISdlo_JZEeauO5SNGpOV7w" name="Debug__Ac__jam ?__OCCUPIED__13" source="_ISc-kPJZEeauO5SNGpOV7w" target="_ISc-kvJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISeMsPJZEeauO5SNGpOV7w" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__jam ?__OCCUPIED__13::Region1::Debug__Ac__jam ?__OCCUPIED__13&quot;,(char *)&quot;Debug__B__Ac__jam ?__OCCUPIED__13&quot;,(char *)&quot;Debug__A__Ac__jam ?__OCCUPIED__13&quot;,(char *)&quot;&quot;);

log.show(&quot;JAM detected in %s of stage %d\n&quot;, this->getName(), this->parcel.level-1);
timer.informIn(UMLRTTimespec(this->delay,0));</body>
                </effect>
                <trigger xmi:id="_ISdlpPJZEeauO5SNGpOV7w" name="Debug__Exec" port="_INqlMPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ISeMsfJZEeauO5SNGpOV7w" name="Debug__En__OCCUPIED" source="_ISc-kvJZEeauO5SNGpOV7w" target="_ISdloPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISgB4PJZEeauO5SNGpOV7w" name="Debug__En__OCCUPIED__332">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__jam ?__OCCUPIED__13::Region1::Debug__En__OCCUPIED&quot;,(char *)&quot;Debug__A__Ac__jam ?__OCCUPIED__13&quot;,(char *)&quot;Debug__A__En__jam ?__OCCUPIED__13&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_ISeMsvJZEeauO5SNGpOV7w" name="Debug__Exec" port="_INqlMPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ISeMs_JZEeauO5SNGpOV7w" name="Debug__end__trans__jam ?__OCCUPIED__13" source="_ISdloPJZEeauO5SNGpOV7w" target="_ISaiVPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISgo8PJZEeauO5SNGpOV7w" name="Debug__end__trans__jam ?__OCCUPIED__13__334">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__jam ?__OCCUPIED__13::Region1::Debug__end__trans__jam ?__OCCUPIED__13&quot;,(char *)&quot;Debug__A__En__jam ?__OCCUPIED__13&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_ISeMtPJZEeauO5SNGpOV7w" name="Debug__Exec" port="_INqlMPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_ISc-kPJZEeauO5SNGpOV7w" name="Debug__B__Ac__jam ?__OCCUPIED__13">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ISc-kfJZEeauO5SNGpOV7w" name="Debug__B__Ac__jam ?__OCCUPIED__13">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__jam ?__OCCUPIED__13::Region1::Debug__B__Ac__jam ?__OCCUPIED__13&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;jam ?__OCCUPIED__13&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ISeMtfJZEeauO5SNGpOV7w" name="Debug__B__Ac__jam ?__OCCUPIED__13__325">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__jam ?__OCCUPIED__13::Region1::Debug__B__Ac__jam ?__OCCUPIED__13&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ISc-kvJZEeauO5SNGpOV7w" name="Debug__A__Ac__jam ?__OCCUPIED__13">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ISc-k_JZEeauO5SNGpOV7w" name="Debug__A__Ac__jam ?__OCCUPIED__13">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__jam ?__OCCUPIED__13::Region1::Debug__A__Ac__jam ?__OCCUPIED__13&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;jam ?__OCCUPIED__13&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ISezwPJZEeauO5SNGpOV7w" name="Debug__A__Ac__jam ?__OCCUPIED__13__326">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__jam ?__OCCUPIED__13::Region1::Debug__A__Ac__jam ?__OCCUPIED__13&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ISdloPJZEeauO5SNGpOV7w" name="Debug__A__En__jam ?__OCCUPIED__13">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ISdlofJZEeauO5SNGpOV7w" name="Debug__A__En__jam ?__OCCUPIED__13">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__jam ?__OCCUPIED__13::Region1::Debug__A__En__jam ?__OCCUPIED__13&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ISezwfJZEeauO5SNGpOV7w" name="Debug__A__En__jam ?__OCCUPIED__13__327">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__jam ?__OCCUPIED__13::Region1::Debug__A__En__jam ?__OCCUPIED__13&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_ISh3EPJZEeauO5SNGpOV7w" name="Debug__Path__OCCUPIED__OCCUPIED__14" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_ISh3EfJZEeauO5SNGpOV7w" name="Debug__C__OCCUPIED__OCCUPIED__14">
            <connectionPoint xmi:id="_ISh3E_JZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_ISh3FPJZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_ISh3EvJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_ISlhcPJZEeauO5SNGpOV7w" name="Debug__init__trans__OCCUPIED__OCCUPIED__14" source="_ISh3E_JZEeauO5SNGpOV7w" target="_ISkTUPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISn9sfJZEeauO5SNGpOV7w" name="Debug__init__trans__OCCUPIED__OCCUPIED__14__349">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__14::Region1::Debug__init__trans__OCCUPIED__OCCUPIED__14&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_ISlhcfJZEeauO5SNGpOV7w" name="Debug__Ex__OCCUPIED" source="_ISkTUPJZEeauO5SNGpOV7w" target="_ISkTUvJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISokwPJZEeauO5SNGpOV7w" name="Debug__Ex__OCCUPIED__351">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__14::Region1::Debug__Ex__OCCUPIED&quot;,(char *)&quot;Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;Debug__B__Ac__OCCUPIED__OCCUPIED__14&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_ISlhcvJZEeauO5SNGpOV7w" name="Debug__Exec" port="_INqlMPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ISlhc_JZEeauO5SNGpOV7w" name="Debug__AC__OCCUPIED__OCCUPIED__14" source="_ISkTUvJZEeauO5SNGpOV7w" target="_ISk6YPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISlhdfJZEeauO5SNGpOV7w" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__14::Region1::Debug__AC__OCCUPIED__OCCUPIED__14&quot;,(char *)&quot;Debug__B__Ac__OCCUPIED__OCCUPIED__14&quot;,(char *)&quot;Debug__A__Ac__OCCUPIED__OCCUPIED__14&quot;,(char *)&quot;&quot;);

this->successorFree = umlrtparam_free;</body>
                </effect>
                <trigger xmi:id="_ISlhdPJZEeauO5SNGpOV7w" name="Debug__Exec" port="_INqlMPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ISlhdvJZEeauO5SNGpOV7w" name="Debug__En__OCCUPIED" source="_ISk6YPJZEeauO5SNGpOV7w" target="_ISk6YvJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISpL0PJZEeauO5SNGpOV7w" name="Debug__En__OCCUPIED__354">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__14::Region1::Debug__En__OCCUPIED&quot;,(char *)&quot;Debug__A__Ac__OCCUPIED__OCCUPIED__14&quot;,(char *)&quot;Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_ISlhd_JZEeauO5SNGpOV7w" name="Debug__Exec" port="_INqlMPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ISlhePJZEeauO5SNGpOV7w" name="Debug__end__trans__OCCUPIED__OCCUPIED__14" source="_ISk6YvJZEeauO5SNGpOV7w" target="_ISh3FPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISpy4PJZEeauO5SNGpOV7w" name="Debug__end__trans__OCCUPIED__OCCUPIED__14__356">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__14::Region1::Debug__end__trans__OCCUPIED__OCCUPIED__14&quot;,(char *)&quot;Debug__A__En__OCCUPIED&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_ISlhefJZEeauO5SNGpOV7w" name="Debug__Exec" port="_INqlMPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_ISkTUPJZEeauO5SNGpOV7w" name="Debug__B__Ex__OCCUPIED">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ISkTUfJZEeauO5SNGpOV7w" name="Debug__B__Ex__OCCUPIED">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__14::Region1::Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ISmIgPJZEeauO5SNGpOV7w" name="Debug__B__Ex__OCCUPIED__344">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__14::Region1::Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ISkTUvJZEeauO5SNGpOV7w" name="Debug__B__Ac__OCCUPIED__OCCUPIED__14">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ISkTU_JZEeauO5SNGpOV7w" name="Debug__B__Ac__OCCUPIED__OCCUPIED__14">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__14::Region1::Debug__B__Ac__OCCUPIED__OCCUPIED__14&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;OCCUPIED__OCCUPIED__14&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ISmIgfJZEeauO5SNGpOV7w" name="Debug__B__Ac__OCCUPIED__OCCUPIED__14__345">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__14::Region1::Debug__B__Ac__OCCUPIED__OCCUPIED__14&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ISk6YPJZEeauO5SNGpOV7w" name="Debug__A__Ac__OCCUPIED__OCCUPIED__14">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ISk6YfJZEeauO5SNGpOV7w" name="Debug__A__Ac__OCCUPIED__OCCUPIED__14">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__14::Region1::Debug__A__Ac__OCCUPIED__OCCUPIED__14&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED__OCCUPIED__14&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ISnWoPJZEeauO5SNGpOV7w" name="Debug__A__Ac__OCCUPIED__OCCUPIED__14__346">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__14::Region1::Debug__A__Ac__OCCUPIED__OCCUPIED__14&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ISk6YvJZEeauO5SNGpOV7w" name="Debug__A__En__OCCUPIED">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ISk6Y_JZEeauO5SNGpOV7w" name="Debug__A__En__OCCUPIED">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__14::Region1::Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ISn9sPJZEeauO5SNGpOV7w" name="Debug__A__En__OCCUPIED__347">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__14::Region1::Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_ISqZ8PJZEeauO5SNGpOV7w" name="Debug__Path__IDLE__IDLE__15" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_ISqZ8fJZEeauO5SNGpOV7w" name="Debug__C__IDLE__IDLE__15">
            <connectionPoint xmi:id="_ISqZ8_JZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_ISqZ9PJZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_ISqZ8vJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_ISuEUPJZEeauO5SNGpOV7w" name="Debug__init__trans__IDLE__IDLE__15" source="_ISqZ8_JZEeauO5SNGpOV7w" target="_ISs2MPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISwgkPJZEeauO5SNGpOV7w" name="Debug__init__trans__IDLE__IDLE__15__371">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__IDLE__IDLE__15::Region1::Debug__init__trans__IDLE__IDLE__15&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_ISuEUfJZEeauO5SNGpOV7w" name="Debug__Ex__IDLE" source="_ISs2MPJZEeauO5SNGpOV7w" target="_ISs2MvJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISxHoPJZEeauO5SNGpOV7w" name="Debug__Ex__IDLE__373">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__IDLE__IDLE__15::Region1::Debug__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ac__IDLE__IDLE__15&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_ISuEUvJZEeauO5SNGpOV7w" name="Debug__Exec" port="_INqlMPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ISuEU_JZEeauO5SNGpOV7w" name="Debug__AC__IDLE__IDLE__15" source="_ISs2MvJZEeauO5SNGpOV7w" target="_IStdQPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISuEVfJZEeauO5SNGpOV7w" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__IDLE__IDLE__15::Region1::Debug__AC__IDLE__IDLE__15&quot;,(char *)&quot;Debug__B__Ac__IDLE__IDLE__15&quot;,(char *)&quot;Debug__A__Ac__IDLE__IDLE__15&quot;,(char *)&quot;&quot;);

this->successorFree = umlrtparam_free;</body>
                </effect>
                <trigger xmi:id="_ISuEVPJZEeauO5SNGpOV7w" name="Debug__Exec" port="_INqlMPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ISurYPJZEeauO5SNGpOV7w" name="Debug__En__IDLE" source="_IStdQPJZEeauO5SNGpOV7w" target="_IStdQvJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISurYvJZEeauO5SNGpOV7w" name="setFree" visibility="public" isReentrant="true">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__IDLE__IDLE__15::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__IDLE__IDLE__15&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;&quot;);

enter.setFree(true).send();</body>
                </effect>
                <trigger xmi:id="_ISurYfJZEeauO5SNGpOV7w" name="Debug__Exec" port="_INqlMPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ISurY_JZEeauO5SNGpOV7w" name="Debug__end__trans__IDLE__IDLE__15" source="_IStdQvJZEeauO5SNGpOV7w" target="_ISqZ9PJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISyVwPJZEeauO5SNGpOV7w" name="Debug__end__trans__IDLE__IDLE__15__377">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__IDLE__IDLE__15::Region1::Debug__end__trans__IDLE__IDLE__15&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_ISurZPJZEeauO5SNGpOV7w" name="Debug__Exec" port="_INqlMPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_ISs2MPJZEeauO5SNGpOV7w" name="Debug__B__Ex__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ISs2MfJZEeauO5SNGpOV7w" name="Debug__B__Ex__IDLE">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__IDLE__IDLE__15::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ISurZfJZEeauO5SNGpOV7w" name="Debug__B__Ex__IDLE__366">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__IDLE__IDLE__15::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ISs2MvJZEeauO5SNGpOV7w" name="Debug__B__Ac__IDLE__IDLE__15">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ISs2M_JZEeauO5SNGpOV7w" name="Debug__B__Ac__IDLE__IDLE__15">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__IDLE__IDLE__15::Region1::Debug__B__Ac__IDLE__IDLE__15&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE__IDLE__15&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ISvScPJZEeauO5SNGpOV7w" name="Debug__B__Ac__IDLE__IDLE__15__367">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__IDLE__IDLE__15::Region1::Debug__B__Ac__IDLE__IDLE__15&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IStdQPJZEeauO5SNGpOV7w" name="Debug__A__Ac__IDLE__IDLE__15">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IStdQfJZEeauO5SNGpOV7w" name="Debug__A__Ac__IDLE__IDLE__15">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__IDLE__IDLE__15::Region1::Debug__A__Ac__IDLE__IDLE__15&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE__IDLE__15&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ISv5gPJZEeauO5SNGpOV7w" name="Debug__A__Ac__IDLE__IDLE__15__368">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__IDLE__IDLE__15::Region1::Debug__A__Ac__IDLE__IDLE__15&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IStdQvJZEeauO5SNGpOV7w" name="Debug__A__En__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IStdQ_JZEeauO5SNGpOV7w" name="Debug__A__En__IDLE">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__IDLE__IDLE__15::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ISv5gfJZEeauO5SNGpOV7w" name="Debug__A__En__IDLE__369">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__IDLE__IDLE__15::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_ISzj4PJZEeauO5SNGpOV7w" name="Debug__Path__jam ?__IDLE__16" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_ISzj4fJZEeauO5SNGpOV7w" name="Debug__C__jam ?__IDLE__16">
            <connectionPoint xmi:id="_ISzj4_JZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_ISzj5PJZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_ISzj4vJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_IS2nMPJZEeauO5SNGpOV7w" name="Debug__init__trans__jam ?__IDLE__16" source="_ISzj4_JZEeauO5SNGpOV7w" target="_IS1ZEvJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IS4cYPJZEeauO5SNGpOV7w" name="Debug__init__trans__jam ?__IDLE__16__391">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__jam ?__IDLE__16::Region1::Debug__init__trans__jam ?__IDLE__16&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__jam ?__IDLE__16&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_IS2nMfJZEeauO5SNGpOV7w" name="Debug__Ac__jam ?__IDLE__16" source="_IS1ZEvJZEeauO5SNGpOV7w" target="_IS2AIPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IS2nM_JZEeauO5SNGpOV7w" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__jam ?__IDLE__16::Region1::Debug__Ac__jam ?__IDLE__16&quot;,(char *)&quot;Debug__B__Ac__jam ?__IDLE__16&quot;,(char *)&quot;Debug__A__Ac__jam ?__IDLE__16&quot;,(char *)&quot;&quot;);

	detection.detect(this->parcel).send();
	exit.transmit(this->parcel).send();
	this->successorFree = false;
log.show(&quot;Chute %s of stage %d is now free\n&quot;, this->getName(), this->parcel.stage);</body>
                </effect>
                <trigger xmi:id="_IS2nMvJZEeauO5SNGpOV7w" name="Debug__Exec" port="_INqlMPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IS2nNPJZEeauO5SNGpOV7w" name="Debug__En__IDLE" source="_IS2AIPJZEeauO5SNGpOV7w" target="_IS2AIvJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IS2nNvJZEeauO5SNGpOV7w" name="setFree" visibility="public" isReentrant="true">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__jam ?__IDLE__16::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__jam ?__IDLE__16&quot;,(char *)&quot;Debug__A__En__jam ?__IDLE__16&quot;,(char *)&quot;&quot;);

enter.setFree(true).send();</body>
                </effect>
                <trigger xmi:id="_IS2nNfJZEeauO5SNGpOV7w" name="Debug__Exec" port="_INqlMPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IS2nN_JZEeauO5SNGpOV7w" name="Debug__end__trans__jam ?__IDLE__16" source="_IS2AIvJZEeauO5SNGpOV7w" target="_ISzj5PJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IS5qgPJZEeauO5SNGpOV7w" name="Debug__end__trans__jam ?__IDLE__16__395">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__jam ?__IDLE__16::Region1::Debug__end__trans__jam ?__IDLE__16&quot;,(char *)&quot;Debug__A__En__jam ?__IDLE__16&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IS2nOPJZEeauO5SNGpOV7w" name="Debug__Exec" port="_INqlMPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_IS1ZEvJZEeauO5SNGpOV7w" name="Debug__B__Ac__jam ?__IDLE__16">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IS1ZE_JZEeauO5SNGpOV7w" name="Debug__B__Ac__jam ?__IDLE__16">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__jam ?__IDLE__16::Region1::Debug__B__Ac__jam ?__IDLE__16&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;jam ?__IDLE__16&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IS3OQPJZEeauO5SNGpOV7w" name="Debug__B__Ac__jam ?__IDLE__16__387">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__jam ?__IDLE__16::Region1::Debug__B__Ac__jam ?__IDLE__16&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IS2AIPJZEeauO5SNGpOV7w" name="Debug__A__Ac__jam ?__IDLE__16">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IS2AIfJZEeauO5SNGpOV7w" name="Debug__A__Ac__jam ?__IDLE__16">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__jam ?__IDLE__16::Region1::Debug__A__Ac__jam ?__IDLE__16&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;jam ?__IDLE__16&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IS31UPJZEeauO5SNGpOV7w" name="Debug__A__Ac__jam ?__IDLE__16__388">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__jam ?__IDLE__16::Region1::Debug__A__Ac__jam ?__IDLE__16&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IS2AIvJZEeauO5SNGpOV7w" name="Debug__A__En__jam ?__IDLE__16">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IS2AI_JZEeauO5SNGpOV7w" name="Debug__A__En__jam ?__IDLE__16">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__jam ?__IDLE__16::Region1::Debug__A__En__jam ?__IDLE__16&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IS31UfJZEeauO5SNGpOV7w" name="Debug__A__En__jam ?__IDLE__16__389">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__jam ?__IDLE__16::Region1::Debug__A__En__jam ?__IDLE__16&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_IS64oPJZEeauO5SNGpOV7w" name="Debug__Path__transmission" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_IS64ofJZEeauO5SNGpOV7w" name="Debug__C__transmission">
            <connectionPoint xmi:id="_IS64o_JZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_IS64pPJZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_IS64ovJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_IS978PJZEeauO5SNGpOV7w" name="Debug__init__trans__transmission" source="_IS64o_JZEeauO5SNGpOV7w" target="_IS9U4PJZEeauO5SNGpOV7w"/>
              <transition xmi:id="_IS978fJZEeauO5SNGpOV7w" name="Debug__Ex__OCCUPIED" source="_IS9U4PJZEeauO5SNGpOV7w" target="_IS9U4vJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITCNYPJZEeauO5SNGpOV7w" name="Debug__Ex__OCCUPIED__409">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__transmission::Region1::Debug__Ex__OCCUPIED&quot;,(char *)&quot;Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;Debug__B__Ac__transmission&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IS978vJZEeauO5SNGpOV7w" name="Debug__Exec" port="_INqlMPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IS978_JZEeauO5SNGpOV7w" name="Debug__AC__transmission" source="_IS9U4vJZEeauO5SNGpOV7w" target="_IS9U5PJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITC0cPJZEeauO5SNGpOV7w" name="Debug__AC__transmission__411">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__transmission::Region1::Debug__AC__transmission&quot;,(char *)&quot;Debug__B__Ac__transmission&quot;,(char *)&quot;Debug__A__Ac__transmission&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IS979PJZEeauO5SNGpOV7w" name="Debug__Exec" port="_INqlMPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IS979fJZEeauO5SNGpOV7w" name="Debug__end__trans__transmission" source="_IS9U5PJZEeauO5SNGpOV7w" target="_IS64pPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITDbgPJZEeauO5SNGpOV7w" name="Debug__end__trans__transmission__413">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__transmission::Region1::Debug__end__trans__transmission&quot;,(char *)&quot;Debug__A__Ac__transmission&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IS979vJZEeauO5SNGpOV7w" name="Debug__Exec" port="_INqlMPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_IS9U4PJZEeauO5SNGpOV7w" name="Debug__B__Ex__OCCUPIED">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IS9U4fJZEeauO5SNGpOV7w" name="Debug__B__Ex__OCCUPIED">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__transmission::Region1::Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IS979_JZEeauO5SNGpOV7w" name="Debug__B__Ex__OCCUPIED__405">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__transmission::Region1::Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IS9U4vJZEeauO5SNGpOV7w" name="Debug__B__Ac__transmission">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IS9U4_JZEeauO5SNGpOV7w" name="Debug__B__Ac__transmission">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__transmission::Region1::Debug__B__Ac__transmission&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;transmission&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IS-jAPJZEeauO5SNGpOV7w" name="Debug__B__Ac__transmission__406">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__transmission::Region1::Debug__B__Ac__transmission&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IS9U5PJZEeauO5SNGpOV7w" name="Debug__A__Ac__transmission">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IS9U5fJZEeauO5SNGpOV7w" name="Debug__A__Ac__transmission">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__transmission::Region1::Debug__A__Ac__transmission&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;transmission&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ITBmUPJZEeauO5SNGpOV7w" name="Debug__A__Ac__transmission__407">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Chute::ChuteStateMachine::Region::Debug__C__transmission::Region1::Debug__A__Ac__transmission&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_ITEpoPJZEeauO5SNGpOV7w" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IN2ycPJZEeauO5SNGpOV7w" name="Debug__variablesViewMethod" specification="_IN2LYPJZEeauO5SNGpOV7w">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;successorFree,&quot;);
tempS.append(&quot;Boolean,&quot;);
if(successorFree==true){
    tempS.append(&quot;true&quot;);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;false&quot;);
    tempS.append(&quot;\n&quot;);
};
tempS.append(&quot;delay,&quot;);
tempS.append(&quot;Integer,&quot;);
if(delay!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,delay);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IN3ZhPJZEeauO5SNGpOV7w" name="Debug__variablesChange" specification="_IN3ZgPJZEeauO5SNGpOV7w">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;delay&quot;==tempVarName){
    delay=atoi(varValue);
    return true;
}else if (&quot;successorFree&quot;==tempVarName){
    if(strcmp(varValue,&quot;true&quot;)==0)
        successorFree=true;
    else 
        successorFree=false;
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IO0bxfJZEeauO5SNGpOV7w" name="Debug__sendEvent" specification="_IOXIwPJZEeauO5SNGpOV7w">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_IN2LYPJZEeauO5SNGpOV7w" name="Debug__variablesView" visibility="private" method="_IN2ycPJZEeauO5SNGpOV7w"/>
      <ownedOperation xmi:id="_IN3ZgPJZEeauO5SNGpOV7w" name="Debug__variablesChange" visibility="private" method="_IN3ZhPJZEeauO5SNGpOV7w">
        <ownedParameter xmi:id="_IN3ZgfJZEeauO5SNGpOV7w" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IN3ZgvJZEeauO5SNGpOV7w" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IN3Zg_JZEeauO5SNGpOV7w" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_IOXIwPJZEeauO5SNGpOV7w" name="Debug__sendEvent" visibility="private" method="_IO0bxfJZEeauO5SNGpOV7w">
        <ownedParameter xmi:id="_IOXIwfJZEeauO5SNGpOV7w" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IOfEkPJZEeauO5SNGpOV7w" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IOlyQPJZEeauO5SNGpOV7w" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IOtHAPJZEeauO5SNGpOV7w" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IOtHAfJZEeauO5SNGpOV7w" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IO0bwPJZEeauO5SNGpOV7w" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IO0bwfJZEeauO5SNGpOV7w" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IO0bwvJZEeauO5SNGpOV7w" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IO0bw_JZEeauO5SNGpOV7w" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IO0bxPJZEeauO5SNGpOV7w" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_wvPHwMM4EeahHehXumVB-w" name="detection">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_wvKPQMM4EeahHehXumVB-w" name="detection">
        <interfaceRealization xmi:id="_wvat8MM4EeahHehXumVB-w" client="_wvKPQMM4EeahHehXumVB-w" supplier="_wvV1cMM4EeahHehXumVB-w" contract="_wvV1cMM4EeahHehXumVB-w"/>
        <interfaceRealization xmi:id="_wvltEMM4EeahHehXumVB-w" client="_wvKPQMM4EeahHehXumVB-w" supplier="_wviCsMM4EeahHehXumVB-w" contract="_wviCsMM4EeahHehXumVB-w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_wvV1cMM4EeahHehXumVB-w" name="detection"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_wvcjIMM4EeahHehXumVB-w" name="detection~">
        <ownedOperation xmi:id="_F05S4MM5EeahHehXumVB-w" name="detect">
          <ownedParameter xmi:id="_G2MX0MM5EeahHehXumVB-w" name="p" type="_aEoEwML7EeaSH8bbL43htA"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_wvgNgMM4EeahHehXumVB-w" client="_wvKPQMM4EeahHehXumVB-w" supplier="_wvcjIMM4EeahHehXumVB-w"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_wvhboMM4EeahHehXumVB-w" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_wviCsMM4EeahHehXumVB-w" name="detectionIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_wvmUIMM4EeahHehXumVB-w" client="_wvKPQMM4EeahHehXumVB-w" supplier="_wviCsMM4EeahHehXumVB-w"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Mh59cMM5EeahHehXumVB-w" operation="_F05S4MM5EeahHehXumVB-w"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_AJLGMMM5EeahHehXumVB-w" name="Sensor" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_CHUN4MM5EeahHehXumVB-w" name="detection" visibility="public" type="_wvKPQMM4EeahHehXumVB-w" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_m5dgAMM5EeahHehXumVB-w" name="switchProtocol" visibility="public" type="_RDbn4MM5EeahHehXumVB-w" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_uL2LsMM9EeahHehXumVB-w" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_IO1p4PJZEeauO5SNGpOV7w" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_IO4tMfJZEeauO5SNGpOV7w" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_IO4tMvJZEeauO5SNGpOV7w" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_IPBQEPJZEeauO5SNGpOV7w" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_IPBQEfJZEeauO5SNGpOV7w" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_IPBQEvJZEeauO5SNGpOV7w" name="Debug__event"/>
      <ownedAttribute xmi:id="_IPH9wPJZEeauO5SNGpOV7w" name="Debug__SRO"/>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_IdCu8MM7EeahHehXumVB-w" name="SensorStateMachine" isReentrant="false">
        <region xmi:id="_IdCu8cM7EeahHehXumVB-w" name="Region">
          <transition xmi:id="_IdDWAMM7EeahHehXumVB-w" name="Initial" source="_ITybUPJZEeauO5SNGpOV7w" target="_IdDWBsM7EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IT5JAPJZEeauO5SNGpOV7w" name="Initial__526">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IdDWAsM7EeahHehXumVB-w" name="IDLE__IDLE__20" source="_ITp4cPJZEeauO5SNGpOV7w" target="_IdDWBsM7EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IdDWA8M7EeahHehXumVB-w">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::IDLE__IDLE__20&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__20&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

    int reducedNumber = umlrtparam_p.number/umlrtparam_p.level; 
    int isPair = reducedNumber % 2;
    if (isPair == 0) {
    log.show(&quot;At stage %s (%d), turn left.\n&quot;, getName(), umlrtparam_p.level);
    switchProtocol.setSwitch(0).send();
    }
    else {
    log.show(&quot;At stage %s (%d), turn right.\n&quot;, getName(), umlrtparam_p.level);
    switchProtocol.setSwitch(1).send();
    }</body>
            </effect>
          </transition>
          <transition xmi:id="_ITp4dfJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__20" source="_IdDWBsM7EeahHehXumVB-w" target="_ITp4cPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITp4dvJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__20__485">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__IDLE__IDLE__20&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__20&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_PGM0QMM7EeahHehXumVB-w" event="_Mh59cMM5EeahHehXumVB-w" port="_CHUN4MM5EeahHehXumVB-w"/>
          </transition>
          <transition xmi:id="_ITqfgPJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__20__S" guard="_ITqfgvJZEeauO5SNGpOV7w" source="_ITp4cPJZEeauO5SNGpOV7w" target="_ITp4c_JZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_ITqfgvJZEeauO5SNGpOV7w" name="Debug__GuardIDLE__IDLE__20">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_ITqfgfJZEeauO5SNGpOV7w" name="Debug__GuardIDLE__IDLE__20">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITqfg_JZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__20__S__487">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__IDLE__IDLE__20__S&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__20&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_ITrGkPJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__20__E" source="_ITp4dPJZEeauO5SNGpOV7w" target="_IdDWBsM7EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITrGkfJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__20__E__489">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__IDLE__IDLE__20__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_ITrtoPJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__20__dbg" source="_ITp4cfJZEeauO5SNGpOV7w" target="_ITp4cfJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITrtovJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__20__dbg__491">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__IDLE__IDLE__20__dbg&quot;,(char *)&quot;Debug__C__IDLE__IDLE__20&quot;,(char *)&quot;Debug__C__IDLE__IDLE__20&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_ITrtofJZEeauO5SNGpOV7w" name="Debug__MSG" port="_IO1p4PJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_ITybVfJZEeauO5SNGpOV7w" name="Debug__Initial" source="_IT5wEPJZEeauO5SNGpOV7w" target="_ITybUPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITybVvJZEeauO5SNGpOV7w" name="Debug__Initial__507">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;transmit&quot;,&quot;transmission&quot;);
Debug__SRO.addTransitionsFromState(&quot;OCCUPIED&quot;,&quot;transmission&quot;,&quot;jam ?&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;setSwitch&quot;,&quot;switchProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;jam ?&quot;,&quot;&quot;,&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;jam ?&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;reception&quot;,&quot;OCCUPIED&quot;,&quot;transmit&quot;,&quot;transmission&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;setFree&quot;,&quot;transmission&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;detect&quot;,&quot;detection&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;GENERATING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;GENERATING&quot;,&quot;&quot;,&quot;GENERATING&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Jam ?&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;OCCUPIED&quot;,&quot;setFree&quot;,&quot;transmission&quot;);
Debug__SRO.addTransitionsFromState(&quot;Jam ?&quot;,&quot;&quot;,&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;OCCUPIED&quot;,&quot;transmission&quot;,&quot;Jam ?&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;OCCUPIED&quot;,&quot;setSwitch&quot;,&quot;switchProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;GENERATING&quot;,&quot;&quot;,&quot;GENERATING&quot;,&quot;setFree&quot;,&quot;transmission&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),(char *) &quot;&quot;,(char *) &quot;&quot;,(char *) &quot;&quot;,(char *)&quot;&quot;,(char *) &quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_IT6XIPJZEeauO5SNGpOV7w" name="ConnectionEstablished" port="_IO1p4PJZEeauO5SNGpOV7w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_ITzCYPJZEeauO5SNGpOV7w" name="Debug__Initial__S" guard="_ITzCYvJZEeauO5SNGpOV7w" source="_ITybUPJZEeauO5SNGpOV7w" target="_ITybU_JZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_ITzCYvJZEeauO5SNGpOV7w" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_ITzCYfJZEeauO5SNGpOV7w" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo21&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITzCY_JZEeauO5SNGpOV7w" name="Debug__Initial__S__509">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_ITzpcPJZEeauO5SNGpOV7w" name="Debug__Initial__E" source="_ITybVPJZEeauO5SNGpOV7w" target="_IdDWBsM7EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITzpcfJZEeauO5SNGpOV7w" name="Debug__Initial__E__511">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IT0QgPJZEeauO5SNGpOV7w" name="Debug__Initial__dbg" source="_ITybUfJZEeauO5SNGpOV7w" target="_ITybUfJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IT0QgvJZEeauO5SNGpOV7w" name="Debug__Initial__dbg__513">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__Initial__dbg&quot;,(char *)&quot;Debug__C__Initial&quot;,(char *)&quot;Debug__C__Initial&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_IT0QgfJZEeauO5SNGpOV7w" name="Debug__MSG" port="_IO1p4PJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_IT5wEfJZEeauO5SNGpOV7w" name="Debug__InitDebug" source="_IdDWBcM7EeahHehXumVB-w" target="_IT5wEPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IT5wEvJZEeauO5SNGpOV7w" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
std::string tempS;
std::cout&lt;&lt;&quot;Enter 1 for running in debug mode, any other key for normal model\n&quot;;
std::cin>> tempS;
if (tempS==&quot;1&quot;)
    this->Debug__SRO.setExecMode(Stepping);
else
    this->Debug__SRO.setExecMode(Running);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_IdDWBcM7EeahHehXumVB-w" name="Pseudo21"/>
          <subvertex xmi:type="uml:State" xmi:id="_IdDWBsM7EeahHehXumVB-w" name="IDLE">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IT-BgPJZEeauO5SNGpOV7w" name="IDLE__527">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

}</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IT-okPJZEeauO5SNGpOV7w" name="IDLE__528">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

}</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_ITp4cPJZEeauO5SNGpOV7w" name="Debug__Path__IDLE__IDLE__20" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_ITp4cfJZEeauO5SNGpOV7w" name="Debug__C__IDLE__IDLE__20">
            <connectionPoint xmi:id="_ITp4c_JZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_ITp4dPJZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_ITp4cvJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_ITs7wvJZEeauO5SNGpOV7w" name="Debug__init__trans__IDLE__IDLE__20" source="_ITp4c_JZEeauO5SNGpOV7w" target="_ITrto_JZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITv_EPJZEeauO5SNGpOV7w" name="Debug__init__trans__IDLE__IDLE__20__497">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__20::Region1::Debug__init__trans__IDLE__IDLE__20&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_ITs7w_JZEeauO5SNGpOV7w" name="Debug__Ex__IDLE" source="_ITrto_JZEeauO5SNGpOV7w" target="_ITsUsfJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITv_EfJZEeauO5SNGpOV7w" name="Debug__Ex__IDLE__499">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__20::Region1::Debug__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ac__IDLE__IDLE__20&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_ITs7xPJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IO1p4PJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ITs7xfJZEeauO5SNGpOV7w" name="Debug__AC__IDLE__IDLE__20" source="_ITsUsfJZEeauO5SNGpOV7w" target="_ITsUs_JZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITti0PJZEeauO5SNGpOV7w" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__20::Region1::Debug__AC__IDLE__IDLE__20&quot;,(char *)&quot;Debug__B__Ac__IDLE__IDLE__20&quot;,(char *)&quot;Debug__A__Ac__IDLE__IDLE__20&quot;,(char *)&quot;&quot;);

    int reducedNumber = umlrtparam_p.number/umlrtparam_p.level; 
    int isPair = reducedNumber % 2;
    if (isPair == 0) {
    log.show(&quot;At stage %s (%d), turn left.\n&quot;, getName(), umlrtparam_p.level);
    switchProtocol.setSwitch(0).send();
    }
    else {
    log.show(&quot;At stage %s (%d), turn right.\n&quot;, getName(), umlrtparam_p.level);
    switchProtocol.setSwitch(1).send();
    }</body>
                </effect>
                <trigger xmi:id="_ITs7xvJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IO1p4PJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ITti0fJZEeauO5SNGpOV7w" name="Debug__En__IDLE" source="_ITsUs_JZEeauO5SNGpOV7w" target="_ITs7wPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITwmIPJZEeauO5SNGpOV7w" name="Debug__En__IDLE__502">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__20::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__IDLE__IDLE__20&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_ITti0vJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IO1p4PJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ITti0_JZEeauO5SNGpOV7w" name="Debug__end__trans__IDLE__IDLE__20" source="_ITs7wPJZEeauO5SNGpOV7w" target="_ITp4dPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ITxNMPJZEeauO5SNGpOV7w" name="Debug__end__trans__IDLE__IDLE__20__504">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__20::Region1::Debug__end__trans__IDLE__IDLE__20&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_ITti1PJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IO1p4PJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_ITrto_JZEeauO5SNGpOV7w" name="Debug__B__Ex__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ITsUsPJZEeauO5SNGpOV7w" name="Debug__B__Ex__IDLE">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__20::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ITti1fJZEeauO5SNGpOV7w" name="Debug__B__Ex__IDLE__492">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__20::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ITsUsfJZEeauO5SNGpOV7w" name="Debug__B__Ac__IDLE__IDLE__20">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ITsUsvJZEeauO5SNGpOV7w" name="Debug__B__Ac__IDLE__IDLE__20">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__20::Region1::Debug__B__Ac__IDLE__IDLE__20&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE__IDLE__20&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ITuJ4PJZEeauO5SNGpOV7w" name="Debug__B__Ac__IDLE__IDLE__20__493">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__20::Region1::Debug__B__Ac__IDLE__IDLE__20&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ITsUs_JZEeauO5SNGpOV7w" name="Debug__A__Ac__IDLE__IDLE__20">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ITsUtPJZEeauO5SNGpOV7w" name="Debug__A__Ac__IDLE__IDLE__20">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__20::Region1::Debug__A__Ac__IDLE__IDLE__20&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE__IDLE__20&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ITuw8PJZEeauO5SNGpOV7w" name="Debug__A__Ac__IDLE__IDLE__20__494">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__20::Region1::Debug__A__Ac__IDLE__IDLE__20&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ITs7wPJZEeauO5SNGpOV7w" name="Debug__A__En__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ITs7wfJZEeauO5SNGpOV7w" name="Debug__A__En__IDLE">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__20::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ITvYAPJZEeauO5SNGpOV7w" name="Debug__A__En__IDLE__495">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__IDLE__IDLE__20::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_ITybUPJZEeauO5SNGpOV7w" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_ITybUfJZEeauO5SNGpOV7w" name="Debug__C__Initial">
            <connectionPoint xmi:id="_ITybU_JZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_ITybVPJZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_ITybUvJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_IT1eofJZEeauO5SNGpOV7w" name="Debug__init__trans__Initial" source="_ITybU_JZEeauO5SNGpOV7w" target="_IT0Qg_JZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IT3T0PJZEeauO5SNGpOV7w" name="Debug__init__trans__Initial__518">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_IT1eovJZEeauO5SNGpOV7w" name="Debug__Ac__Initial" source="_IT0Qg_JZEeauO5SNGpOV7w" target="_IT03kfJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IT364PJZEeauO5SNGpOV7w" name="Debug__Ac__Initial__520">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IT1eo_JZEeauO5SNGpOV7w" name="Debug__Exec" port="_IO1p4PJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IT1epPJZEeauO5SNGpOV7w" name="Debug__En__IDLE" source="_IT03kfJZEeauO5SNGpOV7w" target="_IT03k_JZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IT4h8PJZEeauO5SNGpOV7w" name="Debug__En__IDLE__522">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__Initial::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IT1epfJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IO1p4PJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IT1epvJZEeauO5SNGpOV7w" name="Debug__end__trans__Initial" source="_IT03k_JZEeauO5SNGpOV7w" target="_ITybVPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IT4h8fJZEeauO5SNGpOV7w" name="Debug__end__trans__Initial__524">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IT1ep_JZEeauO5SNGpOV7w" name="Debug__Exec" port="_IO1p4PJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_IT0Qg_JZEeauO5SNGpOV7w" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IT03kPJZEeauO5SNGpOV7w" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IT2FsPJZEeauO5SNGpOV7w" name="Debug__B__Ac__Initial__514">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IT03kfJZEeauO5SNGpOV7w" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IT03kvJZEeauO5SNGpOV7w" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IT2FsfJZEeauO5SNGpOV7w" name="Debug__A__Ac__Initial__515">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IT03k_JZEeauO5SNGpOV7w" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IT1eoPJZEeauO5SNGpOV7w" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IT2swPJZEeauO5SNGpOV7w" name="Debug__A__En__Initial__516">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Sensor::SensorStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_IT5wEPJZEeauO5SNGpOV7w" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPAB8fJZEeauO5SNGpOV7w" name="Debug__variablesViewMethod" specification="_IPAB8PJZEeauO5SNGpOV7w">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IPApBPJZEeauO5SNGpOV7w" name="Debug__variablesChange" specification="_IPApAPJZEeauO5SNGpOV7w">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);

    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IP8dJPJZEeauO5SNGpOV7w" name="Debug__sendEvent" specification="_IPfxMPJZEeauO5SNGpOV7w">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_IPAB8PJZEeauO5SNGpOV7w" name="Debug__variablesView" visibility="private" method="_IPAB8fJZEeauO5SNGpOV7w"/>
      <ownedOperation xmi:id="_IPApAPJZEeauO5SNGpOV7w" name="Debug__variablesChange" visibility="private" method="_IPApBPJZEeauO5SNGpOV7w">
        <ownedParameter xmi:id="_IPApAfJZEeauO5SNGpOV7w" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPApAvJZEeauO5SNGpOV7w" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPApA_JZEeauO5SNGpOV7w" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_IPfxMPJZEeauO5SNGpOV7w" name="Debug__sendEvent" visibility="private" method="_IP8dJPJZEeauO5SNGpOV7w">
        <ownedParameter xmi:id="_IPfxMfJZEeauO5SNGpOV7w" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPnF8PJZEeauO5SNGpOV7w" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IPtzoPJZEeauO5SNGpOV7w" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IP0hUPJZEeauO5SNGpOV7w" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IP1IYPJZEeauO5SNGpOV7w" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IP72EPJZEeauO5SNGpOV7w" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IP8dIPJZEeauO5SNGpOV7w" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IP8dIfJZEeauO5SNGpOV7w" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IP8dIvJZEeauO5SNGpOV7w" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IP8dI_JZEeauO5SNGpOV7w" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_O_UbEMM5EeahHehXumVB-w" name="Switcher" classifierBehavior="_yUE3QMM7EeahHehXumVB-w" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_gMZLEMM5EeahHehXumVB-w" name="switchProtocol" visibility="public" type="_RDbn4MM5EeahHehXumVB-w" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_0cp_QMM5EeahHehXumVB-w" name="right" visibility="public" type="_Qq5xwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_3tk9cMM5EeahHehXumVB-w" name="left" visibility="public" type="_Qq5xwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_VxKF0MM6EeahHehXumVB-w" name="enter" visibility="public" type="_Qq5xwML6EeaSH8bbL43htA" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:id="_tx4ecMM7EeahHehXumVB-w" name="choice">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_Yk87wMM9EeahHehXumVB-w" name="parcel" type="_aEoEwML7EeaSH8bbL43htA"/>
      <ownedAttribute xmi:id="_GGZlEMOmEeaV4cHHWddkKg" name="leftSuccessorFree">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_J43KEMOmEeaV4cHHWddkKg" name="rightSuccessorFree">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_x2tmMMX2EeaYV5cb1Zesag" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_b1lNUMYiEeaYV5cb1Zesag" name="delay">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_eEeGwMYiEeaYV5cb1Zesag" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_4c8vAMYlEeaYV5cb1Zesag" name="timer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_IJi6MPJZEeauO5SNGpOV7w" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_IJnysPJZEeauO5SNGpOV7w" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_IJnysfJZEeauO5SNGpOV7w" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_IJ1OEvJZEeauO5SNGpOV7w" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_IJ1OE_JZEeauO5SNGpOV7w" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_IJ1OFPJZEeauO5SNGpOV7w" name="Debug__event"/>
      <ownedAttribute xmi:id="_IJ-_EPJZEeauO5SNGpOV7w" name="Debug__SRO"/>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_yUE3QMM7EeahHehXumVB-w" name="SwitcherStateMachine" isReentrant="false">
        <region xmi:id="_yUMMAMM7EeahHehXumVB-w" name="Region">
          <transition xmi:id="_yUTgwcM7EeahHehXumVB-w" name="Initial" source="_IRYAgPJZEeauO5SNGpOV7w" target="_yUSSoMM7EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRhKcPJZEeauO5SNGpOV7w" name="Initial__206">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_2LEW8MM7EeahHehXumVB-w" name="IDLE__IDLE__4" source="_IQnLgPJZEeauO5SNGpOV7w" target="_yUSSoMM7EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Ci9gsMM8EeahHehXumVB-w">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::IDLE__IDLE__4&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__4&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

this->choice = umlrtparam_c;</body>
            </effect>
          </transition>
          <transition xmi:id="_GIbLgMM8EeahHehXumVB-w" name="reception" source="_IQ3qMPJZEeauO5SNGpOV7w" target="_GOTbgMYlEeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fAyMMMM8EeahHehXumVB-w">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::reception&quot;,(char *)&quot;Debug__Path__reception&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;&quot;);

this->parcel = Parcel();
this->parcel.number = umlrtparam_p.number;
this->parcel.level = umlrtparam_p.level;
this->parcel.stage = umlrtparam_p.stage;
log.show(&quot;Switcher %s of stage %d becomes occupied\n&quot;, this->getName(), umlrtparam_p.stage);
timer.informIn(UMLRTTimespec(this->delay,0));</body>
            </effect>
          </transition>
          <transition xmi:id="_ueXm0MX1EeaYV5cb1Zesag" name="IDLE__IDLE__6" source="_IRANEPJZEeauO5SNGpOV7w" target="_yUSSoMM7EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_96BcgMX1EeaYV5cb1Zesag">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::IDLE__IDLE__6&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__6&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

//log.show(&quot;left successor of switcher becomes free\n&quot;);
this->leftSuccessorFree = free;</body>
            </effect>
          </transition>
          <transition xmi:id="_A2lUQMX2EeaYV5cb1Zesag" name="IDLE__IDLE__9" source="_IRhxgPJZEeauO5SNGpOV7w" target="_yUSSoMM7EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_GFMuMMX2EeaYV5cb1Zesag">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::IDLE__IDLE__9&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__9&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

//log.show(&quot;right successor of switcher becomes free\n&quot;);
this->rightSuccessorFree = free;</body>
            </effect>
          </transition>
          <transition xmi:id="_TZCXcMYlEeaYV5cb1Zesag" name="Jam ?__OCCUPIED__7" source="_IRJXAPJZEeauO5SNGpOV7w" target="_GOTbgMYlEeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_89scoMbxEeakjcfRNzjEZw">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Jam ?__OCCUPIED__7&quot;,(char *)&quot;Debug__Path__Jam ?__OCCUPIED__7&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;&quot;);

log.show(&quot;JAM detected in %s of stage %d\n&quot;, this->getName(), this->parcel.level-1);
timer.informIn(UMLRTTimespec(this->delay,0));</body>
            </effect>
          </transition>
          <transition xmi:id="_UO4aUMYlEeaYV5cb1Zesag" name="Jam ?__IDLE__5" source="_IQw8gPJZEeauO5SNGpOV7w" target="_yUSSoMM7EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_haaLAMYmEeaYV5cb1Zesag">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Jam ?__IDLE__5&quot;,(char *)&quot;Debug__Path__Jam ?__IDLE__5&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

this->parcel.level--;

log.show(&quot;Switcher %s of stage %d is now free\n&quot;, this->getName(), this->parcel.stage);

if (choice == 0) {
	this->parcel.stage = 1;
	left.transmit(this->parcel).send();
	this->leftSuccessorFree = false;
}
else {
	this->parcel.stage = 2;
	right.transmit(this->parcel).send();
	this->rightSuccessorFree = false;
}</body>
            </effect>
          </transition>
          <transition xmi:id="_BK59oMYmEeaYV5cb1Zesag" name="transmission" source="_IRQrwPJZEeauO5SNGpOV7w" target="_RQRUIMYlEeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRWyYfJZEeauO5SNGpOV7w" name="transmission__186">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::transmission&quot;,(char *)&quot;Debug__Path__transmission&quot;,(char *)&quot;Jam ?&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_AAZAYMYoEeaYV5cb1Zesag" name="OCCUPIED__OCCUPIED__11" source="_IR5k8PJZEeauO5SNGpOV7w" target="_GOTbgMYlEeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IFuv0MYoEeaYV5cb1Zesag">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::OCCUPIED__OCCUPIED__11&quot;,(char *)&quot;Debug__Path__OCCUPIED__OCCUPIED__11&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;&quot;);

//log.show(&quot;right successor of switcher becomes free\n&quot;);
this->rightSuccessorFree = free;</body>
            </effect>
          </transition>
          <transition xmi:id="_LJ32QMYoEeaYV5cb1Zesag" name="OCCUPIED__OCCUPIED__3" source="_IQeBkPJZEeauO5SNGpOV7w" target="_GOTbgMYlEeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_R25H4MYoEeaYV5cb1Zesag">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::OCCUPIED__OCCUPIED__3&quot;,(char *)&quot;Debug__Path__OCCUPIED__OCCUPIED__3&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;&quot;);

//log.show(&quot;left successor of switcher becomes free\n&quot;);
this->leftSuccessorFree = free;</body>
            </effect>
          </transition>
          <transition xmi:id="_i9e1YMYoEeaYV5cb1Zesag" name="OCCUPIED__OCCUPIED__10" source="_IRvz8PJZEeauO5SNGpOV7w" target="_GOTbgMYlEeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yidmMMYoEeaYV5cb1Zesag">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::OCCUPIED__OCCUPIED__10&quot;,(char *)&quot;Debug__Path__OCCUPIED__OCCUPIED__10&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;&quot;);

log.show(&quot;Impossible to activate the switch of %s: the switch gate is obstructed by a parcel\n&quot;, this->getName());</body>
            </effect>
          </transition>
          <transition xmi:id="_IQeoovJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__3" source="_GOTbgMYlEeaYV5cb1Zesag" target="_IQeBkPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQeoo_JZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__3__46">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__OCCUPIED__OCCUPIED__3&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;Debug__Path__OCCUPIED__OCCUPIED__3&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_PMRUsMYoEeaYV5cb1Zesag" event="_OTwdgMOlEeaV4cHHWddkKg" port="_3tk9cMM5EeahHehXumVB-w"/>
          </transition>
          <transition xmi:id="_IQfPsPJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__3__S" guard="_IQfPsvJZEeauO5SNGpOV7w" source="_IQeBkPJZEeauO5SNGpOV7w" target="_IQeooPJZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_IQfPsvJZEeauO5SNGpOV7w" name="Debug__GuardOCCUPIED__OCCUPIED__3">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_IQfPsfJZEeauO5SNGpOV7w" name="Debug__GuardOCCUPIED__OCCUPIED__3">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQfPs_JZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__3__S__48">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__OCCUPIED__OCCUPIED__3__S&quot;,(char *)&quot;Debug__Path__OCCUPIED__OCCUPIED__3&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IQf2wPJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__3__E" source="_IQeoofJZEeauO5SNGpOV7w" target="_GOTbgMYlEeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQf2wfJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__3__E__50">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__OCCUPIED__OCCUPIED__3__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IQgd0PJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__3__dbg" source="_IQeBkfJZEeauO5SNGpOV7w" target="_IQeBkfJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQgd0vJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__3__dbg__52">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__OCCUPIED__OCCUPIED__3__dbg&quot;,(char *)&quot;Debug__C__OCCUPIED__OCCUPIED__3&quot;,(char *)&quot;Debug__C__OCCUPIED__OCCUPIED__3&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_IQgd0fJZEeauO5SNGpOV7w" name="Debug__MSG" port="_IJi6MPJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_IQnylPJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__4" source="_yUSSoMM7EeahHehXumVB-w" target="_IQnLgPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQnylfJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__4__68">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__IDLE__IDLE__4&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__4&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_82qsQMM7EeahHehXumVB-w" event="_cjDs4MM5EeahHehXumVB-w" port="_gMZLEMM5EeahHehXumVB-w"/>
          </transition>
          <transition xmi:id="_IQoZoPJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__4__S" guard="_IQoZovJZEeauO5SNGpOV7w" source="_IQnLgPJZEeauO5SNGpOV7w" target="_IQnykvJZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_IQoZovJZEeauO5SNGpOV7w" name="Debug__GuardIDLE__IDLE__4">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_IQoZofJZEeauO5SNGpOV7w" name="Debug__GuardIDLE__IDLE__4">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQpAsPJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__4__S__70">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__IDLE__IDLE__4__S&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__4&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IQpAsfJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__4__E" source="_IQnyk_JZEeauO5SNGpOV7w" target="_yUSSoMM7EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQpAsvJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__4__E__72">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__IDLE__IDLE__4__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IQpnwPJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__4__dbg" source="_IQnykPJZEeauO5SNGpOV7w" target="_IQnykPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQpnwvJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__4__dbg__74">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__IDLE__IDLE__4__dbg&quot;,(char *)&quot;Debug__C__IDLE__IDLE__4&quot;,(char *)&quot;Debug__C__IDLE__IDLE__4&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_IQpnwfJZEeauO5SNGpOV7w" name="Debug__MSG" port="_IJi6MPJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_IQw8hfJZEeauO5SNGpOV7w" name="Debug__Jam ?__IDLE__5" guard="_Qkpu0MYmEeaYV5cb1Zesag" source="_RQRUIMYlEeaYV5cb1Zesag" target="_IQw8gPJZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_Qkpu0MYmEeaYV5cb1Zesag">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_Qkpu0cYmEeaYV5cb1Zesag">
                <language>C++</language>
                <body>bool isFree = (choice == 0) ? this->leftSuccessorFree : this->rightSuccessorFree;
return isFree;</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQw8hvJZEeauO5SNGpOV7w" name="Debug__Jam ?__IDLE__5__89">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__Jam ?__IDLE__5&quot;,(char *)&quot;Jam ?&quot;,(char *)&quot;Debug__Path__Jam ?__IDLE__5&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IQxjkPJZEeauO5SNGpOV7w" name="Debug__Jam ?__IDLE__5__S" guard="_IQxjkvJZEeauO5SNGpOV7w" source="_IQw8gPJZEeauO5SNGpOV7w" target="_IQw8g_JZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_IQxjkvJZEeauO5SNGpOV7w" name="Debug__GuardJam ?__IDLE__5">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_IQxjkfJZEeauO5SNGpOV7w" name="Debug__GuardJam ?__IDLE__5">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Jam ?&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQxjk_JZEeauO5SNGpOV7w" name="Debug__Jam ?__IDLE__5__S__91">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__Jam ?__IDLE__5__S&quot;,(char *)&quot;Debug__Path__Jam ?__IDLE__5&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IQyKoPJZEeauO5SNGpOV7w" name="Debug__Jam ?__IDLE__5__E" source="_IQw8hPJZEeauO5SNGpOV7w" target="_yUSSoMM7EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQyKofJZEeauO5SNGpOV7w" name="Debug__Jam ?__IDLE__5__E__93">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__Jam ?__IDLE__5__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IQyKovJZEeauO5SNGpOV7w" name="Debug__Jam ?__IDLE__5__dbg" source="_IQw8gfJZEeauO5SNGpOV7w" target="_IQw8gfJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQyxsPJZEeauO5SNGpOV7w" name="Debug__Jam ?__IDLE__5__dbg__95">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__Jam ?__IDLE__5__dbg&quot;,(char *)&quot;Debug__C__Jam ?__IDLE__5&quot;,(char *)&quot;Debug__C__Jam ?__IDLE__5&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_IQyKo_JZEeauO5SNGpOV7w" name="Debug__MSG" port="_IJi6MPJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_IQ4RRPJZEeauO5SNGpOV7w" name="Debug__reception" source="_yUSSoMM7EeahHehXumVB-w" target="_IQ3qMPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQ4RRfJZEeauO5SNGpOV7w" name="Debug__reception__107">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__reception&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;Debug__Path__reception&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_J-RbsMM8EeahHehXumVB-w" event="_SR6HoMMBEeaSH8bbL43htA" port="_VxKF0MM6EeahHehXumVB-w"/>
          </transition>
          <transition xmi:id="_IQ44UPJZEeauO5SNGpOV7w" name="Debug__reception__S" guard="_IQ44UvJZEeauO5SNGpOV7w" source="_IQ3qMPJZEeauO5SNGpOV7w" target="_IQ4RQvJZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_IQ44UvJZEeauO5SNGpOV7w" name="Debug__Guardreception">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_IQ44UfJZEeauO5SNGpOV7w" name="Debug__Guardreception">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQ44U_JZEeauO5SNGpOV7w" name="Debug__reception__S__109">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__reception__S&quot;,(char *)&quot;Debug__Path__reception&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IQ44VPJZEeauO5SNGpOV7w" name="Debug__reception__E" source="_IQ4RQ_JZEeauO5SNGpOV7w" target="_GOTbgMYlEeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQ5fYPJZEeauO5SNGpOV7w" name="Debug__reception__E__111">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__reception__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IQ5fYfJZEeauO5SNGpOV7w" name="Debug__reception__dbg" source="_IQ4RQPJZEeauO5SNGpOV7w" target="_IQ4RQPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQ5fY_JZEeauO5SNGpOV7w" name="Debug__reception__dbg__113">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__reception__dbg&quot;,(char *)&quot;Debug__C__reception&quot;,(char *)&quot;Debug__C__reception&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_IQ5fYvJZEeauO5SNGpOV7w" name="Debug__MSG" port="_IJi6MPJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_IRA0IPJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__6" source="_yUSSoMM7EeahHehXumVB-w" target="_IRANEPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRA0IfJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__6__129">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__IDLE__IDLE__6&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__6&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_4FUS8MX1EeaYV5cb1Zesag" event="_OTwdgMOlEeaV4cHHWddkKg" port="_3tk9cMM5EeahHehXumVB-w"/>
          </transition>
          <transition xmi:id="_IRBbMPJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__6__S" guard="_IRBbMvJZEeauO5SNGpOV7w" source="_IRANEPJZEeauO5SNGpOV7w" target="_IRANE_JZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_IRBbMvJZEeauO5SNGpOV7w" name="Debug__GuardIDLE__IDLE__6">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_IRBbMfJZEeauO5SNGpOV7w" name="Debug__GuardIDLE__IDLE__6">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRBbM_JZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__6__S__131">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__IDLE__IDLE__6__S&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__6&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IRCCQPJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__6__E" source="_IRANFPJZEeauO5SNGpOV7w" target="_yUSSoMM7EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRCCQfJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__6__E__133">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__IDLE__IDLE__6__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IRCpUPJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__6__dbg" source="_IRANEfJZEeauO5SNGpOV7w" target="_IRANEfJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRCpUvJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__6__dbg__135">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__IDLE__IDLE__6__dbg&quot;,(char *)&quot;Debug__C__IDLE__IDLE__6&quot;,(char *)&quot;Debug__C__IDLE__IDLE__6&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_IRCpUfJZEeauO5SNGpOV7w" name="Debug__MSG" port="_IJi6MPJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_IRJ-EfJZEeauO5SNGpOV7w" name="Debug__Jam ?__OCCUPIED__7" guard="_NQku8MYmEeaYV5cb1Zesag" source="_RQRUIMYlEeaYV5cb1Zesag" target="_IRJXAPJZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_NQku8MYmEeaYV5cb1Zesag">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_NQku8cYmEeaYV5cb1Zesag">
                <language>C++</language>
                <body>bool isFree = (choice == 0) ? this->leftSuccessorFree : this->rightSuccessorFree;
return !isFree;</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRJ-EvJZEeauO5SNGpOV7w" name="Debug__Jam ?__OCCUPIED__7__150">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__Jam ?__OCCUPIED__7&quot;,(char *)&quot;Jam ?&quot;,(char *)&quot;Debug__Path__Jam ?__OCCUPIED__7&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IRJ-E_JZEeauO5SNGpOV7w" name="Debug__Jam ?__OCCUPIED__7__S" guard="_IRKlIfJZEeauO5SNGpOV7w" source="_IRJXAPJZEeauO5SNGpOV7w" target="_IRJXA_JZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_IRKlIfJZEeauO5SNGpOV7w" name="Debug__GuardJam ?__OCCUPIED__7">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_IRKlIPJZEeauO5SNGpOV7w" name="Debug__GuardJam ?__OCCUPIED__7">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Jam ?&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRKlIvJZEeauO5SNGpOV7w" name="Debug__Jam ?__OCCUPIED__7__S__152">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__Jam ?__OCCUPIED__7__S&quot;,(char *)&quot;Debug__Path__Jam ?__OCCUPIED__7&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IRLMMPJZEeauO5SNGpOV7w" name="Debug__Jam ?__OCCUPIED__7__E" source="_IRJ-EPJZEeauO5SNGpOV7w" target="_GOTbgMYlEeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRLMMfJZEeauO5SNGpOV7w" name="Debug__Jam ?__OCCUPIED__7__E__154">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__Jam ?__OCCUPIED__7__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IRLMMvJZEeauO5SNGpOV7w" name="Debug__Jam ?__OCCUPIED__7__dbg" source="_IRJXAfJZEeauO5SNGpOV7w" target="_IRJXAfJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRLzQPJZEeauO5SNGpOV7w" name="Debug__Jam ?__OCCUPIED__7__dbg__156">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__Jam ?__OCCUPIED__7__dbg&quot;,(char *)&quot;Debug__C__Jam ?__OCCUPIED__7&quot;,(char *)&quot;Debug__C__Jam ?__OCCUPIED__7&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_IRLMM_JZEeauO5SNGpOV7w" name="Debug__MSG" port="_IJi6MPJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_IRQrxfJZEeauO5SNGpOV7w" name="Debug__transmission" source="_GOTbgMYlEeaYV5cb1Zesag" target="_IRQrwPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRQrxvJZEeauO5SNGpOV7w" name="Debug__transmission__169">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__transmission&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;Debug__Path__transmission&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_E7SfAMYmEeaYV5cb1Zesag" port="_4c8vAMYlEeaYV5cb1Zesag">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_IRRS0PJZEeauO5SNGpOV7w" name="Debug__transmission__S" guard="_IRRS0vJZEeauO5SNGpOV7w" source="_IRQrwPJZEeauO5SNGpOV7w" target="_IRQrw_JZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_IRRS0vJZEeauO5SNGpOV7w" name="Debug__Guardtransmission">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_IRRS0fJZEeauO5SNGpOV7w" name="Debug__Guardtransmission">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRRS0_JZEeauO5SNGpOV7w" name="Debug__transmission__S__171">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__transmission__S&quot;,(char *)&quot;Debug__Path__transmission&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IRR54PJZEeauO5SNGpOV7w" name="Debug__transmission__E" source="_IRQrxPJZEeauO5SNGpOV7w" target="_RQRUIMYlEeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRR54fJZEeauO5SNGpOV7w" name="Debug__transmission__E__173">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__transmission__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Jam ?&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IRR54vJZEeauO5SNGpOV7w" name="Debug__transmission__dbg" source="_IRQrwfJZEeauO5SNGpOV7w" target="_IRQrwfJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRSg8fJZEeauO5SNGpOV7w" name="Debug__transmission__dbg__175">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__transmission__dbg&quot;,(char *)&quot;Debug__C__transmission&quot;,(char *)&quot;Debug__C__transmission&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_IRSg8PJZEeauO5SNGpOV7w" name="Debug__MSG" port="_IJi6MPJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_IRYAhfJZEeauO5SNGpOV7w" name="Debug__Initial" source="_ISD9APJZEeauO5SNGpOV7w" target="_IRYAgPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRYAhvJZEeauO5SNGpOV7w" name="Debug__Initial__188">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;transmit&quot;,&quot;transmission&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;setSwitch&quot;,&quot;switchProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;Jam ?&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;reception&quot;,&quot;OCCUPIED&quot;,&quot;transmit&quot;,&quot;transmission&quot;);
Debug__SRO.addTransitionsFromState(&quot;IDLE&quot;,&quot;&quot;,&quot;IDLE&quot;,&quot;setFree&quot;,&quot;transmission&quot;);
Debug__SRO.addTransitionsFromState(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;OCCUPIED&quot;,&quot;setFree&quot;,&quot;transmission&quot;);
Debug__SRO.addTransitionsFromState(&quot;Jam ?&quot;,&quot;&quot;,&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;OCCUPIED&quot;,&quot;transmission&quot;,&quot;Jam ?&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;OCCUPIED&quot;,&quot;setSwitch&quot;,&quot;switchProtocol&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),(char *) &quot;&quot;,(char *) &quot;&quot;,(char *) &quot;&quot;,(char *)&quot;&quot;,(char *) &quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_ISEkEPJZEeauO5SNGpOV7w" name="ConnectionEstablished" port="_IJi6MPJZEeauO5SNGpOV7w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_IRYnkPJZEeauO5SNGpOV7w" name="Debug__Initial__S" guard="_IRYnkvJZEeauO5SNGpOV7w" source="_IRYAgPJZEeauO5SNGpOV7w" target="_IRYAg_JZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_IRYnkvJZEeauO5SNGpOV7w" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_IRYnkfJZEeauO5SNGpOV7w" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo8&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRZOoPJZEeauO5SNGpOV7w" name="Debug__Initial__S__190">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IRZ1sPJZEeauO5SNGpOV7w" name="Debug__Initial__E" source="_IRYAhPJZEeauO5SNGpOV7w" target="_yUSSoMM7EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRZ1sfJZEeauO5SNGpOV7w" name="Debug__Initial__E__192">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IRacwPJZEeauO5SNGpOV7w" name="Debug__Initial__dbg" source="_IRYAgfJZEeauO5SNGpOV7w" target="_IRYAgfJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRacwvJZEeauO5SNGpOV7w" name="Debug__Initial__dbg__194">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__Initial__dbg&quot;,(char *)&quot;Debug__C__Initial&quot;,(char *)&quot;Debug__C__Initial&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_IRacwfJZEeauO5SNGpOV7w" name="Debug__MSG" port="_IJi6MPJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_IRiYlPJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__9" source="_yUSSoMM7EeahHehXumVB-w" target="_IRhxgPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRiYlfJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__9__208">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__IDLE__IDLE__9&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__9&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_IyVp4MX2EeaYV5cb1Zesag" event="_OTwdgMOlEeaV4cHHWddkKg" port="_0cp_QMM5EeahHehXumVB-w"/>
          </transition>
          <transition xmi:id="_IRi_oPJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__9__S" guard="_IRi_ovJZEeauO5SNGpOV7w" source="_IRhxgPJZEeauO5SNGpOV7w" target="_IRiYkvJZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_IRi_ovJZEeauO5SNGpOV7w" name="Debug__GuardIDLE__IDLE__9">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_IRi_ofJZEeauO5SNGpOV7w" name="Debug__GuardIDLE__IDLE__9">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRi_o_JZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__9__S__210">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__IDLE__IDLE__9__S&quot;,(char *)&quot;Debug__Path__IDLE__IDLE__9&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IRjmsPJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__9__E" source="_IRiYk_JZEeauO5SNGpOV7w" target="_yUSSoMM7EeahHehXumVB-w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRjmsfJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__9__E__212">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__IDLE__IDLE__9__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;IDLE&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IRkNwPJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__9__dbg" source="_IRiYkPJZEeauO5SNGpOV7w" target="_IRiYkPJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRkNwvJZEeauO5SNGpOV7w" name="Debug__IDLE__IDLE__9__dbg__214">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__IDLE__IDLE__9__dbg&quot;,(char *)&quot;Debug__C__IDLE__IDLE__9&quot;,(char *)&quot;Debug__C__IDLE__IDLE__9&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_IRkNwfJZEeauO5SNGpOV7w" name="Debug__MSG" port="_IJi6MPJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_IRwbAfJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__10" source="_GOTbgMYlEeaYV5cb1Zesag" target="_IRvz8PJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRwbAvJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__10__229">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__OCCUPIED__OCCUPIED__10&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;Debug__Path__OCCUPIED__OCCUPIED__10&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_oHSAwMYoEeaYV5cb1Zesag" event="_cjDs4MM5EeahHehXumVB-w" port="_gMZLEMM5EeahHehXumVB-w"/>
          </transition>
          <transition xmi:id="_IRxCEPJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__10__S" guard="_IRxCEvJZEeauO5SNGpOV7w" source="_IRvz8PJZEeauO5SNGpOV7w" target="_IRvz8_JZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_IRxCEvJZEeauO5SNGpOV7w" name="Debug__GuardOCCUPIED__OCCUPIED__10">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_IRxCEfJZEeauO5SNGpOV7w" name="Debug__GuardOCCUPIED__OCCUPIED__10">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRxCE_JZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__10__S__231">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__OCCUPIED__OCCUPIED__10__S&quot;,(char *)&quot;Debug__Path__OCCUPIED__OCCUPIED__10&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IRxpIPJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__10__E" source="_IRwbAPJZEeauO5SNGpOV7w" target="_GOTbgMYlEeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRxpIfJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__10__E__233">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__OCCUPIED__OCCUPIED__10__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IRyQMPJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__10__dbg" source="_IRvz8fJZEeauO5SNGpOV7w" target="_IRvz8fJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRyQMvJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__10__dbg__235">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__OCCUPIED__OCCUPIED__10__dbg&quot;,(char *)&quot;Debug__C__OCCUPIED__OCCUPIED__10&quot;,(char *)&quot;Debug__C__OCCUPIED__OCCUPIED__10&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_IRyQMfJZEeauO5SNGpOV7w" name="Debug__MSG" port="_IJi6MPJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_IR5k9fJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__11" source="_GOTbgMYlEeaYV5cb1Zesag" target="_IR5k8PJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IR6MAPJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__11__251">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__OCCUPIED__OCCUPIED__11&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;Debug__Path__OCCUPIED__OCCUPIED__11&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_D_7YEMYoEeaYV5cb1Zesag" event="_OTwdgMOlEeaV4cHHWddkKg" port="_0cp_QMM5EeahHehXumVB-w"/>
          </transition>
          <transition xmi:id="_IR6MAfJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__11__S" guard="_IR6zEfJZEeauO5SNGpOV7w" source="_IR5k8PJZEeauO5SNGpOV7w" target="_IR5k8_JZEeauO5SNGpOV7w">
            <ownedRule xmi:id="_IR6zEfJZEeauO5SNGpOV7w" name="Debug__GuardOCCUPIED__OCCUPIED__11">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_IR6zEPJZEeauO5SNGpOV7w" name="Debug__GuardOCCUPIED__OCCUPIED__11">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IR6zEvJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__11__S__253">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__OCCUPIED__OCCUPIED__11__S&quot;,(char *)&quot;Debug__Path__OCCUPIED__OCCUPIED__11&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IR6zE_JZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__11__E" source="_IR5k9PJZEeauO5SNGpOV7w" target="_GOTbgMYlEeaYV5cb1Zesag">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IR7aIPJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__11__E__255">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__OCCUPIED__OCCUPIED__11__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
            </effect>
          </transition>
          <transition xmi:id="_IR7aIfJZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__11__dbg" source="_IR5k8fJZEeauO5SNGpOV7w" target="_IR5k8fJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IR7aI_JZEeauO5SNGpOV7w" name="Debug__OCCUPIED__OCCUPIED__11__dbg__257">
              <language>C++</language>
              <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__OCCUPIED__OCCUPIED__11__dbg&quot;,(char *)&quot;Debug__C__OCCUPIED__OCCUPIED__11&quot;,(char *)&quot;Debug__C__OCCUPIED__OCCUPIED__11&quot;,(char *)&quot;&quot;);

</body>
            </effect>
            <trigger xmi:id="_IR7aIvJZEeauO5SNGpOV7w" name="Debug__MSG" port="_IJi6MPJZEeauO5SNGpOV7w">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_ISD9AfJZEeauO5SNGpOV7w" name="Debug__InitDebug" source="_yUOoQMM7EeahHehXumVB-w" target="_ISD9APJZEeauO5SNGpOV7w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISD9AvJZEeauO5SNGpOV7w" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
std::string tempS;
std::cout&lt;&lt;&quot;Enter 1 for running in debug mode, any other key for normal model\n&quot;;
std::cin>> tempS;
if (tempS==&quot;1&quot;)
    this->Debug__SRO.setExecMode(Stepping);
else
    this->Debug__SRO.setExecMode(Running);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_yUOoQMM7EeahHehXumVB-w" name="Pseudo8"/>
          <subvertex xmi:type="uml:State" xmi:id="_yUSSoMM7EeahHehXumVB-w" name="IDLE">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_gwFREMYlEeaYV5cb1Zesag" name="setFree">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

enter.setFree(true).send();}</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ISIOcPJZEeauO5SNGpOV7w" name="IDLE__274">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;IDLE&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

}</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_GOTbgMYlEeaYV5cb1Zesag" name="OCCUPIED">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ISHAUPJZEeauO5SNGpOV7w" name="OCCUPIED__272">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

}</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ISHAUfJZEeauO5SNGpOV7w" name="OCCUPIED__273">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

}</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_RQRUIMYlEeaYV5cb1Zesag" name="Jam ?" kind="choice"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_IQeBkPJZEeauO5SNGpOV7w" name="Debug__Path__OCCUPIED__OCCUPIED__3" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_IQeBkfJZEeauO5SNGpOV7w" name="Debug__C__OCCUPIED__OCCUPIED__3">
            <connectionPoint xmi:id="_IQeooPJZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_IQeoofJZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_IQeBkvJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_IQhr8vJZEeauO5SNGpOV7w" name="Debug__init__trans__OCCUPIED__OCCUPIED__3" source="_IQeooPJZEeauO5SNGpOV7w" target="_IQgd0_JZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQkvQPJZEeauO5SNGpOV7w" name="Debug__init__trans__OCCUPIED__OCCUPIED__3__58">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__3::Region1::Debug__init__trans__OCCUPIED__OCCUPIED__3&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_IQiTAPJZEeauO5SNGpOV7w" name="Debug__Ex__OCCUPIED" source="_IQgd0_JZEeauO5SNGpOV7w" target="_IQhE4PJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQkvQfJZEeauO5SNGpOV7w" name="Debug__Ex__OCCUPIED__60">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__3::Region1::Debug__Ex__OCCUPIED&quot;,(char *)&quot;Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;Debug__B__Ac__OCCUPIED__OCCUPIED__3&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IQiTAfJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IQiTAvJZEeauO5SNGpOV7w" name="Debug__AC__OCCUPIED__OCCUPIED__3" source="_IQhE4PJZEeauO5SNGpOV7w" target="_IQhE4vJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQiTBPJZEeauO5SNGpOV7w" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__3::Region1::Debug__AC__OCCUPIED__OCCUPIED__3&quot;,(char *)&quot;Debug__B__Ac__OCCUPIED__OCCUPIED__3&quot;,(char *)&quot;Debug__A__Ac__OCCUPIED__OCCUPIED__3&quot;,(char *)&quot;&quot;);

//log.show(&quot;left successor of switcher becomes free\n&quot;);
this->leftSuccessorFree = free;</body>
                </effect>
                <trigger xmi:id="_IQiTA_JZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IQiTBfJZEeauO5SNGpOV7w" name="Debug__En__OCCUPIED" source="_IQhE4vJZEeauO5SNGpOV7w" target="_IQhr8PJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQlWUPJZEeauO5SNGpOV7w" name="Debug__En__OCCUPIED__63">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__3::Region1::Debug__En__OCCUPIED&quot;,(char *)&quot;Debug__A__Ac__OCCUPIED__OCCUPIED__3&quot;,(char *)&quot;Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IQiTBvJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IQiTB_JZEeauO5SNGpOV7w" name="Debug__end__trans__OCCUPIED__OCCUPIED__3" source="_IQhr8PJZEeauO5SNGpOV7w" target="_IQeoofJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQl9YPJZEeauO5SNGpOV7w" name="Debug__end__trans__OCCUPIED__OCCUPIED__3__65">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__3::Region1::Debug__end__trans__OCCUPIED__OCCUPIED__3&quot;,(char *)&quot;Debug__A__En__OCCUPIED&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IQiTCPJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_IQgd0_JZEeauO5SNGpOV7w" name="Debug__B__Ex__OCCUPIED">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IQgd1PJZEeauO5SNGpOV7w" name="Debug__B__Ex__OCCUPIED">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__3::Region1::Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IQiTCfJZEeauO5SNGpOV7w" name="Debug__B__Ex__OCCUPIED__53">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__3::Region1::Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IQhE4PJZEeauO5SNGpOV7w" name="Debug__B__Ac__OCCUPIED__OCCUPIED__3">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IQhE4fJZEeauO5SNGpOV7w" name="Debug__B__Ac__OCCUPIED__OCCUPIED__3">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__3::Region1::Debug__B__Ac__OCCUPIED__OCCUPIED__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;OCCUPIED__OCCUPIED__3&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IQi6EPJZEeauO5SNGpOV7w" name="Debug__B__Ac__OCCUPIED__OCCUPIED__3__54">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__3::Region1::Debug__B__Ac__OCCUPIED__OCCUPIED__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IQhE4vJZEeauO5SNGpOV7w" name="Debug__A__Ac__OCCUPIED__OCCUPIED__3">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IQhE4_JZEeauO5SNGpOV7w" name="Debug__A__Ac__OCCUPIED__OCCUPIED__3">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__3::Region1::Debug__A__Ac__OCCUPIED__OCCUPIED__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED__OCCUPIED__3&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IQjhIPJZEeauO5SNGpOV7w" name="Debug__A__Ac__OCCUPIED__OCCUPIED__3__55">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__3::Region1::Debug__A__Ac__OCCUPIED__OCCUPIED__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IQhr8PJZEeauO5SNGpOV7w" name="Debug__A__En__OCCUPIED">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IQhr8fJZEeauO5SNGpOV7w" name="Debug__A__En__OCCUPIED">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__3::Region1::Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IQkIMPJZEeauO5SNGpOV7w" name="Debug__A__En__OCCUPIED__56">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__3::Region1::Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_IQnLgPJZEeauO5SNGpOV7w" name="Debug__Path__IDLE__IDLE__4" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_IQnykPJZEeauO5SNGpOV7w" name="Debug__C__IDLE__IDLE__4">
            <connectionPoint xmi:id="_IQnykvJZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_IQnyk_JZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_IQnykfJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_IQrc8PJZEeauO5SNGpOV7w" name="Debug__init__trans__IDLE__IDLE__4" source="_IQnykvJZEeauO5SNGpOV7w" target="_IQqO0PJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQugQPJZEeauO5SNGpOV7w" name="Debug__init__trans__IDLE__IDLE__4__80">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__4::Region1::Debug__init__trans__IDLE__IDLE__4&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_IQrc8fJZEeauO5SNGpOV7w" name="Debug__Ex__IDLE" source="_IQqO0PJZEeauO5SNGpOV7w" target="_IQqO0vJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQugQfJZEeauO5SNGpOV7w" name="Debug__Ex__IDLE__82">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__4::Region1::Debug__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ac__IDLE__IDLE__4&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IQrc8vJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IQrc8_JZEeauO5SNGpOV7w" name="Debug__AC__IDLE__IDLE__4" source="_IQqO0vJZEeauO5SNGpOV7w" target="_IQq14PJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQrc9fJZEeauO5SNGpOV7w" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__4::Region1::Debug__AC__IDLE__IDLE__4&quot;,(char *)&quot;Debug__B__Ac__IDLE__IDLE__4&quot;,(char *)&quot;Debug__A__Ac__IDLE__IDLE__4&quot;,(char *)&quot;&quot;);

this->choice = umlrtparam_c;</body>
                </effect>
                <trigger xmi:id="_IQrc9PJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IQrc9vJZEeauO5SNGpOV7w" name="Debug__En__IDLE" source="_IQq14PJZEeauO5SNGpOV7w" target="_IQq14vJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQsEAPJZEeauO5SNGpOV7w" name="setFree" visibility="public" isReentrant="true">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__4::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__IDLE__IDLE__4&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;&quot;);

enter.setFree(true).send();</body>
                </effect>
                <trigger xmi:id="_IQrc9_JZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IQsEAfJZEeauO5SNGpOV7w" name="Debug__end__trans__IDLE__IDLE__4" source="_IQq14vJZEeauO5SNGpOV7w" target="_IQnyk_JZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQvuYPJZEeauO5SNGpOV7w" name="Debug__end__trans__IDLE__IDLE__4__86">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__4::Region1::Debug__end__trans__IDLE__IDLE__4&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IQsEAvJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_IQqO0PJZEeauO5SNGpOV7w" name="Debug__B__Ex__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IQqO0fJZEeauO5SNGpOV7w" name="Debug__B__Ex__IDLE">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__4::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IQsEA_JZEeauO5SNGpOV7w" name="Debug__B__Ex__IDLE__75">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__4::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IQqO0vJZEeauO5SNGpOV7w" name="Debug__B__Ac__IDLE__IDLE__4">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IQqO0_JZEeauO5SNGpOV7w" name="Debug__B__Ac__IDLE__IDLE__4">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__4::Region1::Debug__B__Ac__IDLE__IDLE__4&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE__IDLE__4&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IQsrEPJZEeauO5SNGpOV7w" name="Debug__B__Ac__IDLE__IDLE__4__76">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__4::Region1::Debug__B__Ac__IDLE__IDLE__4&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IQq14PJZEeauO5SNGpOV7w" name="Debug__A__Ac__IDLE__IDLE__4">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IQq14fJZEeauO5SNGpOV7w" name="Debug__A__Ac__IDLE__IDLE__4">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__4::Region1::Debug__A__Ac__IDLE__IDLE__4&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE__IDLE__4&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IQtSIPJZEeauO5SNGpOV7w" name="Debug__A__Ac__IDLE__IDLE__4__77">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__4::Region1::Debug__A__Ac__IDLE__IDLE__4&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IQq14vJZEeauO5SNGpOV7w" name="Debug__A__En__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IQq14_JZEeauO5SNGpOV7w" name="Debug__A__En__IDLE">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__4::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IQtSIfJZEeauO5SNGpOV7w" name="Debug__A__En__IDLE__78">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__4::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_IQw8gPJZEeauO5SNGpOV7w" name="Debug__Path__Jam ?__IDLE__5" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_IQw8gfJZEeauO5SNGpOV7w" name="Debug__C__Jam ?__IDLE__5">
            <connectionPoint xmi:id="_IQw8g_JZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_IQw8hPJZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_IQw8gvJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_IQzYwvJZEeauO5SNGpOV7w" name="Debug__init__trans__Jam ?__IDLE__5" source="_IQw8g_JZEeauO5SNGpOV7w" target="_IQyxsfJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQ1N8fJZEeauO5SNGpOV7w" name="Debug__init__trans__Jam ?__IDLE__5__100">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Jam ?__IDLE__5::Region1::Debug__init__trans__Jam ?__IDLE__5&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Jam ?__IDLE__5&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_IQzYw_JZEeauO5SNGpOV7w" name="Debug__Ac__Jam ?__IDLE__5" source="_IQyxsfJZEeauO5SNGpOV7w" target="_IQyxs_JZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQzYxfJZEeauO5SNGpOV7w" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Jam ?__IDLE__5::Region1::Debug__Ac__Jam ?__IDLE__5&quot;,(char *)&quot;Debug__B__Ac__Jam ?__IDLE__5&quot;,(char *)&quot;Debug__A__Ac__Jam ?__IDLE__5&quot;,(char *)&quot;&quot;);

this->parcel.level--;

log.show(&quot;Switcher %s of stage %d is now free\n&quot;, this->getName(), this->parcel.stage);

if (choice == 0) {
	this->parcel.stage = 1;
	left.transmit(this->parcel).send();
	this->leftSuccessorFree = false;
}
else {
	this->parcel.stage = 2;
	right.transmit(this->parcel).send();
	this->rightSuccessorFree = false;
}</body>
                </effect>
                <trigger xmi:id="_IQzYxPJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IQz_0PJZEeauO5SNGpOV7w" name="Debug__En__IDLE" source="_IQyxs_JZEeauO5SNGpOV7w" target="_IQzYwPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQz_0vJZEeauO5SNGpOV7w" name="setFree" visibility="public" isReentrant="true">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Jam ?__IDLE__5::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__Jam ?__IDLE__5&quot;,(char *)&quot;Debug__A__En__Jam ?__IDLE__5&quot;,(char *)&quot;&quot;);

enter.setFree(true).send();</body>
                </effect>
                <trigger xmi:id="_IQz_0fJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IQz_0_JZEeauO5SNGpOV7w" name="Debug__end__trans__Jam ?__IDLE__5" source="_IQzYwPJZEeauO5SNGpOV7w" target="_IQw8hPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQ2cEPJZEeauO5SNGpOV7w" name="Debug__end__trans__Jam ?__IDLE__5__104">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Jam ?__IDLE__5::Region1::Debug__end__trans__Jam ?__IDLE__5&quot;,(char *)&quot;Debug__A__En__Jam ?__IDLE__5&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IQz_1PJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_IQyxsfJZEeauO5SNGpOV7w" name="Debug__B__Ac__Jam ?__IDLE__5">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IQyxsvJZEeauO5SNGpOV7w" name="Debug__B__Ac__Jam ?__IDLE__5">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Jam ?__IDLE__5::Region1::Debug__B__Ac__Jam ?__IDLE__5&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;Jam ?__IDLE__5&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IQz_1fJZEeauO5SNGpOV7w" name="Debug__B__Ac__Jam ?__IDLE__5__96">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Jam ?__IDLE__5::Region1::Debug__B__Ac__Jam ?__IDLE__5&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IQyxs_JZEeauO5SNGpOV7w" name="Debug__A__Ac__Jam ?__IDLE__5">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IQyxtPJZEeauO5SNGpOV7w" name="Debug__A__Ac__Jam ?__IDLE__5">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Jam ?__IDLE__5::Region1::Debug__A__Ac__Jam ?__IDLE__5&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;Jam ?__IDLE__5&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IQ0m4PJZEeauO5SNGpOV7w" name="Debug__A__Ac__Jam ?__IDLE__5__97">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Jam ?__IDLE__5::Region1::Debug__A__Ac__Jam ?__IDLE__5&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IQzYwPJZEeauO5SNGpOV7w" name="Debug__A__En__Jam ?__IDLE__5">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IQzYwfJZEeauO5SNGpOV7w" name="Debug__A__En__Jam ?__IDLE__5">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Jam ?__IDLE__5::Region1::Debug__A__En__Jam ?__IDLE__5&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IQ1N8PJZEeauO5SNGpOV7w" name="Debug__A__En__Jam ?__IDLE__5__98">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Jam ?__IDLE__5::Region1::Debug__A__En__Jam ?__IDLE__5&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_IQ3qMPJZEeauO5SNGpOV7w" name="Debug__Path__reception" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_IQ4RQPJZEeauO5SNGpOV7w" name="Debug__C__reception">
            <connectionPoint xmi:id="_IQ4RQvJZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_IQ4RQ_JZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_IQ4RQfJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_IQ7UkPJZEeauO5SNGpOV7w" name="Debug__init__trans__reception" source="_IQ4RQvJZEeauO5SNGpOV7w" target="_IQ6GcPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQ9w0PJZEeauO5SNGpOV7w" name="Debug__init__trans__reception__119">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__init__trans__reception&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_IQ7UkfJZEeauO5SNGpOV7w" name="Debug__Ex__IDLE" source="_IQ6GcPJZEeauO5SNGpOV7w" target="_IQ6GcvJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQ9w0fJZEeauO5SNGpOV7w" name="Debug__Ex__IDLE__121">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ac__reception&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IQ7UkvJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IQ7Uk_JZEeauO5SNGpOV7w" name="Debug__AC__reception" source="_IQ6GcvJZEeauO5SNGpOV7w" target="_IQ6tgPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQ7UlfJZEeauO5SNGpOV7w" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__AC__reception&quot;,(char *)&quot;Debug__B__Ac__reception&quot;,(char *)&quot;Debug__A__Ac__reception&quot;,(char *)&quot;&quot;);

this->parcel = Parcel();
this->parcel.number = umlrtparam_p.number;
this->parcel.level = umlrtparam_p.level;
this->parcel.stage = umlrtparam_p.stage;
log.show(&quot;Switcher %s of stage %d becomes occupied\n&quot;, this->getName(), umlrtparam_p.stage);
timer.informIn(UMLRTTimespec(this->delay,0));</body>
                </effect>
                <trigger xmi:id="_IQ7UlPJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IQ7UlvJZEeauO5SNGpOV7w" name="Debug__En__OCCUPIED" source="_IQ6tgPJZEeauO5SNGpOV7w" target="_IQ6tgvJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQ--8PJZEeauO5SNGpOV7w" name="Debug__En__OCCUPIED__124">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__En__OCCUPIED&quot;,(char *)&quot;Debug__A__Ac__reception&quot;,(char *)&quot;Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IQ7Ul_JZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IQ7UmPJZEeauO5SNGpOV7w" name="Debug__end__trans__reception" source="_IQ6tgvJZEeauO5SNGpOV7w" target="_IQ4RQ_JZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IQ--8fJZEeauO5SNGpOV7w" name="Debug__end__trans__reception__126">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__end__trans__reception&quot;,(char *)&quot;Debug__A__En__OCCUPIED&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IQ7UmfJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_IQ6GcPJZEeauO5SNGpOV7w" name="Debug__B__Ex__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IQ6GcfJZEeauO5SNGpOV7w" name="Debug__B__Ex__IDLE">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IQ77oPJZEeauO5SNGpOV7w" name="Debug__B__Ex__IDLE__114">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IQ6GcvJZEeauO5SNGpOV7w" name="Debug__B__Ac__reception">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IQ6Gc_JZEeauO5SNGpOV7w" name="Debug__B__Ac__reception">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__B__Ac__reception&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;reception&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IQ77ofJZEeauO5SNGpOV7w" name="Debug__B__Ac__reception__115">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__B__Ac__reception&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IQ6tgPJZEeauO5SNGpOV7w" name="Debug__A__Ac__reception">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IQ6tgfJZEeauO5SNGpOV7w" name="Debug__A__Ac__reception">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__A__Ac__reception&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;reception&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IQ8isPJZEeauO5SNGpOV7w" name="Debug__A__Ac__reception__116">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__A__Ac__reception&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IQ6tgvJZEeauO5SNGpOV7w" name="Debug__A__En__OCCUPIED">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IQ6tg_JZEeauO5SNGpOV7w" name="Debug__A__En__OCCUPIED">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IQ9JwPJZEeauO5SNGpOV7w" name="Debug__A__En__OCCUPIED__117">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__reception::Region1::Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_IRANEPJZEeauO5SNGpOV7w" name="Debug__Path__IDLE__IDLE__6" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_IRANEfJZEeauO5SNGpOV7w" name="Debug__C__IDLE__IDLE__6">
            <connectionPoint xmi:id="_IRANE_JZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_IRANFPJZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_IRANEvJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_IRD3cvJZEeauO5SNGpOV7w" name="Debug__init__trans__IDLE__IDLE__6" source="_IRANE_JZEeauO5SNGpOV7w" target="_IRCpU_JZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRGTsfJZEeauO5SNGpOV7w" name="Debug__init__trans__IDLE__IDLE__6__141">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__init__trans__IDLE__IDLE__6&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_IRD3c_JZEeauO5SNGpOV7w" name="Debug__Ex__IDLE" source="_IRCpU_JZEeauO5SNGpOV7w" target="_IRDQYPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRG6wPJZEeauO5SNGpOV7w" name="Debug__Ex__IDLE__143">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ac__IDLE__IDLE__6&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IRD3dPJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IRD3dfJZEeauO5SNGpOV7w" name="Debug__AC__IDLE__IDLE__6" source="_IRDQYPJZEeauO5SNGpOV7w" target="_IRDQYvJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IREegPJZEeauO5SNGpOV7w" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__AC__IDLE__IDLE__6&quot;,(char *)&quot;Debug__B__Ac__IDLE__IDLE__6&quot;,(char *)&quot;Debug__A__Ac__IDLE__IDLE__6&quot;,(char *)&quot;&quot;);

//log.show(&quot;left successor of switcher becomes free\n&quot;);
this->leftSuccessorFree = free;</body>
                </effect>
                <trigger xmi:id="_IRD3dvJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IREegfJZEeauO5SNGpOV7w" name="Debug__En__IDLE" source="_IRDQYvJZEeauO5SNGpOV7w" target="_IRD3cPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IREeg_JZEeauO5SNGpOV7w" name="setFree" visibility="public" isReentrant="true">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__IDLE__IDLE__6&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;&quot;);

enter.setFree(true).send();</body>
                </effect>
                <trigger xmi:id="_IREegvJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IREehPJZEeauO5SNGpOV7w" name="Debug__end__trans__IDLE__IDLE__6" source="_IRD3cPJZEeauO5SNGpOV7w" target="_IRANFPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRII4PJZEeauO5SNGpOV7w" name="Debug__end__trans__IDLE__IDLE__6__147">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__end__trans__IDLE__IDLE__6&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IREehfJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_IRCpU_JZEeauO5SNGpOV7w" name="Debug__B__Ex__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IRCpVPJZEeauO5SNGpOV7w" name="Debug__B__Ex__IDLE">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IREehvJZEeauO5SNGpOV7w" name="Debug__B__Ex__IDLE__136">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IRDQYPJZEeauO5SNGpOV7w" name="Debug__B__Ac__IDLE__IDLE__6">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IRDQYfJZEeauO5SNGpOV7w" name="Debug__B__Ac__IDLE__IDLE__6">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__B__Ac__IDLE__IDLE__6&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE__IDLE__6&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IRFFkPJZEeauO5SNGpOV7w" name="Debug__B__Ac__IDLE__IDLE__6__137">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__B__Ac__IDLE__IDLE__6&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IRDQYvJZEeauO5SNGpOV7w" name="Debug__A__Ac__IDLE__IDLE__6">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IRDQY_JZEeauO5SNGpOV7w" name="Debug__A__Ac__IDLE__IDLE__6">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__A__Ac__IDLE__IDLE__6&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE__IDLE__6&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IRFsoPJZEeauO5SNGpOV7w" name="Debug__A__Ac__IDLE__IDLE__6__138">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__A__Ac__IDLE__IDLE__6&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IRD3cPJZEeauO5SNGpOV7w" name="Debug__A__En__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IRD3cfJZEeauO5SNGpOV7w" name="Debug__A__En__IDLE">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IRGTsPJZEeauO5SNGpOV7w" name="Debug__A__En__IDLE__139">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__6::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_IRJXAPJZEeauO5SNGpOV7w" name="Debug__Path__Jam ?__OCCUPIED__7" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_IRJXAfJZEeauO5SNGpOV7w" name="Debug__C__Jam ?__OCCUPIED__7">
            <connectionPoint xmi:id="_IRJXA_JZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_IRJ-EPJZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_IRJXAvJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_IRMaU_JZEeauO5SNGpOV7w" name="Debug__init__trans__Jam ?__OCCUPIED__7" source="_IRJXA_JZEeauO5SNGpOV7w" target="_IRLzQfJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IROPgfJZEeauO5SNGpOV7w" name="Debug__init__trans__Jam ?__OCCUPIED__7__161">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Jam ?__OCCUPIED__7::Region1::Debug__init__trans__Jam ?__OCCUPIED__7&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Jam ?__OCCUPIED__7&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_IRNBYPJZEeauO5SNGpOV7w" name="Debug__Ac__Jam ?__OCCUPIED__7" source="_IRLzQfJZEeauO5SNGpOV7w" target="_IRLzQ_JZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRNBYvJZEeauO5SNGpOV7w" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Jam ?__OCCUPIED__7::Region1::Debug__Ac__Jam ?__OCCUPIED__7&quot;,(char *)&quot;Debug__B__Ac__Jam ?__OCCUPIED__7&quot;,(char *)&quot;Debug__A__Ac__Jam ?__OCCUPIED__7&quot;,(char *)&quot;&quot;);

log.show(&quot;JAM detected in %s of stage %d\n&quot;, this->getName(), this->parcel.level-1);
timer.informIn(UMLRTTimespec(this->delay,0));</body>
                </effect>
                <trigger xmi:id="_IRNBYfJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IRNBY_JZEeauO5SNGpOV7w" name="Debug__En__OCCUPIED" source="_IRLzQ_JZEeauO5SNGpOV7w" target="_IRMaUfJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRO2kPJZEeauO5SNGpOV7w" name="Debug__En__OCCUPIED__164">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Jam ?__OCCUPIED__7::Region1::Debug__En__OCCUPIED&quot;,(char *)&quot;Debug__A__Ac__Jam ?__OCCUPIED__7&quot;,(char *)&quot;Debug__A__En__Jam ?__OCCUPIED__7&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IRNBZPJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IRNBZfJZEeauO5SNGpOV7w" name="Debug__end__trans__Jam ?__OCCUPIED__7" source="_IRMaUfJZEeauO5SNGpOV7w" target="_IRJ-EPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRPdoPJZEeauO5SNGpOV7w" name="Debug__end__trans__Jam ?__OCCUPIED__7__166">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Jam ?__OCCUPIED__7::Region1::Debug__end__trans__Jam ?__OCCUPIED__7&quot;,(char *)&quot;Debug__A__En__Jam ?__OCCUPIED__7&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IRNBZvJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_IRLzQfJZEeauO5SNGpOV7w" name="Debug__B__Ac__Jam ?__OCCUPIED__7">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IRLzQvJZEeauO5SNGpOV7w" name="Debug__B__Ac__Jam ?__OCCUPIED__7">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Jam ?__OCCUPIED__7::Region1::Debug__B__Ac__Jam ?__OCCUPIED__7&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;Jam ?__OCCUPIED__7&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IRNBZ_JZEeauO5SNGpOV7w" name="Debug__B__Ac__Jam ?__OCCUPIED__7__157">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Jam ?__OCCUPIED__7::Region1::Debug__B__Ac__Jam ?__OCCUPIED__7&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IRLzQ_JZEeauO5SNGpOV7w" name="Debug__A__Ac__Jam ?__OCCUPIED__7">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IRMaUPJZEeauO5SNGpOV7w" name="Debug__A__Ac__Jam ?__OCCUPIED__7">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Jam ?__OCCUPIED__7::Region1::Debug__A__Ac__Jam ?__OCCUPIED__7&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;Jam ?__OCCUPIED__7&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IRNocPJZEeauO5SNGpOV7w" name="Debug__A__Ac__Jam ?__OCCUPIED__7__158">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Jam ?__OCCUPIED__7::Region1::Debug__A__Ac__Jam ?__OCCUPIED__7&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IRMaUfJZEeauO5SNGpOV7w" name="Debug__A__En__Jam ?__OCCUPIED__7">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IRMaUvJZEeauO5SNGpOV7w" name="Debug__A__En__Jam ?__OCCUPIED__7">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Jam ?__OCCUPIED__7::Region1::Debug__A__En__Jam ?__OCCUPIED__7&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IROPgPJZEeauO5SNGpOV7w" name="Debug__A__En__Jam ?__OCCUPIED__7__159">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Jam ?__OCCUPIED__7::Region1::Debug__A__En__Jam ?__OCCUPIED__7&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_IRQrwPJZEeauO5SNGpOV7w" name="Debug__Path__transmission" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_IRQrwfJZEeauO5SNGpOV7w" name="Debug__C__transmission">
            <connectionPoint xmi:id="_IRQrw_JZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_IRQrxPJZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_IRQrwvJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_IRTvEvJZEeauO5SNGpOV7w" name="Debug__init__trans__transmission" source="_IRQrw_JZEeauO5SNGpOV7w" target="_IRTIAPJZEeauO5SNGpOV7w"/>
              <transition xmi:id="_IRTvE_JZEeauO5SNGpOV7w" name="Debug__Ex__OCCUPIED" source="_IRTIAPJZEeauO5SNGpOV7w" target="_IRTIAvJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRVkQPJZEeauO5SNGpOV7w" name="Debug__Ex__OCCUPIED__180">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__transmission::Region1::Debug__Ex__OCCUPIED&quot;,(char *)&quot;Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;Debug__B__Ac__transmission&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IRTvFPJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IRUWIPJZEeauO5SNGpOV7w" name="Debug__AC__transmission" source="_IRTIAvJZEeauO5SNGpOV7w" target="_IRTvEPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRWLUPJZEeauO5SNGpOV7w" name="Debug__AC__transmission__182">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__transmission::Region1::Debug__AC__transmission&quot;,(char *)&quot;Debug__B__Ac__transmission&quot;,(char *)&quot;Debug__A__Ac__transmission&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IRUWIfJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IRUWIvJZEeauO5SNGpOV7w" name="Debug__end__trans__transmission" source="_IRTvEPJZEeauO5SNGpOV7w" target="_IRQrxPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRWyYPJZEeauO5SNGpOV7w" name="Debug__end__trans__transmission__184">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__transmission::Region1::Debug__end__trans__transmission&quot;,(char *)&quot;Debug__A__Ac__transmission&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IRUWI_JZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_IRTIAPJZEeauO5SNGpOV7w" name="Debug__B__Ex__OCCUPIED">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IRTIAfJZEeauO5SNGpOV7w" name="Debug__B__Ex__OCCUPIED">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__transmission::Region1::Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IRUWJPJZEeauO5SNGpOV7w" name="Debug__B__Ex__OCCUPIED__176">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__transmission::Region1::Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IRTIAvJZEeauO5SNGpOV7w" name="Debug__B__Ac__transmission">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IRTIA_JZEeauO5SNGpOV7w" name="Debug__B__Ac__transmission">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__transmission::Region1::Debug__B__Ac__transmission&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;transmission&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IRU9MPJZEeauO5SNGpOV7w" name="Debug__B__Ac__transmission__177">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__transmission::Region1::Debug__B__Ac__transmission&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IRTvEPJZEeauO5SNGpOV7w" name="Debug__A__Ac__transmission">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IRTvEfJZEeauO5SNGpOV7w" name="Debug__A__Ac__transmission">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__transmission::Region1::Debug__A__Ac__transmission&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;transmission&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IRU9MfJZEeauO5SNGpOV7w" name="Debug__A__Ac__transmission__178">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__transmission::Region1::Debug__A__Ac__transmission&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_IRYAgPJZEeauO5SNGpOV7w" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_IRYAgfJZEeauO5SNGpOV7w" name="Debug__C__Initial">
            <connectionPoint xmi:id="_IRYAg_JZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_IRYAhPJZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_IRYAgvJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_IRcR8PJZEeauO5SNGpOV7w" name="Debug__init__trans__Initial" source="_IRYAg_JZEeauO5SNGpOV7w" target="_IRbD0PJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IReuMfJZEeauO5SNGpOV7w" name="Debug__init__trans__Initial__199">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_IRcR8fJZEeauO5SNGpOV7w" name="Debug__Ac__Initial" source="_IRbD0PJZEeauO5SNGpOV7w" target="_IRbD0vJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRfVQPJZEeauO5SNGpOV7w" name="Debug__Ac__Initial__201">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IRcR8vJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IRcR8_JZEeauO5SNGpOV7w" name="Debug__En__IDLE" source="_IRbD0vJZEeauO5SNGpOV7w" target="_IRbq4PJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRcR9fJZEeauO5SNGpOV7w" name="setFree" visibility="public" isReentrant="true">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Initial::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;&quot;);

enter.setFree(true).send();</body>
                </effect>
                <trigger xmi:id="_IRcR9PJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IRcR9vJZEeauO5SNGpOV7w" name="Debug__end__trans__Initial" source="_IRbq4PJZEeauO5SNGpOV7w" target="_IRYAhPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRgjYPJZEeauO5SNGpOV7w" name="Debug__end__trans__Initial__204">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IRcR9_JZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_IRbD0PJZEeauO5SNGpOV7w" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IRbD0fJZEeauO5SNGpOV7w" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IRc5APJZEeauO5SNGpOV7w" name="Debug__B__Ac__Initial__195">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IRbD0vJZEeauO5SNGpOV7w" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IRbD0_JZEeauO5SNGpOV7w" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IRdgEPJZEeauO5SNGpOV7w" name="Debug__A__Ac__Initial__196">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IRbq4PJZEeauO5SNGpOV7w" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IRbq4fJZEeauO5SNGpOV7w" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IReuMPJZEeauO5SNGpOV7w" name="Debug__A__En__Initial__197">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_IRhxgPJZEeauO5SNGpOV7w" name="Debug__Path__IDLE__IDLE__9" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_IRiYkPJZEeauO5SNGpOV7w" name="Debug__C__IDLE__IDLE__9">
            <connectionPoint xmi:id="_IRiYkvJZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_IRiYk_JZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_IRiYkfJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_IRmC8PJZEeauO5SNGpOV7w" name="Debug__init__trans__IDLE__IDLE__9" source="_IRiYkvJZEeauO5SNGpOV7w" target="_IRkNw_JZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRswoPJZEeauO5SNGpOV7w" name="Debug__init__trans__IDLE__IDLE__9__220">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__init__trans__IDLE__IDLE__9&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_IRmC8fJZEeauO5SNGpOV7w" name="Debug__Ex__IDLE" source="_IRkNw_JZEeauO5SNGpOV7w" target="_IRk00PJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRtXsPJZEeauO5SNGpOV7w" name="Debug__Ex__IDLE__222">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ex__IDLE&quot;,(char *)&quot;Debug__B__Ac__IDLE__IDLE__9&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IRmC8vJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IRmqAPJZEeauO5SNGpOV7w" name="Debug__AC__IDLE__IDLE__9" source="_IRk00PJZEeauO5SNGpOV7w" target="_IRk00vJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRmqAvJZEeauO5SNGpOV7w" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__AC__IDLE__IDLE__9&quot;,(char *)&quot;Debug__B__Ac__IDLE__IDLE__9&quot;,(char *)&quot;Debug__A__Ac__IDLE__IDLE__9&quot;,(char *)&quot;&quot;);

//log.show(&quot;right successor of switcher becomes free\n&quot;);
this->rightSuccessorFree = free;</body>
                </effect>
                <trigger xmi:id="_IRmqAfJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IRmqA_JZEeauO5SNGpOV7w" name="Debug__En__IDLE" source="_IRk00vJZEeauO5SNGpOV7w" target="_IRlb4PJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRmqBfJZEeauO5SNGpOV7w" name="setFree" visibility="public" isReentrant="true">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__En__IDLE&quot;,(char *)&quot;Debug__A__Ac__IDLE__IDLE__9&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;&quot;);

enter.setFree(true).send();</body>
                </effect>
                <trigger xmi:id="_IRmqBPJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IRmqBvJZEeauO5SNGpOV7w" name="Debug__end__trans__IDLE__IDLE__9" source="_IRlb4PJZEeauO5SNGpOV7w" target="_IRiYk_JZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IRul0PJZEeauO5SNGpOV7w" name="Debug__end__trans__IDLE__IDLE__9__226">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__end__trans__IDLE__IDLE__9&quot;,(char *)&quot;Debug__A__En__IDLE&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IRmqB_JZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_IRkNw_JZEeauO5SNGpOV7w" name="Debug__B__Ex__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IRkNxPJZEeauO5SNGpOV7w" name="Debug__B__Ex__IDLE">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IRnREPJZEeauO5SNGpOV7w" name="Debug__B__Ex__IDLE__215">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__B__Ex__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IRk00PJZEeauO5SNGpOV7w" name="Debug__B__Ac__IDLE__IDLE__9">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IRk00fJZEeauO5SNGpOV7w" name="Debug__B__Ac__IDLE__IDLE__9">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__B__Ac__IDLE__IDLE__9&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE__IDLE__9&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IRn4IPJZEeauO5SNGpOV7w" name="Debug__B__Ac__IDLE__IDLE__9__216">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__B__Ac__IDLE__IDLE__9&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IRk00vJZEeauO5SNGpOV7w" name="Debug__A__Ac__IDLE__IDLE__9">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IRk00_JZEeauO5SNGpOV7w" name="Debug__A__Ac__IDLE__IDLE__9">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__A__Ac__IDLE__IDLE__9&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE__IDLE__9&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IRrigPJZEeauO5SNGpOV7w" name="Debug__A__Ac__IDLE__IDLE__9__217">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__A__Ac__IDLE__IDLE__9&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IRlb4PJZEeauO5SNGpOV7w" name="Debug__A__En__IDLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IRlb4fJZEeauO5SNGpOV7w" name="Debug__A__En__IDLE">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;IDLE&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IRsJkPJZEeauO5SNGpOV7w" name="Debug__A__En__IDLE__218">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__IDLE__IDLE__9::Region1::Debug__A__En__IDLE&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_IRvz8PJZEeauO5SNGpOV7w" name="Debug__Path__OCCUPIED__OCCUPIED__10" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_IRvz8fJZEeauO5SNGpOV7w" name="Debug__C__OCCUPIED__OCCUPIED__10">
            <connectionPoint xmi:id="_IRvz8_JZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_IRwbAPJZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_IRvz8vJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_IR0FYPJZEeauO5SNGpOV7w" name="Debug__init__trans__OCCUPIED__OCCUPIED__10" source="_IRvz8_JZEeauO5SNGpOV7w" target="_IRy3QPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IR3IsPJZEeauO5SNGpOV7w" name="Debug__init__trans__OCCUPIED__OCCUPIED__10__241">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__10::Region1::Debug__init__trans__OCCUPIED__OCCUPIED__10&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_IR0FYfJZEeauO5SNGpOV7w" name="Debug__Ex__OCCUPIED" source="_IRy3QPJZEeauO5SNGpOV7w" target="_IRy3QvJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IR3IsfJZEeauO5SNGpOV7w" name="Debug__Ex__OCCUPIED__243">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__10::Region1::Debug__Ex__OCCUPIED&quot;,(char *)&quot;Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;Debug__B__Ac__OCCUPIED__OCCUPIED__10&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IR0FYvJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IR0FY_JZEeauO5SNGpOV7w" name="Debug__AC__OCCUPIED__OCCUPIED__10" source="_IRy3QvJZEeauO5SNGpOV7w" target="_IRzeUPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IR0FZfJZEeauO5SNGpOV7w" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__10::Region1::Debug__AC__OCCUPIED__OCCUPIED__10&quot;,(char *)&quot;Debug__B__Ac__OCCUPIED__OCCUPIED__10&quot;,(char *)&quot;Debug__A__Ac__OCCUPIED__OCCUPIED__10&quot;,(char *)&quot;&quot;);

log.show(&quot;Impossible to activate the switch of %s: the switch gate is obstructed by a parcel\n&quot;, this->getName());</body>
                </effect>
                <trigger xmi:id="_IR0FZPJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IR0scPJZEeauO5SNGpOV7w" name="Debug__En__OCCUPIED" source="_IRzeUPJZEeauO5SNGpOV7w" target="_IRzeUvJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IR4W0PJZEeauO5SNGpOV7w" name="Debug__En__OCCUPIED__246">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__10::Region1::Debug__En__OCCUPIED&quot;,(char *)&quot;Debug__A__Ac__OCCUPIED__OCCUPIED__10&quot;,(char *)&quot;Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IR0scfJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IR0scvJZEeauO5SNGpOV7w" name="Debug__end__trans__OCCUPIED__OCCUPIED__10" source="_IRzeUvJZEeauO5SNGpOV7w" target="_IRwbAPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IR4W0fJZEeauO5SNGpOV7w" name="Debug__end__trans__OCCUPIED__OCCUPIED__10__248">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__10::Region1::Debug__end__trans__OCCUPIED__OCCUPIED__10&quot;,(char *)&quot;Debug__A__En__OCCUPIED&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IR0sc_JZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_IRy3QPJZEeauO5SNGpOV7w" name="Debug__B__Ex__OCCUPIED">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IRy3QfJZEeauO5SNGpOV7w" name="Debug__B__Ex__OCCUPIED">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__10::Region1::Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IR0sdPJZEeauO5SNGpOV7w" name="Debug__B__Ex__OCCUPIED__236">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__10::Region1::Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IRy3QvJZEeauO5SNGpOV7w" name="Debug__B__Ac__OCCUPIED__OCCUPIED__10">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IRy3Q_JZEeauO5SNGpOV7w" name="Debug__B__Ac__OCCUPIED__OCCUPIED__10">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__10::Region1::Debug__B__Ac__OCCUPIED__OCCUPIED__10&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;OCCUPIED__OCCUPIED__10&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IR1TgPJZEeauO5SNGpOV7w" name="Debug__B__Ac__OCCUPIED__OCCUPIED__10__237">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__10::Region1::Debug__B__Ac__OCCUPIED__OCCUPIED__10&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IRzeUPJZEeauO5SNGpOV7w" name="Debug__A__Ac__OCCUPIED__OCCUPIED__10">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IRzeUfJZEeauO5SNGpOV7w" name="Debug__A__Ac__OCCUPIED__OCCUPIED__10">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__10::Region1::Debug__A__Ac__OCCUPIED__OCCUPIED__10&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED__OCCUPIED__10&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IR16kPJZEeauO5SNGpOV7w" name="Debug__A__Ac__OCCUPIED__OCCUPIED__10__238">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__10::Region1::Debug__A__Ac__OCCUPIED__OCCUPIED__10&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IRzeUvJZEeauO5SNGpOV7w" name="Debug__A__En__OCCUPIED">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IRzeU_JZEeauO5SNGpOV7w" name="Debug__A__En__OCCUPIED">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__10::Region1::Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IR2hoPJZEeauO5SNGpOV7w" name="Debug__A__En__OCCUPIED__239">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__10::Region1::Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_IR5k8PJZEeauO5SNGpOV7w" name="Debug__Path__OCCUPIED__OCCUPIED__11" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_IR5k8fJZEeauO5SNGpOV7w" name="Debug__C__OCCUPIED__OCCUPIED__11">
            <connectionPoint xmi:id="_IR5k8_JZEeauO5SNGpOV7w" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_IR5k9PJZEeauO5SNGpOV7w" name="ex" kind="exitPoint"/>
            <region xmi:id="_IR5k8vJZEeauO5SNGpOV7w" name="Region1">
              <transition xmi:id="_IR9PUfJZEeauO5SNGpOV7w" name="Debug__init__trans__OCCUPIED__OCCUPIED__11" source="_IR5k8_JZEeauO5SNGpOV7w" target="_IR8BMPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISASoPJZEeauO5SNGpOV7w" name="Debug__init__trans__OCCUPIED__OCCUPIED__11__263">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__11::Region1::Debug__init__trans__OCCUPIED__OCCUPIED__11&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
                </effect>
              </transition>
              <transition xmi:id="_IR9PUvJZEeauO5SNGpOV7w" name="Debug__Ex__OCCUPIED" source="_IR8BMPJZEeauO5SNGpOV7w" target="_IR8BMvJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISASofJZEeauO5SNGpOV7w" name="Debug__Ex__OCCUPIED__265">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__11::Region1::Debug__Ex__OCCUPIED&quot;,(char *)&quot;Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;Debug__B__Ac__OCCUPIED__OCCUPIED__11&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IR9PU_JZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IR9PVPJZEeauO5SNGpOV7w" name="Debug__AC__OCCUPIED__OCCUPIED__11" source="_IR8BMvJZEeauO5SNGpOV7w" target="_IR8oQPJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_IR92YfJZEeauO5SNGpOV7w" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__11::Region1::Debug__AC__OCCUPIED__OCCUPIED__11&quot;,(char *)&quot;Debug__B__Ac__OCCUPIED__OCCUPIED__11&quot;,(char *)&quot;Debug__A__Ac__OCCUPIED__OCCUPIED__11&quot;,(char *)&quot;&quot;);

//log.show(&quot;right successor of switcher becomes free\n&quot;);
this->rightSuccessorFree = free;</body>
                </effect>
                <trigger xmi:id="_IR92YPJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IR92YvJZEeauO5SNGpOV7w" name="Debug__En__OCCUPIED" source="_IR8oQPJZEeauO5SNGpOV7w" target="_IR8oQvJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISA5sPJZEeauO5SNGpOV7w" name="Debug__En__OCCUPIED__268">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__11::Region1::Debug__En__OCCUPIED&quot;,(char *)&quot;Debug__A__Ac__OCCUPIED__OCCUPIED__11&quot;,(char *)&quot;Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IR92Y_JZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_IR92ZPJZEeauO5SNGpOV7w" name="Debug__end__trans__OCCUPIED__OCCUPIED__11" source="_IR8oQvJZEeauO5SNGpOV7w" target="_IR5k9PJZEeauO5SNGpOV7w">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ISBgwPJZEeauO5SNGpOV7w" name="Debug__end__trans__OCCUPIED__OCCUPIED__11__270">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__11::Region1::Debug__end__trans__OCCUPIED__OCCUPIED__11&quot;,(char *)&quot;Debug__A__En__OCCUPIED&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);

</body>
                </effect>
                <trigger xmi:id="_IR92ZfJZEeauO5SNGpOV7w" name="Debug__Exec" port="_IJi6MPJZEeauO5SNGpOV7w">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_IR8BMPJZEeauO5SNGpOV7w" name="Debug__B__Ex__OCCUPIED">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IR8BMfJZEeauO5SNGpOV7w" name="Debug__B__Ex__OCCUPIED">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__11::Region1::Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IR-dcPJZEeauO5SNGpOV7w" name="Debug__B__Ex__OCCUPIED__258">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__11::Region1::Debug__B__Ex__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IR8BMvJZEeauO5SNGpOV7w" name="Debug__B__Ac__OCCUPIED__OCCUPIED__11">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IR8BM_JZEeauO5SNGpOV7w" name="Debug__B__Ac__OCCUPIED__OCCUPIED__11">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__11::Region1::Debug__B__Ac__OCCUPIED__OCCUPIED__11&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;OCCUPIED__OCCUPIED__11&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IR_EgPJZEeauO5SNGpOV7w" name="Debug__B__Ac__OCCUPIED__OCCUPIED__11__259">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__11::Region1::Debug__B__Ac__OCCUPIED__OCCUPIED__11&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IR8oQPJZEeauO5SNGpOV7w" name="Debug__A__Ac__OCCUPIED__OCCUPIED__11">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IR8oQfJZEeauO5SNGpOV7w" name="Debug__A__Ac__OCCUPIED__OCCUPIED__11">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__11::Region1::Debug__A__Ac__OCCUPIED__OCCUPIED__11&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED__OCCUPIED__11&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IR_EgfJZEeauO5SNGpOV7w" name="Debug__A__Ac__OCCUPIED__OCCUPIED__11__260">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__11::Region1::Debug__A__Ac__OCCUPIED__OCCUPIED__11&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_IR8oQvJZEeauO5SNGpOV7w" name="Debug__A__En__OCCUPIED">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IR9PUPJZEeauO5SNGpOV7w" name="Debug__A__En__OCCUPIED">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__11::Region1::Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

if (not(Debug__SRO.checkDebug(&quot;OCCUPIED&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_IR_rkPJZEeauO5SNGpOV7w" name="Debug__A__En__OCCUPIED__261">
                  <language>C++</language>
                  <body>Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITSTART,this->getName(),this->getIndex(),msg->getSignalName(),(char *)&quot;&quot;,(char *)&quot;RootElement::Switcher::SwitcherStateMachine::Region::Debug__C__OCCUPIED__OCCUPIED__11::Region1::Debug__A__En__OCCUPIED&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);

</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_ISD9APJZEeauO5SNGpOV7w" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IJzY4fJZEeauO5SNGpOV7w" name="Debug__variablesViewMethod" specification="_IJzY4PJZEeauO5SNGpOV7w">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;choice,&quot;);
tempS.append(&quot;Integer,&quot;);
if(choice!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,choice);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
tempS.append(&quot;leftSuccessorFree,&quot;);
tempS.append(&quot;Boolean,&quot;);
if(leftSuccessorFree==true){
    tempS.append(&quot;true&quot;);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;false&quot;);
    tempS.append(&quot;\n&quot;);
};
tempS.append(&quot;rightSuccessorFree,&quot;);
tempS.append(&quot;Boolean,&quot;);
if(rightSuccessorFree==true){
    tempS.append(&quot;true&quot;);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;false&quot;);
    tempS.append(&quot;\n&quot;);
};
tempS.append(&quot;delay,&quot;);
tempS.append(&quot;Integer,&quot;);
if(delay!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,delay);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IJ1OEfJZEeauO5SNGpOV7w" name="Debug__variablesChange" specification="_IJ0nAPJZEeauO5SNGpOV7w">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;delay&quot;==tempVarName){
    delay=atoi(varValue);
    return true;
}else if (&quot;choice&quot;==tempVarName){
    choice=atoi(varValue);
    return true;
}else if (&quot;leftSuccessorFree&quot;==tempVarName){
    if(strcmp(varValue,&quot;true&quot;)==0)
        leftSuccessorFree=true;
    else 
        leftSuccessorFree=false;
    return true;
}else if (&quot;rightSuccessorFree&quot;==tempVarName){
    if(strcmp(varValue,&quot;true&quot;)==0)
        rightSuccessorFree=true;
    else 
        rightSuccessorFree=false;
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_ILA51PJZEeauO5SNGpOV7w" name="Debug__sendEvent" specification="_IKeHQPJZEeauO5SNGpOV7w">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_IJzY4PJZEeauO5SNGpOV7w" name="Debug__variablesView" visibility="private" method="_IJzY4fJZEeauO5SNGpOV7w"/>
      <ownedOperation xmi:id="_IJ0nAPJZEeauO5SNGpOV7w" name="Debug__variablesChange" visibility="private" method="_IJ1OEfJZEeauO5SNGpOV7w">
        <ownedParameter xmi:id="_IJ0nAfJZEeauO5SNGpOV7w" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IJ0nAvJZEeauO5SNGpOV7w" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IJ1OEPJZEeauO5SNGpOV7w" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_IKeHQPJZEeauO5SNGpOV7w" name="Debug__sendEvent" visibility="private" method="_ILA51PJZEeauO5SNGpOV7w">
        <ownedParameter xmi:id="_IKeHQfJZEeauO5SNGpOV7w" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IKmDEPJZEeauO5SNGpOV7w" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IKvNAPJZEeauO5SNGpOV7w" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IK3v4PJZEeauO5SNGpOV7w" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_IK3v4fJZEeauO5SNGpOV7w" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_ILASwPJZEeauO5SNGpOV7w" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_ILA50PJZEeauO5SNGpOV7w" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_ILA50fJZEeauO5SNGpOV7w" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_ILA50vJZEeauO5SNGpOV7w" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_ILA50_JZEeauO5SNGpOV7w" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_RDfSQMM5EeahHehXumVB-w" name="switchProtocol">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_RDbn4MM5EeahHehXumVB-w" name="switchProtocol">
        <interfaceRealization xmi:id="_RDkx0MM5EeahHehXumVB-w" client="_RDbn4MM5EeahHehXumVB-w" supplier="_RDiVkMM5EeahHehXumVB-w" contract="_RDiVkMM5EeahHehXumVB-w"/>
        <interfaceRealization xmi:id="_RDsGkMM5EeahHehXumVB-w" client="_RDbn4MM5EeahHehXumVB-w" supplier="_RDpDQMM5EeahHehXumVB-w" contract="_RDpDQMM5EeahHehXumVB-w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_RDiVkMM5EeahHehXumVB-w" name="switchProtocol"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_RDlY4MM5EeahHehXumVB-w" name="switchProtocol~">
        <ownedOperation xmi:id="_XR2R8MM5EeahHehXumVB-w" name="setSwitch">
          <ownedParameter xmi:id="_YFqUgMM5EeahHehXumVB-w" name="c">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_RDn1IMM5EeahHehXumVB-w" client="_RDbn4MM5EeahHehXumVB-w" supplier="_RDlY4MM5EeahHehXumVB-w"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_RDocMMM5EeahHehXumVB-w" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_RDpDQMM5EeahHehXumVB-w" name="switchProtocolIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_RDtUsMM5EeahHehXumVB-w" client="_RDbn4MM5EeahHehXumVB-w" supplier="_RDpDQMM5EeahHehXumVB-w"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_cjDs4MM5EeahHehXumVB-w" operation="_XR2R8MM5EeahHehXumVB-w"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_IIPSoPJZEeauO5SNGpOV7w" name="Debug__Top">
      <ownedAttribute xmi:id="_IJUQsPJZEeauO5SNGpOV7w" name="Debug__Gateway">
        <type xmi:type="uml:Class" href="../CommGateWay/model.uml#_XIyCcAdxEeadtKuU2t6fMg"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_IJZJMfJZEeauO5SNGpOV7w" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_IJZJMvJZEeauO5SNGpOV7w" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_IJblcPJZEeauO5SNGpOV7w" name="Debug__Parcer_Router" type="_9X86YML5EeaSH8bbL43htA">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_IJgd8fJZEeauO5SNGpOV7w" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_IJgd8vJZEeauO5SNGpOV7w" value="1"/>
      </ownedAttribute>
    </packagedElement>
    <profileApplication xmi:id="_nykGUML5EeaSH8bbL43htA">
      <eAnnotations xmi:id="_nyl7gML5EeaSH8bbL43htA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:id="_8dJfAML5EeaSH8bbL43htA">
      <eAnnotations xmi:id="_8dKtIML5EeaSH8bbL43htA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UMLRT_CPP/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
    <profileApplication xmi:id="_8dLUMML5EeaSH8bbL43htA">
      <eAnnotations xmi:id="_8dL7QML5EeaSH8bbL43htA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:Capsule xmi:id="_9cQyoML5EeaSH8bbL43htA" base_Class="_9X86YML5EeaSH8bbL43htA"/>
  <UMLRealTime:Capsule xmi:id="_Gu9tEML6EeaSH8bbL43htA" base_Class="_GuPUUML6EeaSH8bbL43htA"/>
  <UMLRealTime:Capsule xmi:id="_Iu5kgML6EeaSH8bbL43htA" base_Class="_IuNA8ML6EeaSH8bbL43htA"/>
  <UMLRealTime:Capsule xmi:id="_LOpkcML6EeaSH8bbL43htA" base_Class="_LOPUwML6EeaSH8bbL43htA"/>
  <UMLRealTime:ProtocolContainer xmi:id="_QrF_AML6EeaSH8bbL43htA" base_Package="_QrBtkML6EeaSH8bbL43htA"/>
  <UMLRealTime:RTMessageSet xmi:id="_QrOh4ML6EeaSH8bbL43htA" base_Interface="_QrKQcML6EeaSH8bbL43htA"/>
  <UMLRealTime:RTMessageSet xmi:id="_QrWdsML6EeaSH8bbL43htA" base_Interface="_QrSzUML6EeaSH8bbL43htA" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_QrckUML6EeaSH8bbL43htA" base_Interface="_QrZhAML6EeaSH8bbL43htA" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_QrgOsML6EeaSH8bbL43htA" base_Collaboration="_Qq5xwML6EeaSH8bbL43htA"/>
  <UMLRealTime:RTPort xmi:id="_a5_b8ML6EeaSH8bbL43htA" base_Port="_a5ynoML6EeaSH8bbL43htA"/>
  <UMLRealTime:RTPort xmi:id="_ej0CUML6EeaSH8bbL43htA" base_Port="_ejuiwML6EeaSH8bbL43htA"/>
  <UMLRealTime:RTPort xmi:id="_gvt5MML6EeaSH8bbL43htA" base_Port="_gvpnwML6EeaSH8bbL43htA"/>
  <UMLRealTime:RTPort xmi:id="_ieknsML6EeaSH8bbL43htA" base_Port="_ieg9UML6EeaSH8bbL43htA"/>
  <UMLRealTime:RTPort xmi:id="_l2SKYML6EeaSH8bbL43htA" base_Port="_l2PuIML6EeaSH8bbL43htA"/>
  <UMLRealTime:CapsulePart xmi:id="_o94NcML6EeaSH8bbL43htA" base_Property="_o9z8AML6EeaSH8bbL43htA"/>
  <UMLRealTime:CapsulePart xmi:id="_sW7z8ML6EeaSH8bbL43htA" base_Property="_sW4woML6EeaSH8bbL43htA"/>
  <UMLRealTime:CapsulePart xmi:id="_uWJ5sML6EeaSH8bbL43htA" base_Property="_uWG2YML6EeaSH8bbL43htA"/>
  <UMLRealTime:CapsulePart xmi:id="_wXCMUML6EeaSH8bbL43htA" base_Property="_wW-h8ML6EeaSH8bbL43htA"/>
  <UMLRealTime:CapsulePart xmi:id="_zZAIgML6EeaSH8bbL43htA" base_Property="_zY9sQML6EeaSH8bbL43htA"/>
  <UMLRealTime:RTConnector xmi:id="_9hs20cL6EeaSH8bbL43htA" base_Connector="_9hn-UML6EeaSH8bbL43htA"/>
  <UMLRealTime:RTConnector xmi:id="_-P8c4sL6EeaSH8bbL43htA" base_Connector="_-P5ZkML6EeaSH8bbL43htA"/>
  <UMLRealTime:RTConnector xmi:id="_-9SrEcL6EeaSH8bbL43htA" base_Connector="_-9PnwML6EeaSH8bbL43htA"/>
  <UMLRealTime:RTPort xmi:id="_ihRg8ML7EeaSH8bbL43htA" isWired="false" base_Port="_ihPrwML7EeaSH8bbL43htA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_sgbRsML7EeaSH8bbL43htA" base_Pseudostate="_sgYOYML7EeaSH8bbL43htA"/>
  <UMLRTStateMachines:RTState xmi:id="_sggKMML7EeaSH8bbL43htA" base_State="_sgeVAML7EeaSH8bbL43htA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_sglCsML7EeaSH8bbL43htA" base_Region="_sgSu0ML7EeaSH8bbL43htA"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_shjTEML7EeaSH8bbL43htA" base_StateMachine="_sgJk4ML7EeaSH8bbL43htA"/>
  <UMLRealTime:RTPort xmi:id="_TGQH8ML8EeaSH8bbL43htA" isWired="false" base_Port="_TGKoYML8EeaSH8bbL43htA"/>
  <UMLRealTime:RTPort xmi:id="_QkHBsMMEEeaSH8bbL43htA" isWired="false" base_Port="_QkCwQMMEEeaSH8bbL43htA"/>
  <UMLRealTime:RTPort xmi:id="_P-0CoMMMEeaSH8bbL43htA" isWired="false" base_Port="_P-w_UMMMEeaSH8bbL43htA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_SANSoMMMEeaSH8bbL43htA" base_Pseudostate="_SAMEgMMMEeaSH8bbL43htA"/>
  <UMLRTStateMachines:RTState xmi:id="_SAPH0MMMEeaSH8bbL43htA" base_State="_SAN5sMMMEeaSH8bbL43htA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_SAPu4MMMEeaSH8bbL43htA" base_Region="_SAKPUMMMEeaSH8bbL43htA"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_SBGqkMMMEeaSH8bbL43htA" base_StateMachine="_SAHMAMMMEeaSH8bbL43htA"/>
  <UMLRealTime:RTConnector xmi:id="_0KCXUsMPEeaSH8bbL43htA" base_Connector="_0KAiIMMPEeaSH8bbL43htA"/>
  <UMLRealTime:RTConnector xmi:id="_02B6osMPEeaSH8bbL43htA" base_Connector="_02AFcMMPEeaSH8bbL43htA"/>
  <UMLRealTime:RTConnector xmi:id="_13cUUcMPEeaSH8bbL43htA" base_Connector="_13afIMMPEeaSH8bbL43htA"/>
  <UMLRealTime:RTConnector xmi:id="_2pYHkMMPEeaSH8bbL43htA" base_Connector="_2pVrUMMPEeaSH8bbL43htA"/>
  <UMLRealTime:CapsulePart xmi:id="_bKtWgMMQEeaSH8bbL43htA" base_Property="_bKsIYMMQEeaSH8bbL43htA"/>
  <UMLRealTime:CapsulePart xmi:id="_ex6GsMMQEeaSH8bbL43htA" base_Property="_ex4RgMMQEeaSH8bbL43htA"/>
  <UMLRealTime:CapsulePart xmi:id="_gzrKIMMQEeaSH8bbL43htA" base_Property="_gzot4MMQEeaSH8bbL43htA"/>
  <UMLRealTime:Capsule xmi:id="_j0w1YMM4EeahHehXumVB-w" base_Class="_jvOOEMM4EeahHehXumVB-w"/>
  <UMLRealTime:RTPort xmi:id="_p187wMM4EeahHehXumVB-w" base_Port="_p1u5UMM4EeahHehXumVB-w"/>
  <UMLRealTime:RTPort xmi:id="_sK-SYMM4EeahHehXumVB-w" base_Port="_sK7PEMM4EeahHehXumVB-w"/>
  <UMLRealTime:RTPort xmi:id="_v-PIoMM4EeahHehXumVB-w" base_Port="_v-KQIMM4EeahHehXumVB-w"/>
  <UMLRealTime:ProtocolContainer xmi:id="_wvSyIMM4EeahHehXumVB-w" base_Package="_wvPHwMM4EeahHehXumVB-w"/>
  <UMLRealTime:RTMessageSet xmi:id="_wvY4wMM4EeahHehXumVB-w" base_Interface="_wvV1cMM4EeahHehXumVB-w"/>
  <UMLRealTime:RTMessageSet xmi:id="_wve_YMM4EeahHehXumVB-w" base_Interface="_wvcjIMM4EeahHehXumVB-w" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_wvke8MM4EeahHehXumVB-w" base_Interface="_wviCsMM4EeahHehXumVB-w" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_wvniQMM4EeahHehXumVB-w" base_Collaboration="_wvKPQMM4EeahHehXumVB-w"/>
  <UMLRealTime:Capsule xmi:id="_AJ77MMM5EeahHehXumVB-w" base_Class="_AJLGMMM5EeahHehXumVB-w"/>
  <UMLRealTime:RTPort xmi:id="_CHYfUMM5EeahHehXumVB-w" base_Port="_CHUN4MM5EeahHehXumVB-w"/>
  <UMLRealTime:Capsule xmi:id="_O_8GIMM5EeahHehXumVB-w" base_Class="_O_UbEMM5EeahHehXumVB-w"/>
  <UMLRealTime:ProtocolContainer xmi:id="_RDhugMM5EeahHehXumVB-w" base_Package="_RDfSQMM5EeahHehXumVB-w"/>
  <UMLRealTime:RTMessageSet xmi:id="_RDkKwMM5EeahHehXumVB-w" base_Interface="_RDiVkMM5EeahHehXumVB-w"/>
  <UMLRealTime:RTMessageSet xmi:id="_RDnOEMM5EeahHehXumVB-w" base_Interface="_RDlY4MM5EeahHehXumVB-w" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_RDrfgMM5EeahHehXumVB-w" base_Interface="_RDpDQMM5EeahHehXumVB-w" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_RDt7wMM5EeahHehXumVB-w" base_Collaboration="_RDbn4MM5EeahHehXumVB-w"/>
  <UMLRealTime:RTPort xmi:id="_gMcOYMM5EeahHehXumVB-w" base_Port="_gMZLEMM5EeahHehXumVB-w"/>
  <UMLRealTime:RTPort xmi:id="_m5f8QMM5EeahHehXumVB-w" base_Port="_m5dgAMM5EeahHehXumVB-w"/>
  <UMLRealTime:RTPort xmi:id="_0csbgMM5EeahHehXumVB-w" base_Port="_0cp_QMM5EeahHehXumVB-w"/>
  <UMLRealTime:RTPort xmi:id="_3ton0MM5EeahHehXumVB-w" base_Port="_3tk9cMM5EeahHehXumVB-w"/>
  <UMLRealTime:CapsulePart xmi:id="_8dOjcMM5EeahHehXumVB-w" base_Property="_8dMHMMM5EeahHehXumVB-w"/>
  <UMLRealTime:CapsulePart xmi:id="_ANxc4MM6EeahHehXumVB-w" base_Property="_ANvnsMM6EeahHehXumVB-w"/>
  <UMLRealTime:CapsulePart xmi:id="_DptYQMM6EeahHehXumVB-w" base_Property="_Dpq8AMM6EeahHehXumVB-w"/>
  <UMLRealTime:RTConnector xmi:id="_GmrfssM6EeahHehXumVB-w" base_Connector="_GmpDcMM6EeahHehXumVB-w"/>
  <UMLRealTime:RTConnector xmi:id="_JFkkAsM6EeahHehXumVB-w" base_Connector="_JFiHwMM6EeahHehXumVB-w"/>
  <UMLRealTime:CapsulePart xmi:id="_KEoNQMM6EeahHehXumVB-w" base_Property="_KElJ8MM6EeahHehXumVB-w"/>
  <UMLRealTime:RTConnector xmi:id="_Ni31wsM6EeahHehXumVB-w" base_Connector="_Ni2AkMM6EeahHehXumVB-w"/>
  <UMLRealTime:RTConnector xmi:id="_Q2uzMMM6EeahHehXumVB-w" base_Connector="_Q2rv4MM6EeahHehXumVB-w"/>
  <UMLRealTime:RTConnector xmi:id="_TMfwscM6EeahHehXumVB-w" base_Connector="_TMcGUMM6EeahHehXumVB-w"/>
  <UMLRealTime:RTConnector xmi:id="_T-WEYcM6EeahHehXumVB-w" base_Connector="_T-SaAMM6EeahHehXumVB-w"/>
  <UMLRealTime:RTPort xmi:id="_VxL7AMM6EeahHehXumVB-w" base_Port="_VxKF0MM6EeahHehXumVB-w"/>
  <UMLRealTime:RTConnector xmi:id="_fBwHcsM6EeahHehXumVB-w" base_Connector="_fBuSQMM6EeahHehXumVB-w"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_mXF9UMM6EeahHehXumVB-w" base_StateMachine="_mXBE0MM6EeahHehXumVB-w"/>
  <UMLRTStateMachines:RTRegion xmi:id="_mXGkYMM6EeahHehXumVB-w" base_Region="_mXBE0cM6EeahHehXumVB-w"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_mXHLcMM6EeahHehXumVB-w" base_Pseudostate="_mXBE18M6EeahHehXumVB-w"/>
  <UMLRTStateMachines:RTState xmi:id="_mXHygMM6EeahHehXumVB-w" base_State="_mXBE2MM6EeahHehXumVB-w"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_IdGZUMM7EeahHehXumVB-w" base_StateMachine="_IdCu8MM7EeahHehXumVB-w"/>
  <UMLRTStateMachines:RTRegion xmi:id="_IdHAYMM7EeahHehXumVB-w" base_Region="_IdCu8cM7EeahHehXumVB-w"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_IdHncMM7EeahHehXumVB-w" base_Pseudostate="_IdDWBcM7EeahHehXumVB-w"/>
  <UMLRTStateMachines:RTState xmi:id="_IdHnccM7EeahHehXumVB-w" base_State="_IdDWBsM7EeahHehXumVB-w"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_yUREgMM7EeahHehXumVB-w" base_Pseudostate="_yUOoQMM7EeahHehXumVB-w"/>
  <UMLRTStateMachines:RTState xmi:id="_yUTgwMM7EeahHehXumVB-w" base_State="_yUSSoMM7EeahHehXumVB-w"/>
  <UMLRTStateMachines:RTRegion xmi:id="_yUUu4MM7EeahHehXumVB-w" base_Region="_yUMMAMM7EeahHehXumVB-w"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_yVXQsMM7EeahHehXumVB-w" base_StateMachine="_yUE3QMM7EeahHehXumVB-w"/>
  <UMLRealTime:RTPort xmi:id="_uL4n8MM9EeahHehXumVB-w" isWired="false" base_Port="_uL2LsMM9EeahHehXumVB-w"/>
  <UMLRealTime:RTPort xmi:id="_qxaXcMX2EeaYV5cb1Zesag" isWired="false" base_Port="_qxGOYMX2EeaYV5cb1Zesag"/>
  <UMLRealTime:RTPort xmi:id="_x2xQkMX2EeaYV5cb1Zesag" isWired="false" base_Port="_x2tmMMX2EeaYV5cb1Zesag"/>
  <UMLRTStateMachines:RTState xmi:id="_k2x6IMX4EeaYV5cb1Zesag" base_State="_k2uPwMX4EeaYV5cb1Zesag"/>
  <UMLRealTime:RTPort xmi:id="_Wbb1cMX5EeaYV5cb1Zesag" isWired="false" base_Port="_WbYyIMX5EeaYV5cb1Zesag"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_aL1IcMX6EeaYV5cb1Zesag" base_Pseudostate="_aLwP8MX6EeaYV5cb1Zesag"/>
  <UMLRTStateMachines:RTState xmi:id="_GOUpoMYlEeaYV5cb1Zesag" base_State="_GOTbgMYlEeaYV5cb1Zesag"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_RQTwYMYlEeaYV5cb1Zesag" base_Pseudostate="_RQRUIMYlEeaYV5cb1Zesag"/>
  <UMLRealTime:RTPort xmi:id="_4c99IMYlEeaYV5cb1Zesag" isWired="false" base_Port="_4c8vAMYlEeaYV5cb1Zesag"/>
  <RTCppProperties:PassiveClassProperties xmi:id="_TuYcgN5nEeakB9CQglrL_g" headerPreface="" base_Class="_aEoEwML7EeaSH8bbL43htA" privateDeclarations="" publicDeclarations=""/>
  <UMLRealTime:Capsule xmi:id="_IJRNYPJZEeauO5SNGpOV7w" base_Class="_IIPSoPJZEeauO5SNGpOV7w"/>
  <UMLRealTime:CapsulePart xmi:id="_IJZJMPJZEeauO5SNGpOV7w" base_Property="_IJUQsPJZEeauO5SNGpOV7w"/>
  <UMLRealTime:CapsulePart xmi:id="_IJgd8PJZEeauO5SNGpOV7w" base_Property="_IJblcPJZEeauO5SNGpOV7w"/>
  <UMLRealTime:RTPort xmi:id="_IJnLoPJZEeauO5SNGpOV7w" isNotification="true" isWired="false" base_Port="_IJi6MPJZEeauO5SNGpOV7w"/>
  <RTCppProperties:AttributeProperties xmi:id="_IJ6GkPJZEeauO5SNGpOV7w" type="debugEvents::Event" base_Property="_IJ1OFPJZEeauO5SNGpOV7w"/>
  <RTCppProperties:AttributeProperties xmi:id="_IKD3kPJZEeauO5SNGpOV7w" type="SROManager" base_Property="_IJ-_EPJZEeauO5SNGpOV7w"/>
  <RTCppProperties:CapsuleProperties xmi:id="_IKNBgPJZEeauO5SNGpOV7w" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_O_UbEMM5EeahHehXumVB-w"/>
  <RTCppProperties:ParameterProperties xmi:id="_IKiYsPJZEeauO5SNGpOV7w" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_IKeHQfJZEeauO5SNGpOV7w"/>
  <RTCppProperties:ParameterProperties xmi:id="_IKq7kPJZEeauO5SNGpOV7w" type="debugEvents::EVENTTYPE" base_Parameter="_IKmDEPJZEeauO5SNGpOV7w"/>
  <RTCppProperties:ParameterProperties xmi:id="_IKzecPJZEeauO5SNGpOV7w" type="const char *" base_Parameter="_IKvNAPJZEeauO5SNGpOV7w"/>
  <RTCppProperties:ParameterProperties xmi:id="_IK8oYPJZEeauO5SNGpOV7w" type="const char *" base_Parameter="_IK3v4fJZEeauO5SNGpOV7w"/>
  <UMLRealTime:RTPort xmi:id="_ILFLQPJZEeauO5SNGpOV7w" isNotification="true" isWired="false" base_Port="_ILBg4PJZEeauO5SNGpOV7w"/>
  <RTCppProperties:AttributeProperties xmi:id="_ILT0wPJZEeauO5SNGpOV7w" type="debugEvents::Event" base_Property="_ILPjUfJZEeauO5SNGpOV7w"/>
  <RTCppProperties:AttributeProperties xmi:id="_ILcXoPJZEeauO5SNGpOV7w" type="SROManager" base_Property="_ILYGMPJZEeauO5SNGpOV7w"/>
  <RTCppProperties:CapsuleProperties xmi:id="_ILk6gPJZEeauO5SNGpOV7w" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_LOPUwML6EeaSH8bbL43htA"/>
  <RTCppProperties:ParameterProperties xmi:id="_IL5qoPJZEeauO5SNGpOV7w" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_IL1ZMfJZEeauO5SNGpOV7w"/>
  <RTCppProperties:ParameterProperties xmi:id="_IMNzsPJZEeauO5SNGpOV7w" type="debugEvents::EVENTTYPE" base_Parameter="_IMKJUPJZEeauO5SNGpOV7w"/>
  <RTCppProperties:ParameterProperties xmi:id="_IMVIcPJZEeauO5SNGpOV7w" type="const char *" base_Parameter="_IMReEPJZEeauO5SNGpOV7w"/>
  <RTCppProperties:ParameterProperties xmi:id="_IMcdMPJZEeauO5SNGpOV7w" type="const char *" base_Parameter="_IMYy0fJZEeauO5SNGpOV7w"/>
  <UMLRealTime:RTPort xmi:id="_IMjx8PJZEeauO5SNGpOV7w" isNotification="true" isWired="false" base_Port="_IMguoPJZEeauO5SNGpOV7w"/>
  <RTCppProperties:AttributeProperties xmi:id="_IMybcPJZEeauO5SNGpOV7w" type="debugEvents::Event" base_Property="_IMuKAvJZEeauO5SNGpOV7w"/>
  <RTCppProperties:AttributeProperties xmi:id="_IM5JIPJZEeauO5SNGpOV7w" type="SROManager" base_Property="_IM1ewPJZEeauO5SNGpOV7w"/>
  <RTCppProperties:CapsuleProperties xmi:id="_IM_20PJZEeauO5SNGpOV7w" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_GuPUUML6EeaSH8bbL43htA"/>
  <RTCppProperties:ParameterProperties xmi:id="_INQ8kPJZEeauO5SNGpOV7w" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_INN5QfJZEeauO5SNGpOV7w"/>
  <RTCppProperties:ParameterProperties xmi:id="_INYRUPJZEeauO5SNGpOV7w" type="debugEvents::EVENTTYPE" base_Parameter="_INUm8PJZEeauO5SNGpOV7w"/>
  <RTCppProperties:ParameterProperties xmi:id="_INe_APJZEeauO5SNGpOV7w" type="const char *" base_Parameter="_INbUoPJZEeauO5SNGpOV7w"/>
  <RTCppProperties:ParameterProperties xmi:id="_INmTwPJZEeauO5SNGpOV7w" type="const char *" base_Parameter="_INipYfJZEeauO5SNGpOV7w"/>
  <UMLRealTime:RTPort xmi:id="_INtogPJZEeauO5SNGpOV7w" isNotification="true" isWired="false" base_Port="_INqlMPJZEeauO5SNGpOV7w"/>
  <RTCppProperties:AttributeProperties xmi:id="_IN7D4PJZEeauO5SNGpOV7w" type="debugEvents::Event" base_Property="_IN4AkvJZEeauO5SNGpOV7w"/>
  <RTCppProperties:AttributeProperties xmi:id="_IOCYoPJZEeauO5SNGpOV7w" type="SROManager" base_Property="_IN-uQPJZEeauO5SNGpOV7w"/>
  <RTCppProperties:CapsuleProperties xmi:id="_IOJGUPJZEeauO5SNGpOV7w" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_jvOOEMM4EeahHehXumVB-w"/>
  <RTCppProperties:ParameterProperties xmi:id="_IObaMPJZEeauO5SNGpOV7w" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_IOXIwfJZEeauO5SNGpOV7w"/>
  <RTCppProperties:ParameterProperties xmi:id="_IOiu8PJZEeauO5SNGpOV7w" type="debugEvents::EVENTTYPE" base_Parameter="_IOfEkPJZEeauO5SNGpOV7w"/>
  <RTCppProperties:ParameterProperties xmi:id="_IOqDsPJZEeauO5SNGpOV7w" type="const char *" base_Parameter="_IOlyQPJZEeauO5SNGpOV7w"/>
  <RTCppProperties:ParameterProperties xmi:id="_IOwxYPJZEeauO5SNGpOV7w" type="const char *" base_Parameter="_IOtHAfJZEeauO5SNGpOV7w"/>
  <UMLRealTime:RTPort xmi:id="_IO4tMPJZEeauO5SNGpOV7w" isNotification="true" isWired="false" base_Port="_IO1p4PJZEeauO5SNGpOV7w"/>
  <RTCppProperties:AttributeProperties xmi:id="_IPETYPJZEeauO5SNGpOV7w" type="debugEvents::Event" base_Property="_IPBQEvJZEeauO5SNGpOV7w"/>
  <RTCppProperties:AttributeProperties xmi:id="_IPLoIPJZEeauO5SNGpOV7w" type="SROManager" base_Property="_IPH9wPJZEeauO5SNGpOV7w"/>
  <RTCppProperties:CapsuleProperties xmi:id="_IPSV0PJZEeauO5SNGpOV7w" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_AJLGMMM5EeahHehXumVB-w"/>
  <RTCppProperties:ParameterProperties xmi:id="_IPjbkPJZEeauO5SNGpOV7w" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_IPfxMfJZEeauO5SNGpOV7w"/>
  <RTCppProperties:ParameterProperties xmi:id="_IPqwUPJZEeauO5SNGpOV7w" type="debugEvents::EVENTTYPE" base_Parameter="_IPnF8PJZEeauO5SNGpOV7w"/>
  <RTCppProperties:ParameterProperties xmi:id="_IPxeAPJZEeauO5SNGpOV7w" type="const char *" base_Parameter="_IPtzoPJZEeauO5SNGpOV7w"/>
  <RTCppProperties:ParameterProperties xmi:id="_IP4ywPJZEeauO5SNGpOV7w" type="const char *" base_Parameter="_IP1IYPJZEeauO5SNGpOV7w"/>
</xmi:XMI>
