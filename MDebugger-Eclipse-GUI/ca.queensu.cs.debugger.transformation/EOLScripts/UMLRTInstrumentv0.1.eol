/*
    Copyright (c) 2016 Queen's University.
    
    Using this code is only premited In the context of   MDebugger Project.
    
    Developers:
    Mojtaba Bagherzadeh(mojtaba@cs.queensu.ca): Intial development 

*/

import "UMLRTQuery.eol";
import "UMLRTCodeReflection.eol";
import "UMLRTCodeGenUtil.eol";
import "UMLRTProfilesOperations.eol";
import "UMLRTElementOperation.eol";
import "SRORule.eol";
import "DetailTracing.eol";

///// intialize variables

var uniqueId:Integer=0;
var instrumentPrefix:String="Debug__";
var debugConnectPointName=instrumentPrefix+"Connect__Point__";
var debugStateName:String=instrumentPrefix.concat("Super__State__");
var debugEntry:String="__Debug__Entry__";
var debugChoice:String="__Debug__Choice__";
var generationPrefix="__Generated__";
var endLine:String="\n";
var uniqueID:Integer=1; // we need to name the added state and transition uniquely
var Observarion:String="Observation";
var traceType:String="Observation";
var debugLevel:Integer=0; // 0= info , 1= debug at frist level functions 2= debug at second level and 3= debug at thirth level 
var debugPortName="extComm";
//var debugPort:UMLRTModel!Port;
var currentCapsuleName:String="";
/// loading user models, gateway model, debug protocol
var UMLPrimitiveTypes=UMLRTModel!Package.all.select(c|c.name="PrimitiveTypes").first();
var UMLRTSLIB=UMLRTModel!Package.all.select(c|c.name="UMLRT-RTS").first();
var modelroot=UMLRTModel!Package.all.select(c|c.type.name="Model").first();
//"Instrumentaion is Started on model:".println("Debug Level 0: ");
//modelroot.println("Debug Level 0: ");
var dbgProtocol;
var rtsBaseCommProtocol;
var dbgVarChangeEvent;
var dbgSetBreakPointEvent;
var dbgRemBreakPointEvent;
var dbgViewBreakPointsEvent;
var dbgSetExecModeEvent;
var anyEvent;
var dbgExecEvent;
var rtBound;
var transitionsData:Set;
var activePorts:Set; // save all used port which are set for a state machine's trigger'
/*/// check if geteway and primitive package imprrted correctly, If not show error and exit
if (UMLPrimitiveTypes.isUndefined() or dbgProtocol.isUndefined() or dbgCommandEvent.isUndefined()
	or dbgExecEvent.isUndefined() or anyEvent.isUndefined()){
	errln("Required model is not loaded correctly (Gateway, Debug protocol or Primitive package)");
	}

*/
/// extract all state machine and classes

var allStateMachines:Set=modelroot.getAllStateMachines();
var allClasses=modelroot.getAllOwnedClasses();
allClasses.size().println("number of capsule");
allStateMachines.getAllRegions().getAllStates().size().println("number of states");


//transaction{
	addGateWay();
	refineStructure();
	for (SM in allStateMachines){
		//SM.getAllRegions().getAllTransitions().size().println("Number of transtion");
		//SM.getAllRegions().getAllStates().size().println("number of states");
		var allStates=SM.getAllRegions().getAllStates().select(s|s.stateType()=="Composite" or s.stateType()=="State");
		refineForSRO(SM);
		for (s in allStates){
			s.guardCodes(); // First guard then add trace, to make sure that the related event will be generated
			s.addTrace(traceType);
			
			}
		}
return modelroot;
//abort;
//	}
	
/// refine state machine for stop and resume operation

operation  addGateWay ():Boolean {
	// check if top capsule exist , then replace it with new one 
	//"Adding Gateway Is Started".println("addGateWay operation: ");
	var modelTopCapsuleName:String=modelroot.getTopCapsule();
	if (modelTopCapsuleName==""){
		"Top Capsule Not found".println("addGateWay operation: ");
		return false;
		}
	var debugTop=createCapsule(instrumentPrefix.concat("Top"));
	modelroot.packagedElement.add(debugTop);
	debugTop.applyUMLRTStereotype();
	/// set top capsule
	if (not modelroot.setTopCapsule(instrumentPrefix.concat("Top"))){
		"Top Capsule Can Not Be Set".println("addGateWay operation: ");
		return false;
		}
	///set model's language
	modelroot.setModelLanguage("umlrt-cpp");
	/// import gateway package
	var gateWayRoot=DebuggingAgent!Package.all.select(c|c.type.name="Model").first();
	modelroot.importPackage(gateWayRoot);
	//// add  the gateway  capsule as part to debug_top
	var gateWayCapsule=gateWayRoot.getAllOwnedClasses().selectOne(c|c.name="GateWay");
	debugTop.createProperty(instrumentPrefix.concat("Gateway"),1,1,gateWayCapsule);
	//// add  the model top capsule as part to debug_top
	var modelTopCapsule=modelroot.getAllOwnedClasses().selectOne(c|c.name=modelTopCapsuleName);
	var partUserModel=debugTop.createProperty(instrumentPrefix.concat(modelTopCapsuleName),1,1,modelTopCapsule);
	/// extract event name for debugging
	//gateWayRoot.println();
	dbgProtocol=gateWayRoot.getAllNestedPackage().selectOne(p|p.name="ExtInterface").packagedElement.first();
	/// get base protocol to get access to rtBound message
	rtsBaseCommProtocol=UMLRTSLIB.getAllNestedPackage().select(p|p.name="UMLRTBaseCommProtocol");
	var dbgProtocolP=gateWayRoot.getAllNestedPackage().select(p|p.name="ExtInterface");
	dbgVarChangeEvent=dbgProtocolP.packagedElement.first().selectOne(e|e.type.name="CallEvent" and e.`operation`.name="dbgVarChange");
	dbgExecEvent=dbgProtocolP.packagedElement.first().selectOne(e|e.type.name="CallEvent" and e.`operation`.name="dbgExec");
	dbgSetBreakPointEvent=dbgProtocolP.packagedElement.first().selectOne(e|e.type.name="CallEvent" and e.`operation`.name="dbgSetBreakPoint");
	dbgRemBreakPointEvent=dbgProtocolP.packagedElement.first().selectOne(e|e.type.name="CallEvent" and e.`operation`.name="dbgRemBreakPoint");
	dbgViewBreakPointsEvent=dbgProtocolP.packagedElement.first().selectOne(e|e.type.name="CallEvent" and e.`operation`.name="dbgViewBreakPoints");
	dbgSetExecModeEvent=dbgProtocolP.packagedElement.first().selectOne(e|e.type.name="CallEvent" and e.`operation`.name="dbgSetExecMode");
    //.... add setexecmode command
	anyEvent=dbgProtocolP.packagedElement.first().selectOne(e|e.type.name="AnyReceiveEvent");	
	rtBound=rtsBaseCommProtocol.packagedElement.first().selectOne(e|e.type.name="CallEvent" and e.`operation`.name="rtBound");
}
operation  refineStructure(){
	/// add debug port to all capsules
	//"refineStructure is started".println();
	var gateWayRoot=DebuggingAgent!Package.all.select(c|c.type.name="Model").first();
	//var gateWayCapsule=gateWayRoot.getAllOwnedClasses().selectOne(c|c.name="GateWay");
	//dbgProtocol=gateWayRoot.getAllNestedPackage().selectOne(p|p.name="ExtInterface").packagedElement.first();
	//allClasses.addPortToCapsules(debugPortName,dbgProtocol,true,1,1,"SAP");
	for (c in allClasses)
		if (c.getStateMachine().isDefined()){
		    //  add method to handle recalling messages
		    activePorts=c.getStateMachine().getAllRegions().getAllTransitions().getActivePorts();
		    c.addRecallAllMsgMethod(activePorts);
			//c.println("capsule:");
			c.addPortToCapsules(debugPortName,dbgProtocol,true,1,1,"SAP");
			//"Add method to view attributes: ".concat(c.name).println("refineStructure: ");
			c.addVarWatchMethod();
			//"Add method to change attributes: ".concat(c.name).println("refineStructure: ");
			c.addVarChangeMethod();
			//"Add required attributes: ".concat(c.name).println("refineStructure: ");
			c.addRequiredAttributes();
			//111--
			//// add deatil tracing method and apply it on all states and transtions
			c.addTracingRequiredHeader();
			c.addSendEventMethod();
			//// add if guard to all stable state
			//// generate the code for checking the condition in entry and exit
			//// 
			
		}
	
}
operation  refineForSRO(SM:UMLRTModel!StateMachine)  {
	var allTransions=SM.getAllRegions().getAllTransitions();
	var ownerCapsule=SM.Owner;
	//currentCapsuleName=SM.Owner.name;
	activePorts=allTransions.getActivePorts();
	//activePorts.println();
	//SM.println();
	for (t in allTransions){
		//t.println("before getting trans data");
		transitionsData.add(t.transData());
		//t.println("Transition Name: ");
		if ((Set{"StoS","StoC","CtoC","Ctos"}).includes(t.transType()))
			//t.events().println("Rule1");
			t.applyRule1(ownerCapsule);
		else if ((Set{"StoP","CtoP"}).includes(t.transType()))
			//t.events().println("Rule2");
			t.applyRule2(ownerCapsule);
		else if ((Set{"PtoS","PtoC"}).includes(t.transType()))
			//t.events().println("Rule3");
			t.applyRule3(ownerCapsule);
		else if ((Set{"PtoP"}).includes(t.transType()))
			//t.events().println("Rule4");
			t.applyRule4(ownerCapsule);
		}
	/*if (c.getStateMachine().isDefined()){
		c.println();
		c.getStateMachine().println();
		"Add send event  method: ".concat(c.name).println("Debug Level 0: ");
		c.addSendEventMethod();
		}*/
		//transitionsData.println();
		var initTrans=SM.getIntialTransition();
		//initTrans.addDebugInitCode(transitionsData);
		initTrans.addDebugConnectionState(SM);
		//generateDebugIntializationCode();
}


//modelroot.remDanglingUMLRTStereotypes();
////add attributes that are required for debugging (include an attribute to save the current variable values, a boolean attribute to specify to run in debug or normal mode
//// a port to connect debugger, a timer to move the code to next steps if debugger is off or overloaded)




