<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_cJ2kYDJjEeeIZIaasUdwVA" name="PingPong">
    <eAnnotations xmi:id="_cJ2kYTJjEeeIZIaasUdwVA" source="http://www.eclipse.org/papyrus-rt/language/1.0.0">
      <details xmi:id="_cJ2kYjJjEeeIZIaasUdwVA" key="language" value="umlrt-cpp"/>
    </eAnnotations>
    <eAnnotations xmi:id="_BOJhMDKKEeeIZIaasUdwVA" source="UMLRT_Default_top">
      <details xmi:id="_BOJhMTKKEeeIZIaasUdwVA" key="top_name" value="Debug__Top"/>
    </eAnnotations>
    <packageImport xmi:id="_423RQIEZEee5n5CT5zM8Ow">
      <importedPackage xmi:type="uml:Model" href="../CommGateWay/model.uml#_MZw7AAdxEeadtKuU2t6fMg"/>
    </packageImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_-IyvEDJjEeeIZIaasUdwVA" name="PingPongProtocol">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_-CQpQDJjEeeIZIaasUdwVA" name="PingPongProtocol">
        <interfaceRealization xmi:id="_-J_o8TJjEeeIZIaasUdwVA" client="_-CQpQDJjEeeIZIaasUdwVA" supplier="_-J138DJjEeeIZIaasUdwVA" contract="_-J138DJjEeeIZIaasUdwVA"/>
        <interfaceRealization xmi:id="_-KSj4zJjEeeIZIaasUdwVA" client="_-CQpQDJjEeeIZIaasUdwVA" supplier="_-KSj4TJjEeeIZIaasUdwVA" contract="_-KSj4TJjEeeIZIaasUdwVA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_-J138DJjEeeIZIaasUdwVA" name="PingPongProtocol">
        <ownedOperation xmi:id="_SFv0oDKDEeeIZIaasUdwVA" name="ping"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_-KIy4DJjEeeIZIaasUdwVA" name="PingPongProtocol~">
        <ownedOperation xmi:id="_gOJSsDKDEeeIZIaasUdwVA" name="pong"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_-KIy4jJjEeeIZIaasUdwVA" client="_-CQpQDJjEeeIZIaasUdwVA" supplier="_-KIy4DJjEeeIZIaasUdwVA"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_-KSj4DJjEeeIZIaasUdwVA" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_-KSj4TJjEeeIZIaasUdwVA" name="PingPongProtocolIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_-Kbt0DJjEeeIZIaasUdwVA" client="_-CQpQDJjEeeIZIaasUdwVA" supplier="_-KSj4TJjEeeIZIaasUdwVA"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_SHYzYDKDEeeIZIaasUdwVA" operation="_SFv0oDKDEeeIZIaasUdwVA"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_gOl-oDKDEeeIZIaasUdwVA" operation="_gOJSsDKDEeeIZIaasUdwVA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_IYQmMDKEEeeIZIaasUdwVA" name="Pinger" classifierBehavior="_LUEakDKFEeeIZIaasUdwVA" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_uF7scDKEEeeIZIaasUdwVA" name="pingPort" visibility="public" type="_-CQpQDJjEeeIZIaasUdwVA" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_BGFjoDKFEeeIZIaasUdwVA" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ipVIEH34Eee8vPff7YDTwQ" name="startPort" visibility="public" type="_dglsoH34Eee8vPff7YDTwQ" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_F7fGwH38Eee8vPff7YDTwQ" name="pingerTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_wcqYQH38Eee8vPff7YDTwQ" name="pingsSent" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_0n-iIH38Eee8vPff7YDTwQ"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_43_5sIEZEee5n5CT5zM8Ow" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_44IckYEZEee5n5CT5zM8Ow" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_44IckoEZEee5n5CT5zM8Ow" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_45AmUIEZEee5n5CT5zM8Ow" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_45AmUYEZEee5n5CT5zM8Ow" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_45BNYIEZEee5n5CT5zM8Ow" name="Debug__event">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_45hjsIEZEee5n5CT5zM8Ow" name="Debug__SRO">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_LUEakDKFEeeIZIaasUdwVA" name="StateMachine" isReentrant="false">
        <region xmi:id="_LWT2QDKFEeeIZIaasUdwVA" name="Region">
          <transition xmi:id="_LXpTADKFEeeIZIaasUdwVA" name="Initial" source="_5MOdQIEZEee5n5CT5zM8Ow" target="_n1-PQH38Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5NK4cIEZEee5n5CT5zM8Ow" name="Initial__174">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;WAITING TO START&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_pmpBMDKFEeeIZIaasUdwVA" name="onPong" source="_5NMtoIEZEee5n5CT5zM8Ow" target="_mQKSkH39Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_PpG2QDKHEeeIZIaasUdwVA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.show(&quot;pong received.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::onPong&quot;,(char *)&quot;Debug__Path__onPong&quot;,(char *)&quot;ThreePingsSent?&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_8vqa8H38Eee8vPff7YDTwQ" name="startSignal" source="_5K_HIIEZEee5n5CT5zM8Ow" target="_LXWYEDKFEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_k9UxsH39Eee8vPff7YDTwQ">
              <language>C++</language>
              <body>pingPort.ping().send();&#xD;
this->pingsSent++;&#xD;
log.show(&quot;ping message sent.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::startSignal&quot;,(char *)&quot;Debug__Path__startSignal&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_ylW4MH3-Eee8vPff7YDTwQ" name="keepPlaying" source="_5X13YIEZEee5n5CT5zM8Ow" target="_66GgIH3_Eee8vPff7YDTwQ">
            <ownedRule xmi:id="_7d170H3-Eee8vPff7YDTwQ">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_-icVQH3-Eee8vPff7YDTwQ">
                <language>C++</language>
                <body>bool sendMorePings = this->pingsSent &lt; 3;&#xD;
return sendMorePings;</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_3dtRwH3_Eee8vPff7YDTwQ">
              <language>C++</language>
              <body>pingerTimer.informIn(UMLRTTimespec(1,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::keepPlaying&quot;,(char *)&quot;Debug__Path__keepPlaying&quot;,(char *)&quot;WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_VhaLYH3_Eee8vPff7YDTwQ" name="endOfRound" source="_5W5cMIEZEee5n5CT5zM8Ow" target="_n1-PQH38Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ebkC8H3_Eee8vPff7YDTwQ">
              <language>C++</language>
              <body>this->pingsSent = 0;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::endOfRound&quot;,(char *)&quot;Debug__Path__endOfRound&quot;,(char *)&quot;WAITING TO START&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_HIvnQH4AEee8vPff7YDTwQ" name="timeout" source="_5Y3LEIEZEee5n5CT5zM8Ow" target="_LXWYEDKFEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_MG9NsH4AEee8vPff7YDTwQ">
              <language>C++</language>
              <body>pingPort.ping().send();&#xD;
this->pingsSent++;&#xD;
log.show(&quot;ping message sent.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::timeout&quot;,(char *)&quot;Debug__Path__timeout&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5LSCEYEZEee5n5CT5zM8Ow" name="Debug__startSignal" source="_n1-PQH38Eee8vPff7YDTwQ" target="_5K_HIIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5LT3QIEZEee5n5CT5zM8Ow" name="Debug__startSignal__125">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__startSignal&quot;,(char *)&quot;WAITING TO START&quot;,(char *)&quot;Debug__Path__startSignal&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
            <trigger xmi:id="_-470kH38Eee8vPff7YDTwQ" event="_FbDakH35Eee8vPff7YDTwQ" port="_ipVIEH34Eee8vPff7YDTwQ"/>
          </transition>
          <transition xmi:id="_5LWTgIEZEee5n5CT5zM8Ow" name="Debug__startSignal__S" guard="_5LW6kYEZEee5n5CT5zM8Ow" source="_5K_HIIEZEee5n5CT5zM8Ow" target="_5LIREYEZEee5n5CT5zM8Ow">
            <ownedRule xmi:id="_5LW6kYEZEee5n5CT5zM8Ow" name="Debug__GuardstartSignal">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_5LW6kIEZEee5n5CT5zM8Ow" name="Debug__GuardstartSignal">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;WAITING TO START&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5LXhoIEZEee5n5CT5zM8Ow" name="Debug__startSignal__S__127">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__startSignal__S&quot;,(char *)&quot;Debug__Path__startSignal&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5LYvwIEZEee5n5CT5zM8Ow" name="Debug__startSignal__E" source="_5LNJkYEZEee5n5CT5zM8Ow" target="_LXWYEDKFEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5LZW0IEZEee5n5CT5zM8Ow" name="Debug__startSignal__E__128">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__startSignal__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5Lak8IEZEee5n5CT5zM8Ow" name="Debug__startSignal__dbg__varChange" source="_5LDYkYEZEee5n5CT5zM8Ow" target="_5LDYkYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5LbMAYEZEee5n5CT5zM8Ow" name="Debug__startSignal__dbg__varChange__130">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_5LbMAIEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_5LbzEIEZEee5n5CT5zM8Ow" name="Debug__startSignal__dbg__setBreakPoint" source="_5LDYkYEZEee5n5CT5zM8Ow" target="_5LDYkYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5LbzEoEZEee5n5CT5zM8Ow" name="Debug__startSignal__dbg__setBreakPoint__131">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5LbzEYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5LdBMIEZEee5n5CT5zM8Ow" name="Debug__startSignal__dbg__remBreakPoint" source="_5LDYkYEZEee5n5CT5zM8Ow" target="_5LDYkYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5LdBMoEZEee5n5CT5zM8Ow" name="Debug__startSignal__dbg__remBreakPoint__132">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5LdBMYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5LdBM4EZEee5n5CT5zM8Ow" name="Debug__startSignal__dbg__viewBreakPoints" source="_5LDYkYEZEee5n5CT5zM8Ow" target="_5LDYkYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5LdoQYEZEee5n5CT5zM8Ow" name="Debug__startSignal__dbg__viewBreakPoints__133">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5LdoQIEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5LdoQoEZEee5n5CT5zM8Ow" name="Debug__startSignal__dbg__dbgSetExecMode" source="_5LDYkYEZEee5n5CT5zM8Ow" target="_5LDYkYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5LdoRIEZEee5n5CT5zM8Ow" name="Debug__startSignal__dbg__dbgSetExecMode__134">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_5LdoQ4EZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5LePUIEZEee5n5CT5zM8Ow" name="Debug__startSignal__dbg__dbgDeferMsg" source="_5LDYkYEZEee5n5CT5zM8Ow" target="_5LDYkYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5LfdcYEZEee5n5CT5zM8Ow" name="Debug__startSignal__dbg__dbgDeferMsg__135">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5LePUYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_uF7scDKEEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
            <trigger xmi:id="_5LfdcIEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_ipVIEH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_5MgxIYEZEee5n5CT5zM8Ow" name="Debug__Initial" source="_5aPrIIEZEee5n5CT5zM8Ow" target="_5MOdQIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5MgxIoEZEee5n5CT5zM8Ow" name="Debug__Initial__151">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;WAITING FOR TIMER&quot;,&quot;timeout&quot;,&quot;PLAYING&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPing&quot;,&quot;WAITING FOR TIMER&quot;,&quot;ping&quot;,&quot;PingPongProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePongsSent?&quot;,&quot;keepPlaying&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;WAITING TO START&quot;,&quot;startSignal&quot;,&quot;PLAYING&quot;,&quot;start&quot;,&quot;StartProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePongsSent?&quot;,&quot;endOfRound&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;WAITING FOR TIMER&quot;,&quot;timeout&quot;,&quot;ThreePongsSent?&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePingsSent?&quot;,&quot;endOfRound&quot;,&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePingsSent?&quot;,&quot;keepPlaying&quot;,&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPong&quot;,&quot;ThreePingsSent?&quot;,&quot;pong&quot;,&quot;PingPongProtocol&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_5aVKsIEZEee5n5CT5zM8Ow" name="ConnectionEstablished" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
            </trigger>
          </transition>
          <transition xmi:id="_5MhYMIEZEee5n5CT5zM8Ow" name="Debug__Initial__S" guard="_5Mh_QYEZEee5n5CT5zM8Ow" source="_5MOdQIEZEee5n5CT5zM8Ow" target="_5MXnMYEZEee5n5CT5zM8Ow">
            <ownedRule xmi:id="_5Mh_QYEZEee5n5CT5zM8Ow" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_5Mh_QIEZEee5n5CT5zM8Ow" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo2&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5MimUIEZEee5n5CT5zM8Ow" name="Debug__Initial__S__153">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5MjNYIEZEee5n5CT5zM8Ow" name="Debug__Initial__E" source="_5Mb4oYEZEee5n5CT5zM8Ow" target="_n1-PQH38Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5MjNYYEZEee5n5CT5zM8Ow" name="Debug__Initial__E__154">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;WAITING TO START&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5MkbgIEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__varChange" source="_5MTVwIEZEee5n5CT5zM8Ow" target="_5MTVwIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5MkbgoEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__varChange__156">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_5MkbgYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_5MlpoIEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__setBreakPoint" source="_5MTVwIEZEee5n5CT5zM8Ow" target="_5MTVwIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5MlpooEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__setBreakPoint__157">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5MlpoYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5MmQsIEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__remBreakPoint" source="_5MTVwIEZEee5n5CT5zM8Ow" target="_5MTVwIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5MmQsoEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__remBreakPoint__158">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5MmQsYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5MmQs4EZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__viewBreakPoints" source="_5MTVwIEZEee5n5CT5zM8Ow" target="_5MTVwIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5Mm3wIEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__viewBreakPoints__159">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5MmQtIEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5Mm3wYEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__dbgSetExecMode" source="_5MTVwIEZEee5n5CT5zM8Ow" target="_5MTVwIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5Mne0IEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__dbgSetExecMode__160">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_5Mm3woEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5Mne0YEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__dbgDeferMsg" source="_5MTVwIEZEee5n5CT5zM8Ow" target="_5MTVwIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5MoF4YEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__dbgDeferMsg__161">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5Mne0oEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_uF7scDKEEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
            <trigger xmi:id="_5MoF4IEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_ipVIEH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_5WLDcYEZEee5n5CT5zM8Ow" name="Debug__onPong" source="_LXWYEDKFEeeIZIaasUdwVA" target="_5NMtoIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5WLDcoEZEee5n5CT5zM8Ow" name="Debug__onPong__176">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__onPong&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;Debug__Path__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
            <trigger xmi:id="_97SwsDKGEeeIZIaasUdwVA" event="_gOl-oDKDEeeIZIaasUdwVA" port="_uF7scDKEEeeIZIaasUdwVA"/>
          </transition>
          <transition xmi:id="_5WMRkIEZEee5n5CT5zM8Ow" name="Debug__onPong__S" guard="_5WM4oYEZEee5n5CT5zM8Ow" source="_5NMtoIEZEee5n5CT5zM8Ow" target="_5N2N4IEZEee5n5CT5zM8Ow">
            <ownedRule xmi:id="_5WM4oYEZEee5n5CT5zM8Ow" name="Debug__GuardonPong">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_5WM4oIEZEee5n5CT5zM8Ow" name="Debug__GuardonPong">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5WNfsIEZEee5n5CT5zM8Ow" name="Debug__onPong__S__178">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__onPong__S&quot;,(char *)&quot;Debug__Path__onPong&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5WOGwIEZEee5n5CT5zM8Ow" name="Debug__onPong__E" source="_5OEQUIEZEee5n5CT5zM8Ow" target="_mQKSkH39Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5WOGwYEZEee5n5CT5zM8Ow" name="Debug__onPong__E__179">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__onPong__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;ThreePingsSent?&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5WP78IEZEee5n5CT5zM8Ow" name="Debug__onPong__dbg__varChange" source="_5NdMUIEZEee5n5CT5zM8Ow" target="_5NdMUIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5WP78oEZEee5n5CT5zM8Ow" name="Debug__onPong__dbg__varChange__181">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_5WP78YEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_5WQjAIEZEee5n5CT5zM8Ow" name="Debug__onPong__dbg__setBreakPoint" source="_5NdMUIEZEee5n5CT5zM8Ow" target="_5NdMUIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5WQjAoEZEee5n5CT5zM8Ow" name="Debug__onPong__dbg__setBreakPoint__182">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5WQjAYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5WRKEIEZEee5n5CT5zM8Ow" name="Debug__onPong__dbg__remBreakPoint" source="_5NdMUIEZEee5n5CT5zM8Ow" target="_5NdMUIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5WRKEoEZEee5n5CT5zM8Ow" name="Debug__onPong__dbg__remBreakPoint__183">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5WRKEYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5WRKE4EZEee5n5CT5zM8Ow" name="Debug__onPong__dbg__viewBreakPoints" source="_5NdMUIEZEee5n5CT5zM8Ow" target="_5NdMUIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5WRxIIEZEee5n5CT5zM8Ow" name="Debug__onPong__dbg__viewBreakPoints__184">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5WRKFIEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5WSYMIEZEee5n5CT5zM8Ow" name="Debug__onPong__dbg__dbgSetExecMode" source="_5NdMUIEZEee5n5CT5zM8Ow" target="_5NdMUIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5WS_QIEZEee5n5CT5zM8Ow" name="Debug__onPong__dbg__dbgSetExecMode__185">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_5WSYMYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5WS_QYEZEee5n5CT5zM8Ow" name="Debug__onPong__dbg__dbgDeferMsg" source="_5NdMUIEZEee5n5CT5zM8Ow" target="_5NdMUIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5WTmUYEZEee5n5CT5zM8Ow" name="Debug__onPong__dbg__dbgDeferMsg__186">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5WS_QoEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_uF7scDKEEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
            <trigger xmi:id="_5WTmUIEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_ipVIEH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_5XOMUYEZEee5n5CT5zM8Ow" name="Debug__endOfRound" guard="_IeWE4IBIEeeUZo7DI-sn-Q" source="_mQKSkH39Eee8vPff7YDTwQ" target="_5W5cMIEZEee5n5CT5zM8Ow">
            <ownedRule xmi:id="_IeWE4IBIEeeUZo7DI-sn-Q">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_PBawUIBIEeeUZo7DI-sn-Q">
                <language>C++</language>
                <body>bool threePingsSent = this->pingsSent > 2;&#xD;
return threePingsSent;</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5XOMUoEZEee5n5CT5zM8Ow" name="Debug__endOfRound__197">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__endOfRound&quot;,(char *)&quot;ThreePingsSent?&quot;,(char *)&quot;Debug__Path__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5XPacIEZEee5n5CT5zM8Ow" name="Debug__endOfRound__S" guard="_5XPacoEZEee5n5CT5zM8Ow" source="_5W5cMIEZEee5n5CT5zM8Ow" target="_5XCmIYEZEee5n5CT5zM8Ow">
            <ownedRule xmi:id="_5XPacoEZEee5n5CT5zM8Ow" name="Debug__GuardendOfRound">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_5XPacYEZEee5n5CT5zM8Ow" name="Debug__GuardendOfRound">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;ThreePingsSent?&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5XQBgIEZEee5n5CT5zM8Ow" name="Debug__endOfRound__S__199">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__endOfRound__S&quot;,(char *)&quot;Debug__Path__endOfRound&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5XQokIEZEee5n5CT5zM8Ow" name="Debug__endOfRound__E" source="_5XJT0IEZEee5n5CT5zM8Ow" target="_n1-PQH38Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5XQokYEZEee5n5CT5zM8Ow" name="Debug__endOfRound__E__200">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__endOfRound__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;WAITING TO START&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5XR2sIEZEee5n5CT5zM8Ow" name="Debug__endOfRound__dbg__varChange" source="_5W-UsYEZEee5n5CT5zM8Ow" target="_5W-UsYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5XR2soEZEee5n5CT5zM8Ow" name="Debug__endOfRound__dbg__varChange__202">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_5XR2sYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_5XSdwIEZEee5n5CT5zM8Ow" name="Debug__endOfRound__dbg__setBreakPoint" source="_5W-UsYEZEee5n5CT5zM8Ow" target="_5W-UsYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5XSdwoEZEee5n5CT5zM8Ow" name="Debug__endOfRound__dbg__setBreakPoint__203">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5XSdwYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5XSdw4EZEee5n5CT5zM8Ow" name="Debug__endOfRound__dbg__remBreakPoint" source="_5W-UsYEZEee5n5CT5zM8Ow" target="_5W-UsYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5XSdxYEZEee5n5CT5zM8Ow" name="Debug__endOfRound__dbg__remBreakPoint__204">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5XSdxIEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5XTE0IEZEee5n5CT5zM8Ow" name="Debug__endOfRound__dbg__viewBreakPoints" source="_5W-UsYEZEee5n5CT5zM8Ow" target="_5W-UsYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5XTE0oEZEee5n5CT5zM8Ow" name="Debug__endOfRound__dbg__viewBreakPoints__205">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5XTE0YEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5XTE04EZEee5n5CT5zM8Ow" name="Debug__endOfRound__dbg__dbgSetExecMode" source="_5W-UsYEZEee5n5CT5zM8Ow" target="_5W-UsYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5XTr4IEZEee5n5CT5zM8Ow" name="Debug__endOfRound__dbg__dbgSetExecMode__206">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_5XTE1IEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5XTr4YEZEee5n5CT5zM8Ow" name="Debug__endOfRound__dbg__dbgDeferMsg" source="_5W-UsYEZEee5n5CT5zM8Ow" target="_5W-UsYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5XTr5IEZEee5n5CT5zM8Ow" name="Debug__endOfRound__dbg__dbgDeferMsg__207">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5XTr4oEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_uF7scDKEEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
            <trigger xmi:id="_5XTr44EZEee5n5CT5zM8Ow" name="Debug__MSG" port="_ipVIEH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_5YKAcYEZEee5n5CT5zM8Ow" name="Debug__keepPlaying" source="_mQKSkH39Eee8vPff7YDTwQ" target="_5X13YIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5YKngIEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__220">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__keepPlaying&quot;,(char *)&quot;ThreePingsSent?&quot;,(char *)&quot;Debug__Path__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5YLOkIEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__S" guard="_5YLOkoEZEee5n5CT5zM8Ow" source="_5X13YIEZEee5n5CT5zM8Ow" target="_5YAPcYEZEee5n5CT5zM8Ow">
            <ownedRule xmi:id="_5YLOkoEZEee5n5CT5zM8Ow" name="Debug__GuardkeepPlaying">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_5YLOkYEZEee5n5CT5zM8Ow" name="Debug__GuardkeepPlaying">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;ThreePingsSent?&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5YL1oIEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__S__222">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__keepPlaying__S&quot;,(char *)&quot;Debug__Path__keepPlaying&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5YNDwIEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__E" source="_5YFH8YEZEee5n5CT5zM8Ow" target="_66GgIH3_Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5YNDwYEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__E__223">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__keepPlaying__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5YOR4IEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__dbg__varChange" source="_5X6v4YEZEee5n5CT5zM8Ow" target="_5X6v4YEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5YOR4oEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__dbg__varChange__225">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_5YOR4YEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_5YO48IEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__dbg__setBreakPoint" source="_5X6v4YEZEee5n5CT5zM8Ow" target="_5X6v4YEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5YO48oEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__dbg__setBreakPoint__226">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5YO48YEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5YPgAIEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__dbg__remBreakPoint" source="_5X6v4YEZEee5n5CT5zM8Ow" target="_5X6v4YEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5YPgAoEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__dbg__remBreakPoint__227">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5YPgAYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5YQHEIEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__dbg__viewBreakPoints" source="_5X6v4YEZEee5n5CT5zM8Ow" target="_5X6v4YEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5YQuIYEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__dbg__viewBreakPoints__228">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5YQuIIEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5YRVMIEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__dbg__dbgSetExecMode" source="_5X6v4YEZEee5n5CT5zM8Ow" target="_5X6v4YEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5YRVMoEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__dbg__dbgSetExecMode__229">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_5YRVMYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5YR8QIEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__dbg__dbgDeferMsg" source="_5X6v4YEZEee5n5CT5zM8Ow" target="_5X6v4YEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5YR8Q4EZEee5n5CT5zM8Ow" name="Debug__keepPlaying__dbg__dbgDeferMsg__230">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5YR8QYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_uF7scDKEEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
            <trigger xmi:id="_5YR8QoEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_ipVIEH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_5ZMiQIEZEee5n5CT5zM8Ow" name="Debug__timeout" source="_66GgIH3_Eee8vPff7YDTwQ" target="_5Y3LEIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5ZNJUIEZEee5n5CT5zM8Ow" name="Debug__timeout__243">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__timeout&quot;,(char *)&quot;WAITING FOR TIMER&quot;,(char *)&quot;Debug__Path__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
            <trigger xmi:id="_IZk9AH4AEee8vPff7YDTwQ" port="_F7fGwH38Eee8vPff7YDTwQ">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5ZOXcIEZEee5n5CT5zM8Ow" name="Debug__timeout__S" guard="_5ZOXcoEZEee5n5CT5zM8Ow" source="_5Y3LEIEZEee5n5CT5zM8Ow" target="_5ZCxQIEZEee5n5CT5zM8Ow">
            <ownedRule xmi:id="_5ZOXcoEZEee5n5CT5zM8Ow" name="Debug__Guardtimeout">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_5ZOXcYEZEee5n5CT5zM8Ow" name="Debug__Guardtimeout">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5ZO-gIEZEee5n5CT5zM8Ow" name="Debug__timeout__S__245">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__timeout__S&quot;,(char *)&quot;Debug__Path__timeout&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5ZPlkIEZEee5n5CT5zM8Ow" name="Debug__timeout__E" source="_5ZHpwYEZEee5n5CT5zM8Ow" target="_LXWYEDKFEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5ZPlkYEZEee5n5CT5zM8Ow" name="Debug__timeout__E__246">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__timeout__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5ZQzsIEZEee5n5CT5zM8Ow" name="Debug__timeout__dbg__varChange" source="_5Y94wIEZEee5n5CT5zM8Ow" target="_5Y94wIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5ZSB0IEZEee5n5CT5zM8Ow" name="Debug__timeout__dbg__varChange__248">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_5ZRawIEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_5ZSB0YEZEee5n5CT5zM8Ow" name="Debug__timeout__dbg__setBreakPoint" source="_5Y94wIEZEee5n5CT5zM8Ow" target="_5Y94wIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5ZSo4IEZEee5n5CT5zM8Ow" name="Debug__timeout__dbg__setBreakPoint__249">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5ZSB0oEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5ZSo4YEZEee5n5CT5zM8Ow" name="Debug__timeout__dbg__remBreakPoint" source="_5Y94wIEZEee5n5CT5zM8Ow" target="_5Y94wIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5ZSo44EZEee5n5CT5zM8Ow" name="Debug__timeout__dbg__remBreakPoint__250">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5ZSo4oEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5ZTP8IEZEee5n5CT5zM8Ow" name="Debug__timeout__dbg__viewBreakPoints" source="_5Y94wIEZEee5n5CT5zM8Ow" target="_5Y94wIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5ZTP8oEZEee5n5CT5zM8Ow" name="Debug__timeout__dbg__viewBreakPoints__251">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5ZTP8YEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5ZTP84EZEee5n5CT5zM8Ow" name="Debug__timeout__dbg__dbgSetExecMode" source="_5Y94wIEZEee5n5CT5zM8Ow" target="_5Y94wIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5ZTP9YEZEee5n5CT5zM8Ow" name="Debug__timeout__dbg__dbgSetExecMode__252">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_5ZTP9IEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_43_5sIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5ZT3AIEZEee5n5CT5zM8Ow" name="Debug__timeout__dbg__dbgDeferMsg" source="_5Y94wIEZEee5n5CT5zM8Ow" target="_5Y94wIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5ZT3A4EZEee5n5CT5zM8Ow" name="Debug__timeout__dbg__dbgDeferMsg__253">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5ZT3AYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_uF7scDKEEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
            <trigger xmi:id="_5ZT3AoEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_ipVIEH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_5aUjoIEZEee5n5CT5zM8Ow" name="Debug__InitDebug" source="_LWmxMDKFEeeIZIaasUdwVA" target="_5aPrIIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5aUjoYEZEee5n5CT5zM8Ow" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_LWmxMDKFEeeIZIaasUdwVA" name="Pseudo2"/>
          <subvertex xmi:type="uml:State" xmi:id="_LXWYEDKFEeeIZIaasUdwVA" name="PLAYING">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5agw4IEZEee5n5CT5zM8Ow" name="PLAYING__272">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5agw4YEZEee5n5CT5zM8Ow" name="PLAYING__273">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_n1-PQH38Eee8vPff7YDTwQ" name="WAITING TO START">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5aZcIIEZEee5n5CT5zM8Ow" name="WAITING TO START__268">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::WAITING TO START&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5aeUoIEZEee5n5CT5zM8Ow" name="WAITING TO START__269">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::WAITING TO START&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_mQKSkH39Eee8vPff7YDTwQ" name="ThreePingsSent?" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_66GgIH3_Eee8vPff7YDTwQ" name="WAITING FOR TIMER">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5afiwIEZEee5n5CT5zM8Ow" name="WAITING FOR TIMER__270">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5agJ0IEZEee5n5CT5zM8Ow" name="WAITING FOR TIMER__271">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_5K_HIIEZEee5n5CT5zM8Ow" name="Debug__Path__startSignal" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_5LDYkYEZEee5n5CT5zM8Ow" name="Debug__C__startSignal">
            <connectionPoint xmi:id="_5LIREYEZEee5n5CT5zM8Ow" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_5LNJkYEZEee5n5CT5zM8Ow" name="ex" kind="exitPoint"/>
            <region xmi:id="_5LDYkoEZEee5n5CT5zM8Ow" name="Region1">
              <transition xmi:id="_5Lp1gYEZEee5n5CT5zM8Ow" name="Debug__init__trans__startSignal" source="_5LIREYEZEee5n5CT5zM8Ow" target="_5LlkEYEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5MC3EIEZEee5n5CT5zM8Ow" name="Debug__init__trans__startSignal__141">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__init__trans__startSignal&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__WAITING TO START&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_5Lp1goEZEee5n5CT5zM8Ow" name="Debug__Ex__WAITING TO START" source="_5LlkEYEZEee5n5CT5zM8Ow" target="_5LmLIIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5MEFMIEZEee5n5CT5zM8Ow" name="Debug__Ex__WAITING TO START__143">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__Ex__WAITING TO START&quot;,(char *)&quot;Debug__B__Ex__WAITING TO START&quot;,(char *)&quot;Debug__B__Ac__startSignal&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5LqckIEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_43_5sIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5LrDoIEZEee5n5CT5zM8Ow" name="Debug__AC__startSignal" source="_5LmLIIEZEee5n5CT5zM8Ow" target="_5LnZQIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5LrDooEZEee5n5CT5zM8Ow" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>pingPort.ping().send();&#xD;
this->pingsSent++;&#xD;
log.show(&quot;ping message sent.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__AC__startSignal&quot;,(char *)&quot;Debug__B__Ac__startSignal&quot;,(char *)&quot;Debug__A__Ac__startSignal&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5LrDoYEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_43_5sIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5LrDo4EZEee5n5CT5zM8Ow" name="Debug__En__PLAYING" source="_5LnZQIEZEee5n5CT5zM8Ow" target="_5LpOcIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5MF6YIEZEee5n5CT5zM8Ow" name="Debug__En__PLAYING__146">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__startSignal&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5LrDpIEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_43_5sIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5LrqsIEZEee5n5CT5zM8Ow" name="Debug__end__trans__startSignal" source="_5LpOcIEZEee5n5CT5zM8Ow" target="_5LNJkYEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5MHIgIEZEee5n5CT5zM8Ow" name="Debug__end__trans__startSignal__148">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__end__trans__startSignal&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_5LrqsYEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_43_5sIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_5LlkEYEZEee5n5CT5zM8Ow" name="Debug__B__Ex__WAITING TO START">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5LlkEoEZEee5n5CT5zM8Ow" name="Debug__B__Ex__WAITING TO START">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__B__Ex__WAITING TO START&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5Lv8IYEZEee5n5CT5zM8Ow" name="Debug__B__Ex__WAITING TO START__136">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__B__Ex__WAITING TO START&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5LmLIIEZEee5n5CT5zM8Ow" name="Debug__B__Ac__startSignal">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5LmLIYEZEee5n5CT5zM8Ow" name="Debug__B__Ac__startSignal">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;startSignal&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__B__Ac__startSignal&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5L1bsYEZEee5n5CT5zM8Ow" name="Debug__B__Ac__startSignal__137">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__B__Ac__startSignal&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5LnZQIEZEee5n5CT5zM8Ow" name="Debug__A__Ac__startSignal">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5LnZQYEZEee5n5CT5zM8Ow" name="Debug__A__Ac__startSignal">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;startSignal&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__A__Ac__startSignal&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5L8JYIEZEee5n5CT5zM8Ow" name="Debug__A__Ac__startSignal__138">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__A__Ac__startSignal&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5LpOcIEZEee5n5CT5zM8Ow" name="Debug__A__En__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5Lp1gIEZEee5n5CT5zM8Ow" name="Debug__A__En__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5L8wcIEZEee5n5CT5zM8Ow" name="Debug__A__En__PLAYING__139">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_5MOdQIEZEee5n5CT5zM8Ow" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_5MTVwIEZEee5n5CT5zM8Ow" name="Debug__C__Initial">
            <connectionPoint xmi:id="_5MXnMYEZEee5n5CT5zM8Ow" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_5Mb4oYEZEee5n5CT5zM8Ow" name="ex" kind="exitPoint"/>
            <region xmi:id="_5MTVwYEZEee5n5CT5zM8Ow" name="Region1">
              <transition xmi:id="_5MuMgIEZEee5n5CT5zM8Ow" name="Debug__init__trans__Initial" source="_5MXnMYEZEee5n5CT5zM8Ow" target="_5Ms-YIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5NEx0IEZEee5n5CT5zM8Ow" name="Debug__init__trans__Initial__166">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_5MuMgYEZEee5n5CT5zM8Ow" name="Debug__Ac__Initial" source="_5Ms-YIEZEee5n5CT5zM8Ow" target="_5Ms-YoEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5NF_8IEZEee5n5CT5zM8Ow" name="Debug__Ac__Initial__168">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5MuMgoEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_43_5sIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5MuMg4EZEee5n5CT5zM8Ow" name="Debug__En__WAITING TO START" source="_5Ms-YoEZEee5n5CT5zM8Ow" target="_5MtlcYEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5NIcMIEZEee5n5CT5zM8Ow" name="Debug__En__WAITING TO START__170">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__En__WAITING TO START&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5MuzkIEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_43_5sIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5MuzkYEZEee5n5CT5zM8Ow" name="Debug__end__trans__Initial" source="_5MtlcYEZEee5n5CT5zM8Ow" target="_5Mb4oYEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5NKRYIEZEee5n5CT5zM8Ow" name="Debug__end__trans__Initial__172">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_5MuzkoEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_43_5sIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_5Ms-YIEZEee5n5CT5zM8Ow" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5Ms-YYEZEee5n5CT5zM8Ow" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5MzsEIEZEee5n5CT5zM8Ow" name="Debug__B__Ac__Initial__162">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5Ms-YoEZEee5n5CT5zM8Ow" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5MtlcIEZEee5n5CT5zM8Ow" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5M5LoYEZEee5n5CT5zM8Ow" name="Debug__A__Ac__Initial__163">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5MtlcYEZEee5n5CT5zM8Ow" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5MtlcoEZEee5n5CT5zM8Ow" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5NDjsIEZEee5n5CT5zM8Ow" name="Debug__A__En__Initial__164">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_5NMtoIEZEee5n5CT5zM8Ow" name="Debug__Path__onPong" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_5NdMUIEZEee5n5CT5zM8Ow" name="Debug__C__onPong">
            <connectionPoint xmi:id="_5N2N4IEZEee5n5CT5zM8Ow" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_5OEQUIEZEee5n5CT5zM8Ow" name="ex" kind="exitPoint"/>
            <region xmi:id="_5NdMUYEZEee5n5CT5zM8Ow" name="Region1">
              <transition xmi:id="_5WfMgIEZEee5n5CT5zM8Ow" name="Debug__init__trans__onPong" source="_5N2N4IEZEee5n5CT5zM8Ow" target="_5WdXUIEZEee5n5CT5zM8Ow"/>
              <transition xmi:id="_5WfMgYEZEee5n5CT5zM8Ow" name="Debug__Ex__PLAYING" source="_5WdXUIEZEee5n5CT5zM8Ow" target="_5Wd-YIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5W0jsIEZEee5n5CT5zM8Ow" name="Debug__Ex__PLAYING__191">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ac__onPong&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5WfMgoEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_43_5sIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5WfMg4EZEee5n5CT5zM8Ow" name="Debug__AC__onPong" source="_5Wd-YIEZEee5n5CT5zM8Ow" target="_5WelcIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5WfMhYEZEee5n5CT5zM8Ow" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;pong received.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__AC__onPong&quot;,(char *)&quot;Debug__B__Ac__onPong&quot;,(char *)&quot;Debug__A__Ac__onPong&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5WfMhIEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_43_5sIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5WgaoIEZEee5n5CT5zM8Ow" name="Debug__end__trans__onPong" source="_5WelcIEZEee5n5CT5zM8Ow" target="_5OEQUIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5W2_8IEZEee5n5CT5zM8Ow" name="Debug__end__trans__onPong__194">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__end__trans__onPong&quot;,(char *)&quot;Debug__A__Ac__onPong&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_5WgaoYEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_43_5sIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_5WdXUIEZEee5n5CT5zM8Ow" name="Debug__B__Ex__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5WdXUYEZEee5n5CT5zM8Ow" name="Debug__B__Ex__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5WnvYYEZEee5n5CT5zM8Ow" name="Debug__B__Ex__PLAYING__187">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5Wd-YIEZEee5n5CT5zM8Ow" name="Debug__B__Ac__onPong">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5Wd-YYEZEee5n5CT5zM8Ow" name="Debug__B__Ac__onPong">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;onPong&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5WudEIEZEee5n5CT5zM8Ow" name="Debug__B__Ac__onPong__188">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5WelcIEZEee5n5CT5zM8Ow" name="Debug__A__Ac__onPong">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5WelcYEZEee5n5CT5zM8Ow" name="Debug__A__Ac__onPong">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;onPong&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__A__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5Wz8oIEZEee5n5CT5zM8Ow" name="Debug__A__Ac__onPong__189">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__A__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_5W5cMIEZEee5n5CT5zM8Ow" name="Debug__Path__endOfRound" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_5W-UsYEZEee5n5CT5zM8Ow" name="Debug__C__endOfRound">
            <connectionPoint xmi:id="_5XCmIYEZEee5n5CT5zM8Ow" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_5XJT0IEZEee5n5CT5zM8Ow" name="ex" kind="exitPoint"/>
            <region xmi:id="_5W-UsoEZEee5n5CT5zM8Ow" name="Region1">
              <transition xmi:id="_5XbAoIEZEee5n5CT5zM8Ow" name="Debug__init__trans__endOfRound" source="_5XCmIYEZEee5n5CT5zM8Ow" target="_5XZLcIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5XvJsIEZEee5n5CT5zM8Ow" name="Debug__init__trans__endOfRound__212">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__init__trans__endOfRound&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_5XbnsIEZEee5n5CT5zM8Ow" name="Debug__Ac__endOfRound" source="_5XZLcIEZEee5n5CT5zM8Ow" target="_5XZLcoEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5XbnsoEZEee5n5CT5zM8Ow" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>this->pingsSent = 0;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__Ac__endOfRound&quot;,(char *)&quot;Debug__B__Ac__endOfRound&quot;,(char *)&quot;Debug__A__Ac__endOfRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5XbnsYEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_43_5sIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5XcOwIEZEee5n5CT5zM8Ow" name="Debug__En__WAITING TO START" source="_5XZLcoEZEee5n5CT5zM8Ow" target="_5XZygYEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5Xxl8IEZEee5n5CT5zM8Ow" name="Debug__En__WAITING TO START__215">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__En__WAITING TO START&quot;,(char *)&quot;Debug__A__Ac__endOfRound&quot;,(char *)&quot;Debug__A__En__endOfRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5XcOwYEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_43_5sIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5XcOwoEZEee5n5CT5zM8Ow" name="Debug__end__trans__endOfRound" source="_5XZygYEZEee5n5CT5zM8Ow" target="_5XJT0IEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5Xy0EIEZEee5n5CT5zM8Ow" name="Debug__end__trans__endOfRound__217">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__end__trans__endOfRound&quot;,(char *)&quot;Debug__A__En__endOfRound&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_5XcOw4EZEee5n5CT5zM8Ow" name="Debug__Exec" port="_43_5sIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_5XZLcIEZEee5n5CT5zM8Ow" name="Debug__B__Ac__endOfRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5XZLcYEZEee5n5CT5zM8Ow" name="Debug__B__Ac__endOfRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;endOfRound&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__B__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5XjjgYEZEee5n5CT5zM8Ow" name="Debug__B__Ac__endOfRound__208">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__B__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5XZLcoEZEee5n5CT5zM8Ow" name="Debug__A__Ac__endOfRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5XZygIEZEee5n5CT5zM8Ow" name="Debug__A__Ac__endOfRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;endOfRound&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__A__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5XocAYEZEee5n5CT5zM8Ow" name="Debug__A__Ac__endOfRound__209">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__A__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5XZygYEZEee5n5CT5zM8Ow" name="Debug__A__En__endOfRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5XaZkIEZEee5n5CT5zM8Ow" name="Debug__A__En__endOfRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__A__En__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5XuioIEZEee5n5CT5zM8Ow" name="Debug__A__En__endOfRound__210">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__A__En__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_5X13YIEZEee5n5CT5zM8Ow" name="Debug__Path__keepPlaying" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_5X6v4YEZEee5n5CT5zM8Ow" name="Debug__C__keepPlaying">
            <connectionPoint xmi:id="_5YAPcYEZEee5n5CT5zM8Ow" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_5YFH8YEZEee5n5CT5zM8Ow" name="ex" kind="exitPoint"/>
            <region xmi:id="_5X6v4oEZEee5n5CT5zM8Ow" name="Region1">
              <transition xmi:id="_5YbtQIEZEee5n5CT5zM8Ow" name="Debug__init__trans__keepPlaying" source="_5YAPcYEZEee5n5CT5zM8Ow" target="_5YZ4EYEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5Yv2UIEZEee5n5CT5zM8Ow" name="Debug__init__trans__keepPlaying__235">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__init__trans__keepPlaying&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_5YbtQYEZEee5n5CT5zM8Ow" name="Debug__Ac__keepPlaying" source="_5YZ4EYEZEee5n5CT5zM8Ow" target="_5YafIIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5YbtQ4EZEee5n5CT5zM8Ow" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>pingerTimer.informIn(UMLRTTimespec(1,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__Ac__keepPlaying&quot;,(char *)&quot;Debug__B__Ac__keepPlaying&quot;,(char *)&quot;Debug__A__Ac__keepPlaying&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5YbtQoEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_43_5sIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5YbtRIEZEee5n5CT5zM8Ow" name="Debug__En__WAITING FOR TIMER" source="_5YafIIEZEee5n5CT5zM8Ow" target="_5YbGMIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5Yy5oIEZEee5n5CT5zM8Ow" name="Debug__En__WAITING FOR TIMER__238">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__En__WAITING FOR TIMER&quot;,(char *)&quot;Debug__A__Ac__keepPlaying&quot;,(char *)&quot;Debug__A__En__keepPlaying&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5YbtRYEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_43_5sIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5YcUUIEZEee5n5CT5zM8Ow" name="Debug__end__trans__keepPlaying" source="_5YbGMIEZEee5n5CT5zM8Ow" target="_5YFH8YEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5Y0u0IEZEee5n5CT5zM8Ow" name="Debug__end__trans__keepPlaying__240">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__end__trans__keepPlaying&quot;,(char *)&quot;Debug__A__En__keepPlaying&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_5YcUUYEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_43_5sIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_5YZ4EYEZEee5n5CT5zM8Ow" name="Debug__B__Ac__keepPlaying">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5YZ4EoEZEee5n5CT5zM8Ow" name="Debug__B__Ac__keepPlaying">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;keepPlaying&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__B__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5Yia8YEZEee5n5CT5zM8Ow" name="Debug__B__Ac__keepPlaying__231">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__B__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5YafIIEZEee5n5CT5zM8Ow" name="Debug__A__Ac__keepPlaying">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5YafIYEZEee5n5CT5zM8Ow" name="Debug__A__Ac__keepPlaying">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;keepPlaying&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__A__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5YohkYEZEee5n5CT5zM8Ow" name="Debug__A__Ac__keepPlaying__232">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__A__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5YbGMIEZEee5n5CT5zM8Ow" name="Debug__A__En__keepPlaying">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5YbGMYEZEee5n5CT5zM8Ow" name="Debug__A__En__keepPlaying">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__A__En__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5YvPQIEZEee5n5CT5zM8Ow" name="Debug__A__En__keepPlaying__233">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__A__En__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_5Y3LEIEZEee5n5CT5zM8Ow" name="Debug__Path__timeout" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_5Y94wIEZEee5n5CT5zM8Ow" name="Debug__C__timeout">
            <connectionPoint xmi:id="_5ZCxQIEZEee5n5CT5zM8Ow" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_5ZHpwYEZEee5n5CT5zM8Ow" name="ex" kind="exitPoint"/>
            <region xmi:id="_5Y94wYEZEee5n5CT5zM8Ow" name="Region1">
              <transition xmi:id="_5ZcZ4IEZEee5n5CT5zM8Ow" name="Debug__init__trans__timeout" source="_5ZCxQIEZEee5n5CT5zM8Ow" target="_5ZZWkIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5aHIQIEZEee5n5CT5zM8Ow" name="Debug__init__trans__timeout__259">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__init__trans__timeout&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_5ZcZ4YEZEee5n5CT5zM8Ow" name="Debug__Ex__WAITING FOR TIMER" source="_5ZZWkIEZEee5n5CT5zM8Ow" target="_5ZZWkoEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5aHvUIEZEee5n5CT5zM8Ow" name="Debug__Ex__WAITING FOR TIMER__261">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__Ex__WAITING FOR TIMER&quot;,(char *)&quot;Debug__B__Ex__WAITING FOR TIMER&quot;,(char *)&quot;Debug__B__Ac__timeout&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5ZcZ4oEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_43_5sIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5ZcZ44EZEee5n5CT5zM8Ow" name="Debug__AC__timeout" source="_5ZZWkoEZEee5n5CT5zM8Ow" target="_5ZaksIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5ZdA8YEZEee5n5CT5zM8Ow" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>pingPort.ping().send();&#xD;
this->pingsSent++;&#xD;
log.show(&quot;ping message sent.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__AC__timeout&quot;,(char *)&quot;Debug__B__Ac__timeout&quot;,(char *)&quot;Debug__A__Ac__timeout&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5ZdA8IEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_43_5sIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5ZdA8oEZEee5n5CT5zM8Ow" name="Debug__En__PLAYING" source="_5ZaksIEZEee5n5CT5zM8Ow" target="_5Zby0IEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5aLZsIEZEee5n5CT5zM8Ow" name="Debug__En__PLAYING__264">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__timeout&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5ZdA84EZEee5n5CT5zM8Ow" name="Debug__Exec" port="_43_5sIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5ZdA9IEZEee5n5CT5zM8Ow" name="Debug__end__trans__timeout" source="_5Zby0IEZEee5n5CT5zM8Ow" target="_5ZHpwYEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5aNO4IEZEee5n5CT5zM8Ow" name="Debug__end__trans__timeout__266">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__end__trans__timeout&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_5ZdA9YEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_43_5sIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_5ZZWkIEZEee5n5CT5zM8Ow" name="Debug__B__Ex__WAITING FOR TIMER">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5ZZWkYEZEee5n5CT5zM8Ow" name="Debug__B__Ex__WAITING FOR TIMER">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ex__WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5ZjuoIEZEee5n5CT5zM8Ow" name="Debug__B__Ex__WAITING FOR TIMER__254">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ex__WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5ZZWkoEZEee5n5CT5zM8Ow" name="Debug__B__Ac__timeout">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5ZZ9oIEZEee5n5CT5zM8Ow" name="Debug__B__Ac__timeout">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;timeout&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5ZpOMYEZEee5n5CT5zM8Ow" name="Debug__B__Ac__timeout__255">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5ZaksIEZEee5n5CT5zM8Ow" name="Debug__A__Ac__timeout">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5ZaksYEZEee5n5CT5zM8Ow" name="Debug__A__Ac__timeout">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;timeout&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__A__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5Z33sYEZEee5n5CT5zM8Ow" name="Debug__A__Ac__timeout__256">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__A__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5Zby0IEZEee5n5CT5zM8Ow" name="Debug__A__En__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5Zby0YEZEee5n5CT5zM8Ow" name="Debug__A__En__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5Z5F0IEZEee5n5CT5zM8Ow" name="Debug__A__En__PLAYING__257">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_5aPrIIEZEee5n5CT5zM8Ow" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_436aIIEZEee5n5CT5zM8Ow" name="Debug__recallAllMsg" specification="_435zEIEZEee5n5CT5zM8Ow">
        <language>C++</language>
        <body>pingPort.recallAll();
startPort.recallAll();
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_44yj4YEZEee5n5CT5zM8Ow" name="Debug__variablesViewMethod" specification="_44yj4IEZEee5n5CT5zM8Ow">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;pingsSent,&quot;);
tempS.append(&quot;Integer,&quot;);
if(pingsSent!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,pingsSent);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_44__QIEZEee5n5CT5zM8Ow" name="Debug__variablesChange" specification="_440ZEIEZEee5n5CT5zM8Ow">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;pingsSent&quot;==tempVarName){
    pingsSent=atoi(varValue);
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_48FIcIEZEee5n5CT5zM8Ow" name="Debug__sendEvent" specification="_46bioIEZEee5n5CT5zM8Ow">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
this->Debug__event.setPayloadField(&quot;SenderCapsule&quot;,reserve3);
this->Debug__event.setPayloadField(&quot;Port&quot;,reserve4);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_435zEIEZEee5n5CT5zM8Ow" name="Debug__recallAllMsg" visibility="private" method="_436aIIEZEee5n5CT5zM8Ow"/>
      <ownedOperation xmi:id="_44yj4IEZEee5n5CT5zM8Ow" name="Debug__variablesView" visibility="private" method="_44yj4YEZEee5n5CT5zM8Ow"/>
      <ownedOperation xmi:id="_440ZEIEZEee5n5CT5zM8Ow" name="Debug__variablesChange" visibility="private" method="_44__QIEZEee5n5CT5zM8Ow">
        <ownedParameter xmi:id="_441AIIEZEee5n5CT5zM8Ow" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_441AIYEZEee5n5CT5zM8Ow" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_44_YMIEZEee5n5CT5zM8Ow" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_46bioIEZEee5n5CT5zM8Ow" name="Debug__sendEvent" visibility="private" method="_48FIcIEZEee5n5CT5zM8Ow">
        <ownedParameter xmi:id="_46cJsIEZEee5n5CT5zM8Ow" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_46qzMIEZEee5n5CT5zM8Ow" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_466q0IEZEee5n5CT5zM8Ow" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_47J7YIEZEee5n5CT5zM8Ow" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_47KicIEZEee5n5CT5zM8Ow" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_47XWwIEZEee5n5CT5zM8Ow" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_47n1cIEZEee5n5CT5zM8Ow" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_47ocgIEZEee5n5CT5zM8Ow" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_47pDkIEZEee5n5CT5zM8Ow" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_47pDkYEZEee5n5CT5zM8Ow" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_472e8IEZEee5n5CT5zM8Ow" name="reserve4">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_UTN08DKHEeeIZIaasUdwVA" name="Ponger" classifierBehavior="_pVZOQDKHEeeIZIaasUdwVA" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_bc83wDKHEeeIZIaasUdwVA" name="pongPort" visibility="public" type="_-CQpQDJjEeeIZIaasUdwVA" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_gaTikDKHEeeIZIaasUdwVA" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_xzj2kH34Eee8vPff7YDTwQ" name="endPort" visibility="public" type="_wEGEEH34Eee8vPff7YDTwQ" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_mo-64H4AEee8vPff7YDTwQ" name="pongerTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_8pPtEH4AEee8vPff7YDTwQ" name="pongsSent" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_-7A7YH4AEee8vPff7YDTwQ"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_49CxwIEZEee5n5CT5zM8Ow" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_49GcIYEZEee5n5CT5zM8Ow" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_49HDMIEZEee5n5CT5zM8Ow" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_49VssIEZEee5n5CT5zM8Ow" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_49VssYEZEee5n5CT5zM8Ow" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_49VssoEZEee5n5CT5zM8Ow" name="Debug__event">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_49jIEIEZEee5n5CT5zM8Ow" name="Debug__SRO">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_pVZOQDKHEeeIZIaasUdwVA" name="StateMachine" isReentrant="false">
        <region xmi:id="_pViYMDKHEeeIZIaasUdwVA" name="Region">
          <transition xmi:id="_pVsJMjKHEeeIZIaasUdwVA" name="Initial" source="_5IhpAIEZEee5n5CT5zM8Ow" target="_pVsJMDKHEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_y1SQIDKHEeeIZIaasUdwVA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.log(&quot;Ponger is ready&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_05Zc8DKHEeeIZIaasUdwVA" name="onPing" source="_5GEx8IEZEee5n5CT5zM8Ow" target="_wOD-wH4AEee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_OnWB0DKIEeeIZIaasUdwVA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.show(&quot;ping received.\n&quot;);&#xD;
pongerTimer.informIn(UMLRTTimespec(1,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::onPing&quot;,(char *)&quot;Debug__Path__onPing&quot;,(char *)&quot;WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_E9Jc8H4BEee8vPff7YDTwQ" name="timeout" source="_5EVFgIEZEee5n5CT5zM8Ow" target="_EMjGcH4BEee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_nJIlIH4BEee8vPff7YDTwQ">
              <language>C++</language>
              <body>pongPort.pong().send();&#xD;
this->pongsSent++;&#xD;
log.show(&quot;pong message sent.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::timeout&quot;,(char *)&quot;Debug__Path__timeout&quot;,(char *)&quot;ThreePongsSent?&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_LUVBcH4BEee8vPff7YDTwQ" name="keepPlaying" source="_5DRVkIEZEee5n5CT5zM8Ow" target="_pVsJMDKHEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5ESpQIEZEee5n5CT5zM8Ow" name="keepPlaying__26">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::keepPlaying&quot;,(char *)&quot;Debug__Path__keepPlaying&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_MiHqQH4BEee8vPff7YDTwQ" name="endOfRound" source="_5JeEMIEZEee5n5CT5zM8Ow" target="_pVsJMDKHEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_dltRoH4CEee8vPff7YDTwQ">
              <language>C++</language>
              <body>log.show(&quot;ending round.\n&quot;);&#xD;
endPort.end().send();&#xD;
this->pongsSent = 0;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::endOfRound&quot;,(char *)&quot;Debug__Path__endOfRound&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5DnT0YEZEee5n5CT5zM8Ow" name="Debug__keepPlaying" guard="_vwh4wH4BEee8vPff7YDTwQ" source="_EMjGcH4BEee8vPff7YDTwQ" target="_5DRVkIEZEee5n5CT5zM8Ow">
            <ownedRule xmi:id="_vwh4wH4BEee8vPff7YDTwQ">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="__ykZAH4BEee8vPff7YDTwQ">
                <language>C++</language>
                <body>bool sendMorePongs = this->pongsSent &lt; 3;&#xD;
return sendMorePongs;</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5Dn64IEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__3">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__keepPlaying&quot;,(char *)&quot;ThreePongsSent?&quot;,(char *)&quot;Debug__Path__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5DpJAIEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__S" guard="_5DpwEYEZEee5n5CT5zM8Ow" source="_5DRVkIEZEee5n5CT5zM8Ow" target="_5DZ4cYEZEee5n5CT5zM8Ow">
            <ownedRule xmi:id="_5DpwEYEZEee5n5CT5zM8Ow" name="Debug__GuardkeepPlaying">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_5DpwEIEZEee5n5CT5zM8Ow" name="Debug__GuardkeepPlaying">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;ThreePongsSent?&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5DpwEoEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__S__5">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__keepPlaying__S&quot;,(char *)&quot;Debug__Path__keepPlaying&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5Dq-MIEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__E" source="_5DgmIIEZEee5n5CT5zM8Ow" target="_pVsJMDKHEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5Dq-MYEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__E__6">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__keepPlaying__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5DtacIEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__dbg__varChange" source="_5DVnAYEZEee5n5CT5zM8Ow" target="_5DVnAYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5DtacoEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__dbg__varChange__8">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_5DtacYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_5DuBgIEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__dbg__setBreakPoint" source="_5DVnAYEZEee5n5CT5zM8Ow" target="_5DVnAYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5DuokYEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__dbg__setBreakPoint__9">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5DuokIEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5DvPoIEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__dbg__remBreakPoint" source="_5DVnAYEZEee5n5CT5zM8Ow" target="_5DVnAYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5DvPooEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__dbg__remBreakPoint__10">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5DvPoYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5DvPo4EZEee5n5CT5zM8Ow" name="Debug__keepPlaying__dbg__viewBreakPoints" source="_5DVnAYEZEee5n5CT5zM8Ow" target="_5DVnAYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5Dv2sYEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__dbg__viewBreakPoints__11">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5Dv2sIEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5Dv2soEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__dbg__dbgSetExecMode" source="_5DVnAYEZEee5n5CT5zM8Ow" target="_5DVnAYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5Dv2tIEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__dbg__dbgSetExecMode__12">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_5Dv2s4EZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5DwdwIEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__dbg__dbgDeferMsg" source="_5DVnAYEZEee5n5CT5zM8Ow" target="_5DVnAYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5DwdwoEZEee5n5CT5zM8Ow" name="Debug__keepPlaying__dbg__dbgDeferMsg__13">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5DwdwYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_bc83wDKHEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_5E2C4IEZEee5n5CT5zM8Ow" name="Debug__timeout" source="_wOD-wH4AEee8vPff7YDTwQ" target="_5EVFgIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5E2p8IEZEee5n5CT5zM8Ow" name="Debug__timeout__28">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__timeout&quot;,(char *)&quot;WAITING FOR TIMER&quot;,(char *)&quot;Debug__Path__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
            <trigger xmi:id="_WL6PAH4BEee8vPff7YDTwQ" port="_mo-64H4AEee8vPff7YDTwQ">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5E8JgIEZEee5n5CT5zM8Ow" name="Debug__timeout__S" guard="_5E8wkYEZEee5n5CT5zM8Ow" source="_5EVFgIEZEee5n5CT5zM8Ow" target="_5EjH8YEZEee5n5CT5zM8Ow">
            <ownedRule xmi:id="_5E8wkYEZEee5n5CT5zM8Ow" name="Debug__Guardtimeout">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_5E8wkIEZEee5n5CT5zM8Ow" name="Debug__Guardtimeout">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5E8wkoEZEee5n5CT5zM8Ow" name="Debug__timeout__S__30">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__timeout__S&quot;,(char *)&quot;Debug__Path__timeout&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5E9XoIEZEee5n5CT5zM8Ow" name="Debug__timeout__E" source="_5ErDwYEZEee5n5CT5zM8Ow" target="_EMjGcH4BEee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5E9-sIEZEee5n5CT5zM8Ow" name="Debug__timeout__E__31">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__timeout__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;ThreePongsSent?&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5E-lwIEZEee5n5CT5zM8Ow" name="Debug__timeout__dbg__varChange" source="_5EZ-AIEZEee5n5CT5zM8Ow" target="_5EZ-AIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5E-lwoEZEee5n5CT5zM8Ow" name="Debug__timeout__dbg__varChange__33">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_5E-lwYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_5E_M0IEZEee5n5CT5zM8Ow" name="Debug__timeout__dbg__setBreakPoint" source="_5EZ-AIEZEee5n5CT5zM8Ow" target="_5EZ-AIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5FEFUIEZEee5n5CT5zM8Ow" name="Debug__timeout__dbg__setBreakPoint__34">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5E_M0YEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5FFTcIEZEee5n5CT5zM8Ow" name="Debug__timeout__dbg__remBreakPoint" source="_5EZ-AIEZEee5n5CT5zM8Ow" target="_5EZ-AIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5FFTcoEZEee5n5CT5zM8Ow" name="Debug__timeout__dbg__remBreakPoint__35">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5FFTcYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5FF6gIEZEee5n5CT5zM8Ow" name="Debug__timeout__dbg__viewBreakPoints" source="_5EZ-AIEZEee5n5CT5zM8Ow" target="_5EZ-AIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5FF6goEZEee5n5CT5zM8Ow" name="Debug__timeout__dbg__viewBreakPoints__36">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5FF6gYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5FF6g4EZEee5n5CT5zM8Ow" name="Debug__timeout__dbg__dbgSetExecMode" source="_5EZ-AIEZEee5n5CT5zM8Ow" target="_5EZ-AIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5FF6hYEZEee5n5CT5zM8Ow" name="Debug__timeout__dbg__dbgSetExecMode__37">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_5FF6hIEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5FGhkIEZEee5n5CT5zM8Ow" name="Debug__timeout__dbg__dbgDeferMsg" source="_5EZ-AIEZEee5n5CT5zM8Ow" target="_5EZ-AIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5FGhkoEZEee5n5CT5zM8Ow" name="Debug__timeout__dbg__dbgDeferMsg__38">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5FGhkYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_bc83wDKHEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_5HsikYEZEee5n5CT5zM8Ow" name="Debug__onPing" source="_pVsJMDKHEeeIZIaasUdwVA" target="_5GEx8IEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5HsikoEZEee5n5CT5zM8Ow" name="Debug__onPing__49">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__onPing&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;Debug__Path__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
            <trigger xmi:id="_OmPtQDKWEee9wJm1xhJVtg" event="_SHYzYDKDEeeIZIaasUdwVA" port="_bc83wDKHEeeIZIaasUdwVA"/>
          </transition>
          <transition xmi:id="_5HtwsIEZEee5n5CT5zM8Ow" name="Debug__onPing__S" guard="_5HuXwYEZEee5n5CT5zM8Ow" source="_5GEx8IEZEee5n5CT5zM8Ow" target="_5GZiEIEZEee5n5CT5zM8Ow">
            <ownedRule xmi:id="_5HuXwYEZEee5n5CT5zM8Ow" name="Debug__GuardonPing">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_5HuXwIEZEee5n5CT5zM8Ow" name="Debug__GuardonPing">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5HuXwoEZEee5n5CT5zM8Ow" name="Debug__onPing__S__51">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__onPing__S&quot;,(char *)&quot;Debug__Path__onPing&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5Hu-0IEZEee5n5CT5zM8Ow" name="Debug__onPing__E" source="_5Ghd4IEZEee5n5CT5zM8Ow" target="_wOD-wH4AEee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5Hvl4IEZEee5n5CT5zM8Ow" name="Debug__onPing__E__52">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__onPing__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5HwM8IEZEee5n5CT5zM8Ow" name="Debug__onPing__dbg__varChange" source="_5GPKAYEZEee5n5CT5zM8Ow" target="_5GPKAYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5Hw0AYEZEee5n5CT5zM8Ow" name="Debug__onPing__dbg__varChange__54">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_5Hw0AIEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_5HzQQIEZEee5n5CT5zM8Ow" name="Debug__onPing__dbg__setBreakPoint" source="_5GPKAYEZEee5n5CT5zM8Ow" target="_5GPKAYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5HzQQoEZEee5n5CT5zM8Ow" name="Debug__onPing__dbg__setBreakPoint__55">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5HzQQYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5Hz3UIEZEee5n5CT5zM8Ow" name="Debug__onPing__dbg__remBreakPoint" source="_5GPKAYEZEee5n5CT5zM8Ow" target="_5GPKAYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5Hz3UoEZEee5n5CT5zM8Ow" name="Debug__onPing__dbg__remBreakPoint__56">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5Hz3UYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5Hz3U4EZEee5n5CT5zM8Ow" name="Debug__onPing__dbg__viewBreakPoints" source="_5GPKAYEZEee5n5CT5zM8Ow" target="_5GPKAYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5H0eYYEZEee5n5CT5zM8Ow" name="Debug__onPing__dbg__viewBreakPoints__57">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5H0eYIEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5H0eYoEZEee5n5CT5zM8Ow" name="Debug__onPing__dbg__dbgSetExecMode" source="_5GPKAYEZEee5n5CT5zM8Ow" target="_5GPKAYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5H0eZIEZEee5n5CT5zM8Ow" name="Debug__onPing__dbg__dbgSetExecMode__58">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_5H0eY4EZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5H1FcIEZEee5n5CT5zM8Ow" name="Debug__onPing__dbg__dbgDeferMsg" source="_5GPKAYEZEee5n5CT5zM8Ow" target="_5GPKAYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5H1FcoEZEee5n5CT5zM8Ow" name="Debug__onPing__dbg__dbgDeferMsg__59">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5H1FcYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_bc83wDKHEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_5I0j8YEZEee5n5CT5zM8Ow" name="Debug__Initial" source="_5Kzg8IEZEee5n5CT5zM8Ow" target="_5IhpAIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5I0j8oEZEee5n5CT5zM8Ow" name="Debug__Initial__75">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPing&quot;,&quot;WAITING FOR TIMER&quot;,&quot;ping&quot;,&quot;PingPongProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePongsSent?&quot;,&quot;keepPlaying&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePongsSent?&quot;,&quot;endOfRound&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;WAITING FOR TIMER&quot;,&quot;timeout&quot;,&quot;ThreePongsSent?&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_5K4ZcYEZEee5n5CT5zM8Ow" name="ConnectionEstablished" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
            </trigger>
          </transition>
          <transition xmi:id="_5I1LAIEZEee5n5CT5zM8Ow" name="Debug__Initial__S" guard="_5I1yEYEZEee5n5CT5zM8Ow" source="_5IhpAIEZEee5n5CT5zM8Ow" target="_5IraAYEZEee5n5CT5zM8Ow">
            <ownedRule xmi:id="_5I1yEYEZEee5n5CT5zM8Ow" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_5I1yEIEZEee5n5CT5zM8Ow" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo1&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5I2ZIIEZEee5n5CT5zM8Ow" name="Debug__Initial__S__77">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5I3nQIEZEee5n5CT5zM8Ow" name="Debug__Initial__E" source="_5IvrcYEZEee5n5CT5zM8Ow" target="_pVsJMDKHEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5I3nQYEZEee5n5CT5zM8Ow" name="Debug__Initial__E__78">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5I41YIEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__varChange" source="_5ImhgYEZEee5n5CT5zM8Ow" target="_5ImhgYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5I41YoEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__varChange__80">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_5I41YYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_5I5ccIEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__setBreakPoint" source="_5ImhgYEZEee5n5CT5zM8Ow" target="_5ImhgYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5I5ccoEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__setBreakPoint__81">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5I5ccYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5I6DgIEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__remBreakPoint" source="_5ImhgYEZEee5n5CT5zM8Ow" target="_5ImhgYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5I6DgoEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__remBreakPoint__82">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5I6DgYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5I6Dg4EZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__viewBreakPoints" source="_5ImhgYEZEee5n5CT5zM8Ow" target="_5ImhgYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5I6qkIEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__viewBreakPoints__83">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5I6DhIEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5I6qkYEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__dbgSetExecMode" source="_5ImhgYEZEee5n5CT5zM8Ow" target="_5ImhgYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5I7RoIEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__dbgSetExecMode__84">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_5I6qkoEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5I7RoYEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__dbgDeferMsg" source="_5ImhgYEZEee5n5CT5zM8Ow" target="_5ImhgYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5I7Ro4EZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__dbgDeferMsg__85">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5I7RooEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_bc83wDKHEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_5KKAsIEZEee5n5CT5zM8Ow" name="Debug__endOfRound" source="_EMjGcH4BEee8vPff7YDTwQ" target="_5JeEMIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5KKAsYEZEee5n5CT5zM8Ow" name="Debug__endOfRound__98">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__endOfRound&quot;,(char *)&quot;ThreePongsSent?&quot;,(char *)&quot;Debug__Path__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5KKnwIEZEee5n5CT5zM8Ow" name="Debug__endOfRound__S" guard="_5KLO0YEZEee5n5CT5zM8Ow" source="_5JeEMIEZEee5n5CT5zM8Ow" target="_5J1QkIEZEee5n5CT5zM8Ow">
            <ownedRule xmi:id="_5KLO0YEZEee5n5CT5zM8Ow" name="Debug__GuardendOfRound">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_5KLO0IEZEee5n5CT5zM8Ow" name="Debug__GuardendOfRound">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;ThreePongsSent?&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5KLO0oEZEee5n5CT5zM8Ow" name="Debug__endOfRound__S__100">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__endOfRound__S&quot;,(char *)&quot;Debug__Path__endOfRound&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5KMc8IEZEee5n5CT5zM8Ow" name="Debug__endOfRound__E" source="_5J7-QYEZEee5n5CT5zM8Ow" target="_pVsJMDKHEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5KMc8YEZEee5n5CT5zM8Ow" name="Debug__endOfRound__E__101">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__endOfRound__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5KNEAIEZEee5n5CT5zM8Ow" name="Debug__endOfRound__dbg__varChange" source="_5JpqYYEZEee5n5CT5zM8Ow" target="_5JpqYYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5KNrEIEZEee5n5CT5zM8Ow" name="Debug__endOfRound__dbg__varChange__103">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_5KNEAYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_5KNrEYEZEee5n5CT5zM8Ow" name="Debug__endOfRound__dbg__setBreakPoint" source="_5JpqYYEZEee5n5CT5zM8Ow" target="_5JpqYYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5KOSIIEZEee5n5CT5zM8Ow" name="Debug__endOfRound__dbg__setBreakPoint__104">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5KNrEoEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5KO5MIEZEee5n5CT5zM8Ow" name="Debug__endOfRound__dbg__remBreakPoint" source="_5JpqYYEZEee5n5CT5zM8Ow" target="_5JpqYYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5KO5MoEZEee5n5CT5zM8Ow" name="Debug__endOfRound__dbg__remBreakPoint__105">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5KO5MYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5KO5M4EZEee5n5CT5zM8Ow" name="Debug__endOfRound__dbg__viewBreakPoints" source="_5JpqYYEZEee5n5CT5zM8Ow" target="_5JpqYYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5KPgQYEZEee5n5CT5zM8Ow" name="Debug__endOfRound__dbg__viewBreakPoints__106">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5KPgQIEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5KQHUIEZEee5n5CT5zM8Ow" name="Debug__endOfRound__dbg__dbgSetExecMode" source="_5JpqYYEZEee5n5CT5zM8Ow" target="_5JpqYYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5KQHUoEZEee5n5CT5zM8Ow" name="Debug__endOfRound__dbg__dbgSetExecMode__107">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_5KQHUYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_49CxwIEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5KQHU4EZEee5n5CT5zM8Ow" name="Debug__endOfRound__dbg__dbgDeferMsg" source="_5JpqYYEZEee5n5CT5zM8Ow" target="_5JpqYYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5KQuYIEZEee5n5CT5zM8Ow" name="Debug__endOfRound__dbg__dbgDeferMsg__108">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5KQHVIEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_bc83wDKHEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_5K3yYYEZEee5n5CT5zM8Ow" name="Debug__InitDebug" source="_pViYMTKHEeeIZIaasUdwVA" target="_5Kzg8IEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5K4ZcIEZEee5n5CT5zM8Ow" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_pViYMTKHEeeIZIaasUdwVA" name="Pseudo1"/>
          <subvertex xmi:type="uml:State" xmi:id="_pVsJMDKHEeeIZIaasUdwVA" name="PLAYING">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5K8D0IEZEee5n5CT5zM8Ow" name="PLAYING__122">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5K8D0YEZEee5n5CT5zM8Ow" name="PLAYING__123">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_wOD-wH4AEee8vPff7YDTwQ" name="WAITING FOR TIMER">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5K61sIEZEee5n5CT5zM8Ow" name="WAITING FOR TIMER__120">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5K7cwIEZEee5n5CT5zM8Ow" name="WAITING FOR TIMER__121">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_EMjGcH4BEee8vPff7YDTwQ" name="ThreePongsSent?" kind="choice"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_5DRVkIEZEee5n5CT5zM8Ow" name="Debug__Path__keepPlaying" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_5DVnAYEZEee5n5CT5zM8Ow" name="Debug__C__keepPlaying">
            <connectionPoint xmi:id="_5DZ4cYEZEee5n5CT5zM8Ow" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_5DgmIIEZEee5n5CT5zM8Ow" name="ex" kind="exitPoint"/>
            <region xmi:id="_5DVnAoEZEee5n5CT5zM8Ow" name="Region1">
              <transition xmi:id="_5D3ygIEZEee5n5CT5zM8Ow" name="Debug__init__trans__keepPlaying" source="_5DZ4cYEZEee5n5CT5zM8Ow" target="_5D19UIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5ENwwIEZEee5n5CT5zM8Ow" name="Debug__init__trans__keepPlaying__18">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__init__trans__keepPlaying&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_5D3ygYEZEee5n5CT5zM8Ow" name="Debug__Ac__keepPlaying" source="_5D19UIEZEee5n5CT5zM8Ow" target="_5D2kYIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5EO-4IEZEee5n5CT5zM8Ow" name="Debug__Ac__keepPlaying__20">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__Ac__keepPlaying&quot;,(char *)&quot;Debug__B__Ac__keepPlaying&quot;,(char *)&quot;Debug__A__Ac__keepPlaying&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5D3ygoEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_49CxwIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5D3yg4EZEee5n5CT5zM8Ow" name="Debug__En__PLAYING" source="_5D2kYIEZEee5n5CT5zM8Ow" target="_5D3LcIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5EQNAIEZEee5n5CT5zM8Ow" name="Debug__En__PLAYING__22">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__keepPlaying&quot;,(char *)&quot;Debug__A__En__keepPlaying&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5D3yhIEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_49CxwIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5D4ZkIEZEee5n5CT5zM8Ow" name="Debug__end__trans__keepPlaying" source="_5D3LcIEZEee5n5CT5zM8Ow" target="_5DgmIIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5ERbIIEZEee5n5CT5zM8Ow" name="Debug__end__trans__keepPlaying__24">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__end__trans__keepPlaying&quot;,(char *)&quot;Debug__A__En__keepPlaying&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_5D4ZkYEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_49CxwIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_5D19UIEZEee5n5CT5zM8Ow" name="Debug__B__Ac__keepPlaying">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5D19UYEZEee5n5CT5zM8Ow" name="Debug__B__Ac__keepPlaying">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;keepPlaying&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__B__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5D-gMIEZEee5n5CT5zM8Ow" name="Debug__B__Ac__keepPlaying__14">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__B__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5D2kYIEZEee5n5CT5zM8Ow" name="Debug__A__Ac__keepPlaying">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5D2kYYEZEee5n5CT5zM8Ow" name="Debug__A__Ac__keepPlaying">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;keepPlaying&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__A__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5EGcAYEZEee5n5CT5zM8Ow" name="Debug__A__Ac__keepPlaying__15">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__A__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5D3LcIEZEee5n5CT5zM8Ow" name="Debug__A__En__keepPlaying">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5D3LcYEZEee5n5CT5zM8Ow" name="Debug__A__En__keepPlaying">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__A__En__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5EMioYEZEee5n5CT5zM8Ow" name="Debug__A__En__keepPlaying__16">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__A__En__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_5EVFgIEZEee5n5CT5zM8Ow" name="Debug__Path__timeout" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_5EZ-AIEZEee5n5CT5zM8Ow" name="Debug__C__timeout">
            <connectionPoint xmi:id="_5EjH8YEZEee5n5CT5zM8Ow" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_5ErDwYEZEee5n5CT5zM8Ow" name="ex" kind="exitPoint"/>
            <region xmi:id="_5EZ-AYEZEee5n5CT5zM8Ow" name="Region1">
              <transition xmi:id="_5FY1cIEZEee5n5CT5zM8Ow" name="Debug__init__trans__timeout" source="_5EjH8YEZEee5n5CT5zM8Ow" target="_5FRgsIEZEee5n5CT5zM8Ow"/>
              <transition xmi:id="_5FY1cYEZEee5n5CT5zM8Ow" name="Debug__Ex__WAITING FOR TIMER" source="_5FRgsIEZEee5n5CT5zM8Ow" target="_5FSHwIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5F82IIEZEee5n5CT5zM8Ow" name="Debug__Ex__WAITING FOR TIMER__43">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__Ex__WAITING FOR TIMER&quot;,(char *)&quot;Debug__B__Ex__WAITING FOR TIMER&quot;,(char *)&quot;Debug__B__Ac__timeout&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5FY1coEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_49CxwIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5FY1c4EZEee5n5CT5zM8Ow" name="Debug__AC__timeout" source="_5FSHwIEZEee5n5CT5zM8Ow" target="_5FSu0IEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5FY1dYEZEee5n5CT5zM8Ow" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>pongPort.pong().send();&#xD;
this->pongsSent++;&#xD;
log.show(&quot;pong message sent.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__AC__timeout&quot;,(char *)&quot;Debug__B__Ac__timeout&quot;,(char *)&quot;Debug__A__Ac__timeout&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5FY1dIEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_49CxwIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5FZcgIEZEee5n5CT5zM8Ow" name="Debug__end__trans__timeout" source="_5FSu0IEZEee5n5CT5zM8Ow" target="_5ErDwYEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5GCVsIEZEee5n5CT5zM8Ow" name="Debug__end__trans__timeout__46">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__end__trans__timeout&quot;,(char *)&quot;Debug__A__Ac__timeout&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_5FZcgYEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_49CxwIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_5FRgsIEZEee5n5CT5zM8Ow" name="Debug__B__Ex__WAITING FOR TIMER">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5FRgsYEZEee5n5CT5zM8Ow" name="Debug__B__Ex__WAITING FOR TIMER">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ex__WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5FgxQYEZEee5n5CT5zM8Ow" name="Debug__B__Ex__WAITING FOR TIMER__39">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ex__WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5FSHwIEZEee5n5CT5zM8Ow" name="Debug__B__Ac__timeout">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5FSHwYEZEee5n5CT5zM8Ow" name="Debug__B__Ac__timeout">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;timeout&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5FsXcYEZEee5n5CT5zM8Ow" name="Debug__B__Ac__timeout__40">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5FSu0IEZEee5n5CT5zM8Ow" name="Debug__A__Ac__timeout">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5FSu0YEZEee5n5CT5zM8Ow" name="Debug__A__Ac__timeout">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;timeout&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__A__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5F7oAYEZEee5n5CT5zM8Ow" name="Debug__A__Ac__timeout__41">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__A__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_5GEx8IEZEee5n5CT5zM8Ow" name="Debug__Path__onPing" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_5GPKAYEZEee5n5CT5zM8Ow" name="Debug__C__onPing">
            <connectionPoint xmi:id="_5GZiEIEZEee5n5CT5zM8Ow" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_5Ghd4IEZEee5n5CT5zM8Ow" name="ex" kind="exitPoint"/>
            <region xmi:id="_5GPKAoEZEee5n5CT5zM8Ow" name="Region1">
              <transition xmi:id="_5H_dgIEZEee5n5CT5zM8Ow" name="Debug__init__trans__onPing" source="_5GZiEIEZEee5n5CT5zM8Ow" target="_5H9BQYEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5IZGIIEZEee5n5CT5zM8Ow" name="Debug__init__trans__onPing__65">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__init__trans__onPing&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_5H_dgYEZEee5n5CT5zM8Ow" name="Debug__Ex__PLAYING" source="_5H9BQYEZEee5n5CT5zM8Ow" target="_5H9oUIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5IaUQIEZEee5n5CT5zM8Ow" name="Debug__Ex__PLAYING__67">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ac__onPing&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5H_dgoEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_49CxwIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5IAEkIEZEee5n5CT5zM8Ow" name="Debug__AC__onPing" source="_5H9oUIEZEee5n5CT5zM8Ow" target="_5H-PYIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5IAroIEZEee5n5CT5zM8Ow" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;ping received.\n&quot;);&#xD;
pongerTimer.informIn(UMLRTTimespec(1,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__AC__onPing&quot;,(char *)&quot;Debug__B__Ac__onPing&quot;,(char *)&quot;Debug__A__Ac__onPing&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5IAEkYEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_49CxwIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5IAroYEZEee5n5CT5zM8Ow" name="Debug__En__WAITING FOR TIMER" source="_5H-PYIEZEee5n5CT5zM8Ow" target="_5H-2cIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5IcwgIEZEee5n5CT5zM8Ow" name="Debug__En__WAITING FOR TIMER__70">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__En__WAITING FOR TIMER&quot;,(char *)&quot;Debug__A__Ac__onPing&quot;,(char *)&quot;Debug__A__En__WAITING FOR TIMER&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5IArooEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_49CxwIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5IAro4EZEee5n5CT5zM8Ow" name="Debug__end__trans__onPing" source="_5H-2cIEZEee5n5CT5zM8Ow" target="_5Ghd4IEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5IelsIEZEee5n5CT5zM8Ow" name="Debug__end__trans__onPing__72">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__end__trans__onPing&quot;,(char *)&quot;Debug__A__En__WAITING FOR TIMER&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_5IArpIEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_49CxwIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_5H9BQYEZEee5n5CT5zM8Ow" name="Debug__B__Ex__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5H9BQoEZEee5n5CT5zM8Ow" name="Debug__B__Ex__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5IFkIYEZEee5n5CT5zM8Ow" name="Debug__B__Ex__PLAYING__60">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5H9oUIEZEee5n5CT5zM8Ow" name="Debug__B__Ac__onPing">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5H9oUYEZEee5n5CT5zM8Ow" name="Debug__B__Ac__onPing">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;onPing&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5IMR0YEZEee5n5CT5zM8Ow" name="Debug__B__Ac__onPing__61">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5H-PYIEZEee5n5CT5zM8Ow" name="Debug__A__Ac__onPing">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5H-PYYEZEee5n5CT5zM8Ow" name="Debug__A__Ac__onPing">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;onPing&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__A__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5ISYcYEZEee5n5CT5zM8Ow" name="Debug__A__Ac__onPing__62">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__A__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5H-2cIEZEee5n5CT5zM8Ow" name="Debug__A__En__WAITING FOR TIMER">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5H-2cYEZEee5n5CT5zM8Ow" name="Debug__A__En__WAITING FOR TIMER">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__A__En__WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5IUNoIEZEee5n5CT5zM8Ow" name="Debug__A__En__WAITING FOR TIMER__63">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__A__En__WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_5IhpAIEZEee5n5CT5zM8Ow" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_5ImhgYEZEee5n5CT5zM8Ow" name="Debug__C__Initial">
            <connectionPoint xmi:id="_5IraAYEZEee5n5CT5zM8Ow" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_5IvrcYEZEee5n5CT5zM8Ow" name="ex" kind="exitPoint"/>
            <region xmi:id="_5ImhgoEZEee5n5CT5zM8Ow" name="Region1">
              <transition xmi:id="_5JB_UoEZEee5n5CT5zM8Ow" name="Debug__init__trans__Initial" source="_5IraAYEZEee5n5CT5zM8Ow" target="_5JAxMYEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5JTFEIEZEee5n5CT5zM8Ow" name="Debug__init__trans__Initial__90">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_5JB_U4EZEee5n5CT5zM8Ow" name="Debug__Ac__Initial" source="_5JAxMYEZEee5n5CT5zM8Ow" target="_5JBYQIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5JCmYIEZEee5n5CT5zM8Ow" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.log(&quot;Ponger is ready&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5JB_VIEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_49CxwIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5JCmYYEZEee5n5CT5zM8Ow" name="Debug__En__PLAYING" source="_5JBYQIEZEee5n5CT5zM8Ow" target="_5JB_UIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5JU6QIEZEee5n5CT5zM8Ow" name="Debug__En__PLAYING__93">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5JCmYoEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_49CxwIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5JDNcIEZEee5n5CT5zM8Ow" name="Debug__end__trans__Initial" source="_5JB_UIEZEee5n5CT5zM8Ow" target="_5IvrcYEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5JbA4IEZEee5n5CT5zM8Ow" name="Debug__end__trans__Initial__95">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_5JDNcYEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_49CxwIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_5JAxMYEZEee5n5CT5zM8Ow" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5JAxMoEZEee5n5CT5zM8Ow" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5JHe4YEZEee5n5CT5zM8Ow" name="Debug__B__Ac__Initial__86">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5JBYQIEZEee5n5CT5zM8Ow" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5JBYQYEZEee5n5CT5zM8Ow" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5JMXYYEZEee5n5CT5zM8Ow" name="Debug__A__Ac__Initial__87">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5JB_UIEZEee5n5CT5zM8Ow" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5JB_UYEZEee5n5CT5zM8Ow" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5JSeAIEZEee5n5CT5zM8Ow" name="Debug__A__En__Initial__88">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_5JeEMIEZEee5n5CT5zM8Ow" name="Debug__Path__endOfRound" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_5JpqYYEZEee5n5CT5zM8Ow" name="Debug__C__endOfRound">
            <connectionPoint xmi:id="_5J1QkIEZEee5n5CT5zM8Ow" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_5J7-QYEZEee5n5CT5zM8Ow" name="ex" kind="exitPoint"/>
            <region xmi:id="_5JqRcIEZEee5n5CT5zM8Ow" name="Region1">
              <transition xmi:id="_5KXcEIEZEee5n5CT5zM8Ow" name="Debug__init__trans__endOfRound" source="_5J1QkIEZEee5n5CT5zM8Ow" target="_5KVm4YEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5KpI4IEZEee5n5CT5zM8Ow" name="Debug__init__trans__endOfRound__113">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__init__trans__endOfRound&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_5KXcEYEZEee5n5CT5zM8Ow" name="Debug__Ac__endOfRound" source="_5KVm4YEZEee5n5CT5zM8Ow" target="_5KWN8IEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5KYDIIEZEee5n5CT5zM8Ow" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>log.show(&quot;ending round.\n&quot;);&#xD;
endPort.end().send();&#xD;
this->pongsSent = 0;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__Ac__endOfRound&quot;,(char *)&quot;Debug__B__Ac__endOfRound&quot;,(char *)&quot;Debug__A__Ac__endOfRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5KXcEoEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_49CxwIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5KYqMIEZEee5n5CT5zM8Ow" name="Debug__En__PLAYING" source="_5KWN8IEZEee5n5CT5zM8Ow" target="_5KW1AIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5KrlIIEZEee5n5CT5zM8Ow" name="Debug__En__PLAYING__116">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__endOfRound&quot;,(char *)&quot;Debug__A__En__endOfRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5KYqMYEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_49CxwIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5KYqMoEZEee5n5CT5zM8Ow" name="Debug__end__trans__endOfRound" source="_5KW1AIEZEee5n5CT5zM8Ow" target="_5J7-QYEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5KszQIEZEee5n5CT5zM8Ow" name="Debug__end__trans__endOfRound__118">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__end__trans__endOfRound&quot;,(char *)&quot;Debug__A__En__endOfRound&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_5KYqM4EZEee5n5CT5zM8Ow" name="Debug__Exec" port="_49CxwIEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_5KVm4YEZEee5n5CT5zM8Ow" name="Debug__B__Ac__endOfRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5KVm4oEZEee5n5CT5zM8Ow" name="Debug__B__Ac__endOfRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;endOfRound&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__B__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5KeJwYEZEee5n5CT5zM8Ow" name="Debug__B__Ac__endOfRound__109">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__B__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5KWN8IEZEee5n5CT5zM8Ow" name="Debug__A__Ac__endOfRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5KWN8YEZEee5n5CT5zM8Ow" name="Debug__A__Ac__endOfRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;endOfRound&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__A__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5KjCQYEZEee5n5CT5zM8Ow" name="Debug__A__Ac__endOfRound__110">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__A__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5KW1AIEZEee5n5CT5zM8Ow" name="Debug__A__En__endOfRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5KW1AYEZEee5n5CT5zM8Ow" name="Debug__A__En__endOfRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__A__En__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5Koh0IEZEee5n5CT5zM8Ow" name="Debug__A__En__endOfRound__111">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__A__En__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_5Kzg8IEZEee5n5CT5zM8Ow" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_49CKsYEZEee5n5CT5zM8Ow" name="Debug__recallAllMsg" specification="_49CKsIEZEee5n5CT5zM8Ow">
        <language>C++</language>
        <body>pongPort.recallAll();
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_49SCUYEZEee5n5CT5zM8Ow" name="Debug__variablesViewMethod" specification="_49SCUIEZEee5n5CT5zM8Ow">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;pongsSent,&quot;);
tempS.append(&quot;Integer,&quot;);
if(pongsSent!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,pongsSent);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_49UekoEZEee5n5CT5zM8Ow" name="Debug__variablesChange" specification="_49T3gIEZEee5n5CT5zM8Ow">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;pongsSent&quot;==tempVarName){
    pongsSent=atoi(varValue);
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_4_khUIEZEee5n5CT5zM8Ow" name="Debug__sendEvent" specification="_4-JlAIEZEee5n5CT5zM8Ow">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
this->Debug__event.setPayloadField(&quot;SenderCapsule&quot;,reserve3);
this->Debug__event.setPayloadField(&quot;Port&quot;,reserve4);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_49CKsIEZEee5n5CT5zM8Ow" name="Debug__recallAllMsg" visibility="private" method="_49CKsYEZEee5n5CT5zM8Ow"/>
      <ownedOperation xmi:id="_49SCUIEZEee5n5CT5zM8Ow" name="Debug__variablesView" visibility="private" method="_49SCUYEZEee5n5CT5zM8Ow"/>
      <ownedOperation xmi:id="_49T3gIEZEee5n5CT5zM8Ow" name="Debug__variablesChange" visibility="private" method="_49UekoEZEee5n5CT5zM8Ow">
        <ownedParameter xmi:id="_49T3gYEZEee5n5CT5zM8Ow" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_49UekIEZEee5n5CT5zM8Ow" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_49UekYEZEee5n5CT5zM8Ow" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_4-JlAIEZEee5n5CT5zM8Ow" name="Debug__sendEvent" visibility="private" method="_4_khUIEZEee5n5CT5zM8Ow">
        <ownedParameter xmi:id="_4-JlAYEZEee5n5CT5zM8Ow" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_4-T9EIEZEee5n5CT5zM8Ow" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_4-cf8IEZEee5n5CT5zM8Ow" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_4-nfEIEZEee5n5CT5zM8Ow" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_4-oGIIEZEee5n5CT5zM8Ow" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_4-2IkIEZEee5n5CT5zM8Ow" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_4_IccIEZEee5n5CT5zM8Ow" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_4_JDgIEZEee5n5CT5zM8Ow" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_4_JDgYEZEee5n5CT5zM8Ow" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_4_JqkIEZEee5n5CT5zM8Ow" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_4_V30IEZEee5n5CT5zM8Ow" name="reserve4">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_oVoIcDKJEeeIZIaasUdwVA" name="Top" isActive="true">
      <ownedAttribute xmi:id="_sKndADKJEeeIZIaasUdwVA" name="pinger" visibility="protected" type="_IYQmMDKEEeeIZIaasUdwVA" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_x3YykDKJEeeIZIaasUdwVA" name="ponger" visibility="protected" type="_UTN08DKHEeeIZIaasUdwVA" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_Uy91MH34Eee8vPff7YDTwQ" name="referee" visibility="protected" type="_VPgAMH34Eee8vPff7YDTwQ" isOrdered="true" aggregation="composite"/>
      <ownedConnector xmi:id="_61R6oDKJEeeIZIaasUdwVA" name="RTConnector1">
        <end xmi:id="_62BhgDKJEeeIZIaasUdwVA" partWithPort="_sKndADKJEeeIZIaasUdwVA" role="_uF7scDKEEeeIZIaasUdwVA"/>
        <end xmi:id="_62BhgTKJEeeIZIaasUdwVA" partWithPort="_x3YykDKJEeeIZIaasUdwVA" role="_bc83wDKHEeeIZIaasUdwVA"/>
      </ownedConnector>
      <ownedConnector xmi:id="_olDfoH34Eee8vPff7YDTwQ" name="RTConnector2">
        <end xmi:id="_olI_MH34Eee8vPff7YDTwQ" partWithPort="_Uy91MH34Eee8vPff7YDTwQ" role="_coBs8H34Eee8vPff7YDTwQ"/>
        <end xmi:id="_olJmQH34Eee8vPff7YDTwQ" partWithPort="_sKndADKJEeeIZIaasUdwVA" role="_ipVIEH34Eee8vPff7YDTwQ"/>
      </ownedConnector>
      <ownedConnector xmi:id="_8-nZwH34Eee8vPff7YDTwQ" name="RTConnector3">
        <end xmi:id="_8-rEIH34Eee8vPff7YDTwQ" partWithPort="_x3YykDKJEeeIZIaasUdwVA" role="_xzj2kH34Eee8vPff7YDTwQ"/>
        <end xmi:id="_8-rrMH34Eee8vPff7YDTwQ" partWithPort="_Uy91MH34Eee8vPff7YDTwQ" role="_uEbSYH34Eee8vPff7YDTwQ"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_VPgAMH34Eee8vPff7YDTwQ" name="Referee" classifierBehavior="_b26uMH36Eee8vPff7YDTwQ" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_coBs8H34Eee8vPff7YDTwQ" name="startPort" visibility="public" type="_dglsoH34Eee8vPff7YDTwQ" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_uEbSYH34Eee8vPff7YDTwQ" name="endPort" visibility="public" type="_wEGEEH34Eee8vPff7YDTwQ" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:id="_sjufMH35Eee8vPff7YDTwQ" name="round" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_B57nwH36Eee8vPff7YDTwQ"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_gTLeIH36Eee8vPff7YDTwQ" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_hE7rMH36Eee8vPff7YDTwQ" name="refereeTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_4_x8sYEZEee5n5CT5zM8Ow" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_4_7tsYEZEee5n5CT5zM8Ow" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_4_7tsoEZEee5n5CT5zM8Ow" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_5AZAsoEZEee5n5CT5zM8Ow" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_5AZAs4EZEee5n5CT5zM8Ow" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_5AZnwIEZEee5n5CT5zM8Ow" name="Debug__event">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_5AoRQIEZEee5n5CT5zM8Ow" name="Debug__SRO">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_b26uMH36Eee8vPff7YDTwQ" name="RefereeStateMachine" isReentrant="false">
        <region xmi:id="_b3xCwH36Eee8vPff7YDTwQ" name="Region">
          <transition xmi:id="_b4GZ8H36Eee8vPff7YDTwQ" name="Initial" source="_5d74UIEZEee5n5CT5zM8Ow" target="_b4A6YH36Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_2zOjoH36Eee8vPff7YDTwQ">
              <language>C++</language>
              <body>refereeTimer.informIn(UMLRTTimespec(4,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;STARTING ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_BTk88H37Eee8vPff7YDTwQ" name="startRound" source="_5bwHAIEZEee5n5CT5zM8Ow" target="_63lJ4H36Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_kD7WcH37Eee8vPff7YDTwQ">
              <language>C++</language>
              <body>log.show(&quot;starting round %d.\n&quot;, this->round);&#xD;
startPort.start().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::startRound&quot;,(char *)&quot;Debug__Path__startRound&quot;,(char *)&quot;WAITING FOR END OF ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_F5PggH37Eee8vPff7YDTwQ" name="endRound" source="_5anekIEZEee5n5CT5zM8Ow" target="_b4A6YH36Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Bq7QgH38Eee8vPff7YDTwQ">
              <language>C++</language>
              <body>log.show(&quot;round %d finished.\n&quot;, this->round);&#xD;
this->round++;&#xD;
refereeTimer.informIn(UMLRTTimespec(4,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::endRound&quot;,(char *)&quot;Debug__Path__endRound&quot;,(char *)&quot;STARTING ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5bBHMIEZEee5n5CT5zM8Ow" name="Debug__endRound" source="_63lJ4H36Eee8vPff7YDTwQ" target="_5anekIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5bBHMYEZEee5n5CT5zM8Ow" name="Debug__endRound__275">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__endRound&quot;,(char *)&quot;WAITING FOR END OF ROUND&quot;,(char *)&quot;Debug__Path__endRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
            <trigger xmi:id="_IRX1gH37Eee8vPff7YDTwQ" event="_IsvNwH35Eee8vPff7YDTwQ" port="_uEbSYH34Eee8vPff7YDTwQ"/>
          </transition>
          <transition xmi:id="_5bCVUIEZEee5n5CT5zM8Ow" name="Debug__endRound__S" guard="_5bCVUoEZEee5n5CT5zM8Ow" source="_5anekIEZEee5n5CT5zM8Ow" target="_5a3WMYEZEee5n5CT5zM8Ow">
            <ownedRule xmi:id="_5bCVUoEZEee5n5CT5zM8Ow" name="Debug__GuardendRound">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_5bCVUYEZEee5n5CT5zM8Ow" name="Debug__GuardendRound">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;WAITING FOR END OF ROUND&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5bC8YIEZEee5n5CT5zM8Ow" name="Debug__endRound__S__277">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__endRound__S&quot;,(char *)&quot;Debug__Path__endRound&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5bDjcIEZEee5n5CT5zM8Ow" name="Debug__endRound__E" source="_5a8OsIEZEee5n5CT5zM8Ow" target="_b4A6YH36Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5bDjcYEZEee5n5CT5zM8Ow" name="Debug__endRound__E__278">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__endRound__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;STARTING ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5bExkIEZEee5n5CT5zM8Ow" name="Debug__endRound__dbg__varChange" source="_5awBcYEZEee5n5CT5zM8Ow" target="_5awBcYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5bExkoEZEee5n5CT5zM8Ow" name="Debug__endRound__dbg__varChange__280">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_5bExkYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_4_x8sYEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_5bFYoIEZEee5n5CT5zM8Ow" name="Debug__endRound__dbg__setBreakPoint" source="_5awBcYEZEee5n5CT5zM8Ow" target="_5awBcYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5bFYooEZEee5n5CT5zM8Ow" name="Debug__endRound__dbg__setBreakPoint__281">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5bFYoYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_4_x8sYEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5bFYo4EZEee5n5CT5zM8Ow" name="Debug__endRound__dbg__remBreakPoint" source="_5awBcYEZEee5n5CT5zM8Ow" target="_5awBcYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5bF_sYEZEee5n5CT5zM8Ow" name="Debug__endRound__dbg__remBreakPoint__282">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5bF_sIEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_4_x8sYEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5bF_soEZEee5n5CT5zM8Ow" name="Debug__endRound__dbg__viewBreakPoints" source="_5awBcYEZEee5n5CT5zM8Ow" target="_5awBcYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5bHN0IEZEee5n5CT5zM8Ow" name="Debug__endRound__dbg__viewBreakPoints__283">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5bF_s4EZEee5n5CT5zM8Ow" name="Debug__MSG" port="_4_x8sYEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5bH04IEZEee5n5CT5zM8Ow" name="Debug__endRound__dbg__dbgSetExecMode" source="_5awBcYEZEee5n5CT5zM8Ow" target="_5awBcYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5bH04oEZEee5n5CT5zM8Ow" name="Debug__endRound__dbg__dbgSetExecMode__284">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_5bH04YEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_4_x8sYEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5bH044EZEee5n5CT5zM8Ow" name="Debug__endRound__dbg__dbgDeferMsg" source="_5awBcYEZEee5n5CT5zM8Ow" target="_5awBcYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5bIb8IEZEee5n5CT5zM8Ow" name="Debug__endRound__dbg__dbgDeferMsg__285">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5bH05IEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_uEbSYH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_5cUHsYEZEee5n5CT5zM8Ow" name="Debug__startRound" source="_b4A6YH36Eee8vPff7YDTwQ" target="_5bwHAIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5cUHsoEZEee5n5CT5zM8Ow" name="Debug__startRound__301">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__startRound&quot;,(char *)&quot;STARTING ROUND&quot;,(char *)&quot;Debug__Path__startRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
            <trigger xmi:id="_DVRH4H37Eee8vPff7YDTwQ" port="_hE7rMH36Eee8vPff7YDTwQ">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5cVV0IEZEee5n5CT5zM8Ow" name="Debug__startRound__S" guard="_5cVV0oEZEee5n5CT5zM8Ow" source="_5bwHAIEZEee5n5CT5zM8Ow" target="_5b7GIYEZEee5n5CT5zM8Ow">
            <ownedRule xmi:id="_5cVV0oEZEee5n5CT5zM8Ow" name="Debug__GuardstartRound">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_5cVV0YEZEee5n5CT5zM8Ow" name="Debug__GuardstartRound">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;STARTING ROUND&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5cV84IEZEee5n5CT5zM8Ow" name="Debug__startRound__S__303">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__startRound__S&quot;,(char *)&quot;Debug__Path__startRound&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5cZnQIEZEee5n5CT5zM8Ow" name="Debug__startRound__E" source="_5b_-oYEZEee5n5CT5zM8Ow" target="_63lJ4H36Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5cZnQYEZEee5n5CT5zM8Ow" name="Debug__startRound__E__304">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__startRound__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;WAITING FOR END OF ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5cfG0IEZEee5n5CT5zM8Ow" name="Debug__startRound__dbg__varChange" source="_5b1mkYEZEee5n5CT5zM8Ow" target="_5b1mkYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5cft4IEZEee5n5CT5zM8Ow" name="Debug__startRound__dbg__varChange__306">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_5cfG0YEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_4_x8sYEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_5cgU8IEZEee5n5CT5zM8Ow" name="Debug__startRound__dbg__setBreakPoint" source="_5b1mkYEZEee5n5CT5zM8Ow" target="_5b1mkYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5cgU8oEZEee5n5CT5zM8Ow" name="Debug__startRound__dbg__setBreakPoint__307">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5cgU8YEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_4_x8sYEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5cg8AIEZEee5n5CT5zM8Ow" name="Debug__startRound__dbg__remBreakPoint" source="_5b1mkYEZEee5n5CT5zM8Ow" target="_5b1mkYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5cg8AoEZEee5n5CT5zM8Ow" name="Debug__startRound__dbg__remBreakPoint__308">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5cg8AYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_4_x8sYEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5chjEIEZEee5n5CT5zM8Ow" name="Debug__startRound__dbg__viewBreakPoints" source="_5b1mkYEZEee5n5CT5zM8Ow" target="_5b1mkYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5chjEoEZEee5n5CT5zM8Ow" name="Debug__startRound__dbg__viewBreakPoints__309">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5chjEYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_4_x8sYEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5chjE4EZEee5n5CT5zM8Ow" name="Debug__startRound__dbg__dbgSetExecMode" source="_5b1mkYEZEee5n5CT5zM8Ow" target="_5b1mkYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5ciKIIEZEee5n5CT5zM8Ow" name="Debug__startRound__dbg__dbgSetExecMode__310">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_5chjFIEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_4_x8sYEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5clNcIEZEee5n5CT5zM8Ow" name="Debug__startRound__dbg__dbgDeferMsg" source="_5b1mkYEZEee5n5CT5zM8Ow" target="_5b1mkYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5cl0gIEZEee5n5CT5zM8Ow" name="Debug__startRound__dbg__dbgDeferMsg__311">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5clNcYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_uEbSYH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_5eUS0YEZEee5n5CT5zM8Ow" name="Debug__Initial" source="_5e8k8IEZEee5n5CT5zM8Ow" target="_5d74UIEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5eU54IEZEee5n5CT5zM8Ow" name="Debug__Initial__327">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;WAITING FOR TIMER&quot;,&quot;timeout&quot;,&quot;PLAYING&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPing&quot;,&quot;WAITING FOR TIMER&quot;,&quot;ping&quot;,&quot;PingPongProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;WAITING TO START&quot;,&quot;startSignal&quot;,&quot;PLAYING&quot;,&quot;start&quot;,&quot;StartProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePongsSent?&quot;,&quot;endOfRound&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;STARTING ROUND&quot;,&quot;startRound&quot;,&quot;WAITING FOR END OF ROUND&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;WAITING FOR END OF ROUND&quot;,&quot;endRound&quot;,&quot;STARTING ROUND&quot;,&quot;end&quot;,&quot;endProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;STARTING ROUND&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePingsSent?&quot;,&quot;keepPlaying&quot;,&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPong&quot;,&quot;ThreePingsSent?&quot;,&quot;pong&quot;,&quot;PingPongProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePongsSent?&quot;,&quot;keepPlaying&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;WAITING FOR TIMER&quot;,&quot;timeout&quot;,&quot;ThreePongsSent?&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePingsSent?&quot;,&quot;endOfRound&quot;,&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_5fCrkIEZEee5n5CT5zM8Ow" name="ConnectionEstablished" port="_4_x8sYEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
            </trigger>
          </transition>
          <transition xmi:id="_5eVg8IEZEee5n5CT5zM8Ow" name="Debug__Initial__S" guard="_5eWIAYEZEee5n5CT5zM8Ow" source="_5d74UIEZEee5n5CT5zM8Ow" target="_5eJ6wYEZEee5n5CT5zM8Ow">
            <ownedRule xmi:id="_5eWIAYEZEee5n5CT5zM8Ow" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_5eWIAIEZEee5n5CT5zM8Ow" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo3&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5eWvEIEZEee5n5CT5zM8Ow" name="Debug__Initial__S__329">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5eXWIIEZEee5n5CT5zM8Ow" name="Debug__Initial__E" source="_5eQBYIEZEee5n5CT5zM8Ow" target="_b4A6YH36Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5eX9MIEZEee5n5CT5zM8Ow" name="Debug__Initial__E__330">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;STARTING ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5eYkQIEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__varChange" source="_5eFCQYEZEee5n5CT5zM8Ow" target="_5eFCQYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5eYkQoEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__varChange__332">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_5eYkQYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_4_x8sYEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_5eZLUIEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__setBreakPoint" source="_5eFCQYEZEee5n5CT5zM8Ow" target="_5eFCQYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5eZLUoEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__setBreakPoint__333">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5eZLUYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_4_x8sYEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5eZyYIEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__remBreakPoint" source="_5eFCQYEZEee5n5CT5zM8Ow" target="_5eFCQYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5eZyYoEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__remBreakPoint__334">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5eZyYYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_4_x8sYEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5eZyY4EZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__viewBreakPoints" source="_5eFCQYEZEee5n5CT5zM8Ow" target="_5eFCQYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5eaZcIEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__viewBreakPoints__335">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5eZyZIEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_4_x8sYEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5eaZcYEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__dbgSetExecMode" source="_5eFCQYEZEee5n5CT5zM8Ow" target="_5eFCQYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5eaZc4EZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__dbgSetExecMode__336">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_5eaZcoEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_4_x8sYEZEee5n5CT5zM8Ow">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_5eaZdIEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__dbgDeferMsg" source="_5eFCQYEZEee5n5CT5zM8Ow" target="_5eFCQYEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5eaZdoEZEee5n5CT5zM8Ow" name="Debug__Initial__dbg__dbgDeferMsg__337">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_5eaZdYEZEee5n5CT5zM8Ow" name="Debug__MSG" port="_uEbSYH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_5fCEgYEZEee5n5CT5zM8Ow" name="Debug__InitDebug" source="_b317QH36Eee8vPff7YDTwQ" target="_5e8k8IEZEee5n5CT5zM8Ow">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5fCEgoEZEee5n5CT5zM8Ow" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_b317QH36Eee8vPff7YDTwQ" name="Pseudo3"/>
          <subvertex xmi:type="uml:State" xmi:id="_b4A6YH36Eee8vPff7YDTwQ" name="STARTING ROUND">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5fIyMIEZEee5n5CT5zM8Ow" name="STARTING ROUND__349">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::STARTING ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5fIyMYEZEee5n5CT5zM8Ow" name="STARTING ROUND__350">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::STARTING ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_63lJ4H36Eee8vPff7YDTwQ" name="WAITING FOR END OF ROUND">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5fJZQIEZEee5n5CT5zM8Ow" name="WAITING FOR END OF ROUND__351">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::WAITING FOR END OF ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5fKAUIEZEee5n5CT5zM8Ow" name="WAITING FOR END OF ROUND__352">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::WAITING FOR END OF ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_5anekIEZEee5n5CT5zM8Ow" name="Debug__Path__endRound" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_5awBcYEZEee5n5CT5zM8Ow" name="Debug__C__endRound">
            <connectionPoint xmi:id="_5a3WMYEZEee5n5CT5zM8Ow" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_5a8OsIEZEee5n5CT5zM8Ow" name="ex" kind="exitPoint"/>
            <region xmi:id="_5awBcoEZEee5n5CT5zM8Ow" name="Region1">
              <transition xmi:id="_5bPwsIEZEee5n5CT5zM8Ow" name="Debug__init__trans__endRound" source="_5a3WMYEZEee5n5CT5zM8Ow" target="_5bN7gIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5boyQIEZEee5n5CT5zM8Ow" name="Debug__init__trans__endRound__291">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__init__trans__endRound&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__WAITING FOR END OF ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_5bPwsYEZEee5n5CT5zM8Ow" name="Debug__Ex__WAITING FOR END OF ROUND" source="_5bN7gIEZEee5n5CT5zM8Ow" target="_5bN7goEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5bqncIEZEee5n5CT5zM8Ow" name="Debug__Ex__WAITING FOR END OF ROUND__293">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__Ex__WAITING FOR END OF ROUND&quot;,(char *)&quot;Debug__B__Ex__WAITING FOR END OF ROUND&quot;,(char *)&quot;Debug__B__Ac__endRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5bPwsoEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_4_x8sYEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5bPws4EZEee5n5CT5zM8Ow" name="Debug__AC__endRound" source="_5bN7goEZEee5n5CT5zM8Ow" target="_5bOikIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5bQXwIEZEee5n5CT5zM8Ow" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>log.show(&quot;round %d finished.\n&quot;, this->round);&#xD;
this->round++;&#xD;
refereeTimer.informIn(UMLRTTimespec(4,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__AC__endRound&quot;,(char *)&quot;Debug__B__Ac__endRound&quot;,(char *)&quot;Debug__A__Ac__endRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5bPwtIEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_4_x8sYEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5bQXwYEZEee5n5CT5zM8Ow" name="Debug__En__STARTING ROUND" source="_5bOikIEZEee5n5CT5zM8Ow" target="_5bPJoIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5btDsIEZEee5n5CT5zM8Ow" name="Debug__En__STARTING ROUND__296">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__En__STARTING ROUND&quot;,(char *)&quot;Debug__A__Ac__endRound&quot;,(char *)&quot;Debug__A__En__STARTING ROUND&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5bQXwoEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_4_x8sYEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5bQXw4EZEee5n5CT5zM8Ow" name="Debug__end__trans__endRound" source="_5bPJoIEZEee5n5CT5zM8Ow" target="_5a8OsIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5buR0IEZEee5n5CT5zM8Ow" name="Debug__end__trans__endRound__298">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__end__trans__endRound&quot;,(char *)&quot;Debug__A__En__STARTING ROUND&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_5bQXxIEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_4_x8sYEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_5bN7gIEZEee5n5CT5zM8Ow" name="Debug__B__Ex__WAITING FOR END OF ROUND">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5bN7gYEZEee5n5CT5zM8Ow" name="Debug__B__Ex__WAITING FOR END OF ROUND">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR END OF ROUND&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__B__Ex__WAITING FOR END OF ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5bV3UYEZEee5n5CT5zM8Ow" name="Debug__B__Ex__WAITING FOR END OF ROUND__286">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__B__Ex__WAITING FOR END OF ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5bN7goEZEee5n5CT5zM8Ow" name="Debug__B__Ac__endRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5bN7g4EZEee5n5CT5zM8Ow" name="Debug__B__Ac__endRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR END OF ROUND&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;endRound&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__B__Ac__endRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5bbW4YEZEee5n5CT5zM8Ow" name="Debug__B__Ac__endRound__287">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__B__Ac__endRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5bOikIEZEee5n5CT5zM8Ow" name="Debug__A__Ac__endRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5bOikYEZEee5n5CT5zM8Ow" name="Debug__A__Ac__endRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;endRound&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;STARTING ROUND&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__A__Ac__endRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5bhdgIEZEee5n5CT5zM8Ow" name="Debug__A__Ac__endRound__288">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__A__Ac__endRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5bPJoIEZEee5n5CT5zM8Ow" name="Debug__A__En__STARTING ROUND">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5bPJoYEZEee5n5CT5zM8Ow" name="Debug__A__En__STARTING ROUND">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;STARTING ROUND&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__A__En__STARTING ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5biEkIEZEee5n5CT5zM8Ow" name="Debug__A__En__STARTING ROUND__289">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__A__En__STARTING ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_5bwHAIEZEee5n5CT5zM8Ow" name="Debug__Path__startRound" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_5b1mkYEZEee5n5CT5zM8Ow" name="Debug__C__startRound">
            <connectionPoint xmi:id="_5b7GIYEZEee5n5CT5zM8Ow" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_5b_-oYEZEee5n5CT5zM8Ow" name="ex" kind="exitPoint"/>
            <region xmi:id="_5b1mkoEZEee5n5CT5zM8Ow" name="Region1">
              <transition xmi:id="_5c9A4IEZEee5n5CT5zM8Ow" name="Debug__init__trans__startRound" source="_5b7GIYEZEee5n5CT5zM8Ow" target="_5c6koYEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5dvrEYEZEee5n5CT5zM8Ow" name="Debug__init__trans__startRound__317">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__init__trans__startRound&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__STARTING ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_5c9A4YEZEee5n5CT5zM8Ow" name="Debug__Ex__STARTING ROUND" source="_5c6koYEZEee5n5CT5zM8Ow" target="_5c7LsIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5dw5MIEZEee5n5CT5zM8Ow" name="Debug__Ex__STARTING ROUND__319">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__Ex__STARTING ROUND&quot;,(char *)&quot;Debug__B__Ex__STARTING ROUND&quot;,(char *)&quot;Debug__B__Ac__startRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5c9A4oEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_4_x8sYEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5c9A44EZEee5n5CT5zM8Ow" name="Debug__AC__startRound" source="_5c7LsIEZEee5n5CT5zM8Ow" target="_5c7ywIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5c9n8IEZEee5n5CT5zM8Ow" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>log.show(&quot;starting round %d.\n&quot;, this->round);&#xD;
startPort.start().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__AC__startRound&quot;,(char *)&quot;Debug__B__Ac__startRound&quot;,(char *)&quot;Debug__A__Ac__startRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5c9A5IEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_4_x8sYEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5c_dIIEZEee5n5CT5zM8Ow" name="Debug__En__WAITING FOR END OF ROUND" source="_5c7ywIEZEee5n5CT5zM8Ow" target="_5c8Z0IEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5d4N8IEZEee5n5CT5zM8Ow" name="Debug__En__WAITING FOR END OF ROUND__322">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__En__WAITING FOR END OF ROUND&quot;,(char *)&quot;Debug__A__Ac__startRound&quot;,(char *)&quot;Debug__A__En__WAITING FOR END OF ROUND&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5c_dIYEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_4_x8sYEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5dAEMIEZEee5n5CT5zM8Ow" name="Debug__end__trans__startRound" source="_5c8Z0IEZEee5n5CT5zM8Ow" target="_5b_-oYEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5d6DIIEZEee5n5CT5zM8Ow" name="Debug__end__trans__startRound__324">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__end__trans__startRound&quot;,(char *)&quot;Debug__A__En__WAITING FOR END OF ROUND&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_5dAEMYEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_4_x8sYEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_5c6koYEZEee5n5CT5zM8Ow" name="Debug__B__Ex__STARTING ROUND">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5c6kooEZEee5n5CT5zM8Ow" name="Debug__B__Ex__STARTING ROUND">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;STARTING ROUND&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__B__Ex__STARTING ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5dJ1MIEZEee5n5CT5zM8Ow" name="Debug__B__Ex__STARTING ROUND__312">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__B__Ex__STARTING ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5c7LsIEZEee5n5CT5zM8Ow" name="Debug__B__Ac__startRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5c7LsYEZEee5n5CT5zM8Ow" name="Debug__B__Ac__startRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;STARTING ROUND&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;startRound&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__B__Ac__startRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5dWCcIEZEee5n5CT5zM8Ow" name="Debug__B__Ac__startRound__313">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__B__Ac__startRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5c7ywIEZEee5n5CT5zM8Ow" name="Debug__A__Ac__startRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5c7ywYEZEee5n5CT5zM8Ow" name="Debug__A__Ac__startRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;startRound&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;WAITING FOR END OF ROUND&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__A__Ac__startRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5dhBkYEZEee5n5CT5zM8Ow" name="Debug__A__Ac__startRound__314">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__A__Ac__startRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5c8Z0IEZEee5n5CT5zM8Ow" name="Debug__A__En__WAITING FOR END OF ROUND">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5c8Z0YEZEee5n5CT5zM8Ow" name="Debug__A__En__WAITING FOR END OF ROUND">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR END OF ROUND&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__A__En__WAITING FOR END OF ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5dlTAIEZEee5n5CT5zM8Ow" name="Debug__A__En__WAITING FOR END OF ROUND__315">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__A__En__WAITING FOR END OF ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_5d74UIEZEee5n5CT5zM8Ow" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_5eFCQYEZEee5n5CT5zM8Ow" name="Debug__C__Initial">
            <connectionPoint xmi:id="_5eJ6wYEZEee5n5CT5zM8Ow" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_5eQBYIEZEee5n5CT5zM8Ow" name="ex" kind="exitPoint"/>
            <region xmi:id="_5eFCQoEZEee5n5CT5zM8Ow" name="Region1">
              <transition xmi:id="_5ehuMoEZEee5n5CT5zM8Ow" name="Debug__init__trans__Initial" source="_5eJ6wYEZEee5n5CT5zM8Ow" target="_5eggEIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5e0pIIEZEee5n5CT5zM8Ow" name="Debug__init__trans__Initial__342">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_5ehuM4EZEee5n5CT5zM8Ow" name="Debug__Ac__Initial" source="_5eggEIEZEee5n5CT5zM8Ow" target="_5ehHIIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5eiVQIEZEee5n5CT5zM8Ow" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>refereeTimer.informIn(UMLRTTimespec(4,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5ehuNIEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_4_x8sYEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5eiVQYEZEee5n5CT5zM8Ow" name="Debug__En__STARTING ROUND" source="_5ehHIIEZEee5n5CT5zM8Ow" target="_5ehuMIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5e2eUIEZEee5n5CT5zM8Ow" name="Debug__En__STARTING ROUND__345">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__En__STARTING ROUND&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_5eiVQoEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_4_x8sYEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_5eiVQ4EZEee5n5CT5zM8Ow" name="Debug__end__trans__Initial" source="_5ehuMIEZEee5n5CT5zM8Ow" target="_5eQBYIEZEee5n5CT5zM8Ow">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5e4TgIEZEee5n5CT5zM8Ow" name="Debug__end__trans__Initial__347">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_5eiVRIEZEee5n5CT5zM8Ow" name="Debug__Exec" port="_4_x8sYEZEee5n5CT5zM8Ow">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_5eggEIEZEee5n5CT5zM8Ow" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5eggEYEZEee5n5CT5zM8Ow" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5en00IEZEee5n5CT5zM8Ow" name="Debug__B__Ac__Initial__338">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5ehHIIEZEee5n5CT5zM8Ow" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5ehHIYEZEee5n5CT5zM8Ow" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;STARTING ROUND&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5etUYYEZEee5n5CT5zM8Ow" name="Debug__A__Ac__Initial__339">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5ehuMIEZEee5n5CT5zM8Ow" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5ehuMYEZEee5n5CT5zM8Ow" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;STARTING ROUND&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_5eyz8YEZEee5n5CT5zM8Ow" name="Debug__A__En__Initial__340">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_5e8k8IEZEee5n5CT5zM8Ow" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_4_x8sIEZEee5n5CT5zM8Ow" name="Debug__recallAllMsg" specification="_4_xVoIEZEee5n5CT5zM8Ow">
        <language>C++</language>
        <body>endPort.recallAll();
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_5AUvQYEZEee5n5CT5zM8Ow" name="Debug__variablesViewMethod" specification="_5AUvQIEZEee5n5CT5zM8Ow">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;round,&quot;);
tempS.append(&quot;Integer,&quot;);
if(round!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,round);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_5AZAsYEZEee5n5CT5zM8Ow" name="Debug__variablesChange" specification="_5AV9YIEZEee5n5CT5zM8Ow">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;round&quot;==tempVarName){
    round=atoi(varValue);
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_5DNrMIEZEee5n5CT5zM8Ow" name="Debug__sendEvent" specification="_5B1yMIEZEee5n5CT5zM8Ow">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
this->Debug__event.setPayloadField(&quot;SenderCapsule&quot;,reserve3);
this->Debug__event.setPayloadField(&quot;Port&quot;,reserve4);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_4_xVoIEZEee5n5CT5zM8Ow" name="Debug__recallAllMsg" visibility="private" method="_4_x8sIEZEee5n5CT5zM8Ow"/>
      <ownedOperation xmi:id="_5AUvQIEZEee5n5CT5zM8Ow" name="Debug__variablesView" visibility="private" method="_5AUvQYEZEee5n5CT5zM8Ow"/>
      <ownedOperation xmi:id="_5AV9YIEZEee5n5CT5zM8Ow" name="Debug__variablesChange" visibility="private" method="_5AZAsYEZEee5n5CT5zM8Ow">
        <ownedParameter xmi:id="_5AV9YYEZEee5n5CT5zM8Ow" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_5AYZoIEZEee5n5CT5zM8Ow" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_5AZAsIEZEee5n5CT5zM8Ow" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_5B1yMIEZEee5n5CT5zM8Ow" name="Debug__sendEvent" visibility="private" method="_5DNrMIEZEee5n5CT5zM8Ow">
        <ownedParameter xmi:id="_5B6qsIEZEee5n5CT5zM8Ow" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_5CLwcIEZEee5n5CT5zM8Ow" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_5CcPIIEZEee5n5CT5zM8Ow" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_5CocYIEZEee5n5CT5zM8Ow" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_5CpDcIEZEee5n5CT5zM8Ow" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_5Cw_QIEZEee5n5CT5zM8Ow" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_5C47EIEZEee5n5CT5zM8Ow" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_5C47EYEZEee5n5CT5zM8Ow" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_5C47EoEZEee5n5CT5zM8Ow" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_5C5iIIEZEee5n5CT5zM8Ow" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_5DEhQIEZEee5n5CT5zM8Ow" name="reserve4">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_dgvdoH34Eee8vPff7YDTwQ" name="StartProtocol">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_dglsoH34Eee8vPff7YDTwQ" name="StartProtocol">
        <interfaceRealization xmi:id="_dhENwH34Eee8vPff7YDTwQ" client="_dglsoH34Eee8vPff7YDTwQ" supplier="_dg8R8H34Eee8vPff7YDTwQ" contract="_dg8R8H34Eee8vPff7YDTwQ"/>
        <interfaceRealization xmi:id="_dhZk8H34Eee8vPff7YDTwQ" client="_dglsoH34Eee8vPff7YDTwQ" supplier="_dhSQMH34Eee8vPff7YDTwQ" contract="_dhSQMH34Eee8vPff7YDTwQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_dg8R8H34Eee8vPff7YDTwQ" name="StartProtocol"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_dhH4IH34Eee8vPff7YDTwQ" name="StartProtocol~">
        <ownedOperation xmi:id="_FavRgH35Eee8vPff7YDTwQ" name="start"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_dhPz8H34Eee8vPff7YDTwQ" client="_dglsoH34Eee8vPff7YDTwQ" supplier="_dhH4IH34Eee8vPff7YDTwQ"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_dhRpIH34Eee8vPff7YDTwQ" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_dhSQMH34Eee8vPff7YDTwQ" name="StartProtocolIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_dhbaIH34Eee8vPff7YDTwQ" client="_dglsoH34Eee8vPff7YDTwQ" supplier="_dhSQMH34Eee8vPff7YDTwQ"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_FbDakH35Eee8vPff7YDTwQ" operation="_FavRgH35Eee8vPff7YDTwQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_wEMKsH34Eee8vPff7YDTwQ" name="endProtocol">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_wEGEEH34Eee8vPff7YDTwQ" name="endProtocol">
        <interfaceRealization xmi:id="_wEZmEH34Eee8vPff7YDTwQ" client="_wEGEEH34Eee8vPff7YDTwQ" supplier="_wES4YH34Eee8vPff7YDTwQ" contract="_wES4YH34Eee8vPff7YDTwQ"/>
        <interfaceRealization xmi:id="_wEr58H34Eee8vPff7YDTwQ" client="_wEGEEH34Eee8vPff7YDTwQ" supplier="_wElMQH34Eee8vPff7YDTwQ" contract="_wElMQH34Eee8vPff7YDTwQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_wES4YH34Eee8vPff7YDTwQ" name="endProtocol"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_wEbbQH34Eee8vPff7YDTwQ" name="endProtocol~">
        <ownedOperation xmi:id="_IsjnkH35Eee8vPff7YDTwQ" name="end"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_wEjXEH34Eee8vPff7YDTwQ" client="_wEGEEH34Eee8vPff7YDTwQ" supplier="_wEbbQH34Eee8vPff7YDTwQ"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_wEklMH34Eee8vPff7YDTwQ" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_wElMQH34Eee8vPff7YDTwQ" name="endProtocolIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_wEtvIH34Eee8vPff7YDTwQ" client="_wEGEEH34Eee8vPff7YDTwQ" supplier="_wElMQH34Eee8vPff7YDTwQ"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_IsvNwH35Eee8vPff7YDTwQ" operation="_IsjnkH35Eee8vPff7YDTwQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_40SeYIEZEee5n5CT5zM8Ow" name="Debug__Top">
      <ownedAttribute xmi:id="_428w0IEZEee5n5CT5zM8Ow" name="Debug__Gateway">
        <type xmi:type="uml:Class" href="../CommGateWay/model.uml#_XIyCcAdxEeadtKuU2t6fMg"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_43PEsIEZEee5n5CT5zM8Ow" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_43PEsYEZEee5n5CT5zM8Ow" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_43Rg8IEZEee5n5CT5zM8Ow" name="Debug__Top" type="_oVoIcDKJEeeIZIaasUdwVA">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_43gxgYEZEee5n5CT5zM8Ow" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_43gxgoEZEee5n5CT5zM8Ow" value="1"/>
      </ownedAttribute>
    </packagedElement>
    <profileApplication xmi:id="_cJ2kYzJjEeeIZIaasUdwVA">
      <eAnnotations xmi:id="_cJ2kZDJjEeeIZIaasUdwVA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:id="_cJ2kZTJjEeeIZIaasUdwVA">
      <eAnnotations xmi:id="_cJ2kZjJjEeeIZIaasUdwVA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
    <profileApplication xmi:id="_cJ2kZzJjEeeIZIaasUdwVA">
      <eAnnotations xmi:id="_cJ2kaDJjEeeIZIaasUdwVA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UMLRT_CPP/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:ProtocolContainer xmi:id="_-IyvETJjEeeIZIaasUdwVA" base_Package="_-IyvEDJjEeeIZIaasUdwVA"/>
  <UMLRealTime:RTMessageSet xmi:id="_-J_o8DJjEeeIZIaasUdwVA" base_Interface="_-J138DJjEeeIZIaasUdwVA"/>
  <UMLRealTime:RTMessageSet xmi:id="_-KIy4TJjEeeIZIaasUdwVA" base_Interface="_-KIy4DJjEeeIZIaasUdwVA" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_-KSj4jJjEeeIZIaasUdwVA" base_Interface="_-KSj4TJjEeeIZIaasUdwVA" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_-Kbt0TJjEeeIZIaasUdwVA" base_Collaboration="_-CQpQDJjEeeIZIaasUdwVA"/>
  <UMLRealTime:Capsule xmi:id="_JMUgYDKEEeeIZIaasUdwVA" base_Class="_IYQmMDKEEeeIZIaasUdwVA"/>
  <UMLRealTime:RTPort xmi:id="_uG1EUDKEEeeIZIaasUdwVA" base_Port="_uF7scDKEEeeIZIaasUdwVA"/>
  <UMLRealTime:RTPort xmi:id="_BGPUoDKFEeeIZIaasUdwVA" isWired="false" base_Port="_BGFjoDKFEeeIZIaasUdwVA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_LWwiMDKFEeeIZIaasUdwVA" base_Pseudostate="_LWmxMDKFEeeIZIaasUdwVA"/>
  <UMLRTStateMachines:RTState xmi:id="_LXWYETKFEeeIZIaasUdwVA" base_State="_LXWYEDKFEeeIZIaasUdwVA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_LXzEADKFEeeIZIaasUdwVA" base_Region="_LWT2QDKFEeeIZIaasUdwVA"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_LZu9wDKFEeeIZIaasUdwVA" base_StateMachine="_LUEakDKFEeeIZIaasUdwVA"/>
  <UMLRealTime:Capsule xmi:id="_UUaHzDKHEeeIZIaasUdwVA" base_Class="_UTN08DKHEeeIZIaasUdwVA"/>
  <UMLRealTime:RTPort xmi:id="_bdGowDKHEeeIZIaasUdwVA" base_Port="_bc83wDKHEeeIZIaasUdwVA"/>
  <UMLRealTime:RTPort xmi:id="_gaTikTKHEeeIZIaasUdwVA" isWired="false" base_Port="_gaTikDKHEeeIZIaasUdwVA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_pViYMjKHEeeIZIaasUdwVA" base_Pseudostate="_pViYMTKHEeeIZIaasUdwVA"/>
  <UMLRTStateMachines:RTState xmi:id="_pVsJMTKHEeeIZIaasUdwVA" base_State="_pVsJMDKHEeeIZIaasUdwVA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_pVsJMzKHEeeIZIaasUdwVA" base_Region="_pViYMDKHEeeIZIaasUdwVA"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_pW4cEDKHEeeIZIaasUdwVA" base_StateMachine="_pVZOQDKHEeeIZIaasUdwVA"/>
  <UMLRealTime:Capsule xmi:id="_oW0bTDKJEeeIZIaasUdwVA" base_Class="_oVoIcDKJEeeIZIaasUdwVA"/>
  <UMLRealTime:CapsulePart xmi:id="_sKwm8DKJEeeIZIaasUdwVA" base_Property="_sKndADKJEeeIZIaasUdwVA"/>
  <UMLRealTime:CapsulePart xmi:id="_x3ijkDKJEeeIZIaasUdwVA" base_Property="_x3YykDKJEeeIZIaasUdwVA"/>
  <UMLRealTime:RTConnector xmi:id="_62BhgjKJEeeIZIaasUdwVA" base_Connector="_61R6oDKJEeeIZIaasUdwVA"/>
  <UMLRealTime:CapsulePart xmi:id="_U5_qQH34Eee8vPff7YDTwQ" base_Property="_Uy91MH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:Capsule xmi:id="_VSOkEH34Eee8vPff7YDTwQ" base_Class="_VPgAMH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTPort xmi:id="_coMsEH34Eee8vPff7YDTwQ" base_Port="_coBs8H34Eee8vPff7YDTwQ"/>
  <UMLRealTime:ProtocolContainer xmi:id="_dg2LUH34Eee8vPff7YDTwQ" base_Package="_dgvdoH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTMessageSet xmi:id="_dhBKcH34Eee8vPff7YDTwQ" base_Interface="_dg8R8H34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTMessageSet xmi:id="_dhNXsH34Eee8vPff7YDTwQ" base_Interface="_dhH4IH34Eee8vPff7YDTwQ" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_dhXIsH34Eee8vPff7YDTwQ" base_Interface="_dhSQMH34Eee8vPff7YDTwQ" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_dhdPUH34Eee8vPff7YDTwQ" base_Collaboration="_dglsoH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTPort xmi:id="_ipb1wH34Eee8vPff7YDTwQ" base_Port="_ipVIEH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTConnector xmi:id="_olKNUH34Eee8vPff7YDTwQ" base_Connector="_olDfoH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTPort xmi:id="_uEhZAH34Eee8vPff7YDTwQ" base_Port="_uEbSYH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:ProtocolContainer xmi:id="_wEQcIH34Eee8vPff7YDTwQ" base_Package="_wEMKsH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTMessageSet xmi:id="_wEWiwH34Eee8vPff7YDTwQ" base_Interface="_wES4YH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTMessageSet xmi:id="_wEhh4H34Eee8vPff7YDTwQ" base_Interface="_wEbbQH34Eee8vPff7YDTwQ" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_wEpdsH34Eee8vPff7YDTwQ" base_Interface="_wElMQH34Eee8vPff7YDTwQ" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_wEvkUH34Eee8vPff7YDTwQ" base_Collaboration="_wEGEEH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTPort xmi:id="_xzpWIH34Eee8vPff7YDTwQ" base_Port="_xzj2kH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTConnector xmi:id="_8-rrMX34Eee8vPff7YDTwQ" base_Connector="_8-nZwH34Eee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_b38B4H36Eee8vPff7YDTwQ" base_Pseudostate="_b317QH36Eee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTState xmi:id="_b4D9sH36Eee8vPff7YDTwQ" base_State="_b4A6YH36Eee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTRegion xmi:id="_b4IPIH36Eee8vPff7YDTwQ" base_Region="_b3xCwH36Eee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_b58NAH36Eee8vPff7YDTwQ" base_StateMachine="_b26uMH36Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTPort xmi:id="_gTkfsH36Eee8vPff7YDTwQ" isWired="false" base_Port="_gTLeIH36Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTPort xmi:id="_hFBx0H36Eee8vPff7YDTwQ" isWired="false" base_Port="_hE7rMH36Eee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTState xmi:id="_63rQgH36Eee8vPff7YDTwQ" base_State="_63lJ4H36Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTPort xmi:id="_F8Qi0H38Eee8vPff7YDTwQ" isWired="false" base_Port="_F7fGwH38Eee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTState xmi:id="_n2CgsH38Eee8vPff7YDTwQ" base_State="_n1-PQH38Eee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_mQPyIH39Eee8vPff7YDTwQ" base_Pseudostate="_mQKSkH39Eee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTState xmi:id="_66KKgH3_Eee8vPff7YDTwQ" base_State="_66GgIH3_Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTPort xmi:id="_mpzaQH4AEee8vPff7YDTwQ" isWired="false" base_Port="_mo-64H4AEee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTState xmi:id="_wOI3QH4AEee8vPff7YDTwQ" base_State="_wOD-wH4AEee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_EMomAH4BEee8vPff7YDTwQ" base_Pseudostate="_EMjGcH4BEee8vPff7YDTwQ"/>
  <UMLRealTime:Capsule xmi:id="_4201AIEZEee5n5CT5zM8Ow" base_Class="_40SeYIEZEee5n5CT5zM8Ow"/>
  <UMLRealTime:CapsulePart xmi:id="_43OdoIEZEee5n5CT5zM8Ow" base_Property="_428w0IEZEee5n5CT5zM8Ow"/>
  <UMLRealTime:CapsulePart xmi:id="_43gxgIEZEee5n5CT5zM8Ow" base_Property="_43Rg8IEZEee5n5CT5zM8Ow"/>
  <UMLRealTime:RTPort xmi:id="_44IckIEZEee5n5CT5zM8Ow" isNotification="true" isWired="false" base_Port="_43_5sIEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:AttributeProperties xmi:id="_45S6MIEZEee5n5CT5zM8Ow" type="debugEvents::Event" base_Property="_45BNYIEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:AttributeProperties xmi:id="_45si0IEZEee5n5CT5zM8Ow" type="SROManager" base_Property="_45hjsIEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:CapsuleProperties xmi:id="_457MUIEZEee5n5CT5zM8Ow" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_IYQmMDKEEeeIZIaasUdwVA"/>
  <RTCppProperties:ParameterProperties xmi:id="_46kFgIEZEee5n5CT5zM8Ow" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_46cJsIEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:ParameterProperties xmi:id="_46yvAIEZEee5n5CT5zM8Ow" type="debugEvents::EVENTTYPE" base_Parameter="_46qzMIEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:ParameterProperties xmi:id="_47CmoIEZEee5n5CT5zM8Ow" type="const char *" base_Parameter="_466q0IEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:ParameterProperties xmi:id="_47QCAIEZEee5n5CT5zM8Ow" type="const char *" base_Parameter="_47KicIEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:ParameterProperties xmi:id="_47ggsIEZEee5n5CT5zM8Ow" type="const char *" base_Parameter="_47XWwIEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:ParameterProperties xmi:id="_47vKMIEZEee5n5CT5zM8Ow" type="const char *" base_Parameter="_47pDkYEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:ParameterProperties xmi:id="_47_B0IEZEee5n5CT5zM8Ow" type="const char *" base_Parameter="_472e8IEZEee5n5CT5zM8Ow"/>
  <UMLRealTime:RTPort xmi:id="_49GcIIEZEee5n5CT5zM8Ow" isNotification="true" isWired="false" base_Port="_49CxwIEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:AttributeProperties xmi:id="_49caYIEZEee5n5CT5zM8Ow" type="debugEvents::Event" base_Property="_49VssoEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:AttributeProperties xmi:id="_49p1wIEZEee5n5CT5zM8Ow" type="SROManager" base_Property="_49jIEIEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:CapsuleProperties xmi:id="_49004IEZEee5n5CT5zM8Ow" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_UTN08DKHEeeIZIaasUdwVA"/>
  <RTCppProperties:ParameterProperties xmi:id="_4-ProIEZEee5n5CT5zM8Ow" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_4-JlAYEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:ParameterProperties xmi:id="_4-XncIEZEee5n5CT5zM8Ow" type="debugEvents::EVENTTYPE" base_Parameter="_4-T9EIEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:ParameterProperties xmi:id="_4-h_gIEZEee5n5CT5zM8Ow" type="const char *" base_Parameter="_4-cf8IEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:ParameterProperties xmi:id="_4-wB8IEZEee5n5CT5zM8Ow" type="const char *" base_Parameter="_4-oGIIEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:ParameterProperties xmi:id="_4-7BEIEZEee5n5CT5zM8Ow" type="const char *" base_Parameter="_4-2IkIEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:ParameterProperties xmi:id="_4_Q_UIEZEee5n5CT5zM8Ow" type="const char *" base_Parameter="_4_JqkIEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:ParameterProperties xmi:id="_4_bXYIEZEee5n5CT5zM8Ow" type="const char *" base_Parameter="_4_V30IEZEee5n5CT5zM8Ow"/>
  <UMLRealTime:RTPort xmi:id="_4_7tsIEZEee5n5CT5zM8Ow" isNotification="true" isWired="false" base_Port="_4_x8sYEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:AttributeProperties xmi:id="_5AiKoIEZEee5n5CT5zM8Ow" type="debugEvents::Event" base_Property="_5AZnwIEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:AttributeProperties xmi:id="_5A7MMIEZEee5n5CT5zM8Ow" type="SROManager" base_Property="_5AoRQIEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:CapsuleProperties xmi:id="_5BVb4IEZEee5n5CT5zM8Ow" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_VPgAMH34Eee8vPff7YDTwQ"/>
  <RTCppProperties:ParameterProperties xmi:id="_5CHfAIEZEee5n5CT5zM8Ow" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_5B6qsIEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:ParameterProperties xmi:id="_5CYkwIEZEee5n5CT5zM8Ow" type="debugEvents::EVENTTYPE" base_Parameter="_5CLwcIEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:ParameterProperties xmi:id="_5CiVwIEZEee5n5CT5zM8Ow" type="const char *" base_Parameter="_5CcPIIEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:ParameterProperties xmi:id="_5CtU4IEZEee5n5CT5zM8Ow" type="const char *" base_Parameter="_5CpDcIEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:ParameterProperties xmi:id="_5C0poIEZEee5n5CT5zM8Ow" type="const char *" base_Parameter="_5Cw_QIEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:ParameterProperties xmi:id="_5C9zkIEZEee5n5CT5zM8Ow" type="const char *" base_Parameter="_5C5iIIEZEee5n5CT5zM8Ow"/>
  <RTCppProperties:ParameterProperties xmi:id="_5DKA0IEZEee5n5CT5zM8Ow" type="const char *" base_Parameter="_5DEhQIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5DVnAIEZEee5n5CT5zM8Ow" base_Pseudostate="_5DRVkIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5DZ4cIEZEee5n5CT5zM8Ow" base_State="_5DVnAYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5Df_EIEZEee5n5CT5zM8Ow" base_Pseudostate="_5DZ4cYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5DnT0IEZEee5n5CT5zM8Ow" base_Pseudostate="_5DgmIIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTRegion xmi:id="_5D1WQIEZEee5n5CT5zM8Ow" base_Region="_5DVnAoEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5D95IIEZEee5n5CT5zM8Ow" base_State="_5D19UIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5EGcAIEZEee5n5CT5zM8Ow" base_State="_5D2kYIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5EMioIEZEee5n5CT5zM8Ow" base_State="_5D3LcIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5EZW8IEZEee5n5CT5zM8Ow" base_Pseudostate="_5EVFgIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5EjH8IEZEee5n5CT5zM8Ow" base_State="_5EZ-AIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5ErDwIEZEee5n5CT5zM8Ow" base_Pseudostate="_5EjH8YEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5E1b0IEZEee5n5CT5zM8Ow" base_Pseudostate="_5ErDwYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTRegion xmi:id="_5FQ5oIEZEee5n5CT5zM8Ow" base_Region="_5EZ-AYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5FgxQIEZEee5n5CT5zM8Ow" base_State="_5FRgsIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5FsXcIEZEee5n5CT5zM8Ow" base_State="_5FSHwIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5F7oAIEZEee5n5CT5zM8Ow" base_State="_5FSu0IEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5GPKAIEZEee5n5CT5zM8Ow" base_Pseudostate="_5GEx8IEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5GY7AIEZEee5n5CT5zM8Ow" base_State="_5GPKAYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5Gg20IEZEee5n5CT5zM8Ow" base_Pseudostate="_5GZiEIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5HsikIEZEee5n5CT5zM8Ow" base_Pseudostate="_5Ghd4IEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTRegion xmi:id="_5H9BQIEZEee5n5CT5zM8Ow" base_Region="_5GPKAoEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5IFkIIEZEee5n5CT5zM8Ow" base_State="_5H9BQYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5IMR0IEZEee5n5CT5zM8Ow" base_State="_5H9oUIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5ISYcIEZEee5n5CT5zM8Ow" base_State="_5H-PYIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5IYfEIEZEee5n5CT5zM8Ow" base_State="_5H-2cIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5ImhgIEZEee5n5CT5zM8Ow" base_Pseudostate="_5IhpAIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5IraAIEZEee5n5CT5zM8Ow" base_State="_5ImhgYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5IvrcIEZEee5n5CT5zM8Ow" base_Pseudostate="_5IraAYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5I0j8IEZEee5n5CT5zM8Ow" base_Pseudostate="_5IvrcYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTRegion xmi:id="_5JAxMIEZEee5n5CT5zM8Ow" base_Region="_5ImhgoEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5JHe4IEZEee5n5CT5zM8Ow" base_State="_5JAxMYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5JMXYIEZEee5n5CT5zM8Ow" base_State="_5JBYQIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5JR28IEZEee5n5CT5zM8Ow" base_State="_5JB_UIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5JpqYIEZEee5n5CT5zM8Ow" base_Pseudostate="_5JeEMIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5J0pgIEZEee5n5CT5zM8Ow" base_State="_5JpqYYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5J7-QIEZEee5n5CT5zM8Ow" base_Pseudostate="_5J1QkIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5KJZoIEZEee5n5CT5zM8Ow" base_Pseudostate="_5J7-QYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTRegion xmi:id="_5KVm4IEZEee5n5CT5zM8Ow" base_Region="_5JqRcIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5KeJwIEZEee5n5CT5zM8Ow" base_State="_5KVm4YEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5KjCQIEZEee5n5CT5zM8Ow" base_State="_5KWN8IEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5Kn6wIEZEee5n5CT5zM8Ow" base_State="_5KW1AIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5K3yYIEZEee5n5CT5zM8Ow" base_State="_5Kzg8IEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5LDYkIEZEee5n5CT5zM8Ow" base_Pseudostate="_5K_HIIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5LIREIEZEee5n5CT5zM8Ow" base_State="_5LDYkYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5LNJkIEZEee5n5CT5zM8Ow" base_Pseudostate="_5LIREYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5LSCEIEZEee5n5CT5zM8Ow" base_Pseudostate="_5LNJkYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTRegion xmi:id="_5LlkEIEZEee5n5CT5zM8Ow" base_Region="_5LDYkoEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5Lv8IIEZEee5n5CT5zM8Ow" base_State="_5LlkEYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5L1bsIEZEee5n5CT5zM8Ow" base_State="_5LmLIIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5L7iUIEZEee5n5CT5zM8Ow" base_State="_5LnZQIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5MCQAIEZEee5n5CT5zM8Ow" base_State="_5LpOcIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5MSusIEZEee5n5CT5zM8Ow" base_Pseudostate="_5MOdQIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5MXnMIEZEee5n5CT5zM8Ow" base_State="_5MTVwIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5Mb4oIEZEee5n5CT5zM8Ow" base_Pseudostate="_5MXnMYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5MgxIIEZEee5n5CT5zM8Ow" base_Pseudostate="_5Mb4oYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTRegion xmi:id="_5MsXUIEZEee5n5CT5zM8Ow" base_Region="_5MTVwYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5MzFAIEZEee5n5CT5zM8Ow" base_State="_5Ms-YIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5M5LoIEZEee5n5CT5zM8Ow" base_State="_5Ms-YoEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5NC8oIEZEee5n5CT5zM8Ow" base_State="_5MtlcYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5NclQIEZEee5n5CT5zM8Ow" base_Pseudostate="_5NMtoIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5N0YsIEZEee5n5CT5zM8Ow" base_State="_5NdMUIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5N6fUIEZEee5n5CT5zM8Ow" base_Pseudostate="_5N2N4IEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5WLDcIEZEee5n5CT5zM8Ow" base_Pseudostate="_5OEQUIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTRegion xmi:id="_5WbiIIEZEee5n5CT5zM8Ow" base_Region="_5NdMUYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5WnvYIEZEee5n5CT5zM8Ow" base_State="_5WdXUIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5Wt2AIEZEee5n5CT5zM8Ow" base_State="_5Wd-YIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5WzVkIEZEee5n5CT5zM8Ow" base_State="_5WelcIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5W-UsIEZEee5n5CT5zM8Ow" base_Pseudostate="_5W5cMIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5XCmIIEZEee5n5CT5zM8Ow" base_State="_5W-UsYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5XIswIEZEee5n5CT5zM8Ow" base_Pseudostate="_5XCmIYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5XOMUIEZEee5n5CT5zM8Ow" base_Pseudostate="_5XJT0IEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTRegion xmi:id="_5XYkYIEZEee5n5CT5zM8Ow" base_Region="_5W-UsoEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5XjjgIEZEee5n5CT5zM8Ow" base_State="_5XZLcIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5XocAIEZEee5n5CT5zM8Ow" base_State="_5XZLcoEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5Xt7kIEZEee5n5CT5zM8Ow" base_State="_5XZygYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5X6v4IEZEee5n5CT5zM8Ow" base_Pseudostate="_5X13YIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5YAPcIEZEee5n5CT5zM8Ow" base_State="_5X6v4YEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5YFH8IEZEee5n5CT5zM8Ow" base_Pseudostate="_5YAPcYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5YKAcIEZEee5n5CT5zM8Ow" base_Pseudostate="_5YFH8YEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTRegion xmi:id="_5YZ4EIEZEee5n5CT5zM8Ow" base_Region="_5X6v4oEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5Yia8IEZEee5n5CT5zM8Ow" base_State="_5YZ4EYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5YohkIEZEee5n5CT5zM8Ow" base_State="_5YafIIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5YuoMIEZEee5n5CT5zM8Ow" base_State="_5YbGMIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5Y9RsIEZEee5n5CT5zM8Ow" base_Pseudostate="_5Y3LEIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5ZCKMIEZEee5n5CT5zM8Ow" base_State="_5Y94wIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5ZHpwIEZEee5n5CT5zM8Ow" base_Pseudostate="_5ZCxQIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5ZL7MIEZEee5n5CT5zM8Ow" base_Pseudostate="_5ZHpwYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTRegion xmi:id="_5ZYvgIEZEee5n5CT5zM8Ow" base_Region="_5Y94wYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5ZjHkIEZEee5n5CT5zM8Ow" base_State="_5ZZWkIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5ZpOMIEZEee5n5CT5zM8Ow" base_State="_5ZZWkoEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5Z33sIEZEee5n5CT5zM8Ow" base_State="_5ZaksIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5aEsAIEZEee5n5CT5zM8Ow" base_State="_5Zby0IEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5aT8kIEZEee5n5CT5zM8Ow" base_State="_5aPrIIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5awBcIEZEee5n5CT5zM8Ow" base_Pseudostate="_5anekIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5a3WMIEZEee5n5CT5zM8Ow" base_State="_5awBcYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5a7noIEZEee5n5CT5zM8Ow" base_Pseudostate="_5a3WMYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5bAgIIEZEee5n5CT5zM8Ow" base_Pseudostate="_5a8OsIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTRegion xmi:id="_5bNUcIEZEee5n5CT5zM8Ow" base_Region="_5awBcoEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5bV3UIEZEee5n5CT5zM8Ow" base_State="_5bN7gIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5bbW4IEZEee5n5CT5zM8Ow" base_State="_5bN7goEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5bg2cIEZEee5n5CT5zM8Ow" base_State="_5bOikIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5boLMIEZEee5n5CT5zM8Ow" base_State="_5bPJoIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5b1mkIEZEee5n5CT5zM8Ow" base_Pseudostate="_5bwHAIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5b7GIIEZEee5n5CT5zM8Ow" base_State="_5b1mkYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5b_-oIEZEee5n5CT5zM8Ow" base_Pseudostate="_5b7GIYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5cUHsIEZEee5n5CT5zM8Ow" base_Pseudostate="_5b_-oYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTRegion xmi:id="_5c6koIEZEee5n5CT5zM8Ow" base_Region="_5b1mkoEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5dJOIIEZEee5n5CT5zM8Ow" base_State="_5c6koYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5dVbYIEZEee5n5CT5zM8Ow" base_State="_5c7LsIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5dhBkIEZEee5n5CT5zM8Ow" base_State="_5c7ywIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5dvrEIEZEee5n5CT5zM8Ow" base_State="_5c8Z0IEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5eFCQIEZEee5n5CT5zM8Ow" base_Pseudostate="_5d74UIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5eJ6wIEZEee5n5CT5zM8Ow" base_State="_5eFCQYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5ePaUIEZEee5n5CT5zM8Ow" base_Pseudostate="_5eJ6wYEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5eUS0IEZEee5n5CT5zM8Ow" base_Pseudostate="_5eQBYIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTRegion xmi:id="_5ef5AIEZEee5n5CT5zM8Ow" base_Region="_5eFCQoEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5enNwIEZEee5n5CT5zM8Ow" base_State="_5eggEIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5etUYIEZEee5n5CT5zM8Ow" base_State="_5ehHIIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5eyz8IEZEee5n5CT5zM8Ow" base_State="_5ehuMIEZEee5n5CT5zM8Ow"/>
  <UMLRTStateMachines:RTState xmi:id="_5fCEgIEZEee5n5CT5zM8Ow" base_State="_5e8k8IEZEee5n5CT5zM8Ow"/>
</xmi:XMI>
