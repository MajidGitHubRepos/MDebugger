<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_cJ2kYDJjEeeIZIaasUdwVA" name="PingPong">
    <eAnnotations xmi:id="_cJ2kYTJjEeeIZIaasUdwVA" source="http://www.eclipse.org/papyrus-rt/language/1.0.0">
      <details xmi:id="_cJ2kYjJjEeeIZIaasUdwVA" key="language" value="umlrt-cpp"/>
    </eAnnotations>
    <eAnnotations xmi:id="_BOJhMDKKEeeIZIaasUdwVA" source="UMLRT_Default_top">
      <details xmi:id="_BOJhMTKKEeeIZIaasUdwVA" key="top_name" value="Debug__Top"/>
    </eAnnotations>
    <packageImport xmi:id="_sJeG0H-TEeewWIzpFvOHRA">
      <importedPackage xmi:type="uml:Model" href="../CommGateWay/model.uml#_MZw7AAdxEeadtKuU2t6fMg"/>
    </packageImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_-IyvEDJjEeeIZIaasUdwVA" name="PingPongProtocol">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_-CQpQDJjEeeIZIaasUdwVA" name="PingPongProtocol">
        <interfaceRealization xmi:id="_-J_o8TJjEeeIZIaasUdwVA" client="_-CQpQDJjEeeIZIaasUdwVA" supplier="_-J138DJjEeeIZIaasUdwVA" contract="_-J138DJjEeeIZIaasUdwVA"/>
        <interfaceRealization xmi:id="_-KSj4zJjEeeIZIaasUdwVA" client="_-CQpQDJjEeeIZIaasUdwVA" supplier="_-KSj4TJjEeeIZIaasUdwVA" contract="_-KSj4TJjEeeIZIaasUdwVA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_-J138DJjEeeIZIaasUdwVA" name="PingPongProtocol">
        <ownedOperation xmi:id="_SFv0oDKDEeeIZIaasUdwVA" name="ping"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_-KIy4DJjEeeIZIaasUdwVA" name="PingPongProtocol~">
        <ownedOperation xmi:id="_gOJSsDKDEeeIZIaasUdwVA" name="pong"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_-KIy4jJjEeeIZIaasUdwVA" client="_-CQpQDJjEeeIZIaasUdwVA" supplier="_-KIy4DJjEeeIZIaasUdwVA"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_-KSj4DJjEeeIZIaasUdwVA" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_-KSj4TJjEeeIZIaasUdwVA" name="PingPongProtocolIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_-Kbt0DJjEeeIZIaasUdwVA" client="_-CQpQDJjEeeIZIaasUdwVA" supplier="_-KSj4TJjEeeIZIaasUdwVA"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_SHYzYDKDEeeIZIaasUdwVA" operation="_SFv0oDKDEeeIZIaasUdwVA"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_gOl-oDKDEeeIZIaasUdwVA" operation="_gOJSsDKDEeeIZIaasUdwVA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_IYQmMDKEEeeIZIaasUdwVA" name="Pinger" classifierBehavior="_LUEakDKFEeeIZIaasUdwVA" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_uF7scDKEEeeIZIaasUdwVA" name="pingPort" visibility="public" type="_-CQpQDJjEeeIZIaasUdwVA" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_BGFjoDKFEeeIZIaasUdwVA" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ipVIEH34Eee8vPff7YDTwQ" name="startPort" visibility="public" type="_dglsoH34Eee8vPff7YDTwQ" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_F7fGwH38Eee8vPff7YDTwQ" name="pingerTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_wcqYQH38Eee8vPff7YDTwQ" name="pingsSent" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_0n-iIH38Eee8vPff7YDTwQ"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_sL5IsH-TEeewWIzpFvOHRA" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_sMSxUX-TEeewWIzpFvOHRA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_sMTYYH-TEeewWIzpFvOHRA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_sOLAoH-TEeewWIzpFvOHRA" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_sOP5IH-TEeewWIzpFvOHRA" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_sOP5IX-TEeewWIzpFvOHRA" name="Debug__event">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_sPM7YH-TEeewWIzpFvOHRA" name="Debug__SRO">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_LUEakDKFEeeIZIaasUdwVA" name="StateMachine" isReentrant="false">
        <region xmi:id="_LWT2QDKFEeeIZIaasUdwVA" name="Region">
          <transition xmi:id="_LXpTADKFEeeIZIaasUdwVA" name="Initial" source="_t3uYYH-TEeewWIzpFvOHRA" target="_n1-PQH38Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t6MdkH-TEeewWIzpFvOHRA" name="Initial__197">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;WAITING TO START&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_pmpBMDKFEeeIZIaasUdwVA" name="onPong" source="_uAeEsH-TEeewWIzpFvOHRA" target="_mQKSkH39Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_PpG2QDKHEeeIZIaasUdwVA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.show(&quot;pong received.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::onPong&quot;,(char *)&quot;Debug__Path__onPong&quot;,(char *)&quot;ThreePingsSent?&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_8vqa8H38Eee8vPff7YDTwQ" name="startSignal" source="_t0znQH-TEeewWIzpFvOHRA" target="_LXWYEDKFEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_k9UxsH39Eee8vPff7YDTwQ">
              <language>C++</language>
              <body>pingPort.ping().send();&#xD;
this->pingsSent++;&#xD;
log.show(&quot;ping message sent.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::startSignal&quot;,(char *)&quot;Debug__Path__startSignal&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_ylW4MH3-Eee8vPff7YDTwQ" name="keepPlaying" source="_tyUT8H-TEeewWIzpFvOHRA" target="_66GgIH3_Eee8vPff7YDTwQ">
            <ownedRule xmi:id="_7d170H3-Eee8vPff7YDTwQ">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_-icVQH3-Eee8vPff7YDTwQ">
                <language>C++</language>
                <body>bool sendMorePings = this->pingsSent &lt; 3;&#xD;
return sendMorePings;</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_3dtRwH3_Eee8vPff7YDTwQ">
              <language>C++</language>
              <body>pingerTimer.informIn(UMLRTTimespec(1,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::keepPlaying&quot;,(char *)&quot;Debug__Path__keepPlaying&quot;,(char *)&quot;WAITING FOR TIMER&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_VhaLYH3_Eee8vPff7YDTwQ" name="endOfRound" source="_uFw0YH-TEeewWIzpFvOHRA" target="_n1-PQH38Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ebkC8H3_Eee8vPff7YDTwQ">
              <language>C++</language>
              <body>this->pingsSent = 0;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::endOfRound&quot;,(char *)&quot;Debug__Path__endOfRound&quot;,(char *)&quot;WAITING TO START&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_HIvnQH4AEee8vPff7YDTwQ" name="timeout" source="_t6OSwH-TEeewWIzpFvOHRA" target="_LXWYEDKFEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_MG9NsH4AEee8vPff7YDTwQ">
              <language>C++</language>
              <body>pingPort.ping().send();&#xD;
this->pingsSent++;&#xD;
log.show(&quot;ping message sent.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::timeout&quot;,(char *)&quot;Debug__Path__timeout&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_tzSkUX-TEeewWIzpFvOHRA" name="Debug__keepPlaying" source="_mQKSkH39Eee8vPff7YDTwQ" target="_tyUT8H-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tzTLYH-TEeewWIzpFvOHRA" name="Debug__keepPlaying__125">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__keepPlaying&quot;,(char *)&quot;ThreePingsSent?&quot;,(char *)&quot;Debug__Path__keepPlaying&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_tzTycH-TEeewWIzpFvOHRA" name="Debug__keepPlaying__S" guard="_tzTycn-TEeewWIzpFvOHRA" source="_tyUT8H-TEeewWIzpFvOHRA" target="_tyw_4X-TEeewWIzpFvOHRA">
            <ownedRule xmi:id="_tzTycn-TEeewWIzpFvOHRA" name="Debug__GuardkeepPlaying">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_tzTycX-TEeewWIzpFvOHRA" name="Debug__GuardkeepPlaying">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;ThreePingsSent?&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tzUZgH-TEeewWIzpFvOHRA" name="Debug__keepPlaying__S__127">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__keepPlaying__S&quot;,(char *)&quot;Debug__Path__keepPlaying&quot;,(char *)&quot;en&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_tzVAkH-TEeewWIzpFvOHRA" name="Debug__keepPlaying__E" source="_ty_pYX-TEeewWIzpFvOHRA" target="_66GgIH3_Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tzXc0H-TEeewWIzpFvOHRA" name="Debug__keepPlaying__E__128">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__keepPlaying__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;WAITING FOR TIMER&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_tzYD4H-TEeewWIzpFvOHRA" name="Debug__keepPlaying__dbg__varChange" source="_tykyoH-TEeewWIzpFvOHRA" target="_tykyoH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tzYq8X-TEeewWIzpFvOHRA" name="Debug__keepPlaying__dbg__varChange__130">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_tzYq8H-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_tzYq8n-TEeewWIzpFvOHRA" name="Debug__keepPlaying__dbg__setBreakPoint" source="_tykyoH-TEeewWIzpFvOHRA" target="_tykyoH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tzZSAH-TEeewWIzpFvOHRA" name="Debug__keepPlaying__dbg__setBreakPoint__131">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_tzYq83-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_tzZSAX-TEeewWIzpFvOHRA" name="Debug__keepPlaying__dbg__remBreakPoint" source="_tykyoH-TEeewWIzpFvOHRA" target="_tykyoH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tzZSA3-TEeewWIzpFvOHRA" name="Debug__keepPlaying__dbg__remBreakPoint__132">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_tzZSAn-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_tzcVUH-TEeewWIzpFvOHRA" name="Debug__keepPlaying__dbg__viewBreakPoints" source="_tykyoH-TEeewWIzpFvOHRA" target="_tykyoH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tzhN0H-TEeewWIzpFvOHRA" name="Debug__keepPlaying__dbg__viewBreakPoints__133">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_tzcVUX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_tzhN0X-TEeewWIzpFvOHRA" name="Debug__keepPlaying__dbg__dbgSetExecMode" source="_tykyoH-TEeewWIzpFvOHRA" target="_tykyoH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tzh04X-TEeewWIzpFvOHRA" name="Debug__keepPlaying__dbg__dbgSetExecMode__134">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_tzh04H-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_tzh04n-TEeewWIzpFvOHRA" name="Debug__keepPlaying__dbg__dbgDeferMsg" source="_tykyoH-TEeewWIzpFvOHRA" target="_tykyoH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tzib8H-TEeewWIzpFvOHRA" name="Debug__keepPlaying__dbg__dbgDeferMsg__135">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_tzh043-TEeewWIzpFvOHRA" name="Debug__MSG" port="_ipVIEH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
            <trigger xmi:id="_tzh05H-TEeewWIzpFvOHRA" name="Debug__MSG" port="_uF7scDKEEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_t1vbYH-TEeewWIzpFvOHRA" name="Debug__startSignal" source="_n1-PQH38Eee8vPff7YDTwQ" target="_t0znQH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t1vbYX-TEeewWIzpFvOHRA" name="Debug__startSignal__148">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__startSignal&quot;,(char *)&quot;WAITING TO START&quot;,(char *)&quot;Debug__Path__startSignal&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:id="_-470kH38Eee8vPff7YDTwQ" event="_FbDakH35Eee8vPff7YDTwQ" port="_ipVIEH34Eee8vPff7YDTwQ"/>
          </transition>
          <transition xmi:id="_t1wCcH-TEeewWIzpFvOHRA" name="Debug__startSignal__S" guard="_t1wpgX-TEeewWIzpFvOHRA" source="_t0znQH-TEeewWIzpFvOHRA" target="_t1N28H-TEeewWIzpFvOHRA">
            <ownedRule xmi:id="_t1wpgX-TEeewWIzpFvOHRA" name="Debug__GuardstartSignal">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_t1wpgH-TEeewWIzpFvOHRA" name="Debug__GuardstartSignal">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;WAITING TO START&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t1wpgn-TEeewWIzpFvOHRA" name="Debug__startSignal__S__150">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__startSignal__S&quot;,(char *)&quot;Debug__Path__startSignal&quot;,(char *)&quot;en&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_t1xQkH-TEeewWIzpFvOHRA" name="Debug__startSignal__E" source="_t1eVoX-TEeewWIzpFvOHRA" target="_LXWYEDKFEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t1xQkX-TEeewWIzpFvOHRA" name="Debug__startSignal__E__151">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__startSignal__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_t1x3oH-TEeewWIzpFvOHRA" name="Debug__startSignal__dbg__varChange" source="_t0_0gX-TEeewWIzpFvOHRA" target="_t0_0gX-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t1yesX-TEeewWIzpFvOHRA" name="Debug__startSignal__dbg__varChange__153">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_t1yesH-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_t12JEH-TEeewWIzpFvOHRA" name="Debug__startSignal__dbg__setBreakPoint" source="_t0_0gX-TEeewWIzpFvOHRA" target="_t0_0gX-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t12JEn-TEeewWIzpFvOHRA" name="Debug__startSignal__dbg__setBreakPoint__154">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_t12JEX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_t12JE3-TEeewWIzpFvOHRA" name="Debug__startSignal__dbg__remBreakPoint" source="_t0_0gX-TEeewWIzpFvOHRA" target="_t0_0gX-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t19d0H-TEeewWIzpFvOHRA" name="Debug__startSignal__dbg__remBreakPoint__155">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_t12JFH-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_t1-E4H-TEeewWIzpFvOHRA" name="Debug__startSignal__dbg__viewBreakPoints" source="_t0_0gX-TEeewWIzpFvOHRA" target="_t0_0gX-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t1-E4n-TEeewWIzpFvOHRA" name="Debug__startSignal__dbg__viewBreakPoints__156">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_t1-E4X-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_t1-E43-TEeewWIzpFvOHRA" name="Debug__startSignal__dbg__dbgSetExecMode" source="_t0_0gX-TEeewWIzpFvOHRA" target="_t0_0gX-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t1-r8H-TEeewWIzpFvOHRA" name="Debug__startSignal__dbg__dbgSetExecMode__157">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_t1-E5H-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_t1-r8X-TEeewWIzpFvOHRA" name="Debug__startSignal__dbg__dbgDeferMsg" source="_t0_0gX-TEeewWIzpFvOHRA" target="_t0_0gX-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t1-r9H-TEeewWIzpFvOHRA" name="Debug__startSignal__dbg__dbgDeferMsg__158">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_t1-r8n-TEeewWIzpFvOHRA" name="Debug__MSG" port="_ipVIEH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
            <trigger xmi:id="_t1-r83-TEeewWIzpFvOHRA" name="Debug__MSG" port="_uF7scDKEEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_t4oXUX-TEeewWIzpFvOHRA" name="Debug__Initial" source="_uKwCEH-TEeewWIzpFvOHRA" target="_t3uYYH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t4o-YH-TEeewWIzpFvOHRA" name="Debug__Initial__174">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;WAITING FOR TIMER&quot;,&quot;timeout&quot;,&quot;PLAYING&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPing&quot;,&quot;WAITING FOR TIMER&quot;,&quot;ping&quot;,&quot;PingPongProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePongsSent?&quot;,&quot;keepPlaying&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;WAITING TO START&quot;,&quot;startSignal&quot;,&quot;PLAYING&quot;,&quot;start&quot;,&quot;StartProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePongsSent?&quot;,&quot;endOfRound&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;WAITING FOR TIMER&quot;,&quot;timeout&quot;,&quot;ThreePongsSent?&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePingsSent?&quot;,&quot;endOfRound&quot;,&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePingsSent?&quot;,&quot;keepPlaying&quot;,&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPong&quot;,&quot;ThreePingsSent?&quot;,&quot;pong&quot;,&quot;PingPongProtocol&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_uLJqsH-TEeewWIzpFvOHRA" name="ConnectionEstablished" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
            </trigger>
          </transition>
          <transition xmi:id="_t4plcH-TEeewWIzpFvOHRA" name="Debug__Initial__S" guard="_t4plcn-TEeewWIzpFvOHRA" source="_t3uYYH-TEeewWIzpFvOHRA" target="_t4LrYH-TEeewWIzpFvOHRA">
            <ownedRule xmi:id="_t4plcn-TEeewWIzpFvOHRA" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_t4plcX-TEeewWIzpFvOHRA" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo2&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t4qMgH-TEeewWIzpFvOHRA" name="Debug__Initial__S__176">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_t4qzkH-TEeewWIzpFvOHRA" name="Debug__Initial__E" source="_t4Zt0X-TEeewWIzpFvOHRA" target="_n1-PQH38Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t4t24H-TEeewWIzpFvOHRA" name="Debug__Initial__E__177">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;WAITING TO START&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_t4ud8H-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__varChange" source="_t3-3EX-TEeewWIzpFvOHRA" target="_t3-3EX-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t4ud8n-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__varChange__179">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_t4ud8X-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_t4vFAH-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__setBreakPoint" source="_t3-3EX-TEeewWIzpFvOHRA" target="_t3-3EX-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t4vFAn-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__setBreakPoint__180">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_t4vFAX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_t4vFA3-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__remBreakPoint" source="_t3-3EX-TEeewWIzpFvOHRA" target="_t3-3EX-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t4yvYH-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__remBreakPoint__181">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_t4vFBH-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_t4yvYX-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__viewBreakPoints" source="_t3-3EX-TEeewWIzpFvOHRA" target="_t3-3EX-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t4yvY3-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__viewBreakPoints__182">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_t4yvYn-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_t4zWcH-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__dbgSetExecMode" source="_t3-3EX-TEeewWIzpFvOHRA" target="_t3-3EX-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t4zWcn-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__dbgSetExecMode__183">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_t4zWcX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_t40kkH-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__dbgDeferMsg" source="_t3-3EX-TEeewWIzpFvOHRA" target="_t3-3EX-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t41LoX-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__dbgDeferMsg__184">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_t40kkX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_ipVIEH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
            <trigger xmi:id="_t41LoH-TEeewWIzpFvOHRA" name="Debug__MSG" port="_uF7scDKEEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_t7p2IX-TEeewWIzpFvOHRA" name="Debug__timeout" source="_66GgIH3_Eee8vPff7YDTwQ" target="_t6OSwH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t7qdMH-TEeewWIzpFvOHRA" name="Debug__timeout__199">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__timeout&quot;,(char *)&quot;WAITING FOR TIMER&quot;,(char *)&quot;Debug__Path__timeout&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:id="_IZk9AH4AEee8vPff7YDTwQ" port="_F7fGwH38Eee8vPff7YDTwQ">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_t72DYH-TEeewWIzpFvOHRA" name="Debug__timeout__S" guard="_t72qcX-TEeewWIzpFvOHRA" source="_t6OSwH-TEeewWIzpFvOHRA" target="_t60vsX-TEeewWIzpFvOHRA">
            <ownedRule xmi:id="_t72qcX-TEeewWIzpFvOHRA" name="Debug__Guardtimeout">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_t72qcH-TEeewWIzpFvOHRA" name="Debug__Guardtimeout">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t734kH-TEeewWIzpFvOHRA" name="Debug__timeout__S__201">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__timeout__S&quot;,(char *)&quot;Debug__Path__timeout&quot;,(char *)&quot;en&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_t75GsH-TEeewWIzpFvOHRA" name="Debug__timeout__E" source="_t7EnUX-TEeewWIzpFvOHRA" target="_LXWYEDKFEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t7_NUH-TEeewWIzpFvOHRA" name="Debug__timeout__E__202">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__timeout__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_t8BCgH-TEeewWIzpFvOHRA" name="Debug__timeout__dbg__varChange" source="_t6n7YH-TEeewWIzpFvOHRA" target="_t6n7YH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t8EF0H-TEeewWIzpFvOHRA" name="Debug__timeout__dbg__varChange__204">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_t8BpkH-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_t8I-UH-TEeewWIzpFvOHRA" name="Debug__timeout__dbg__setBreakPoint" source="_t6n7YH-TEeewWIzpFvOHRA" target="_t6n7YH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t8JlYX-TEeewWIzpFvOHRA" name="Debug__timeout__dbg__setBreakPoint__205">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_t8JlYH-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_t8KMcH-TEeewWIzpFvOHRA" name="Debug__timeout__dbg__remBreakPoint" source="_t6n7YH-TEeewWIzpFvOHRA" target="_t6n7YH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t8Od4H-TEeewWIzpFvOHRA" name="Debug__timeout__dbg__remBreakPoint__206">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_t8KMcX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_t8PE8H-TEeewWIzpFvOHRA" name="Debug__timeout__dbg__viewBreakPoints" source="_t6n7YH-TEeewWIzpFvOHRA" target="_t6n7YH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t8PE8n-TEeewWIzpFvOHRA" name="Debug__timeout__dbg__viewBreakPoints__207">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_t8PE8X-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_t8PsAH-TEeewWIzpFvOHRA" name="Debug__timeout__dbg__dbgSetExecMode" source="_t6n7YH-TEeewWIzpFvOHRA" target="_t6n7YH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t8QTEH-TEeewWIzpFvOHRA" name="Debug__timeout__dbg__dbgSetExecMode__208">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_t8PsAX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_t8Q6IH-TEeewWIzpFvOHRA" name="Debug__timeout__dbg__dbgDeferMsg" source="_t6n7YH-TEeewWIzpFvOHRA" target="_t6n7YH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t8VLkH-TEeewWIzpFvOHRA" name="Debug__timeout__dbg__dbgDeferMsg__209">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_t8Q6IX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_ipVIEH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
            <trigger xmi:id="_t8Q6In-TEeewWIzpFvOHRA" name="Debug__MSG" port="_uF7scDKEEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_uCW7EX-TEeewWIzpFvOHRA" name="Debug__onPong" source="_LXWYEDKFEeeIZIaasUdwVA" target="_uAeEsH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uCXiIH-TEeewWIzpFvOHRA" name="Debug__onPong__225">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__onPong&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;Debug__Path__onPong&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:id="_97SwsDKGEeeIZIaasUdwVA" event="_gOl-oDKDEeeIZIaasUdwVA" port="_uF7scDKEEeeIZIaasUdwVA"/>
          </transition>
          <transition xmi:id="_uCe24H-TEeewWIzpFvOHRA" name="Debug__onPong__S" guard="_uCfd8X-TEeewWIzpFvOHRA" source="_uAeEsH-TEeewWIzpFvOHRA" target="_uBeKQX-TEeewWIzpFvOHRA">
            <ownedRule xmi:id="_uCfd8X-TEeewWIzpFvOHRA" name="Debug__GuardonPong">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_uCfd8H-TEeewWIzpFvOHRA" name="Debug__GuardonPong">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uCgFAH-TEeewWIzpFvOHRA" name="Debug__onPong__S__227">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__onPong__S&quot;,(char *)&quot;Debug__Path__onPong&quot;,(char *)&quot;en&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_uCkWcH-TEeewWIzpFvOHRA" name="Debug__onPong__E" source="_uB7dQX-TEeewWIzpFvOHRA" target="_mQKSkH39Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uCkWcX-TEeewWIzpFvOHRA" name="Debug__onPong__E__228">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__onPong__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;ThreePingsSent?&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_uClkkH-TEeewWIzpFvOHRA" name="Debug__onPong__dbg__varChange" source="_uA_pIX-TEeewWIzpFvOHRA" target="_uA_pIX-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uCvVkH-TEeewWIzpFvOHRA" name="Debug__onPong__dbg__varChange__230">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_uCmLoH-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_uCv8oH-TEeewWIzpFvOHRA" name="Debug__onPong__dbg__setBreakPoint" source="_uA_pIX-TEeewWIzpFvOHRA" target="_uA_pIX-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uCwjsH-TEeewWIzpFvOHRA" name="Debug__onPong__dbg__setBreakPoint__231">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_uCv8oX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_uCxKwH-TEeewWIzpFvOHRA" name="Debug__onPong__dbg__remBreakPoint" source="_uA_pIX-TEeewWIzpFvOHRA" target="_uA_pIX-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uCxKwn-TEeewWIzpFvOHRA" name="Debug__onPong__dbg__remBreakPoint__232">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_uCxKwX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_uCxx0H-TEeewWIzpFvOHRA" name="Debug__onPong__dbg__viewBreakPoints" source="_uA_pIX-TEeewWIzpFvOHRA" target="_uA_pIX-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uC0OEH-TEeewWIzpFvOHRA" name="Debug__onPong__dbg__viewBreakPoints__233">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_uCxx0X-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_uC0OEX-TEeewWIzpFvOHRA" name="Debug__onPong__dbg__dbgSetExecMode" source="_uA_pIX-TEeewWIzpFvOHRA" target="_uA_pIX-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uC01IH-TEeewWIzpFvOHRA" name="Debug__onPong__dbg__dbgSetExecMode__234">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_uC0OEn-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_uC01IX-TEeewWIzpFvOHRA" name="Debug__onPong__dbg__dbgDeferMsg" source="_uA_pIX-TEeewWIzpFvOHRA" target="_uA_pIX-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uC9_EH-TEeewWIzpFvOHRA" name="Debug__onPong__dbg__dbgDeferMsg__235">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_uC1cMH-TEeewWIzpFvOHRA" name="Debug__MSG" port="_ipVIEH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
            <trigger xmi:id="_uC5GkH-TEeewWIzpFvOHRA" name="Debug__MSG" port="_uF7scDKEEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_uHmAYH-TEeewWIzpFvOHRA" name="Debug__endOfRound" guard="_IeWE4IBIEeeUZo7DI-sn-Q" source="_mQKSkH39Eee8vPff7YDTwQ" target="_uFw0YH-TEeewWIzpFvOHRA">
            <ownedRule xmi:id="_IeWE4IBIEeeUZo7DI-sn-Q">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_PBawUIBIEeeUZo7DI-sn-Q">
                <language>C++</language>
                <body>bool threePingsSent = this->pingsSent > 2;&#xD;
return threePingsSent;</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uHmAYX-TEeewWIzpFvOHRA" name="Debug__endOfRound__246">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__endOfRound&quot;,(char *)&quot;ThreePingsSent?&quot;,(char *)&quot;Debug__Path__endOfRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_uHrf8H-TEeewWIzpFvOHRA" name="Debug__endOfRound__S" guard="_uHsHAX-TEeewWIzpFvOHRA" source="_uFw0YH-TEeewWIzpFvOHRA" target="_uGt2oX-TEeewWIzpFvOHRA">
            <ownedRule xmi:id="_uHsHAX-TEeewWIzpFvOHRA" name="Debug__GuardendOfRound">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_uHsHAH-TEeewWIzpFvOHRA" name="Debug__GuardendOfRound">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;ThreePingsSent?&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uHsuEH-TEeewWIzpFvOHRA" name="Debug__endOfRound__S__248">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__endOfRound__S&quot;,(char *)&quot;Debug__Path__endOfRound&quot;,(char *)&quot;en&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_uHyNoH-TEeewWIzpFvOHRA" name="Debug__endOfRound__E" source="_uHLwsX-TEeewWIzpFvOHRA" target="_n1-PQH38Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uHyNoX-TEeewWIzpFvOHRA" name="Debug__endOfRound__E__249">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__endOfRound__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;WAITING TO START&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_uH3tMH-TEeewWIzpFvOHRA" name="Debug__endOfRound__dbg__varChange" source="_uGS_4H-TEeewWIzpFvOHRA" target="_uGS_4H-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uH4UQH-TEeewWIzpFvOHRA" name="Debug__endOfRound__dbg__varChange__251">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_uH3tMX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_uH4UQX-TEeewWIzpFvOHRA" name="Debug__endOfRound__dbg__setBreakPoint" source="_uGS_4H-TEeewWIzpFvOHRA" target="_uGS_4H-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uH47UX-TEeewWIzpFvOHRA" name="Debug__endOfRound__dbg__setBreakPoint__252">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_uH47UH-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_uH5iYH-TEeewWIzpFvOHRA" name="Debug__endOfRound__dbg__remBreakPoint" source="_uGS_4H-TEeewWIzpFvOHRA" target="_uGS_4H-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uH5iYn-TEeewWIzpFvOHRA" name="Debug__endOfRound__dbg__remBreakPoint__253">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_uH5iYX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_uH9z0H-TEeewWIzpFvOHRA" name="Debug__endOfRound__dbg__viewBreakPoints" source="_uGS_4H-TEeewWIzpFvOHRA" target="_uGS_4H-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uH-a4H-TEeewWIzpFvOHRA" name="Debug__endOfRound__dbg__viewBreakPoints__254">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_uH9z0X-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_uICsUH-TEeewWIzpFvOHRA" name="Debug__endOfRound__dbg__dbgSetExecMode" source="_uGS_4H-TEeewWIzpFvOHRA" target="_uGS_4H-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uICsUn-TEeewWIzpFvOHRA" name="Debug__endOfRound__dbg__dbgSetExecMode__255">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_uICsUX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sL5IsH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_uIDTYH-TEeewWIzpFvOHRA" name="Debug__endOfRound__dbg__dbgDeferMsg" source="_uGS_4H-TEeewWIzpFvOHRA" target="_uGS_4H-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uID6cX-TEeewWIzpFvOHRA" name="Debug__endOfRound__dbg__dbgDeferMsg__256">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_uIDTYX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_ipVIEH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
            <trigger xmi:id="_uID6cH-TEeewWIzpFvOHRA" name="Debug__MSG" port="_uF7scDKEEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_uLJDoH-TEeewWIzpFvOHRA" name="Debug__InitDebug" source="_LWmxMDKFEeeIZIaasUdwVA" target="_uKwCEH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uLJDoX-TEeewWIzpFvOHRA" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_LWmxMDKFEeeIZIaasUdwVA" name="Pseudo2"/>
          <subvertex xmi:type="uml:State" xmi:id="_LXWYEDKFEeeIZIaasUdwVA" name="PLAYING">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_uLoy4H-TEeewWIzpFvOHRA" name="PLAYING__270">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_uLoy4X-TEeewWIzpFvOHRA" name="PLAYING__271">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_n1-PQH38Eee8vPff7YDTwQ" name="WAITING TO START">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_uLqoEH-TEeewWIzpFvOHRA" name="WAITING TO START__272">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::WAITING TO START&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_uLx80H-TEeewWIzpFvOHRA" name="WAITING TO START__273">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::WAITING TO START&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_mQKSkH39Eee8vPff7YDTwQ" name="ThreePingsSent?" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_66GgIH3_Eee8vPff7YDTwQ" name="WAITING FOR TIMER">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_uLiFMH-TEeewWIzpFvOHRA" name="WAITING FOR TIMER__268">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_uLlvkH-TEeewWIzpFvOHRA" name="WAITING FOR TIMER__269">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_tyUT8H-TEeewWIzpFvOHRA" name="Debug__Path__keepPlaying" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_tykyoH-TEeewWIzpFvOHRA" name="Debug__C__keepPlaying">
            <connectionPoint xmi:id="_tyw_4X-TEeewWIzpFvOHRA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_ty_pYX-TEeewWIzpFvOHRA" name="ex" kind="exitPoint"/>
            <region xmi:id="_tykyoX-TEeewWIzpFvOHRA" name="Region1">
              <transition xmi:id="_tz1W4n-TEeewWIzpFvOHRA" name="Debug__init__trans__keepPlaying" source="_tyw_4X-TEeewWIzpFvOHRA" target="_tzweYX-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t0my8H-TEeewWIzpFvOHRA" name="Debug__init__trans__keepPlaying__140">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__init__trans__keepPlaying&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__keepPlaying&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
              </transition>
              <transition xmi:id="_tz198H-TEeewWIzpFvOHRA" name="Debug__Ac__keepPlaying" source="_tzweYX-TEeewWIzpFvOHRA" target="_tzxFcH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tz198n-TEeewWIzpFvOHRA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>pingerTimer.informIn(UMLRTTimespec(1,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__Ac__keepPlaying&quot;,(char *)&quot;Debug__B__Ac__keepPlaying&quot;,(char *)&quot;Debug__A__Ac__keepPlaying&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_tz198X-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sL5IsH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_tz1983-TEeewWIzpFvOHRA" name="Debug__En__WAITING FOR TIMER" source="_tzxFcH-TEeewWIzpFvOHRA" target="_tz1W4H-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t0oBEH-TEeewWIzpFvOHRA" name="Debug__En__WAITING FOR TIMER__143">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__En__WAITING FOR TIMER&quot;,(char *)&quot;Debug__A__Ac__keepPlaying&quot;,(char *)&quot;Debug__A__En__keepPlaying&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_tz199H-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sL5IsH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_tz199X-TEeewWIzpFvOHRA" name="Debug__end__trans__keepPlaying" source="_tz1W4H-TEeewWIzpFvOHRA" target="_ty_pYX-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t0s5kH-TEeewWIzpFvOHRA" name="Debug__end__trans__keepPlaying__145">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__end__trans__keepPlaying&quot;,(char *)&quot;Debug__A__En__keepPlaying&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_tz199n-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sL5IsH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_tzweYX-TEeewWIzpFvOHRA" name="Debug__B__Ac__keepPlaying">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_tzweYn-TEeewWIzpFvOHRA" name="Debug__B__Ac__keepPlaying">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;keepPlaying&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__B__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_t0I44H-TEeewWIzpFvOHRA" name="Debug__B__Ac__keepPlaying__136">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__B__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_tzxFcH-TEeewWIzpFvOHRA" name="Debug__A__Ac__keepPlaying">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_tzxFcX-TEeewWIzpFvOHRA" name="Debug__A__Ac__keepPlaying">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;keepPlaying&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__A__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_t0VGIX-TEeewWIzpFvOHRA" name="Debug__A__Ac__keepPlaying__137">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__A__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_tz1W4H-TEeewWIzpFvOHRA" name="Debug__A__En__keepPlaying">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_tz1W4X-TEeewWIzpFvOHRA" name="Debug__A__En__keepPlaying">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__A__En__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_t0lk0X-TEeewWIzpFvOHRA" name="Debug__A__En__keepPlaying__138">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__A__En__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_t0znQH-TEeewWIzpFvOHRA" name="Debug__Path__startSignal" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_t0_0gX-TEeewWIzpFvOHRA" name="Debug__C__startSignal">
            <connectionPoint xmi:id="_t1N28H-TEeewWIzpFvOHRA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_t1eVoX-TEeewWIzpFvOHRA" name="ex" kind="exitPoint"/>
            <region xmi:id="_t0_0gn-TEeewWIzpFvOHRA" name="Region1">
              <transition xmi:id="_t2V4UH-TEeewWIzpFvOHRA" name="Debug__init__trans__startSignal" source="_t1N28H-TEeewWIzpFvOHRA" target="_t2MHUX-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t3g9AH-TEeewWIzpFvOHRA" name="Debug__init__trans__startSignal__164">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__init__trans__startSignal&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__WAITING TO START&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
              </transition>
              <transition xmi:id="_t2V4UX-TEeewWIzpFvOHRA" name="Debug__Ex__WAITING TO START" source="_t2MHUX-TEeewWIzpFvOHRA" target="_t2MuYH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t3lOcH-TEeewWIzpFvOHRA" name="Debug__Ex__WAITING TO START__166">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__Ex__WAITING TO START&quot;,(char *)&quot;Debug__B__Ex__WAITING TO START&quot;,(char *)&quot;Debug__B__Ac__startSignal&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_t2V4Un-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sL5IsH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_t2V4U3-TEeewWIzpFvOHRA" name="Debug__AC__startSignal" source="_t2MuYH-TEeewWIzpFvOHRA" target="_t2NVcH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t2WfYX-TEeewWIzpFvOHRA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>pingPort.ping().send();&#xD;
this->pingsSent++;&#xD;
log.show(&quot;ping message sent.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__AC__startSignal&quot;,(char *)&quot;Debug__B__Ac__startSignal&quot;,(char *)&quot;Debug__A__Ac__startSignal&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_t2WfYH-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sL5IsH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_t2WfYn-TEeewWIzpFvOHRA" name="Debug__En__PLAYING" source="_t2NVcH-TEeewWIzpFvOHRA" target="_t2Q_0H-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t3mckH-TEeewWIzpFvOHRA" name="Debug__En__PLAYING__169">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__startSignal&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_t2WfY3-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sL5IsH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_t2WfZH-TEeewWIzpFvOHRA" name="Debug__end__trans__startSignal" source="_t2Q_0H-TEeewWIzpFvOHRA" target="_t1eVoX-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t3sjMH-TEeewWIzpFvOHRA" name="Debug__end__trans__startSignal__171">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__end__trans__startSignal&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_t2WfZX-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sL5IsH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_t2MHUX-TEeewWIzpFvOHRA" name="Debug__B__Ex__WAITING TO START">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_t2MHUn-TEeewWIzpFvOHRA" name="Debug__B__Ex__WAITING TO START">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__B__Ex__WAITING TO START&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_t2wvEX-TEeewWIzpFvOHRA" name="Debug__B__Ex__WAITING TO START__159">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__B__Ex__WAITING TO START&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_t2MuYH-TEeewWIzpFvOHRA" name="Debug__B__Ac__startSignal">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_t2MuYX-TEeewWIzpFvOHRA" name="Debug__B__Ac__startSignal">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;startSignal&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__B__Ac__startSignal&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_t3Cb4H-TEeewWIzpFvOHRA" name="Debug__B__Ac__startSignal__160">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__B__Ac__startSignal&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_t2NVcH-TEeewWIzpFvOHRA" name="Debug__A__Ac__startSignal">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_t2NVcX-TEeewWIzpFvOHRA" name="Debug__A__Ac__startSignal">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;startSignal&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__A__Ac__startSignal&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_t3ThoX-TEeewWIzpFvOHRA" name="Debug__A__Ac__startSignal__161">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__A__Ac__startSignal&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_t2Q_0H-TEeewWIzpFvOHRA" name="Debug__A__En__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_t2Q_0X-TEeewWIzpFvOHRA" name="Debug__A__En__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_t3UvwH-TEeewWIzpFvOHRA" name="Debug__A__En__PLAYING__162">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_t3uYYH-TEeewWIzpFvOHRA" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_t3-3EX-TEeewWIzpFvOHRA" name="Debug__C__Initial">
            <connectionPoint xmi:id="_t4LrYH-TEeewWIzpFvOHRA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_t4Zt0X-TEeewWIzpFvOHRA" name="ex" kind="exitPoint"/>
            <region xmi:id="_t3-3En-TEeewWIzpFvOHRA" name="Region1">
              <transition xmi:id="_t5HfgH-TEeewWIzpFvOHRA" name="Debug__init__trans__Initial" source="_t4LrYH-TEeewWIzpFvOHRA" target="_t5GRYH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t6A3YH-TEeewWIzpFvOHRA" name="Debug__init__trans__Initial__189">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
              </transition>
              <transition xmi:id="_t5HfgX-TEeewWIzpFvOHRA" name="Debug__Ac__Initial" source="_t5GRYH-TEeewWIzpFvOHRA" target="_t5GRYn-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t6KBUH-TEeewWIzpFvOHRA" name="Debug__Ac__Initial__191">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_t5Hfgn-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sL5IsH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_t5Hfg3-TEeewWIzpFvOHRA" name="Debug__En__WAITING TO START" source="_t5GRYn-TEeewWIzpFvOHRA" target="_t5G4cH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t6LPcH-TEeewWIzpFvOHRA" name="Debug__En__WAITING TO START__193">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__En__WAITING TO START&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_t5HfhH-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sL5IsH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_t5IGkH-TEeewWIzpFvOHRA" name="Debug__end__trans__Initial" source="_t5G4cH-TEeewWIzpFvOHRA" target="_t4Zt0X-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t6L2gH-TEeewWIzpFvOHRA" name="Debug__end__trans__Initial__195">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_t5IGkX-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sL5IsH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_t5GRYH-TEeewWIzpFvOHRA" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_t5GRYX-TEeewWIzpFvOHRA" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_t5ZMUX-TEeewWIzpFvOHRA" name="Debug__B__Ac__Initial__185">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_t5GRYn-TEeewWIzpFvOHRA" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_t5GRY3-TEeewWIzpFvOHRA" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_t5vKkX-TEeewWIzpFvOHRA" name="Debug__A__Ac__Initial__186">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_t5G4cH-TEeewWIzpFvOHRA" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_t5G4cX-TEeewWIzpFvOHRA" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_t5_pQX-TEeewWIzpFvOHRA" name="Debug__A__En__Initial__187">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_t6OSwH-TEeewWIzpFvOHRA" name="Debug__Path__timeout" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_t6n7YH-TEeewWIzpFvOHRA" name="Debug__C__timeout">
            <connectionPoint xmi:id="_t60vsX-TEeewWIzpFvOHRA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_t7EnUX-TEeewWIzpFvOHRA" name="ex" kind="exitPoint"/>
            <region xmi:id="_t6n7YX-TEeewWIzpFvOHRA" name="Region1">
              <transition xmi:id="_t9fCIH-TEeewWIzpFvOHRA" name="Debug__init__trans__timeout" source="_t60vsX-TEeewWIzpFvOHRA" target="_t9N8YH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uAAKoH-TEeewWIzpFvOHRA" name="Debug__init__trans__timeout__215">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__init__trans__timeout&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__WAITING FOR TIMER&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
              </transition>
              <transition xmi:id="_t9fCIX-TEeewWIzpFvOHRA" name="Debug__Ex__WAITING FOR TIMER" source="_t9N8YH-TEeewWIzpFvOHRA" target="_t9S04H-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uABYwH-TEeewWIzpFvOHRA" name="Debug__Ex__WAITING FOR TIMER__217">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__Ex__WAITING FOR TIMER&quot;,(char *)&quot;Debug__B__Ex__WAITING FOR TIMER&quot;,(char *)&quot;Debug__B__Ac__timeout&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_t9fCIn-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sL5IsH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_t9fpMH-TEeewWIzpFvOHRA" name="Debug__AC__timeout" source="_t9S04H-TEeewWIzpFvOHRA" target="_t9UDAH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_t9gQQH-TEeewWIzpFvOHRA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>pingPort.ping().send();&#xD;
this->pingsSent++;&#xD;
log.show(&quot;ping message sent.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__AC__timeout&quot;,(char *)&quot;Debug__B__Ac__timeout&quot;,(char *)&quot;Debug__A__Ac__timeout&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_t9fpMX-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sL5IsH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_t9gQQX-TEeewWIzpFvOHRA" name="Debug__En__PLAYING" source="_t9UDAH-TEeewWIzpFvOHRA" target="_t9awsH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uAJ7oH-TEeewWIzpFvOHRA" name="Debug__En__PLAYING__220">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__timeout&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_t9gQQn-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sL5IsH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_t9g3UH-TEeewWIzpFvOHRA" name="Debug__end__trans__timeout" source="_t9awsH-TEeewWIzpFvOHRA" target="_t7EnUX-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uAR3cH-TEeewWIzpFvOHRA" name="Debug__end__trans__timeout__222">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__end__trans__timeout&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_t9g3UX-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sL5IsH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_t9N8YH-TEeewWIzpFvOHRA" name="Debug__B__Ex__WAITING FOR TIMER">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_t9N8YX-TEeewWIzpFvOHRA" name="Debug__B__Ex__WAITING FOR TIMER">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ex__WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_t-IiYH-TEeewWIzpFvOHRA" name="Debug__B__Ex__WAITING FOR TIMER__210">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ex__WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_t9S04H-TEeewWIzpFvOHRA" name="Debug__B__Ac__timeout">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_t9S04X-TEeewWIzpFvOHRA" name="Debug__B__Ac__timeout">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;timeout&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_t-o4sH-TEeewWIzpFvOHRA" name="Debug__B__Ac__timeout__211">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_t9UDAH-TEeewWIzpFvOHRA" name="Debug__A__Ac__timeout">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_t9UDAX-TEeewWIzpFvOHRA" name="Debug__A__Ac__timeout">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;timeout&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__A__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_t_TnEX-TEeewWIzpFvOHRA" name="Debug__A__Ac__timeout__212">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__A__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_t9awsH-TEeewWIzpFvOHRA" name="Debug__A__En__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_t9awsX-TEeewWIzpFvOHRA" name="Debug__A__En__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_t_WDUH-TEeewWIzpFvOHRA" name="Debug__A__En__PLAYING__213">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_uAeEsH-TEeewWIzpFvOHRA" name="Debug__Path__onPong" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_uA_pIX-TEeewWIzpFvOHRA" name="Debug__C__onPong">
            <connectionPoint xmi:id="_uBeKQX-TEeewWIzpFvOHRA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_uB7dQX-TEeewWIzpFvOHRA" name="ex" kind="exitPoint"/>
            <region xmi:id="_uA_pIn-TEeewWIzpFvOHRA" name="Region1">
              <transition xmi:id="_uDmRMH-TEeewWIzpFvOHRA" name="Debug__init__trans__onPong" source="_uBeKQX-TEeewWIzpFvOHRA" target="_uDeVYH-TEeewWIzpFvOHRA"/>
              <transition xmi:id="_uDmRMX-TEeewWIzpFvOHRA" name="Debug__Ex__PLAYING" source="_uDeVYH-TEeewWIzpFvOHRA" target="_uDe8cH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uFV9oH-TEeewWIzpFvOHRA" name="Debug__Ex__PLAYING__240">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ac__onPong&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_uDmRMn-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sL5IsH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_uDqioH-TEeewWIzpFvOHRA" name="Debug__AC__onPong" source="_uDe8cH-TEeewWIzpFvOHRA" target="_uDlDEH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uDrJsH-TEeewWIzpFvOHRA" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;pong received.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__AC__onPong&quot;,(char *)&quot;Debug__B__Ac__onPong&quot;,(char *)&quot;Debug__A__Ac__onPong&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_uDqioX-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sL5IsH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_uDrJsX-TEeewWIzpFvOHRA" name="Debug__end__trans__onPong" source="_uDlDEH-TEeewWIzpFvOHRA" target="_uB7dQX-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uFg8wH-TEeewWIzpFvOHRA" name="Debug__end__trans__onPong__243">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__end__trans__onPong&quot;,(char *)&quot;Debug__A__Ac__onPong&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_uDrJsn-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sL5IsH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_uDeVYH-TEeewWIzpFvOHRA" name="Debug__B__Ex__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_uDeVYX-TEeewWIzpFvOHRA" name="Debug__B__Ex__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_uEMHEX-TEeewWIzpFvOHRA" name="Debug__B__Ex__PLAYING__236">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_uDe8cH-TEeewWIzpFvOHRA" name="Debug__B__Ac__onPong">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_uDe8cX-TEeewWIzpFvOHRA" name="Debug__B__Ac__onPong">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;onPong&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_uEu5oH-TEeewWIzpFvOHRA" name="Debug__B__Ac__onPong__237">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_uDlDEH-TEeewWIzpFvOHRA" name="Debug__A__Ac__onPong">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_uDlDEX-TEeewWIzpFvOHRA" name="Debug__A__Ac__onPong">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;onPong&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__A__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_uFThYX-TEeewWIzpFvOHRA" name="Debug__A__Ac__onPong__238">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__A__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_uFw0YH-TEeewWIzpFvOHRA" name="Debug__Path__endOfRound" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_uGS_4H-TEeewWIzpFvOHRA" name="Debug__C__endOfRound">
            <connectionPoint xmi:id="_uGt2oX-TEeewWIzpFvOHRA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_uHLwsX-TEeewWIzpFvOHRA" name="ex" kind="exitPoint"/>
            <region xmi:id="_uGS_4X-TEeewWIzpFvOHRA" name="Region1">
              <transition xmi:id="_uIpwUH-TEeewWIzpFvOHRA" name="Debug__init__trans__endOfRound" source="_uGt2oX-TEeewWIzpFvOHRA" target="_uIf_UH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uKN2kH-TEeewWIzpFvOHRA" name="Debug__init__trans__endOfRound__261">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__init__trans__endOfRound&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__endOfRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
              </transition>
              <transition xmi:id="_uIpwUX-TEeewWIzpFvOHRA" name="Debug__Ac__endOfRound" source="_uIf_UH-TEeewWIzpFvOHRA" target="_uIgmYH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uIqXYX-TEeewWIzpFvOHRA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>this->pingsSent = 0;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__Ac__endOfRound&quot;,(char *)&quot;Debug__B__Ac__endOfRound&quot;,(char *)&quot;Debug__A__Ac__endOfRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_uIqXYH-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sL5IsH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_uIqXYn-TEeewWIzpFvOHRA" name="Debug__En__WAITING TO START" source="_uIgmYH-TEeewWIzpFvOHRA" target="_uIk30H-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uKZcwH-TEeewWIzpFvOHRA" name="Debug__En__WAITING TO START__264">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__En__WAITING TO START&quot;,(char *)&quot;Debug__A__Ac__endOfRound&quot;,(char *)&quot;Debug__A__En__endOfRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_uIq-cH-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sL5IsH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_uIq-cX-TEeewWIzpFvOHRA" name="Debug__end__trans__endOfRound" source="_uIk30H-TEeewWIzpFvOHRA" target="_uHLwsX-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uKaq4H-TEeewWIzpFvOHRA" name="Debug__end__trans__endOfRound__266">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__end__trans__endOfRound&quot;,(char *)&quot;Debug__A__En__endOfRound&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_uIq-cn-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sL5IsH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_uIf_UH-TEeewWIzpFvOHRA" name="Debug__B__Ac__endOfRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_uIf_UX-TEeewWIzpFvOHRA" name="Debug__B__Ac__endOfRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;endOfRound&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__B__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_uJFOIH-TEeewWIzpFvOHRA" name="Debug__B__Ac__endOfRound__257">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__B__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_uIgmYH-TEeewWIzpFvOHRA" name="Debug__A__Ac__endOfRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_uIgmYX-TEeewWIzpFvOHRA" name="Debug__A__Ac__endOfRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;endOfRound&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__A__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_uJuuYX-TEeewWIzpFvOHRA" name="Debug__A__Ac__endOfRound__258">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__A__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_uIk30H-TEeewWIzpFvOHRA" name="Debug__A__En__endOfRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_uIk30X-TEeewWIzpFvOHRA" name="Debug__A__En__endOfRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__A__En__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_uKMocH-TEeewWIzpFvOHRA" name="Debug__A__En__endOfRound__259">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__A__En__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_uKwCEH-TEeewWIzpFvOHRA" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_sLwl0H-TEeewWIzpFvOHRA" name="Debug__recallAllMsg" specification="_sLv-wH-TEeewWIzpFvOHRA">
        <language>C++</language>
        <body>startPort.recallAll();
pingPort.recallAll();
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_sNz0QX-TEeewWIzpFvOHRA" name="Debug__variablesViewMethod" specification="_sNz0QH-TEeewWIzpFvOHRA">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;pingsSent,&quot;);
tempS.append(&quot;Integer,&quot;);
if(pingsSent!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,pingsSent);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_sOGIIX-TEeewWIzpFvOHRA" name="Debug__variablesChange" specification="_sN-MUH-TEeewWIzpFvOHRA">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;pingsSent&quot;==tempVarName){
    pingsSent=atoi(varValue);
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_sbH3gH-TEeewWIzpFvOHRA" name="Debug__sendEvent" specification="_sTeXYH-TEeewWIzpFvOHRA">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
this->Debug__event.setPayloadField(&quot;SenderCapsule&quot;,reserve3);
this->Debug__event.setPayloadField(&quot;Port&quot;,reserve4);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_sLv-wH-TEeewWIzpFvOHRA" name="Debug__recallAllMsg" visibility="private" method="_sLwl0H-TEeewWIzpFvOHRA"/>
      <ownedOperation xmi:id="_sNz0QH-TEeewWIzpFvOHRA" name="Debug__variablesView" visibility="private" method="_sNz0QX-TEeewWIzpFvOHRA"/>
      <ownedOperation xmi:id="_sN-MUH-TEeewWIzpFvOHRA" name="Debug__variablesChange" visibility="private" method="_sOGIIX-TEeewWIzpFvOHRA">
        <ownedParameter xmi:id="_sN-MUX-TEeewWIzpFvOHRA" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sOFhEH-TEeewWIzpFvOHRA" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sOGIIH-TEeewWIzpFvOHRA" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_sTeXYH-TEeewWIzpFvOHRA" name="Debug__sendEvent" visibility="private" method="_sbH3gH-TEeewWIzpFvOHRA">
        <ownedParameter xmi:id="_sTeXYX-TEeewWIzpFvOHRA" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sUZkcH-TEeewWIzpFvOHRA" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sVRuMH-TEeewWIzpFvOHRA" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sWOJYH-TEeewWIzpFvOHRA" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sWOJYX-TEeewWIzpFvOHRA" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sXUVkH-TEeewWIzpFvOHRA" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sYmvAH-TEeewWIzpFvOHRA" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sYvR4H-TEeewWIzpFvOHRA" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sYvR4X-TEeewWIzpFvOHRA" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sY0KYH-TEeewWIzpFvOHRA" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_saEHkH-TEeewWIzpFvOHRA" name="reserve4">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_UTN08DKHEeeIZIaasUdwVA" name="Ponger" classifierBehavior="_pVZOQDKHEeeIZIaasUdwVA" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_bc83wDKHEeeIZIaasUdwVA" name="pongPort" visibility="public" type="_-CQpQDJjEeeIZIaasUdwVA" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_gaTikDKHEeeIZIaasUdwVA" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_xzj2kH34Eee8vPff7YDTwQ" name="endPort" visibility="public" type="_wEGEEH34Eee8vPff7YDTwQ" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_mo-64H4AEee8vPff7YDTwQ" name="pongerTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_8pPtEH4AEee8vPff7YDTwQ" name="pongsSent" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_-7A7YH4AEee8vPff7YDTwQ"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_sbwJoH-TEeewWIzpFvOHRA" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_scja4H-TEeewWIzpFvOHRA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_scja4X-TEeewWIzpFvOHRA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_sebDIH-TEeewWIzpFvOHRA" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_sebDIX-TEeewWIzpFvOHRA" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_sebqMH-TEeewWIzpFvOHRA" name="Debug__event">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_sfc94H-TEeewWIzpFvOHRA" name="Debug__SRO">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_pVZOQDKHEeeIZIaasUdwVA" name="StateMachine" isReentrant="false">
        <region xmi:id="_pViYMDKHEeeIZIaasUdwVA" name="Region">
          <transition xmi:id="_pVsJMjKHEeeIZIaasUdwVA" name="Initial" source="_tFJE4H-TEeewWIzpFvOHRA" target="_pVsJMDKHEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_y1SQIDKHEeeIZIaasUdwVA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.log(&quot;Ponger is ready&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_05Zc8DKHEeeIZIaasUdwVA" name="onPing" source="_tIukYH-TEeewWIzpFvOHRA" target="_wOD-wH4AEee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_OnWB0DKIEeeIZIaasUdwVA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.show(&quot;ping received.\n&quot;);&#xD;
pongerTimer.informIn(UMLRTTimespec(1,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::onPing&quot;,(char *)&quot;Debug__Path__onPing&quot;,(char *)&quot;WAITING FOR TIMER&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_E9Jc8H4BEee8vPff7YDTwQ" name="timeout" source="_tAM6gH-TEeewWIzpFvOHRA" target="_EMjGcH4BEee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_nJIlIH4BEee8vPff7YDTwQ">
              <language>C++</language>
              <body>pongPort.pong().send();&#xD;
this->pongsSent++;&#xD;
log.show(&quot;pong message sent.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::timeout&quot;,(char *)&quot;Debug__Path__timeout&quot;,(char *)&quot;ThreePongsSent?&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_LUVBcH4BEee8vPff7YDTwQ" name="keepPlaying" source="_tu1iIH-TEeewWIzpFvOHRA" target="_pVsJMDKHEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_txa8EH-TEeewWIzpFvOHRA" name="keepPlaying__119">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::keepPlaying&quot;,(char *)&quot;Debug__Path__keepPlaying&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_MiHqQH4BEee8vPff7YDTwQ" name="endOfRound" source="_s6WxMH-TEeewWIzpFvOHRA" target="_pVsJMDKHEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_dltRoH4CEee8vPff7YDTwQ">
              <language>C++</language>
              <body>log.show(&quot;ending round.\n&quot;);&#xD;
endPort.end().send();&#xD;
this->pongsSent = 0;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::endOfRound&quot;,(char *)&quot;Debug__Path__endOfRound&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_s8Z_oX-TEeewWIzpFvOHRA" name="Debug__endOfRound" source="_EMjGcH4BEee8vPff7YDTwQ" target="_s6WxMH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_s8amsH-TEeewWIzpFvOHRA" name="Debug__endOfRound__3">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__endOfRound&quot;,(char *)&quot;ThreePongsSent?&quot;,(char *)&quot;Debug__Path__endOfRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_s8jwoH-TEeewWIzpFvOHRA" name="Debug__endOfRound__S" guard="_s8kXsX-TEeewWIzpFvOHRA" source="_s6WxMH-TEeewWIzpFvOHRA" target="_s7ahIX-TEeewWIzpFvOHRA">
            <ownedRule xmi:id="_s8kXsX-TEeewWIzpFvOHRA" name="Debug__GuardendOfRound">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_s8kXsH-TEeewWIzpFvOHRA" name="Debug__GuardendOfRound">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;ThreePongsSent?&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_s8k-wH-TEeewWIzpFvOHRA" name="Debug__endOfRound__S__5">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__endOfRound__S&quot;,(char *)&quot;Debug__Path__endOfRound&quot;,(char *)&quot;en&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_s8thoH-TEeewWIzpFvOHRA" name="Debug__endOfRound__E" source="_s763cH-TEeewWIzpFvOHRA" target="_pVsJMDKHEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_s8thoX-TEeewWIzpFvOHRA" name="Debug__endOfRound__E__6">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__endOfRound__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_s8uvwH-TEeewWIzpFvOHRA" name="Debug__endOfRound__dbg__varChange" source="_s63HgH-TEeewWIzpFvOHRA" target="_s63HgH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_s80PUH-TEeewWIzpFvOHRA" name="Debug__endOfRound__dbg__varChange__8">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_s8uvwX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_s81dcH-TEeewWIzpFvOHRA" name="Debug__endOfRound__dbg__setBreakPoint" source="_s63HgH-TEeewWIzpFvOHRA" target="_s63HgH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_s81dcn-TEeewWIzpFvOHRA" name="Debug__endOfRound__dbg__setBreakPoint__9">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_s81dcX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_s82rkH-TEeewWIzpFvOHRA" name="Debug__endOfRound__dbg__remBreakPoint" source="_s63HgH-TEeewWIzpFvOHRA" target="_s63HgH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_s88LIH-TEeewWIzpFvOHRA" name="Debug__endOfRound__dbg__remBreakPoint__10">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_s82rkX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_s88yMH-TEeewWIzpFvOHRA" name="Debug__endOfRound__dbg__viewBreakPoints" source="_s63HgH-TEeewWIzpFvOHRA" target="_s63HgH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_s88yMn-TEeewWIzpFvOHRA" name="Debug__endOfRound__dbg__viewBreakPoints__11">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_s88yMX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_s89ZQH-TEeewWIzpFvOHRA" name="Debug__endOfRound__dbg__dbgSetExecMode" source="_s63HgH-TEeewWIzpFvOHRA" target="_s63HgH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_s89ZQn-TEeewWIzpFvOHRA" name="Debug__endOfRound__dbg__dbgSetExecMode__12">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_s89ZQX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_s8-AUH-TEeewWIzpFvOHRA" name="Debug__endOfRound__dbg__dbgDeferMsg" source="_s63HgH-TEeewWIzpFvOHRA" target="_s63HgH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_s8-AUn-TEeewWIzpFvOHRA" name="Debug__endOfRound__dbg__dbgDeferMsg__13">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_s8-AUX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_bc83wDKHEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_tCEiwX-TEeewWIzpFvOHRA" name="Debug__timeout" source="_wOD-wH4AEee8vPff7YDTwQ" target="_tAM6gH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tCFJ0H-TEeewWIzpFvOHRA" name="Debug__timeout__26">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__timeout&quot;,(char *)&quot;WAITING FOR TIMER&quot;,(char *)&quot;Debug__Path__timeout&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:id="_WL6PAH4BEee8vPff7YDTwQ" port="_mo-64H4AEee8vPff7YDTwQ">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_tCI0MH-TEeewWIzpFvOHRA" name="Debug__timeout__S" guard="_tCJbQH-TEeewWIzpFvOHRA" source="_tAM6gH-TEeewWIzpFvOHRA" target="_tBHggH-TEeewWIzpFvOHRA">
            <ownedRule xmi:id="_tCJbQH-TEeewWIzpFvOHRA" name="Debug__Guardtimeout">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_tCI0MX-TEeewWIzpFvOHRA" name="Debug__Guardtimeout">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tCJbQX-TEeewWIzpFvOHRA" name="Debug__timeout__S__28">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__timeout__S&quot;,(char *)&quot;Debug__Path__timeout&quot;,(char *)&quot;en&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_tCR-IH-TEeewWIzpFvOHRA" name="Debug__timeout__E" source="_tBjlYX-TEeewWIzpFvOHRA" target="_EMjGcH4BEee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tCR-IX-TEeewWIzpFvOHRA" name="Debug__timeout__E__29">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__timeout__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;ThreePongsSent?&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_tCTMQH-TEeewWIzpFvOHRA" name="Debug__timeout__dbg__varChange" source="_tAvGAH-TEeewWIzpFvOHRA" target="_tAvGAH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tCbvIH-TEeewWIzpFvOHRA" name="Debug__timeout__dbg__varChange__31">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_tCTMQX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_tCbvIX-TEeewWIzpFvOHRA" name="Debug__timeout__dbg__setBreakPoint" source="_tAvGAH-TEeewWIzpFvOHRA" target="_tAvGAH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tCcWMH-TEeewWIzpFvOHRA" name="Debug__timeout__dbg__setBreakPoint__32">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_tCbvIn-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_tCcWMX-TEeewWIzpFvOHRA" name="Debug__timeout__dbg__remBreakPoint" source="_tAvGAH-TEeewWIzpFvOHRA" target="_tAvGAH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tCc9QH-TEeewWIzpFvOHRA" name="Debug__timeout__dbg__remBreakPoint__33">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_tCcWMn-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_tCc9QX-TEeewWIzpFvOHRA" name="Debug__timeout__dbg__viewBreakPoints" source="_tAvGAH-TEeewWIzpFvOHRA" target="_tAvGAH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tCdkUH-TEeewWIzpFvOHRA" name="Debug__timeout__dbg__viewBreakPoints__34">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_tCc9Qn-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_tClgIH-TEeewWIzpFvOHRA" name="Debug__timeout__dbg__dbgSetExecMode" source="_tAvGAH-TEeewWIzpFvOHRA" target="_tAvGAH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tClgIn-TEeewWIzpFvOHRA" name="Debug__timeout__dbg__dbgSetExecMode__35">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_tClgIX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_tCmHMH-TEeewWIzpFvOHRA" name="Debug__timeout__dbg__dbgDeferMsg" source="_tAvGAH-TEeewWIzpFvOHRA" target="_tAvGAH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tCmHMn-TEeewWIzpFvOHRA" name="Debug__timeout__dbg__dbgDeferMsg__36">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_tCmHMX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_bc83wDKHEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_tGkBMX-TEeewWIzpFvOHRA" name="Debug__Initial" source="_txnwYH-TEeewWIzpFvOHRA" target="_tFJE4H-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tGkoQH-TEeewWIzpFvOHRA" name="Debug__Initial__47">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPing&quot;,&quot;WAITING FOR TIMER&quot;,&quot;ping&quot;,&quot;PingPongProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePongsSent?&quot;,&quot;keepPlaying&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePongsSent?&quot;,&quot;endOfRound&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;WAITING FOR TIMER&quot;,&quot;timeout&quot;,&quot;ThreePongsSent?&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_tyAK4n-TEeewWIzpFvOHRA" name="ConnectionEstablished" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
            </trigger>
          </transition>
          <transition xmi:id="_tGo5sH-TEeewWIzpFvOHRA" name="Debug__Initial__S" guard="_tGpgwX-TEeewWIzpFvOHRA" source="_tFJE4H-TEeewWIzpFvOHRA" target="_tF5S0X-TEeewWIzpFvOHRA">
            <ownedRule xmi:id="_tGpgwX-TEeewWIzpFvOHRA" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_tGpgwH-TEeewWIzpFvOHRA" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo1&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tGpgwn-TEeewWIzpFvOHRA" name="Debug__Initial__S__49">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_tGqu4H-TEeewWIzpFvOHRA" name="Debug__Initial__E" source="_tGRtUX-TEeewWIzpFvOHRA" target="_pVsJMDKHEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tGqu4X-TEeewWIzpFvOHRA" name="Debug__Initial__E__50">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_tG1G8H-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__varChange" source="_tFoNEH-TEeewWIzpFvOHRA" target="_tFoNEH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tG1G8n-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__varChange__52">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_tG1G8X-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_tG1uAH-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__setBreakPoint" source="_tFoNEH-TEeewWIzpFvOHRA" target="_tFoNEH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tG1uAn-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__setBreakPoint__53">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_tG1uAX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_tG2VEH-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__remBreakPoint" source="_tFoNEH-TEeewWIzpFvOHRA" target="_tFoNEH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tG2VEn-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__remBreakPoint__54">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_tG2VEX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_tG28IH-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__viewBreakPoints" source="_tFoNEH-TEeewWIzpFvOHRA" target="_tFoNEH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tG7NkH-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__viewBreakPoints__55">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_tG28IX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_tG70oH-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__dbgSetExecMode" source="_tFoNEH-TEeewWIzpFvOHRA" target="_tFoNEH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tG70on-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__dbgSetExecMode__56">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_tG70oX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_tG8bsH-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__dbgDeferMsg" source="_tFoNEH-TEeewWIzpFvOHRA" target="_tFoNEH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tG9CwH-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__dbgDeferMsg__57">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_tG8bsX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_bc83wDKHEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_tsIzcH-TEeewWIzpFvOHRA" name="Debug__onPing" source="_pVsJMDKHEeeIZIaasUdwVA" target="_tIukYH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tsIzcX-TEeewWIzpFvOHRA" name="Debug__onPing__70">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__onPing&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;Debug__Path__onPing&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:id="_OmPtQDKWEee9wJm1xhJVtg" event="_SHYzYDKDEeeIZIaasUdwVA" port="_bc83wDKHEeeIZIaasUdwVA"/>
          </transition>
          <transition xmi:id="_tsPhIH-TEeewWIzpFvOHRA" name="Debug__onPing__S" guard="_tsQIMX-TEeewWIzpFvOHRA" source="_tIukYH-TEeewWIzpFvOHRA" target="_trbBwX-TEeewWIzpFvOHRA">
            <ownedRule xmi:id="_tsQIMX-TEeewWIzpFvOHRA" name="Debug__GuardonPing">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_tsQIMH-TEeewWIzpFvOHRA" name="Debug__GuardonPing">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tsZSIH-TEeewWIzpFvOHRA" name="Debug__onPing__S__72">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__onPing__S&quot;,(char *)&quot;Debug__Path__onPing&quot;,(char *)&quot;en&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_tsZ5MH-TEeewWIzpFvOHRA" name="Debug__onPing__E" source="_tr1RcX-TEeewWIzpFvOHRA" target="_wOD-wH4AEee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tsZ5MX-TEeewWIzpFvOHRA" name="Debug__onPing__E__73">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__onPing__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;WAITING FOR TIMER&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_tsbuYH-TEeewWIzpFvOHRA" name="Debug__onPing__dbg__varChange" source="_trG4sH-TEeewWIzpFvOHRA" target="_trG4sH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tsjDIH-TEeewWIzpFvOHRA" name="Debug__onPing__dbg__varChange__75">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_tsbuYX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_tsjqMH-TEeewWIzpFvOHRA" name="Debug__onPing__dbg__setBreakPoint" source="_trG4sH-TEeewWIzpFvOHRA" target="_trG4sH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tskRQH-TEeewWIzpFvOHRA" name="Debug__onPing__dbg__setBreakPoint__76">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_tsjqMX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_tskRQX-TEeewWIzpFvOHRA" name="Debug__onPing__dbg__remBreakPoint" source="_trG4sH-TEeewWIzpFvOHRA" target="_trG4sH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tskRQ3-TEeewWIzpFvOHRA" name="Debug__onPing__dbg__remBreakPoint__77">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_tskRQn-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_tsk4UH-TEeewWIzpFvOHRA" name="Debug__onPing__dbg__viewBreakPoints" source="_trG4sH-TEeewWIzpFvOHRA" target="_trG4sH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tsk4Un-TEeewWIzpFvOHRA" name="Debug__onPing__dbg__viewBreakPoints__78">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_tsk4UX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_tslfYH-TEeewWIzpFvOHRA" name="Debug__onPing__dbg__dbgSetExecMode" source="_trG4sH-TEeewWIzpFvOHRA" target="_trG4sH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tslfYn-TEeewWIzpFvOHRA" name="Debug__onPing__dbg__dbgSetExecMode__79">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_tslfYX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_tslfY3-TEeewWIzpFvOHRA" name="Debug__onPing__dbg__dbgDeferMsg" source="_trG4sH-TEeewWIzpFvOHRA" target="_trG4sH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tsmGcH-TEeewWIzpFvOHRA" name="Debug__onPing__dbg__dbgDeferMsg__80">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_tslfZH-TEeewWIzpFvOHRA" name="Debug__MSG" port="_bc83wDKHEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_tvrPoH-TEeewWIzpFvOHRA" name="Debug__keepPlaying" guard="_vwh4wH4BEee8vPff7YDTwQ" source="_EMjGcH4BEee8vPff7YDTwQ" target="_tu1iIH-TEeewWIzpFvOHRA">
            <ownedRule xmi:id="_vwh4wH4BEee8vPff7YDTwQ">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="__ykZAH4BEee8vPff7YDTwQ">
                <language>C++</language>
                <body>bool sendMorePongs = this->pongsSent &lt; 3;&#xD;
return sendMorePongs;</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tvrPoX-TEeewWIzpFvOHRA" name="Debug__keepPlaying__96">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__keepPlaying&quot;,(char *)&quot;ThreePongsSent?&quot;,(char *)&quot;Debug__Path__keepPlaying&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_tvr2sH-TEeewWIzpFvOHRA" name="Debug__keepPlaying__S" guard="_tvsdwX-TEeewWIzpFvOHRA" source="_tu1iIH-TEeewWIzpFvOHRA" target="_tvSOEX-TEeewWIzpFvOHRA">
            <ownedRule xmi:id="_tvsdwX-TEeewWIzpFvOHRA" name="Debug__GuardkeepPlaying">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_tvsdwH-TEeewWIzpFvOHRA" name="Debug__GuardkeepPlaying">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;ThreePongsSent?&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tvykYH-TEeewWIzpFvOHRA" name="Debug__keepPlaying__S__98">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__keepPlaying__S&quot;,(char *)&quot;Debug__Path__keepPlaying&quot;,(char *)&quot;en&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_tv0ZkH-TEeewWIzpFvOHRA" name="Debug__keepPlaying__E" source="_tvebUX-TEeewWIzpFvOHRA" target="_pVsJMDKHEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tv1AoH-TEeewWIzpFvOHRA" name="Debug__keepPlaying__E__99">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__keepPlaying__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_tv4D8H-TEeewWIzpFvOHRA" name="Debug__keepPlaying__dbg__varChange" source="_tvDkkX-TEeewWIzpFvOHRA" target="_tvDkkX-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tv7uUH-TEeewWIzpFvOHRA" name="Debug__keepPlaying__dbg__varChange__101">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_tv4D8X-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_tv8VYH-TEeewWIzpFvOHRA" name="Debug__keepPlaying__dbg__setBreakPoint" source="_tvDkkX-TEeewWIzpFvOHRA" target="_tvDkkX-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tv8VYn-TEeewWIzpFvOHRA" name="Debug__keepPlaying__dbg__setBreakPoint__102">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_tv8VYX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_tv8VY3-TEeewWIzpFvOHRA" name="Debug__keepPlaying__dbg__remBreakPoint" source="_tvDkkX-TEeewWIzpFvOHRA" target="_tvDkkX-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tv88cX-TEeewWIzpFvOHRA" name="Debug__keepPlaying__dbg__remBreakPoint__103">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_tv88cH-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_tv88cn-TEeewWIzpFvOHRA" name="Debug__keepPlaying__dbg__viewBreakPoints" source="_tvDkkX-TEeewWIzpFvOHRA" target="_tvDkkX-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_twAm0H-TEeewWIzpFvOHRA" name="Debug__keepPlaying__dbg__viewBreakPoints__104">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_tv88c3-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_twAm0X-TEeewWIzpFvOHRA" name="Debug__keepPlaying__dbg__dbgSetExecMode" source="_tvDkkX-TEeewWIzpFvOHRA" target="_tvDkkX-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_twBN4X-TEeewWIzpFvOHRA" name="Debug__keepPlaying__dbg__dbgSetExecMode__105">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_twBN4H-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sbwJoH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_twBN4n-TEeewWIzpFvOHRA" name="Debug__keepPlaying__dbg__dbgDeferMsg" source="_tvDkkX-TEeewWIzpFvOHRA" target="_tvDkkX-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_twBN5H-TEeewWIzpFvOHRA" name="Debug__keepPlaying__dbg__dbgDeferMsg__106">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_twBN43-TEeewWIzpFvOHRA" name="Debug__MSG" port="_bc83wDKHEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_tyAK4H-TEeewWIzpFvOHRA" name="Debug__InitDebug" source="_pViYMTKHEeeIZIaasUdwVA" target="_txnwYH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tyAK4X-TEeewWIzpFvOHRA" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_pViYMTKHEeeIZIaasUdwVA" name="Pseudo1"/>
          <subvertex xmi:type="uml:State" xmi:id="_pVsJMDKHEeeIZIaasUdwVA" name="PLAYING">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_tyIGsH-TEeewWIzpFvOHRA" name="PLAYING__122">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_tyLxEH-TEeewWIzpFvOHRA" name="PLAYING__123">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_wOD-wH4AEee8vPff7YDTwQ" name="WAITING FOR TIMER">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_tyDOMH-TEeewWIzpFvOHRA" name="WAITING FOR TIMER__120">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_tyG4kH-TEeewWIzpFvOHRA" name="WAITING FOR TIMER__121">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_EMjGcH4BEee8vPff7YDTwQ" name="ThreePongsSent?" kind="choice"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_s6WxMH-TEeewWIzpFvOHRA" name="Debug__Path__endOfRound" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_s63HgH-TEeewWIzpFvOHRA" name="Debug__C__endOfRound">
            <connectionPoint xmi:id="_s7ahIX-TEeewWIzpFvOHRA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_s763cH-TEeewWIzpFvOHRA" name="ex" kind="exitPoint"/>
            <region xmi:id="_s63HgX-TEeewWIzpFvOHRA" name="Region1">
              <transition xmi:id="_s9wDcH-TEeewWIzpFvOHRA" name="Debug__init__trans__endOfRound" source="_s7ahIX-TEeewWIzpFvOHRA" target="_s9mScX-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_s_2VMH-TEeewWIzpFvOHRA" name="Debug__init__trans__endOfRound__18">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__init__trans__endOfRound&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__endOfRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
              </transition>
              <transition xmi:id="_s9wDcX-TEeewWIzpFvOHRA" name="Debug__Ac__endOfRound" source="_s9mScX-TEeewWIzpFvOHRA" target="_s9ngkH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_s9wqgX-TEeewWIzpFvOHRA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>log.show(&quot;ending round.\n&quot;);&#xD;
endPort.end().send();&#xD;
this->pongsSent = 0;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__Ac__endOfRound&quot;,(char *)&quot;Debug__B__Ac__endOfRound&quot;,(char *)&quot;Debug__A__Ac__endOfRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_s9wqgH-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sbwJoH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_s9xRkH-TEeewWIzpFvOHRA" name="Debug__En__PLAYING" source="_s9ngkH-TEeewWIzpFvOHRA" target="_s9vcYH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tACicH-TEeewWIzpFvOHRA" name="Debug__En__PLAYING__21">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__endOfRound&quot;,(char *)&quot;Debug__A__En__endOfRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_s9xRkX-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sbwJoH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_s95NYH-TEeewWIzpFvOHRA" name="Debug__end__trans__endOfRound" source="_s9vcYH-TEeewWIzpFvOHRA" target="_s763cH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tADwkH-TEeewWIzpFvOHRA" name="Debug__end__trans__endOfRound__23">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__end__trans__endOfRound&quot;,(char *)&quot;Debug__A__En__endOfRound&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_s95NYX-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sbwJoH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_s9mScX-TEeewWIzpFvOHRA" name="Debug__B__Ac__endOfRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_s9mScn-TEeewWIzpFvOHRA" name="Debug__B__Ac__endOfRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;endOfRound&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__B__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_s-fDQH-TEeewWIzpFvOHRA" name="Debug__B__Ac__endOfRound__14">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__B__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_s9ngkH-TEeewWIzpFvOHRA" name="Debug__A__Ac__endOfRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_s9ngkX-TEeewWIzpFvOHRA" name="Debug__A__Ac__endOfRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;endOfRound&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__A__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_s_AnsX-TEeewWIzpFvOHRA" name="Debug__A__Ac__endOfRound__15">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__A__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_s9vcYH-TEeewWIzpFvOHRA" name="Debug__A__En__endOfRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_s9vcYX-TEeewWIzpFvOHRA" name="Debug__A__En__endOfRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__A__En__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_s_w1oH-TEeewWIzpFvOHRA" name="Debug__A__En__endOfRound__16">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__A__En__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_tAM6gH-TEeewWIzpFvOHRA" name="Debug__Path__timeout" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_tAvGAH-TEeewWIzpFvOHRA" name="Debug__C__timeout">
            <connectionPoint xmi:id="_tBHggH-TEeewWIzpFvOHRA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_tBjlYX-TEeewWIzpFvOHRA" name="ex" kind="exitPoint"/>
            <region xmi:id="_tAvGAX-TEeewWIzpFvOHRA" name="Region1">
              <transition xmi:id="_tDRcoH-TEeewWIzpFvOHRA" name="Debug__init__trans__timeout" source="_tBHggH-TEeewWIzpFvOHRA" target="_tDEoUH-TEeewWIzpFvOHRA"/>
              <transition xmi:id="_tDRcoX-TEeewWIzpFvOHRA" name="Debug__Ex__WAITING FOR TIMER" source="_tDEoUH-TEeewWIzpFvOHRA" target="_tDKH4H-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tE070H-TEeewWIzpFvOHRA" name="Debug__Ex__WAITING FOR TIMER__41">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__Ex__WAITING FOR TIMER&quot;,(char *)&quot;Debug__B__Ex__WAITING FOR TIMER&quot;,(char *)&quot;Debug__B__Ac__timeout&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_tDRcon-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sbwJoH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_tDRco3-TEeewWIzpFvOHRA" name="Debug__AC__timeout" source="_tDKH4H-TEeewWIzpFvOHRA" target="_tDLWAH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tDSDsX-TEeewWIzpFvOHRA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>pongPort.pong().send();&#xD;
this->pongsSent++;&#xD;
log.show(&quot;pong message sent.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__AC__timeout&quot;,(char *)&quot;Debug__B__Ac__timeout&quot;,(char *)&quot;Debug__A__Ac__timeout&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_tDSDsH-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sbwJoH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_tDSDsn-TEeewWIzpFvOHRA" name="Debug__end__trans__timeout" source="_tDLWAH-TEeewWIzpFvOHRA" target="_tBjlYX-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tFCXMH-TEeewWIzpFvOHRA" name="Debug__end__trans__timeout__44">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__end__trans__timeout&quot;,(char *)&quot;Debug__A__Ac__timeout&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_tDSDs3-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sbwJoH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_tDEoUH-TEeewWIzpFvOHRA" name="Debug__B__Ex__WAITING FOR TIMER">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_tDEoUX-TEeewWIzpFvOHRA" name="Debug__B__Ex__WAITING FOR TIMER">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ex__WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_tDxy8H-TEeewWIzpFvOHRA" name="Debug__B__Ex__WAITING FOR TIMER__37">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ex__WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_tDKH4H-TEeewWIzpFvOHRA" name="Debug__B__Ac__timeout">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_tDKu8H-TEeewWIzpFvOHRA" name="Debug__B__Ac__timeout">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;timeout&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_tESJQX-TEeewWIzpFvOHRA" name="Debug__B__Ac__timeout__38">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_tDLWAH-TEeewWIzpFvOHRA" name="Debug__A__Ac__timeout">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_tDLWAX-TEeewWIzpFvOHRA" name="Debug__A__Ac__timeout">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;timeout&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__A__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_tEzGoX-TEeewWIzpFvOHRA" name="Debug__A__Ac__timeout__39">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__A__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_tFJE4H-TEeewWIzpFvOHRA" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_tFoNEH-TEeewWIzpFvOHRA" name="Debug__C__Initial">
            <connectionPoint xmi:id="_tF5S0X-TEeewWIzpFvOHRA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_tGRtUX-TEeewWIzpFvOHRA" name="ex" kind="exitPoint"/>
            <region xmi:id="_tFoNEX-TEeewWIzpFvOHRA" name="Region1">
              <transition xmi:id="_tHRL0H-TEeewWIzpFvOHRA" name="Debug__init__trans__Initial" source="_tF5S0X-TEeewWIzpFvOHRA" target="_tHPWoH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tIVi0H-TEeewWIzpFvOHRA" name="Debug__init__trans__Initial__62">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
              </transition>
              <transition xmi:id="_tHRL0X-TEeewWIzpFvOHRA" name="Debug__Ac__Initial" source="_tHPWoH-TEeewWIzpFvOHRA" target="_tHP9sH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tHVdQH-TEeewWIzpFvOHRA" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.log(&quot;Ponger is ready&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_tHRL0n-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sbwJoH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_tHVdQX-TEeewWIzpFvOHRA" name="Debug__En__PLAYING" source="_tHP9sH-TEeewWIzpFvOHRA" target="_tHQkwH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tIXYAH-TEeewWIzpFvOHRA" name="Debug__En__PLAYING__65">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_tHVdQn-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sbwJoH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_tHWEUH-TEeewWIzpFvOHRA" name="Debug__end__trans__Initial" source="_tHQkwH-TEeewWIzpFvOHRA" target="_tGRtUX-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tIkzYH-TEeewWIzpFvOHRA" name="Debug__end__trans__Initial__67">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_tHWEUX-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sbwJoH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_tHPWoH-TEeewWIzpFvOHRA" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_tHPWoX-TEeewWIzpFvOHRA" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_tHpmUH-TEeewWIzpFvOHRA" name="Debug__B__Ac__Initial__58">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_tHP9sH-TEeewWIzpFvOHRA" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_tHP9sX-TEeewWIzpFvOHRA" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_tH9IUH-TEeewWIzpFvOHRA" name="Debug__A__Ac__Initial__59">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_tHQkwH-TEeewWIzpFvOHRA" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_tHQkwX-TEeewWIzpFvOHRA" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_tIUUsX-TEeewWIzpFvOHRA" name="Debug__A__En__Initial__60">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_tIukYH-TEeewWIzpFvOHRA" name="Debug__Path__onPing" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_trG4sH-TEeewWIzpFvOHRA" name="Debug__C__onPing">
            <connectionPoint xmi:id="_trbBwX-TEeewWIzpFvOHRA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_tr1RcX-TEeewWIzpFvOHRA" name="ex" kind="exitPoint"/>
            <region xmi:id="_trG4sX-TEeewWIzpFvOHRA" name="Region1">
              <transition xmi:id="_ttSC8H-TEeewWIzpFvOHRA" name="Debug__init__trans__onPing" source="_trbBwX-TEeewWIzpFvOHRA" target="_ttGcwH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tub5gX-TEeewWIzpFvOHRA" name="Debug__init__trans__onPing__86">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__init__trans__onPing&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
              </transition>
              <transition xmi:id="_ttSC8X-TEeewWIzpFvOHRA" name="Debug__Ex__PLAYING" source="_ttGcwH-TEeewWIzpFvOHRA" target="_ttHD0H-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tudHoH-TEeewWIzpFvOHRA" name="Debug__Ex__PLAYING__88">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ac__onPing&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_ttSC8n-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sbwJoH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ttSC83-TEeewWIzpFvOHRA" name="Debug__AC__onPing" source="_ttHD0H-TEeewWIzpFvOHRA" target="_ttL8UH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ttSqAH-TEeewWIzpFvOHRA" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;ping received.\n&quot;);&#xD;
pongerTimer.informIn(UMLRTTimespec(1,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__AC__onPing&quot;,(char *)&quot;Debug__B__Ac__onPing&quot;,(char *)&quot;Debug__A__Ac__onPing&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_ttSC9H-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sbwJoH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ttSqAX-TEeewWIzpFvOHRA" name="Debug__En__WAITING FOR TIMER" source="_ttL8UH-TEeewWIzpFvOHRA" target="_ttRb4H-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tunfsH-TEeewWIzpFvOHRA" name="Debug__En__WAITING FOR TIMER__91">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__En__WAITING FOR TIMER&quot;,(char *)&quot;Debug__A__Ac__onPing&quot;,(char *)&quot;Debug__A__En__WAITING FOR TIMER&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_ttSqAn-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sbwJoH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_ttSqA3-TEeewWIzpFvOHRA" name="Debug__end__trans__onPing" source="_ttRb4H-TEeewWIzpFvOHRA" target="_tr1RcX-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tuoGwH-TEeewWIzpFvOHRA" name="Debug__end__trans__onPing__93">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__end__trans__onPing&quot;,(char *)&quot;Debug__A__En__WAITING FOR TIMER&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_ttSqBH-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sbwJoH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_ttGcwH-TEeewWIzpFvOHRA" name="Debug__B__Ex__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ttGcwX-TEeewWIzpFvOHRA" name="Debug__B__Ex__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_tth6kX-TEeewWIzpFvOHRA" name="Debug__B__Ex__PLAYING__81">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ttHD0H-TEeewWIzpFvOHRA" name="Debug__B__Ac__onPing">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ttHD0X-TEeewWIzpFvOHRA" name="Debug__B__Ac__onPing">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;onPing&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_tt68IH-TEeewWIzpFvOHRA" name="Debug__B__Ac__onPing__82">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ttL8UH-TEeewWIzpFvOHRA" name="Debug__A__Ac__onPing">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ttL8UX-TEeewWIzpFvOHRA" name="Debug__A__Ac__onPing">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;onPing&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__A__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_tuHwcX-TEeewWIzpFvOHRA" name="Debug__A__Ac__onPing__83">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__A__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_ttRb4H-TEeewWIzpFvOHRA" name="Debug__A__En__WAITING FOR TIMER">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ttRb4X-TEeewWIzpFvOHRA" name="Debug__A__En__WAITING FOR TIMER">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__A__En__WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_tuMo8H-TEeewWIzpFvOHRA" name="Debug__A__En__WAITING FOR TIMER__84">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__A__En__WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_tu1iIH-TEeewWIzpFvOHRA" name="Debug__Path__keepPlaying" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_tvDkkX-TEeewWIzpFvOHRA" name="Debug__C__keepPlaying">
            <connectionPoint xmi:id="_tvSOEX-TEeewWIzpFvOHRA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_tvebUX-TEeewWIzpFvOHRA" name="ex" kind="exitPoint"/>
            <region xmi:id="_tvDkkn-TEeewWIzpFvOHRA" name="Region1">
              <transition xmi:id="_twVW8H-TEeewWIzpFvOHRA" name="Debug__init__trans__keepPlaying" source="_tvSOEX-TEeewWIzpFvOHRA" target="_twRFgH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_txU1cH-TEeewWIzpFvOHRA" name="Debug__init__trans__keepPlaying__111">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__init__trans__keepPlaying&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__keepPlaying&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
              </transition>
              <transition xmi:id="_twVW8X-TEeewWIzpFvOHRA" name="Debug__Ac__keepPlaying" source="_twRFgH-TEeewWIzpFvOHRA" target="_twUI0H-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_txYf0H-TEeewWIzpFvOHRA" name="Debug__Ac__keepPlaying__113">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__Ac__keepPlaying&quot;,(char *)&quot;Debug__B__Ac__keepPlaying&quot;,(char *)&quot;Debug__A__Ac__keepPlaying&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_twVW8n-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sbwJoH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_twV-AH-TEeewWIzpFvOHRA" name="Debug__En__PLAYING" source="_twUI0H-TEeewWIzpFvOHRA" target="_twUv4H-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_txZG4H-TEeewWIzpFvOHRA" name="Debug__En__PLAYING__115">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__keepPlaying&quot;,(char *)&quot;Debug__A__En__keepPlaying&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_twV-AX-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sbwJoH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_twZoYH-TEeewWIzpFvOHRA" name="Debug__end__trans__keepPlaying" source="_twUv4H-TEeewWIzpFvOHRA" target="_tvebUX-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_txaVAH-TEeewWIzpFvOHRA" name="Debug__end__trans__keepPlaying__117">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__end__trans__keepPlaying&quot;,(char *)&quot;Debug__A__En__keepPlaying&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_twZoYX-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sbwJoH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_twRFgH-TEeewWIzpFvOHRA" name="Debug__B__Ac__keepPlaying">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_twRFgX-TEeewWIzpFvOHRA" name="Debug__B__Ac__keepPlaying">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;keepPlaying&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__B__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_twquIH-TEeewWIzpFvOHRA" name="Debug__B__Ac__keepPlaying__107">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__B__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_twUI0H-TEeewWIzpFvOHRA" name="Debug__A__Ac__keepPlaying">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_twUI0X-TEeewWIzpFvOHRA" name="Debug__A__Ac__keepPlaying">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;keepPlaying&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__A__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_tw7z4H-TEeewWIzpFvOHRA" name="Debug__A__Ac__keepPlaying__108">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__A__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_twUv4H-TEeewWIzpFvOHRA" name="Debug__A__En__keepPlaying">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_twUv4X-TEeewWIzpFvOHRA" name="Debug__A__En__keepPlaying">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__A__En__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_txTnUX-TEeewWIzpFvOHRA" name="Debug__A__En__keepPlaying__109">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__A__En__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_txnwYH-TEeewWIzpFvOHRA" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_sbnmwX-TEeewWIzpFvOHRA" name="Debug__recallAllMsg" specification="_sbnmwH-TEeewWIzpFvOHRA">
        <language>C++</language>
        <body>pongPort.recallAll();
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_sd6FwX-TEeewWIzpFvOHRA" name="Debug__variablesViewMethod" specification="_sd6FwH-TEeewWIzpFvOHRA">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;pongsSent,&quot;);
tempS.append(&quot;Integer,&quot;);
if(pongsSent!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,pongsSent);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_seWKon-TEeewWIzpFvOHRA" name="Debug__variablesChange" specification="_seO14H-TEeewWIzpFvOHRA">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;pongsSent&quot;==tempVarName){
    pongsSent=atoi(varValue);
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_srjgMH-TEeewWIzpFvOHRA" name="Debug__sendEvent" specification="_sjV_YH-TEeewWIzpFvOHRA">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
this->Debug__event.setPayloadField(&quot;SenderCapsule&quot;,reserve3);
this->Debug__event.setPayloadField(&quot;Port&quot;,reserve4);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_sbnmwH-TEeewWIzpFvOHRA" name="Debug__recallAllMsg" visibility="private" method="_sbnmwX-TEeewWIzpFvOHRA"/>
      <ownedOperation xmi:id="_sd6FwH-TEeewWIzpFvOHRA" name="Debug__variablesView" visibility="private" method="_sd6FwX-TEeewWIzpFvOHRA"/>
      <ownedOperation xmi:id="_seO14H-TEeewWIzpFvOHRA" name="Debug__variablesChange" visibility="private" method="_seWKon-TEeewWIzpFvOHRA">
        <ownedParameter xmi:id="_seO14X-TEeewWIzpFvOHRA" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_seWKoH-TEeewWIzpFvOHRA" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_seWKoX-TEeewWIzpFvOHRA" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_sjV_YH-TEeewWIzpFvOHRA" name="Debug__sendEvent" visibility="private" method="_srjgMH-TEeewWIzpFvOHRA">
        <ownedParameter xmi:id="_sja34H-TEeewWIzpFvOHRA" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_skGNUH-TEeewWIzpFvOHRA" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_slTuQH-TEeewWIzpFvOHRA" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_snxzcH-TEeewWIzpFvOHRA" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sn69YH-TEeewWIzpFvOHRA" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_song8H-TEeewWIzpFvOHRA" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_spdOcH-TEeewWIzpFvOHRA" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_spo0oH-TEeewWIzpFvOHRA" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_spqCwH-TEeewWIzpFvOHRA" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_spqp0H-TEeewWIzpFvOHRA" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sqphQH-TEeewWIzpFvOHRA" name="reserve4">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_oVoIcDKJEeeIZIaasUdwVA" name="Top" isActive="true">
      <ownedAttribute xmi:id="_sKndADKJEeeIZIaasUdwVA" name="pinger" visibility="protected" type="_IYQmMDKEEeeIZIaasUdwVA" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_x3YykDKJEeeIZIaasUdwVA" name="ponger" visibility="protected" type="_UTN08DKHEeeIZIaasUdwVA" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_Uy91MH34Eee8vPff7YDTwQ" name="referee" visibility="protected" type="_VPgAMH34Eee8vPff7YDTwQ" isOrdered="true" aggregation="composite"/>
      <ownedConnector xmi:id="_61R6oDKJEeeIZIaasUdwVA" name="RTConnector1">
        <end xmi:id="_62BhgDKJEeeIZIaasUdwVA" partWithPort="_sKndADKJEeeIZIaasUdwVA" role="_uF7scDKEEeeIZIaasUdwVA"/>
        <end xmi:id="_62BhgTKJEeeIZIaasUdwVA" partWithPort="_x3YykDKJEeeIZIaasUdwVA" role="_bc83wDKHEeeIZIaasUdwVA"/>
      </ownedConnector>
      <ownedConnector xmi:id="_olDfoH34Eee8vPff7YDTwQ" name="RTConnector2">
        <end xmi:id="_olI_MH34Eee8vPff7YDTwQ" partWithPort="_Uy91MH34Eee8vPff7YDTwQ" role="_coBs8H34Eee8vPff7YDTwQ"/>
        <end xmi:id="_olJmQH34Eee8vPff7YDTwQ" partWithPort="_sKndADKJEeeIZIaasUdwVA" role="_ipVIEH34Eee8vPff7YDTwQ"/>
      </ownedConnector>
      <ownedConnector xmi:id="_8-nZwH34Eee8vPff7YDTwQ" name="RTConnector3">
        <end xmi:id="_8-rEIH34Eee8vPff7YDTwQ" partWithPort="_x3YykDKJEeeIZIaasUdwVA" role="_xzj2kH34Eee8vPff7YDTwQ"/>
        <end xmi:id="_8-rrMH34Eee8vPff7YDTwQ" partWithPort="_Uy91MH34Eee8vPff7YDTwQ" role="_uEbSYH34Eee8vPff7YDTwQ"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_VPgAMH34Eee8vPff7YDTwQ" name="Referee" classifierBehavior="_b26uMH36Eee8vPff7YDTwQ" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_coBs8H34Eee8vPff7YDTwQ" name="startPort" visibility="public" type="_dglsoH34Eee8vPff7YDTwQ" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_uEbSYH34Eee8vPff7YDTwQ" name="endPort" visibility="public" type="_wEGEEH34Eee8vPff7YDTwQ" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:id="_sjufMH35Eee8vPff7YDTwQ" name="round" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_B57nwH36Eee8vPff7YDTwQ"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_gTLeIH36Eee8vPff7YDTwQ" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_hE7rMH36Eee8vPff7YDTwQ" name="refereeTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_sr43YH-TEeewWIzpFvOHRA" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_ssRR4H-TEeewWIzpFvOHRA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_ssRR4X-TEeewWIzpFvOHRA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_stVB0n-TEeewWIzpFvOHRA" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_stcWkH-TEeewWIzpFvOHRA" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_stc9oH-TEeewWIzpFvOHRA" name="Debug__event">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_suNLkH-TEeewWIzpFvOHRA" name="Debug__SRO">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_b26uMH36Eee8vPff7YDTwQ" name="RefereeStateMachine" isReentrant="false">
        <region xmi:id="_b3xCwH36Eee8vPff7YDTwQ" name="Region">
          <transition xmi:id="_b4GZ8H36Eee8vPff7YDTwQ" name="Initial" source="_uQjIEH-TEeewWIzpFvOHRA" target="_b4A6YH36Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_2zOjoH36Eee8vPff7YDTwQ">
              <language>C++</language>
              <body>refereeTimer.informIn(UMLRTTimespec(4,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;STARTING ROUND&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_BTk88H37Eee8vPff7YDTwQ" name="startRound" source="_uUGyYH-TEeewWIzpFvOHRA" target="_63lJ4H36Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_kD7WcH37Eee8vPff7YDTwQ">
              <language>C++</language>
              <body>log.show(&quot;starting round %d.\n&quot;, this->round);&#xD;
startPort.start().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::startRound&quot;,(char *)&quot;Debug__Path__startRound&quot;,(char *)&quot;WAITING FOR END OF ROUND&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_F5PggH37Eee8vPff7YDTwQ" name="endRound" source="_uMAmUH-TEeewWIzpFvOHRA" target="_b4A6YH36Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Bq7QgH38Eee8vPff7YDTwQ">
              <language>C++</language>
              <body>log.show(&quot;round %d finished.\n&quot;, this->round);&#xD;
this->round++;&#xD;
refereeTimer.informIn(UMLRTTimespec(4,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::endRound&quot;,(char *)&quot;Debug__Path__endRound&quot;,(char *)&quot;STARTING ROUND&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_uNcwwH-TEeewWIzpFvOHRA" name="Debug__endRound" source="_63lJ4H36Eee8vPff7YDTwQ" target="_uMAmUH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uNcwwX-TEeewWIzpFvOHRA" name="Debug__endRound__275">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__endRound&quot;,(char *)&quot;WAITING FOR END OF ROUND&quot;,(char *)&quot;Debug__Path__endRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:id="_IRX1gH37Eee8vPff7YDTwQ" event="_IsvNwH35Eee8vPff7YDTwQ" port="_uEbSYH34Eee8vPff7YDTwQ"/>
          </transition>
          <transition xmi:id="_uNiQUH-TEeewWIzpFvOHRA" name="Debug__endRound__S" guard="_uNi3YX-TEeewWIzpFvOHRA" source="_uMAmUH-TEeewWIzpFvOHRA" target="_uMyCYH-TEeewWIzpFvOHRA">
            <ownedRule xmi:id="_uNi3YX-TEeewWIzpFvOHRA" name="Debug__GuardendRound">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_uNi3YH-TEeewWIzpFvOHRA" name="Debug__GuardendRound">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;WAITING FOR END OF ROUND&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uNnv4H-TEeewWIzpFvOHRA" name="Debug__endRound__S__277">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__endRound__S&quot;,(char *)&quot;Debug__Path__endRound&quot;,(char *)&quot;en&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_uNoW8H-TEeewWIzpFvOHRA" name="Debug__endRound__E" source="_uNIAoH-TEeewWIzpFvOHRA" target="_b4A6YH36Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uNo-AH-TEeewWIzpFvOHRA" name="Debug__endRound__E__278">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__endRound__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;STARTING ROUND&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_uNqMIH-TEeewWIzpFvOHRA" name="Debug__endRound__dbg__varChange" source="_uMZn4X-TEeewWIzpFvOHRA" target="_uMZn4X-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uNqMIn-TEeewWIzpFvOHRA" name="Debug__endRound__dbg__varChange__280">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_uNqMIX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sr43YH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_uNvrsH-TEeewWIzpFvOHRA" name="Debug__endRound__dbg__setBreakPoint" source="_uMZn4X-TEeewWIzpFvOHRA" target="_uMZn4X-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uNvrsn-TEeewWIzpFvOHRA" name="Debug__endRound__dbg__setBreakPoint__281">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_uNvrsX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sr43YH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_uNwSwH-TEeewWIzpFvOHRA" name="Debug__endRound__dbg__remBreakPoint" source="_uMZn4X-TEeewWIzpFvOHRA" target="_uMZn4X-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uNzWEH-TEeewWIzpFvOHRA" name="Debug__endRound__dbg__remBreakPoint__282">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_uNwSwX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sr43YH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_uNz9IH-TEeewWIzpFvOHRA" name="Debug__endRound__dbg__viewBreakPoints" source="_uMZn4X-TEeewWIzpFvOHRA" target="_uMZn4X-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uN0kMH-TEeewWIzpFvOHRA" name="Debug__endRound__dbg__viewBreakPoints__283">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_uNz9IX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sr43YH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_uN1LQH-TEeewWIzpFvOHRA" name="Debug__endRound__dbg__dbgSetExecMode" source="_uMZn4X-TEeewWIzpFvOHRA" target="_uMZn4X-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uN1LQn-TEeewWIzpFvOHRA" name="Debug__endRound__dbg__dbgSetExecMode__284">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_uN1LQX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sr43YH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_uN1yUH-TEeewWIzpFvOHRA" name="Debug__endRound__dbg__dbgDeferMsg" source="_uMZn4X-TEeewWIzpFvOHRA" target="_uMZn4X-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uN6q0H-TEeewWIzpFvOHRA" name="Debug__endRound__dbg__dbgDeferMsg__285">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_uN1yUX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_uEbSYH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_uSFZIH-TEeewWIzpFvOHRA" name="Debug__Initial" source="_uYCQIH-TEeewWIzpFvOHRA" target="_uQjIEH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uSFZIX-TEeewWIzpFvOHRA" name="Debug__Initial__301">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;WAITING FOR TIMER&quot;,&quot;timeout&quot;,&quot;PLAYING&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPing&quot;,&quot;WAITING FOR TIMER&quot;,&quot;ping&quot;,&quot;PingPongProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;WAITING TO START&quot;,&quot;startSignal&quot;,&quot;PLAYING&quot;,&quot;start&quot;,&quot;StartProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePongsSent?&quot;,&quot;endOfRound&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;STARTING ROUND&quot;,&quot;startRound&quot;,&quot;WAITING FOR END OF ROUND&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;WAITING FOR END OF ROUND&quot;,&quot;endRound&quot;,&quot;STARTING ROUND&quot;,&quot;end&quot;,&quot;endProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;STARTING ROUND&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePingsSent?&quot;,&quot;keepPlaying&quot;,&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPong&quot;,&quot;ThreePingsSent?&quot;,&quot;pong&quot;,&quot;PingPongProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePongsSent?&quot;,&quot;keepPlaying&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;WAITING FOR TIMER&quot;,&quot;timeout&quot;,&quot;ThreePongsSent?&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePingsSent?&quot;,&quot;endOfRound&quot;,&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_uYXnUH-TEeewWIzpFvOHRA" name="ConnectionEstablished" port="_sr43YH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
            </trigger>
          </transition>
          <transition xmi:id="_uSGnQH-TEeewWIzpFvOHRA" name="Debug__Initial__S" guard="_uSHOUX-TEeewWIzpFvOHRA" source="_uQjIEH-TEeewWIzpFvOHRA" target="_uRUkIH-TEeewWIzpFvOHRA">
            <ownedRule xmi:id="_uSHOUX-TEeewWIzpFvOHRA" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_uSHOUH-TEeewWIzpFvOHRA" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo3&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uSHOUn-TEeewWIzpFvOHRA" name="Debug__Initial__S__303">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_uSIccH-TEeewWIzpFvOHRA" name="Debug__Initial__E" source="_uRp7UH-TEeewWIzpFvOHRA" target="_b4A6YH36Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uSMG0H-TEeewWIzpFvOHRA" name="Debug__Initial__E__304">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;STARTING ROUND&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_uSNU8H-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__varChange" source="_uQ-l4H-TEeewWIzpFvOHRA" target="_uQ-l4H-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uSQ_UH-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__varChange__306">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_uSNU8X-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sr43YH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_uSRmYH-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__setBreakPoint" source="_uQ-l4H-TEeewWIzpFvOHRA" target="_uQ-l4H-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uSRmYn-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__setBreakPoint__307">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_uSRmYX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sr43YH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_uSSNcH-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__remBreakPoint" source="_uQ-l4H-TEeewWIzpFvOHRA" target="_uQ-l4H-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uSSNcn-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__remBreakPoint__308">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_uSSNcX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sr43YH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_uSS0gH-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__viewBreakPoints" source="_uQ-l4H-TEeewWIzpFvOHRA" target="_uQ-l4H-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uSWe4H-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__viewBreakPoints__309">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_uSS0gX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sr43YH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_uSWe4X-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__dbgSetExecMode" source="_uQ-l4H-TEeewWIzpFvOHRA" target="_uQ-l4H-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uSXF8H-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__dbgSetExecMode__310">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_uSWe4n-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sr43YH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_uSXF8X-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__dbgDeferMsg" source="_uQ-l4H-TEeewWIzpFvOHRA" target="_uQ-l4H-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uSXF83-TEeewWIzpFvOHRA" name="Debug__Initial__dbg__dbgDeferMsg__311">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_uSXF8n-TEeewWIzpFvOHRA" name="Debug__MSG" port="_uEbSYH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_uVX9sX-TEeewWIzpFvOHRA" name="Debug__startRound" source="_b4A6YH36Eee8vPff7YDTwQ" target="_uUGyYH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uVYkwH-TEeewWIzpFvOHRA" name="Debug__startRound__324">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__startRound&quot;,(char *)&quot;STARTING ROUND&quot;,(char *)&quot;Debug__Path__startRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:id="_DVRH4H37Eee8vPff7YDTwQ" port="_hE7rMH36Eee8vPff7YDTwQ">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_uVhHoH-TEeewWIzpFvOHRA" name="Debug__startRound__S" guard="_uVhusX-TEeewWIzpFvOHRA" source="_uUGyYH-TEeewWIzpFvOHRA" target="_uU0kEX-TEeewWIzpFvOHRA">
            <ownedRule xmi:id="_uVhusX-TEeewWIzpFvOHRA" name="Debug__GuardstartRound">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_uVhusH-TEeewWIzpFvOHRA" name="Debug__GuardstartRound">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;STARTING ROUND&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uVhusn-TEeewWIzpFvOHRA" name="Debug__startRound__S__326">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__startRound__S&quot;,(char *)&quot;Debug__Path__startRound&quot;,(char *)&quot;en&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_uVi80H-TEeewWIzpFvOHRA" name="Debug__startRound__E" source="_uVEbsX-TEeewWIzpFvOHRA" target="_63lJ4H36Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uVi80X-TEeewWIzpFvOHRA" name="Debug__startRound__E__327">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__startRound__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;WAITING FOR END OF ROUND&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_uVmAIH-TEeewWIzpFvOHRA" name="Debug__startRound__dbg__varChange" source="_uUhpIH-TEeewWIzpFvOHRA" target="_uUhpIH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uVmnMX-TEeewWIzpFvOHRA" name="Debug__startRound__dbg__varChange__329">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_uVmnMH-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sr43YH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_uVmnMn-TEeewWIzpFvOHRA" name="Debug__startRound__dbg__setBreakPoint" source="_uUhpIH-TEeewWIzpFvOHRA" target="_uUhpIH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uVnOQX-TEeewWIzpFvOHRA" name="Debug__startRound__dbg__setBreakPoint__330">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_uVnOQH-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sr43YH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_uVnOQn-TEeewWIzpFvOHRA" name="Debug__startRound__dbg__remBreakPoint" source="_uUhpIH-TEeewWIzpFvOHRA" target="_uUhpIH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uVvKEH-TEeewWIzpFvOHRA" name="Debug__startRound__dbg__remBreakPoint__331">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_uVn1UH-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sr43YH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_uVvxIH-TEeewWIzpFvOHRA" name="Debug__startRound__dbg__viewBreakPoints" source="_uUhpIH-TEeewWIzpFvOHRA" target="_uUhpIH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uVvxIn-TEeewWIzpFvOHRA" name="Debug__startRound__dbg__viewBreakPoints__332">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_uVvxIX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sr43YH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_uVwYMH-TEeewWIzpFvOHRA" name="Debug__startRound__dbg__dbgSetExecMode" source="_uUhpIH-TEeewWIzpFvOHRA" target="_uUhpIH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uVwYMn-TEeewWIzpFvOHRA" name="Debug__startRound__dbg__dbgSetExecMode__333">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_uVwYMX-TEeewWIzpFvOHRA" name="Debug__MSG" port="_sr43YH-TEeewWIzpFvOHRA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_uVwYM3-TEeewWIzpFvOHRA" name="Debug__startRound__dbg__dbgDeferMsg" source="_uUhpIH-TEeewWIzpFvOHRA" target="_uUhpIH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uVw_QX-TEeewWIzpFvOHRA" name="Debug__startRound__dbg__dbgDeferMsg__334">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_uVw_QH-TEeewWIzpFvOHRA" name="Debug__MSG" port="_uEbSYH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_uYT88H-TEeewWIzpFvOHRA" name="Debug__InitDebug" source="_b317QH36Eee8vPff7YDTwQ" target="_uYCQIH-TEeewWIzpFvOHRA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uYT88X-TEeewWIzpFvOHRA" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_b317QH36Eee8vPff7YDTwQ" name="Pseudo3"/>
          <subvertex xmi:type="uml:State" xmi:id="_b4A6YH36Eee8vPff7YDTwQ" name="STARTING ROUND">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_uYotEH-TEeewWIzpFvOHRA" name="STARTING ROUND__349">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::STARTING ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_uYrJUH-TEeewWIzpFvOHRA" name="STARTING ROUND__350">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::STARTING ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_63lJ4H36Eee8vPff7YDTwQ" name="WAITING FOR END OF ROUND">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_uYsXcH-TEeewWIzpFvOHRA" name="WAITING FOR END OF ROUND__351">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::WAITING FOR END OF ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_uYwB0H-TEeewWIzpFvOHRA" name="WAITING FOR END OF ROUND__352">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::WAITING FOR END OF ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_uMAmUH-TEeewWIzpFvOHRA" name="Debug__Path__endRound" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_uMZn4X-TEeewWIzpFvOHRA" name="Debug__C__endRound">
            <connectionPoint xmi:id="_uMyCYH-TEeewWIzpFvOHRA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_uNIAoH-TEeewWIzpFvOHRA" name="ex" kind="exitPoint"/>
            <region xmi:id="_uMZn4n-TEeewWIzpFvOHRA" name="Region1">
              <transition xmi:id="_uOc2UH-TEeewWIzpFvOHRA" name="Debug__init__trans__endRound" source="_uMyCYH-TEeewWIzpFvOHRA" target="_uOTFUH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uQKGgH-TEeewWIzpFvOHRA" name="Debug__init__trans__endRound__291">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__init__trans__endRound&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__WAITING FOR END OF ROUND&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
              </transition>
              <transition xmi:id="_uOc2UX-TEeewWIzpFvOHRA" name="Debug__Ex__WAITING FOR END OF ROUND" source="_uOTFUH-TEeewWIzpFvOHRA" target="_uOTsYH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uQKtkH-TEeewWIzpFvOHRA" name="Debug__Ex__WAITING FOR END OF ROUND__293">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__Ex__WAITING FOR END OF ROUND&quot;,(char *)&quot;Debug__B__Ex__WAITING FOR END OF ROUND&quot;,(char *)&quot;Debug__B__Ac__endRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_uOddYH-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sr43YH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_uOddYX-TEeewWIzpFvOHRA" name="Debug__AC__endRound" source="_uOTsYH-TEeewWIzpFvOHRA" target="_uOX90H-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uOeEcH-TEeewWIzpFvOHRA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>log.show(&quot;round %d finished.\n&quot;, this->round);&#xD;
this->round++;&#xD;
refereeTimer.informIn(UMLRTTimespec(4,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__AC__endRound&quot;,(char *)&quot;Debug__B__Ac__endRound&quot;,(char *)&quot;Debug__A__Ac__endRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_uOddYn-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sr43YH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_uOeEcX-TEeewWIzpFvOHRA" name="Debug__En__STARTING ROUND" source="_uOX90H-TEeewWIzpFvOHRA" target="_uOZL8H-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uQT3gH-TEeewWIzpFvOHRA" name="Debug__En__STARTING ROUND__296">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__En__STARTING ROUND&quot;,(char *)&quot;Debug__A__Ac__endRound&quot;,(char *)&quot;Debug__A__En__STARTING ROUND&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_uOeEcn-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sr43YH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_uOeEc3-TEeewWIzpFvOHRA" name="Debug__end__trans__endRound" source="_uOZL8H-TEeewWIzpFvOHRA" target="_uNIAoH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uQW60H-TEeewWIzpFvOHRA" name="Debug__end__trans__endRound__298">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__end__trans__endRound&quot;,(char *)&quot;Debug__A__En__STARTING ROUND&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_uOeEdH-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sr43YH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_uOTFUH-TEeewWIzpFvOHRA" name="Debug__B__Ex__WAITING FOR END OF ROUND">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_uOTFUX-TEeewWIzpFvOHRA" name="Debug__B__Ex__WAITING FOR END OF ROUND">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR END OF ROUND&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__B__Ex__WAITING FOR END OF ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_uO4UIH-TEeewWIzpFvOHRA" name="Debug__B__Ex__WAITING FOR END OF ROUND__286">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__B__Ex__WAITING FOR END OF ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_uOTsYH-TEeewWIzpFvOHRA" name="Debug__B__Ac__endRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_uOTsYX-TEeewWIzpFvOHRA" name="Debug__B__Ac__endRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR END OF ROUND&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;endRound&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__B__Ac__endRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_uPO5cH-TEeewWIzpFvOHRA" name="Debug__B__Ac__endRound__287">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__B__Ac__endRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_uOX90H-TEeewWIzpFvOHRA" name="Debug__A__Ac__endRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_uOX90X-TEeewWIzpFvOHRA" name="Debug__A__Ac__endRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;endRound&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;STARTING ROUND&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__A__Ac__endRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_uPpJIX-TEeewWIzpFvOHRA" name="Debug__A__Ac__endRound__288">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__A__Ac__endRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_uOZL8H-TEeewWIzpFvOHRA" name="Debug__A__En__STARTING ROUND">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_uOZL8X-TEeewWIzpFvOHRA" name="Debug__A__En__STARTING ROUND">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;STARTING ROUND&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__A__En__STARTING ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_uPszgH-TEeewWIzpFvOHRA" name="Debug__A__En__STARTING ROUND__289">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__A__En__STARTING ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_uQjIEH-TEeewWIzpFvOHRA" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_uQ-l4H-TEeewWIzpFvOHRA" name="Debug__C__Initial">
            <connectionPoint xmi:id="_uRUkIH-TEeewWIzpFvOHRA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_uRp7UH-TEeewWIzpFvOHRA" name="ex" kind="exitPoint"/>
            <region xmi:id="_uQ-l4X-TEeewWIzpFvOHRA" name="Region1">
              <transition xmi:id="_uS2OIH-TEeewWIzpFvOHRA" name="Debug__init__trans__Initial" source="_uRUkIH-TEeewWIzpFvOHRA" target="_uSr2EH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uT4I4H-TEeewWIzpFvOHRA" name="Debug__init__trans__Initial__316">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
              </transition>
              <transition xmi:id="_uS2OIX-TEeewWIzpFvOHRA" name="Debug__Ac__Initial" source="_uSr2EH-TEeewWIzpFvOHRA" target="_uSwukH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uS21MH-TEeewWIzpFvOHRA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>refereeTimer.informIn(UMLRTTimespec(4,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_uS2OIn-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sr43YH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_uS21MX-TEeewWIzpFvOHRA" name="Debug__En__STARTING ROUND" source="_uSwukH-TEeewWIzpFvOHRA" target="_uS1nEH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uUDIAH-TEeewWIzpFvOHRA" name="Debug__En__STARTING ROUND__319">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__En__STARTING ROUND&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_uS21Mn-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sr43YH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_uS21M3-TEeewWIzpFvOHRA" name="Debug__end__trans__Initial" source="_uS1nEH-TEeewWIzpFvOHRA" target="_uRp7UH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uUEWIH-TEeewWIzpFvOHRA" name="Debug__end__trans__Initial__321">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_uS21NH-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sr43YH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_uSr2EH-TEeewWIzpFvOHRA" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_uSr2EX-TEeewWIzpFvOHRA" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_uTJJEX-TEeewWIzpFvOHRA" name="Debug__B__Ac__Initial__312">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_uSwukH-TEeewWIzpFvOHRA" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_uSwukX-TEeewWIzpFvOHRA" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;STARTING ROUND&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_uTiKoX-TEeewWIzpFvOHRA" name="Debug__A__Ac__Initial__313">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_uS1nEH-TEeewWIzpFvOHRA" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_uS1nEX-TEeewWIzpFvOHRA" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;STARTING ROUND&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_uT1FkH-TEeewWIzpFvOHRA" name="Debug__A__En__Initial__314">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_uUGyYH-TEeewWIzpFvOHRA" name="Debug__Path__startRound" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_uUhpIH-TEeewWIzpFvOHRA" name="Debug__C__startRound">
            <connectionPoint xmi:id="_uU0kEX-TEeewWIzpFvOHRA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_uVEbsX-TEeewWIzpFvOHRA" name="ex" kind="exitPoint"/>
            <region xmi:id="_uUhpIX-TEeewWIzpFvOHRA" name="Region1">
              <transition xmi:id="_uWO5UH-TEeewWIzpFvOHRA" name="Debug__init__trans__startRound" source="_uU0kEX-TEeewWIzpFvOHRA" target="_uWFvYH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uX4fIH-TEeewWIzpFvOHRA" name="Debug__init__trans__startRound__340">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__init__trans__startRound&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__STARTING ROUND&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
              </transition>
              <transition xmi:id="_uWPgYH-TEeewWIzpFvOHRA" name="Debug__Ex__STARTING ROUND" source="_uWFvYH-TEeewWIzpFvOHRA" target="_uWKA0H-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uX5GMH-TEeewWIzpFvOHRA" name="Debug__Ex__STARTING ROUND__342">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__Ex__STARTING ROUND&quot;,(char *)&quot;Debug__B__Ex__STARTING ROUND&quot;,(char *)&quot;Debug__B__Ac__startRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_uWPgYX-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sr43YH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_uWPgYn-TEeewWIzpFvOHRA" name="Debug__AC__startRound" source="_uWKA0H-TEeewWIzpFvOHRA" target="_uWKn4H-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uWQHcH-TEeewWIzpFvOHRA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>log.show(&quot;starting round %d.\n&quot;, this->round);&#xD;
startPort.start().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__AC__startRound&quot;,(char *)&quot;Debug__B__Ac__startRound&quot;,(char *)&quot;Debug__A__Ac__startRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_uWPgY3-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sr43YH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_uWQHcX-TEeewWIzpFvOHRA" name="Debug__En__WAITING FOR END OF ROUND" source="_uWKn4H-TEeewWIzpFvOHRA" target="_uWL2AH-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uX6UUH-TEeewWIzpFvOHRA" name="Debug__En__WAITING FOR END OF ROUND__345">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__En__WAITING FOR END OF ROUND&quot;,(char *)&quot;Debug__A__Ac__startRound&quot;,(char *)&quot;Debug__A__En__WAITING FOR END OF ROUND&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_uWQHcn-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sr43YH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_uWQHc3-TEeewWIzpFvOHRA" name="Debug__end__trans__startRound" source="_uWL2AH-TEeewWIzpFvOHRA" target="_uVEbsX-TEeewWIzpFvOHRA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uX_z4H-TEeewWIzpFvOHRA" name="Debug__end__trans__startRound__347">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__end__trans__startRound&quot;,(char *)&quot;Debug__A__En__WAITING FOR END OF ROUND&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_uWQHdH-TEeewWIzpFvOHRA" name="Debug__Exec" port="_sr43YH-TEeewWIzpFvOHRA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_uWFvYH-TEeewWIzpFvOHRA" name="Debug__B__Ex__STARTING ROUND">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_uWFvYX-TEeewWIzpFvOHRA" name="Debug__B__Ex__STARTING ROUND">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;STARTING ROUND&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__B__Ex__STARTING ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_uWn64H-TEeewWIzpFvOHRA" name="Debug__B__Ex__STARTING ROUND__335">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__B__Ex__STARTING ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_uWKA0H-TEeewWIzpFvOHRA" name="Debug__B__Ac__startRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_uWKA0X-TEeewWIzpFvOHRA" name="Debug__B__Ac__startRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;STARTING ROUND&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;startRound&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__B__Ac__startRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_uXCKkX-TEeewWIzpFvOHRA" name="Debug__B__Ac__startRound__336">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__B__Ac__startRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_uWKn4H-TEeewWIzpFvOHRA" name="Debug__A__Ac__startRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_uWKn4X-TEeewWIzpFvOHRA" name="Debug__A__Ac__startRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;startRound&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;WAITING FOR END OF ROUND&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__A__Ac__startRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_uXWToH-TEeewWIzpFvOHRA" name="Debug__A__Ac__startRound__337">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__A__Ac__startRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_uWL2AH-TEeewWIzpFvOHRA" name="Debug__A__En__WAITING FOR END OF ROUND">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_uWL2AX-TEeewWIzpFvOHRA" name="Debug__A__En__WAITING FOR END OF ROUND">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR END OF ROUND&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__A__En__WAITING FOR END OF ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_uXdBUH-TEeewWIzpFvOHRA" name="Debug__A__En__WAITING FOR END OF ROUND__338">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__A__En__WAITING FOR END OF ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_uYCQIH-TEeewWIzpFvOHRA" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_srywwX-TEeewWIzpFvOHRA" name="Debug__recallAllMsg" specification="_srywwH-TEeewWIzpFvOHRA">
        <language>C++</language>
        <body>endPort.recallAll();
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_stINgX-TEeewWIzpFvOHRA" name="Debug__variablesViewMethod" specification="_stINgH-TEeewWIzpFvOHRA">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;round,&quot;);
tempS.append(&quot;Integer,&quot;);
if(round!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,round);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_stVB0X-TEeewWIzpFvOHRA" name="Debug__variablesChange" specification="_stMe8H-TEeewWIzpFvOHRA">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;round&quot;==tempVarName){
    round=atoi(varValue);
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_s5vGIH-TEeewWIzpFvOHRA" name="Debug__sendEvent" specification="_sxPRcH-TEeewWIzpFvOHRA">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
this->Debug__event.setPayloadField(&quot;SenderCapsule&quot;,reserve3);
this->Debug__event.setPayloadField(&quot;Port&quot;,reserve4);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_srywwH-TEeewWIzpFvOHRA" name="Debug__recallAllMsg" visibility="private" method="_srywwX-TEeewWIzpFvOHRA"/>
      <ownedOperation xmi:id="_stINgH-TEeewWIzpFvOHRA" name="Debug__variablesView" visibility="private" method="_stINgX-TEeewWIzpFvOHRA"/>
      <ownedOperation xmi:id="_stMe8H-TEeewWIzpFvOHRA" name="Debug__variablesChange" visibility="private" method="_stVB0X-TEeewWIzpFvOHRA">
        <ownedParameter xmi:id="_stMe8X-TEeewWIzpFvOHRA" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_stSlkH-TEeewWIzpFvOHRA" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_stVB0H-TEeewWIzpFvOHRA" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_sxPRcH-TEeewWIzpFvOHRA" name="Debug__sendEvent" visibility="private" method="_s5vGIH-TEeewWIzpFvOHRA">
        <ownedParameter xmi:id="_sxRtsH-TEeewWIzpFvOHRA" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_syFmAH-TEeewWIzpFvOHRA" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_syvtUH-TEeewWIzpFvOHRA" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sz_qgH-TEeewWIzpFvOHRA" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_s0FKEH-TEeewWIzpFvOHRA" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_s1WVYH-TEeewWIzpFvOHRA" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_s2u1cH-TEeewWIzpFvOHRA" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_s2vcgH-TEeewWIzpFvOHRA" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_s2xRsH-TEeewWIzpFvOHRA" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_s2zG4H-TEeewWIzpFvOHRA" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_s4K_4H-TEeewWIzpFvOHRA" name="reserve4">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_dgvdoH34Eee8vPff7YDTwQ" name="StartProtocol">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_dglsoH34Eee8vPff7YDTwQ" name="StartProtocol">
        <interfaceRealization xmi:id="_dhENwH34Eee8vPff7YDTwQ" client="_dglsoH34Eee8vPff7YDTwQ" supplier="_dg8R8H34Eee8vPff7YDTwQ" contract="_dg8R8H34Eee8vPff7YDTwQ"/>
        <interfaceRealization xmi:id="_dhZk8H34Eee8vPff7YDTwQ" client="_dglsoH34Eee8vPff7YDTwQ" supplier="_dhSQMH34Eee8vPff7YDTwQ" contract="_dhSQMH34Eee8vPff7YDTwQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_dg8R8H34Eee8vPff7YDTwQ" name="StartProtocol"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_dhH4IH34Eee8vPff7YDTwQ" name="StartProtocol~">
        <ownedOperation xmi:id="_FavRgH35Eee8vPff7YDTwQ" name="start"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_dhPz8H34Eee8vPff7YDTwQ" client="_dglsoH34Eee8vPff7YDTwQ" supplier="_dhH4IH34Eee8vPff7YDTwQ"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_dhRpIH34Eee8vPff7YDTwQ" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_dhSQMH34Eee8vPff7YDTwQ" name="StartProtocolIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_dhbaIH34Eee8vPff7YDTwQ" client="_dglsoH34Eee8vPff7YDTwQ" supplier="_dhSQMH34Eee8vPff7YDTwQ"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_FbDakH35Eee8vPff7YDTwQ" operation="_FavRgH35Eee8vPff7YDTwQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_wEMKsH34Eee8vPff7YDTwQ" name="endProtocol">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_wEGEEH34Eee8vPff7YDTwQ" name="endProtocol">
        <interfaceRealization xmi:id="_wEZmEH34Eee8vPff7YDTwQ" client="_wEGEEH34Eee8vPff7YDTwQ" supplier="_wES4YH34Eee8vPff7YDTwQ" contract="_wES4YH34Eee8vPff7YDTwQ"/>
        <interfaceRealization xmi:id="_wEr58H34Eee8vPff7YDTwQ" client="_wEGEEH34Eee8vPff7YDTwQ" supplier="_wElMQH34Eee8vPff7YDTwQ" contract="_wElMQH34Eee8vPff7YDTwQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_wES4YH34Eee8vPff7YDTwQ" name="endProtocol"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_wEbbQH34Eee8vPff7YDTwQ" name="endProtocol~">
        <ownedOperation xmi:id="_IsjnkH35Eee8vPff7YDTwQ" name="end"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_wEjXEH34Eee8vPff7YDTwQ" client="_wEGEEH34Eee8vPff7YDTwQ" supplier="_wEbbQH34Eee8vPff7YDTwQ"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_wEklMH34Eee8vPff7YDTwQ" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_wElMQH34Eee8vPff7YDTwQ" name="endProtocolIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_wEtvIH34Eee8vPff7YDTwQ" client="_wEGEEH34Eee8vPff7YDTwQ" supplier="_wElMQH34Eee8vPff7YDTwQ"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_IsvNwH35Eee8vPff7YDTwQ" operation="_IsjnkH35Eee8vPff7YDTwQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_sCAM4H-TEeewWIzpFvOHRA" name="Debug__Top">
      <ownedAttribute xmi:id="_sJwasH-TEeewWIzpFvOHRA" name="Debug__Gateway">
        <type xmi:type="uml:Class" href="../CommGateWay/model.uml#_XIyCcAdxEeadtKuU2t6fMg"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_sKKqYH-TEeewWIzpFvOHRA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_sKPi4H-TEeewWIzpFvOHRA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_sKYFwH-TEeewWIzpFvOHRA" name="Debug__Top" type="_oVoIcDKJEeeIZIaasUdwVA">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_sK3N8H-TEeewWIzpFvOHRA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_sK3N8X-TEeewWIzpFvOHRA" value="1"/>
      </ownedAttribute>
    </packagedElement>
    <profileApplication xmi:id="_cJ2kYzJjEeeIZIaasUdwVA">
      <eAnnotations xmi:id="_cJ2kZDJjEeeIZIaasUdwVA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:id="_cJ2kZTJjEeeIZIaasUdwVA">
      <eAnnotations xmi:id="_cJ2kZjJjEeeIZIaasUdwVA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
    <profileApplication xmi:id="_cJ2kZzJjEeeIZIaasUdwVA">
      <eAnnotations xmi:id="_cJ2kaDJjEeeIZIaasUdwVA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UMLRT_CPP/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:ProtocolContainer xmi:id="_-IyvETJjEeeIZIaasUdwVA" base_Package="_-IyvEDJjEeeIZIaasUdwVA"/>
  <UMLRealTime:RTMessageSet xmi:id="_-J_o8DJjEeeIZIaasUdwVA" base_Interface="_-J138DJjEeeIZIaasUdwVA"/>
  <UMLRealTime:RTMessageSet xmi:id="_-KIy4TJjEeeIZIaasUdwVA" base_Interface="_-KIy4DJjEeeIZIaasUdwVA" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_-KSj4jJjEeeIZIaasUdwVA" base_Interface="_-KSj4TJjEeeIZIaasUdwVA" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_-Kbt0TJjEeeIZIaasUdwVA" base_Collaboration="_-CQpQDJjEeeIZIaasUdwVA"/>
  <UMLRealTime:Capsule xmi:id="_JMUgYDKEEeeIZIaasUdwVA" base_Class="_IYQmMDKEEeeIZIaasUdwVA"/>
  <UMLRealTime:RTPort xmi:id="_uG1EUDKEEeeIZIaasUdwVA" base_Port="_uF7scDKEEeeIZIaasUdwVA"/>
  <UMLRealTime:RTPort xmi:id="_BGPUoDKFEeeIZIaasUdwVA" isWired="false" base_Port="_BGFjoDKFEeeIZIaasUdwVA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_LWwiMDKFEeeIZIaasUdwVA" base_Pseudostate="_LWmxMDKFEeeIZIaasUdwVA"/>
  <UMLRTStateMachines:RTState xmi:id="_LXWYETKFEeeIZIaasUdwVA" base_State="_LXWYEDKFEeeIZIaasUdwVA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_LXzEADKFEeeIZIaasUdwVA" base_Region="_LWT2QDKFEeeIZIaasUdwVA"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_LZu9wDKFEeeIZIaasUdwVA" base_StateMachine="_LUEakDKFEeeIZIaasUdwVA"/>
  <UMLRealTime:Capsule xmi:id="_UUaHzDKHEeeIZIaasUdwVA" base_Class="_UTN08DKHEeeIZIaasUdwVA"/>
  <UMLRealTime:RTPort xmi:id="_bdGowDKHEeeIZIaasUdwVA" base_Port="_bc83wDKHEeeIZIaasUdwVA"/>
  <UMLRealTime:RTPort xmi:id="_gaTikTKHEeeIZIaasUdwVA" isWired="false" base_Port="_gaTikDKHEeeIZIaasUdwVA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_pViYMjKHEeeIZIaasUdwVA" base_Pseudostate="_pViYMTKHEeeIZIaasUdwVA"/>
  <UMLRTStateMachines:RTState xmi:id="_pVsJMTKHEeeIZIaasUdwVA" base_State="_pVsJMDKHEeeIZIaasUdwVA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_pVsJMzKHEeeIZIaasUdwVA" base_Region="_pViYMDKHEeeIZIaasUdwVA"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_pW4cEDKHEeeIZIaasUdwVA" base_StateMachine="_pVZOQDKHEeeIZIaasUdwVA"/>
  <UMLRealTime:Capsule xmi:id="_oW0bTDKJEeeIZIaasUdwVA" base_Class="_oVoIcDKJEeeIZIaasUdwVA"/>
  <UMLRealTime:CapsulePart xmi:id="_sKwm8DKJEeeIZIaasUdwVA" base_Property="_sKndADKJEeeIZIaasUdwVA"/>
  <UMLRealTime:CapsulePart xmi:id="_x3ijkDKJEeeIZIaasUdwVA" base_Property="_x3YykDKJEeeIZIaasUdwVA"/>
  <UMLRealTime:RTConnector xmi:id="_62BhgjKJEeeIZIaasUdwVA" base_Connector="_61R6oDKJEeeIZIaasUdwVA"/>
  <UMLRealTime:CapsulePart xmi:id="_U5_qQH34Eee8vPff7YDTwQ" base_Property="_Uy91MH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:Capsule xmi:id="_VSOkEH34Eee8vPff7YDTwQ" base_Class="_VPgAMH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTPort xmi:id="_coMsEH34Eee8vPff7YDTwQ" base_Port="_coBs8H34Eee8vPff7YDTwQ"/>
  <UMLRealTime:ProtocolContainer xmi:id="_dg2LUH34Eee8vPff7YDTwQ" base_Package="_dgvdoH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTMessageSet xmi:id="_dhBKcH34Eee8vPff7YDTwQ" base_Interface="_dg8R8H34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTMessageSet xmi:id="_dhNXsH34Eee8vPff7YDTwQ" base_Interface="_dhH4IH34Eee8vPff7YDTwQ" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_dhXIsH34Eee8vPff7YDTwQ" base_Interface="_dhSQMH34Eee8vPff7YDTwQ" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_dhdPUH34Eee8vPff7YDTwQ" base_Collaboration="_dglsoH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTPort xmi:id="_ipb1wH34Eee8vPff7YDTwQ" base_Port="_ipVIEH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTConnector xmi:id="_olKNUH34Eee8vPff7YDTwQ" base_Connector="_olDfoH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTPort xmi:id="_uEhZAH34Eee8vPff7YDTwQ" base_Port="_uEbSYH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:ProtocolContainer xmi:id="_wEQcIH34Eee8vPff7YDTwQ" base_Package="_wEMKsH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTMessageSet xmi:id="_wEWiwH34Eee8vPff7YDTwQ" base_Interface="_wES4YH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTMessageSet xmi:id="_wEhh4H34Eee8vPff7YDTwQ" base_Interface="_wEbbQH34Eee8vPff7YDTwQ" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_wEpdsH34Eee8vPff7YDTwQ" base_Interface="_wElMQH34Eee8vPff7YDTwQ" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_wEvkUH34Eee8vPff7YDTwQ" base_Collaboration="_wEGEEH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTPort xmi:id="_xzpWIH34Eee8vPff7YDTwQ" base_Port="_xzj2kH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTConnector xmi:id="_8-rrMX34Eee8vPff7YDTwQ" base_Connector="_8-nZwH34Eee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_b38B4H36Eee8vPff7YDTwQ" base_Pseudostate="_b317QH36Eee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTState xmi:id="_b4D9sH36Eee8vPff7YDTwQ" base_State="_b4A6YH36Eee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTRegion xmi:id="_b4IPIH36Eee8vPff7YDTwQ" base_Region="_b3xCwH36Eee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_b58NAH36Eee8vPff7YDTwQ" base_StateMachine="_b26uMH36Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTPort xmi:id="_gTkfsH36Eee8vPff7YDTwQ" isWired="false" base_Port="_gTLeIH36Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTPort xmi:id="_hFBx0H36Eee8vPff7YDTwQ" isWired="false" base_Port="_hE7rMH36Eee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTState xmi:id="_63rQgH36Eee8vPff7YDTwQ" base_State="_63lJ4H36Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTPort xmi:id="_F8Qi0H38Eee8vPff7YDTwQ" isWired="false" base_Port="_F7fGwH38Eee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTState xmi:id="_n2CgsH38Eee8vPff7YDTwQ" base_State="_n1-PQH38Eee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_mQPyIH39Eee8vPff7YDTwQ" base_Pseudostate="_mQKSkH39Eee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTState xmi:id="_66KKgH3_Eee8vPff7YDTwQ" base_State="_66GgIH3_Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTPort xmi:id="_mpzaQH4AEee8vPff7YDTwQ" isWired="false" base_Port="_mo-64H4AEee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTState xmi:id="_wOI3QH4AEee8vPff7YDTwQ" base_State="_wOD-wH4AEee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_EMomAH4BEee8vPff7YDTwQ" base_Pseudostate="_EMjGcH4BEee8vPff7YDTwQ"/>
  <UMLRealTime:Capsule xmi:id="_sJaccH-TEeewWIzpFvOHRA" base_Class="_sCAM4H-TEeewWIzpFvOHRA"/>
  <UMLRealTime:CapsulePart xmi:id="_sKKDUH-TEeewWIzpFvOHRA" base_Property="_sJwasH-TEeewWIzpFvOHRA"/>
  <UMLRealTime:CapsulePart xmi:id="_sK2m4H-TEeewWIzpFvOHRA" base_Property="_sKYFwH-TEeewWIzpFvOHRA"/>
  <UMLRealTime:RTPort xmi:id="_sMSxUH-TEeewWIzpFvOHRA" isNotification="true" isWired="false" base_Port="_sL5IsH-TEeewWIzpFvOHRA"/>
  <RTCppProperties:AttributeProperties xmi:id="_sOz50H-TEeewWIzpFvOHRA" type="debugEvents::Event" base_Property="_sOP5IX-TEeewWIzpFvOHRA"/>
  <RTCppProperties:AttributeProperties xmi:id="_sP10kH-TEeewWIzpFvOHRA" type="SROManager" base_Property="_sPM7YH-TEeewWIzpFvOHRA"/>
  <RTCppProperties:CapsuleProperties xmi:id="_sRNGgH-TEeewWIzpFvOHRA" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_IYQmMDKEEeeIZIaasUdwVA"/>
  <RTCppProperties:ParameterProperties xmi:id="_sT9fkH-TEeewWIzpFvOHRA" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_sTeXYX-TEeewWIzpFvOHRA"/>
  <RTCppProperties:ParameterProperties xmi:id="_sU23cH-TEeewWIzpFvOHRA" type="debugEvents::EVENTTYPE" base_Parameter="_sUZkcH-TEeewWIzpFvOHRA"/>
  <RTCppProperties:ParameterProperties xmi:id="_sVwPUH-TEeewWIzpFvOHRA" type="const char *" base_Parameter="_sVRuMH-TEeewWIzpFvOHRA"/>
  <RTCppProperties:ParameterProperties xmi:id="_sWpnMH-TEeewWIzpFvOHRA" type="const char *" base_Parameter="_sWOJYX-TEeewWIzpFvOHRA"/>
  <RTCppProperties:ParameterProperties xmi:id="_sX7ZkH-TEeewWIzpFvOHRA" type="const char *" base_Parameter="_sXUVkH-TEeewWIzpFvOHRA"/>
  <RTCppProperties:ParameterProperties xmi:id="_sZYyIH-TEeewWIzpFvOHRA" type="const char *" base_Parameter="_sY0KYH-TEeewWIzpFvOHRA"/>
  <RTCppProperties:ParameterProperties xmi:id="_sawrIH-TEeewWIzpFvOHRA" type="const char *" base_Parameter="_saEHkH-TEeewWIzpFvOHRA"/>
  <UMLRealTime:RTPort xmi:id="_sciz0H-TEeewWIzpFvOHRA" isNotification="true" isWired="false" base_Port="_sbwJoH-TEeewWIzpFvOHRA"/>
  <RTCppProperties:AttributeProperties xmi:id="_se8nkH-TEeewWIzpFvOHRA" type="debugEvents::Event" base_Property="_sebqMH-TEeewWIzpFvOHRA"/>
  <RTCppProperties:AttributeProperties xmi:id="_sgHFMH-TEeewWIzpFvOHRA" type="SROManager" base_Property="_sfc94H-TEeewWIzpFvOHRA"/>
  <RTCppProperties:CapsuleProperties xmi:id="_shZeoH-TEeewWIzpFvOHRA" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_UTN08DKHEeeIZIaasUdwVA"/>
  <RTCppProperties:ParameterProperties xmi:id="_sjw2IH-TEeewWIzpFvOHRA" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_sja34H-TEeewWIzpFvOHRA"/>
  <RTCppProperties:ParameterProperties xmi:id="_sk760H-TEeewWIzpFvOHRA" type="debugEvents::EVENTTYPE" base_Parameter="_skGNUH-TEeewWIzpFvOHRA"/>
  <RTCppProperties:ParameterProperties xmi:id="_snbOIH-TEeewWIzpFvOHRA" type="const char *" base_Parameter="_slTuQH-TEeewWIzpFvOHRA"/>
  <RTCppProperties:ParameterProperties xmi:id="_soTX4H-TEeewWIzpFvOHRA" type="const char *" base_Parameter="_sn69YH-TEeewWIzpFvOHRA"/>
  <RTCppProperties:ParameterProperties xmi:id="_spGCEH-TEeewWIzpFvOHRA" type="const char *" base_Parameter="_song8H-TEeewWIzpFvOHRA"/>
  <RTCppProperties:ParameterProperties xmi:id="_sqE5gH-TEeewWIzpFvOHRA" type="const char *" base_Parameter="_spqp0H-TEeewWIzpFvOHRA"/>
  <RTCppProperties:ParameterProperties xmi:id="_srM64H-TEeewWIzpFvOHRA" type="const char *" base_Parameter="_sqphQH-TEeewWIzpFvOHRA"/>
  <UMLRealTime:RTPort xmi:id="_ssQq0H-TEeewWIzpFvOHRA" isNotification="true" isWired="false" base_Port="_sr43YH-TEeewWIzpFvOHRA"/>
  <RTCppProperties:AttributeProperties xmi:id="_sty74H-TEeewWIzpFvOHRA" type="debugEvents::Event" base_Property="_stc9oH-TEeewWIzpFvOHRA"/>
  <RTCppProperties:AttributeProperties xmi:id="_suyaYH-TEeewWIzpFvOHRA" type="SROManager" base_Property="_suNLkH-TEeewWIzpFvOHRA"/>
  <RTCppProperties:CapsuleProperties xmi:id="_svvcoH-TEeewWIzpFvOHRA" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_VPgAMH34Eee8vPff7YDTwQ"/>
  <RTCppProperties:ParameterProperties xmi:id="_sxyrEH-TEeewWIzpFvOHRA" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_sxRtsH-TEeewWIzpFvOHRA"/>
  <RTCppProperties:ParameterProperties xmi:id="_syenkH-TEeewWIzpFvOHRA" type="debugEvents::EVENTTYPE" base_Parameter="_syFmAH-TEeewWIzpFvOHRA"/>
  <RTCppProperties:ParameterProperties xmi:id="_szhJYH-TEeewWIzpFvOHRA" type="const char *" base_Parameter="_syvtUH-TEeewWIzpFvOHRA"/>
  <RTCppProperties:ParameterProperties xmi:id="_s02mIH-TEeewWIzpFvOHRA" type="const char *" base_Parameter="_s0FKEH-TEeewWIzpFvOHRA"/>
  <RTCppProperties:ParameterProperties xmi:id="_s2JmoH-TEeewWIzpFvOHRA" type="const char *" base_Parameter="_s1WVYH-TEeewWIzpFvOHRA"/>
  <RTCppProperties:ParameterProperties xmi:id="_s3YVsH-TEeewWIzpFvOHRA" type="const char *" base_Parameter="_s2zG4H-TEeewWIzpFvOHRA"/>
  <RTCppProperties:ParameterProperties xmi:id="_s5CikH-TEeewWIzpFvOHRA" type="const char *" base_Parameter="_s4K_4H-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_s6yPAH-TEeewWIzpFvOHRA" base_Pseudostate="_s6WxMH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_s7ahIH-TEeewWIzpFvOHRA" base_State="_s63HgH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_s76QYH-TEeewWIzpFvOHRA" base_Pseudostate="_s7ahIX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_s8Z_oH-TEeewWIzpFvOHRA" base_Pseudostate="_s763cH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_s9mScH-TEeewWIzpFvOHRA" base_Region="_s63HgX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_s-ecMH-TEeewWIzpFvOHRA" base_State="_s9mScX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_s_AnsH-TEeewWIzpFvOHRA" base_State="_s9ngkH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_s_wOkH-TEeewWIzpFvOHRA" base_State="_s9vcYH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tAue8H-TEeewWIzpFvOHRA" base_Pseudostate="_tAM6gH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_tBG5cH-TEeewWIzpFvOHRA" base_State="_tAvGAH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tBjlYH-TEeewWIzpFvOHRA" base_Pseudostate="_tBHggH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tCEiwH-TEeewWIzpFvOHRA" base_Pseudostate="_tBjlYX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_tDEBQH-TEeewWIzpFvOHRA" base_Region="_tAvGAX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_tDxL4H-TEeewWIzpFvOHRA" base_State="_tDEoUH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_tESJQH-TEeewWIzpFvOHRA" base_State="_tDKH4H-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_tEzGoH-TEeewWIzpFvOHRA" base_State="_tDLWAH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tFd1AH-TEeewWIzpFvOHRA" base_Pseudostate="_tFJE4H-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_tF5S0H-TEeewWIzpFvOHRA" base_State="_tFoNEH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tGRtUH-TEeewWIzpFvOHRA" base_Pseudostate="_tF5S0X-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tGkBMH-TEeewWIzpFvOHRA" base_Pseudostate="_tGRtUX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_tHOvkH-TEeewWIzpFvOHRA" base_Region="_tFoNEX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_tHo_QH-TEeewWIzpFvOHRA" base_State="_tHPWoH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_tH8hQH-TEeewWIzpFvOHRA" base_State="_tHP9sH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_tIUUsH-TEeewWIzpFvOHRA" base_State="_tHQkwH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_trFqkH-TEeewWIzpFvOHRA" base_Pseudostate="_tIukYH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_trbBwH-TEeewWIzpFvOHRA" base_State="_trG4sH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tr1RcH-TEeewWIzpFvOHRA" base_Pseudostate="_trbBwX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tsIMYH-TEeewWIzpFvOHRA" base_Pseudostate="_tr1RcX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_ttF1sH-TEeewWIzpFvOHRA" base_Region="_trG4sX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_tth6kH-TEeewWIzpFvOHRA" base_State="_ttGcwH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_tt6VEH-TEeewWIzpFvOHRA" base_State="_ttHD0H-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_tuHwcH-TEeewWIzpFvOHRA" base_State="_ttL8UH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_tub5gH-TEeewWIzpFvOHRA" base_State="_ttRb4H-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tvDkkH-TEeewWIzpFvOHRA" base_Pseudostate="_tu1iIH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_tvSOEH-TEeewWIzpFvOHRA" base_State="_tvDkkX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tvebUH-TEeewWIzpFvOHRA" base_Pseudostate="_tvSOEX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tvqokH-TEeewWIzpFvOHRA" base_Pseudostate="_tvebUX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_twQecH-TEeewWIzpFvOHRA" base_Region="_tvDkkn-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_twqHEH-TEeewWIzpFvOHRA" base_State="_twRFgH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_tw7M0H-TEeewWIzpFvOHRA" base_State="_twUI0H-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_txTnUH-TEeewWIzpFvOHRA" base_State="_twUv4H-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_tx_j0H-TEeewWIzpFvOHRA" base_State="_txnwYH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tykLkH-TEeewWIzpFvOHRA" base_Pseudostate="_tyUT8H-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_tyw_4H-TEeewWIzpFvOHRA" base_State="_tykyoH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ty_pYH-TEeewWIzpFvOHRA" base_Pseudostate="_tyw_4X-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tzSkUH-TEeewWIzpFvOHRA" base_Pseudostate="_ty_pYX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_tzweYH-TEeewWIzpFvOHRA" base_Region="_tykyoX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_t0IR0H-TEeewWIzpFvOHRA" base_State="_tzweYX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_t0VGIH-TEeewWIzpFvOHRA" base_State="_tzxFcH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_t0lk0H-TEeewWIzpFvOHRA" base_State="_tz1W4H-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_t0_0gH-TEeewWIzpFvOHRA" base_Pseudostate="_t0znQH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_t1NP4H-TEeewWIzpFvOHRA" base_State="_t0_0gX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_t1eVoH-TEeewWIzpFvOHRA" base_Pseudostate="_t1N28H-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_t1u0UH-TEeewWIzpFvOHRA" base_Pseudostate="_t1eVoX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_t2MHUH-TEeewWIzpFvOHRA" base_Region="_t0_0gn-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_t2wvEH-TEeewWIzpFvOHRA" base_State="_t2MHUX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_t3B00H-TEeewWIzpFvOHRA" base_State="_t2MuYH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_t3ThoH-TEeewWIzpFvOHRA" base_State="_t2NVcH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_t3gV8H-TEeewWIzpFvOHRA" base_State="_t2Q_0H-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_t3-3EH-TEeewWIzpFvOHRA" base_Pseudostate="_t3uYYH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_t4LEUH-TEeewWIzpFvOHRA" base_State="_t3-3EX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_t4Zt0H-TEeewWIzpFvOHRA" base_Pseudostate="_t4LrYH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_t4oXUH-TEeewWIzpFvOHRA" base_Pseudostate="_t4Zt0X-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_t5FqUH-TEeewWIzpFvOHRA" base_Region="_t3-3En-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_t5ZMUH-TEeewWIzpFvOHRA" base_State="_t5GRYH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_t5vKkH-TEeewWIzpFvOHRA" base_State="_t5GRYn-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_t5_pQH-TEeewWIzpFvOHRA" base_State="_t5G4cH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_t6nUUH-TEeewWIzpFvOHRA" base_Pseudostate="_t6OSwH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_t60vsH-TEeewWIzpFvOHRA" base_State="_t6n7YH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_t7EnUH-TEeewWIzpFvOHRA" base_Pseudostate="_t60vsX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_t7p2IH-TEeewWIzpFvOHRA" base_Pseudostate="_t7EnUX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_t9NVUH-TEeewWIzpFvOHRA" base_Region="_t6n7YX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_t-H7UH-TEeewWIzpFvOHRA" base_State="_t9N8YH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_t-oRoH-TEeewWIzpFvOHRA" base_State="_t9S04H-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_t_TnEH-TEeewWIzpFvOHRA" base_State="_t9UDAH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_t_-8gH-TEeewWIzpFvOHRA" base_State="_t9awsH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_uA_pIH-TEeewWIzpFvOHRA" base_Pseudostate="_uAeEsH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_uBeKQH-TEeewWIzpFvOHRA" base_State="_uA_pIX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_uB7dQH-TEeewWIzpFvOHRA" base_Pseudostate="_uBeKQX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_uCW7EH-TEeewWIzpFvOHRA" base_Pseudostate="_uB7dQX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_uDZc4H-TEeewWIzpFvOHRA" base_Region="_uA_pIn-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_uEMHEH-TEeewWIzpFvOHRA" base_State="_uDeVYH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_uEuSkH-TEeewWIzpFvOHRA" base_State="_uDe8cH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_uFThYH-TEeewWIzpFvOHRA" base_State="_uDlDEH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_uGOHYH-TEeewWIzpFvOHRA" base_Pseudostate="_uFw0YH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_uGt2oH-TEeewWIzpFvOHRA" base_State="_uGS_4H-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_uHLwsH-TEeewWIzpFvOHRA" base_Pseudostate="_uGt2oX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_uHlZUH-TEeewWIzpFvOHRA" base_Pseudostate="_uHLwsX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_uIfYQH-TEeewWIzpFvOHRA" base_Region="_uGS_4X-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_uJEnEH-TEeewWIzpFvOHRA" base_State="_uIf_UH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_uJuuYH-TEeewWIzpFvOHRA" base_State="_uIgmYH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_uKMBYH-TEeewWIzpFvOHRA" base_State="_uIk30H-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_uLIckH-TEeewWIzpFvOHRA" base_State="_uKwCEH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_uMZn4H-TEeewWIzpFvOHRA" base_Pseudostate="_uMAmUH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_uMxbUH-TEeewWIzpFvOHRA" base_State="_uMZn4X-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_uNHZkH-TEeewWIzpFvOHRA" base_Pseudostate="_uMyCYH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_uNcJsH-TEeewWIzpFvOHRA" base_Pseudostate="_uNIAoH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_uOSeQH-TEeewWIzpFvOHRA" base_Region="_uMZn4n-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_uO3tEH-TEeewWIzpFvOHRA" base_State="_uOTFUH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_uPOSYH-TEeewWIzpFvOHRA" base_State="_uOTsYH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_uPpJIH-TEeewWIzpFvOHRA" base_State="_uOX90H-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_uQJfcH-TEeewWIzpFvOHRA" base_State="_uOZL8H-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_uQ7ikH-TEeewWIzpFvOHRA" base_Pseudostate="_uQjIEH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_uRT9EH-TEeewWIzpFvOHRA" base_State="_uQ-l4H-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_uRoGIH-TEeewWIzpFvOHRA" base_Pseudostate="_uRUkIH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_uSEyEH-TEeewWIzpFvOHRA" base_Pseudostate="_uRp7UH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_uSrPAH-TEeewWIzpFvOHRA" base_Region="_uQ-l4X-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_uTJJEH-TEeewWIzpFvOHRA" base_State="_uSr2EH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_uTiKoH-TEeewWIzpFvOHRA" base_State="_uSwukH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_uT0egH-TEeewWIzpFvOHRA" base_State="_uS1nEH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_uUhCEH-TEeewWIzpFvOHRA" base_Pseudostate="_uUGyYH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_uU0kEH-TEeewWIzpFvOHRA" base_State="_uUhpIH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_uVEbsH-TEeewWIzpFvOHRA" base_Pseudostate="_uU0kEX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_uVX9sH-TEeewWIzpFvOHRA" base_Pseudostate="_uVEbsX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_uWFIUH-TEeewWIzpFvOHRA" base_Region="_uUhpIX-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_uWnT0H-TEeewWIzpFvOHRA" base_State="_uWFvYH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_uXCKkH-TEeewWIzpFvOHRA" base_State="_uWKA0H-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_uXVskH-TEeewWIzpFvOHRA" base_State="_uWKn4H-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_uXuHEH-TEeewWIzpFvOHRA" base_State="_uWL2AH-TEeewWIzpFvOHRA"/>
  <UMLRTStateMachines:RTState xmi:id="_uYTV4H-TEeewWIzpFvOHRA" base_State="_uYCQIH-TEeewWIzpFvOHRA"/>
</xmi:XMI>
