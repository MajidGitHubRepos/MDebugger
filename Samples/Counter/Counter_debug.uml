<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_0GZ5wE1iEeeFgIitP47fuA" name="Counter">
    <eAnnotations xmi:id="_0GZ5wU1iEeeFgIitP47fuA" source="http://www.eclipse.org/papyrus-rt/language/1.0.0">
      <details xmi:id="_0GZ5wk1iEeeFgIitP47fuA" key="language" value="umlrt-cpp"/>
    </eAnnotations>
    <eAnnotations xmi:id="_92uu4E1jEeeFgIitP47fuA" source="UMLRT_Default_top">
      <details xmi:id="_9201gE1jEeeFgIitP47fuA" key="top_name" value="Debug__Top"/>
    </eAnnotations>
    <packageImport xmi:id="_csCHYFvDEee5sJs-02TvDA">
      <importedPackage xmi:type="uml:Model" href="../CommGateWay/model.uml#_MZw7AAdxEeadtKuU2t6fMg"/>
    </packageImport>
    <packagedElement xmi:type="uml:Class" xmi:id="_7rXgAE1iEeeFgIitP47fuA" name="Counter" classifierBehavior="_RUEGwE1jEeeFgIitP47fuA" isActive="true">
      <ownedAttribute xmi:id="_9363IE1iEeeFgIitP47fuA" name="varInt" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_DxM-sE1jEeeFgIitP47fuA" name="varBool" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_HsjZ8E1jEeeFgIitP47fuA" name="varString" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_NmuSUE1jEeeFgIitP47fuA" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_PDcH8E1jEeeFgIitP47fuA" name="timer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ct5voFvDEee5sJs-02TvDA" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_cuLccFvDEee5sJs-02TvDA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_cuLccVvDEee5sJs-02TvDA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_cu4nEFvDEee5sJs-02TvDA" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_cu5OIFvDEee5sJs-02TvDA" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_cu5OIVvDEee5sJs-02TvDA" name="Debug__event">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_cvGCcFvDEee5sJs-02TvDA" name="Debug__SRO">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_RUEGwE1jEeeFgIitP47fuA" name="CounterStateMachine" isReentrant="false">
        <region xmi:id="_RU7CYE1jEeeFgIitP47fuA" name="Region">
          <transition xmi:id="_cooLQE1jEeeFgIitP47fuA" name="initial" source="_czmvAFvDEee5sJs-02TvDA" target="_RVtFgE1jEeeFgIitP47fuA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uIq6kE1jEeeFgIitP47fuA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>timer.informEvery(UMLRTTimespec(10,0));
varInt = 0;
varBool = false;
varString = &quot;This is a string&quot;;
log.show(&quot;Start counting.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::initial&quot;,(char *)&quot;Debug__Path__initial&quot;,(char *)&quot;COUNTING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_kyQk0E1jEeeFgIitP47fuA" name="count" source="_cxnyAFvDEee5sJs-02TvDA" target="_RVtFgE1jEeeFgIitP47fuA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_53rfYE1jEeeFgIitP47fuA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>varInt++;
log.show(&quot;Counting. New value: %d\n&quot;, varInt);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::count&quot;,(char *)&quot;Debug__Path__count&quot;,(char *)&quot;COUNTING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_cyHhQVvDEee5sJs-02TvDA" name="Debug__count" source="_RVtFgE1jEeeFgIitP47fuA" target="_cxnyAFvDEee5sJs-02TvDA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_cyIvYFvDEee5sJs-02TvDA" name="Debug__count__3">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__count&quot;,(char *)&quot;COUNTING&quot;,(char *)&quot;Debug__Path__count&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:id="_mlQMcE1jEeeFgIitP47fuA" port="_PDcH8E1jEeeFgIitP47fuA">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_cyLysFvDEee5sJs-02TvDA" name="Debug__count__S" guard="_cyNA0FvDEee5sJs-02TvDA" source="_cxnyAFvDEee5sJs-02TvDA" target="_cx43wFvDEee5sJs-02TvDA">
            <ownedRule xmi:id="_cyNA0FvDEee5sJs-02TvDA" name="Debug__Guardcount">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_cyMZwFvDEee5sJs-02TvDA" name="Debug__Guardcount">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;COUNTING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_cyOO8FvDEee5sJs-02TvDA" name="Debug__count__S__5">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__count__S&quot;,(char *)&quot;Debug__Path__count&quot;,(char *)&quot;en&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_cyQEIFvDEee5sJs-02TvDA" name="Debug__count__E" source="_cyAMgFvDEee5sJs-02TvDA" target="_RVtFgE1jEeeFgIitP47fuA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_cyQEIVvDEee5sJs-02TvDA" name="Debug__count__E__6">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__count__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;COUNTING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_cyUVkFvDEee5sJs-02TvDA" name="Debug__count__dbg__varChange" source="_cxwU4FvDEee5sJs-02TvDA" target="_cxwU4FvDEee5sJs-02TvDA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_cyVjsFvDEee5sJs-02TvDA" name="Debug__count__dbg__varChange__8">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_cyU8oFvDEee5sJs-02TvDA" name="Debug__MSG" port="_ct5voFvDEee5sJs-02TvDA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_cyWKwFvDEee5sJs-02TvDA" name="Debug__count__dbg__setBreakPoint" source="_cxwU4FvDEee5sJs-02TvDA" target="_cxwU4FvDEee5sJs-02TvDA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_cyWx0FvDEee5sJs-02TvDA" name="Debug__count__dbg__setBreakPoint__9">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_cyWKwVvDEee5sJs-02TvDA" name="Debug__MSG" port="_ct5voFvDEee5sJs-02TvDA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_cyXY4FvDEee5sJs-02TvDA" name="Debug__count__dbg__remBreakPoint" source="_cxwU4FvDEee5sJs-02TvDA" target="_cxwU4FvDEee5sJs-02TvDA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_cyX_8VvDEee5sJs-02TvDA" name="Debug__count__dbg__remBreakPoint__10">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_cyX_8FvDEee5sJs-02TvDA" name="Debug__MSG" port="_ct5voFvDEee5sJs-02TvDA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_cyZOEFvDEee5sJs-02TvDA" name="Debug__count__dbg__viewBreakPoints" source="_cxwU4FvDEee5sJs-02TvDA" target="_cxwU4FvDEee5sJs-02TvDA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_cyZ1IFvDEee5sJs-02TvDA" name="Debug__count__dbg__viewBreakPoints__11">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_cyZOEVvDEee5sJs-02TvDA" name="Debug__MSG" port="_ct5voFvDEee5sJs-02TvDA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_cybDQFvDEee5sJs-02TvDA" name="Debug__count__dbg__dbgSetExecMode" source="_cxwU4FvDEee5sJs-02TvDA" target="_cxwU4FvDEee5sJs-02TvDA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_cybqUVvDEee5sJs-02TvDA" name="Debug__count__dbg__dbgSetExecMode__12">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_cybqUFvDEee5sJs-02TvDA" name="Debug__MSG" port="_ct5voFvDEee5sJs-02TvDA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_cycRYFvDEee5sJs-02TvDA" name="Debug__count__dbg__dbgDeferMsg" source="_cxwU4FvDEee5sJs-02TvDA" target="_cxwU4FvDEee5sJs-02TvDA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_cycRYVvDEee5sJs-02TvDA" name="Debug__count__dbg__dbgDeferMsg__13">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
          </transition>
          <transition xmi:id="_c0FQIFvDEee5sJs-02TvDA" name="Debug__initial" source="_c1XCgFvDEee5sJs-02TvDA" target="_czmvAFvDEee5sJs-02TvDA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_c0FQIVvDEee5sJs-02TvDA" name="Debug__initial__29">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;COUNTING&quot;,&quot;count&quot;,&quot;COUNTING&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;initial&quot;,&quot;COUNTING&quot;,&quot;&quot;,&quot;&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_c1flYFvDEee5sJs-02TvDA" name="ConnectionEstablished" port="_ct5voFvDEee5sJs-02TvDA">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
            </trigger>
          </transition>
          <transition xmi:id="_c0HsYFvDEee5sJs-02TvDA" name="Debug__initial__S" guard="_c0ITcVvDEee5sJs-02TvDA" source="_czmvAFvDEee5sJs-02TvDA" target="_cz2moVvDEee5sJs-02TvDA">
            <ownedRule xmi:id="_c0ITcVvDEee5sJs-02TvDA" name="Debug__Guardinitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_c0ITcFvDEee5sJs-02TvDA" name="Debug__Guardinitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo1&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_c0JhkFvDEee5sJs-02TvDA" name="Debug__initial__S__31">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__initial__S&quot;,(char *)&quot;Debug__Path__initial&quot;,(char *)&quot;en&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_c0KvsFvDEee5sJs-02TvDA" name="Debug__initial__E" source="_cz97YVvDEee5sJs-02TvDA" target="_RVtFgE1jEeeFgIitP47fuA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_c0L90FvDEee5sJs-02TvDA" name="Debug__initial__E__32">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;COUNTING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_c0NzAFvDEee5sJs-02TvDA" name="Debug__initial__dbg__varChange" source="_czvR4FvDEee5sJs-02TvDA" target="_czvR4FvDEee5sJs-02TvDA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_c0OaEFvDEee5sJs-02TvDA" name="Debug__initial__dbg__varChange__34">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_c0NzAVvDEee5sJs-02TvDA" name="Debug__MSG" port="_ct5voFvDEee5sJs-02TvDA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_c0PoMFvDEee5sJs-02TvDA" name="Debug__initial__dbg__setBreakPoint" source="_czvR4FvDEee5sJs-02TvDA" target="_czvR4FvDEee5sJs-02TvDA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_c0PoMlvDEee5sJs-02TvDA" name="Debug__initial__dbg__setBreakPoint__35">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_c0PoMVvDEee5sJs-02TvDA" name="Debug__MSG" port="_ct5voFvDEee5sJs-02TvDA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_c0Q2UFvDEee5sJs-02TvDA" name="Debug__initial__dbg__remBreakPoint" source="_czvR4FvDEee5sJs-02TvDA" target="_czvR4FvDEee5sJs-02TvDA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_c0Q2UlvDEee5sJs-02TvDA" name="Debug__initial__dbg__remBreakPoint__36">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_c0Q2UVvDEee5sJs-02TvDA" name="Debug__MSG" port="_ct5voFvDEee5sJs-02TvDA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_c0SEcFvDEee5sJs-02TvDA" name="Debug__initial__dbg__viewBreakPoints" source="_czvR4FvDEee5sJs-02TvDA" target="_czvR4FvDEee5sJs-02TvDA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_c0SEclvDEee5sJs-02TvDA" name="Debug__initial__dbg__viewBreakPoints__37">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_c0SEcVvDEee5sJs-02TvDA" name="Debug__MSG" port="_ct5voFvDEee5sJs-02TvDA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_c0SrgFvDEee5sJs-02TvDA" name="Debug__initial__dbg__dbgSetExecMode" source="_czvR4FvDEee5sJs-02TvDA" target="_czvR4FvDEee5sJs-02TvDA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_c0TSkVvDEee5sJs-02TvDA" name="Debug__initial__dbg__dbgSetExecMode__38">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_c0TSkFvDEee5sJs-02TvDA" name="Debug__MSG" port="_ct5voFvDEee5sJs-02TvDA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_c0T5oFvDEee5sJs-02TvDA" name="Debug__initial__dbg__dbgDeferMsg" source="_czvR4FvDEee5sJs-02TvDA" target="_czvR4FvDEee5sJs-02TvDA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_c0T5oVvDEee5sJs-02TvDA" name="Debug__initial__dbg__dbgDeferMsg__39">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
          </transition>
          <transition xmi:id="_c1dwMVvDEee5sJs-02TvDA" name="Debug__InitDebug" source="_boT9wE1jEeeFgIitP47fuA" target="_c1XCgFvDEee5sJs-02TvDA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_c1eXQFvDEee5sJs-02TvDA" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:State" xmi:id="_RVtFgE1jEeeFgIitP47fuA" name="COUNTING">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_c1jPwFvDEee5sJs-02TvDA" name="COUNTING__51">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::COUNTING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_c1j20FvDEee5sJs-02TvDA" name="COUNTING__52">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::COUNTING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_boT9wE1jEeeFgIitP47fuA" name="Pseudo1"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_cxnyAFvDEee5sJs-02TvDA" name="Debug__Path__count" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_cxwU4FvDEee5sJs-02TvDA" name="Debug__C__count">
            <connectionPoint xmi:id="_cx43wFvDEee5sJs-02TvDA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_cyAMgFvDEee5sJs-02TvDA" name="ex" kind="exitPoint"/>
            <region xmi:id="_cxwU4VvDEee5sJs-02TvDA" name="Region1">
              <transition xmi:id="_cyswEFvDEee5sJs-02TvDA" name="Debug__init__trans__count" source="_cx43wFvDEee5sJs-02TvDA" target="_cympcFvDEee5sJs-02TvDA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_czYFgFvDEee5sJs-02TvDA" name="Debug__init__trans__count__19">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__C__count::Region1::Debug__init__trans__count&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__COUNTING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
              </transition>
              <transition xmi:id="_cytXIFvDEee5sJs-02TvDA" name="Debug__Ex__COUNTING" source="_cympcFvDEee5sJs-02TvDA" target="_cyn3kFvDEee5sJs-02TvDA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_czahwFvDEee5sJs-02TvDA" name="Debug__Ex__COUNTING__21">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__C__count::Region1::Debug__Ex__COUNTING&quot;,(char *)&quot;Debug__B__Ex__COUNTING&quot;,(char *)&quot;Debug__B__Ac__count&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_cytXIVvDEee5sJs-02TvDA" name="Debug__Exec" port="_ct5voFvDEee5sJs-02TvDA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_cytXIlvDEee5sJs-02TvDA" name="Debug__AC__count" source="_cyn3kFvDEee5sJs-02TvDA" target="_cypswFvDEee5sJs-02TvDA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_cyulQFvDEee5sJs-02TvDA" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>varInt++;
log.show(&quot;Counting. New value: %d\n&quot;, varInt);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__C__count::Region1::Debug__AC__count&quot;,(char *)&quot;Debug__B__Ac__count&quot;,(char *)&quot;Debug__A__Ac__count&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_cyt-MFvDEee5sJs-02TvDA" name="Debug__Exec" port="_ct5voFvDEee5sJs-02TvDA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_cyvMUFvDEee5sJs-02TvDA" name="Debug__En__COUNTING" source="_cypswFvDEee5sJs-02TvDA" target="_cyrh8FvDEee5sJs-02TvDA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_czezMFvDEee5sJs-02TvDA" name="Debug__En__COUNTING__24">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__C__count::Region1::Debug__En__COUNTING&quot;,(char *)&quot;Debug__A__Ac__count&quot;,(char *)&quot;Debug__A__En__COUNTING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_cyvMUVvDEee5sJs-02TvDA" name="Debug__Exec" port="_ct5voFvDEee5sJs-02TvDA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_cyvzYFvDEee5sJs-02TvDA" name="Debug__end__trans__count" source="_cyrh8FvDEee5sJs-02TvDA" target="_cyAMgFvDEee5sJs-02TvDA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_czgoYFvDEee5sJs-02TvDA" name="Debug__end__trans__count__26">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__C__count::Region1::Debug__end__trans__count&quot;,(char *)&quot;Debug__A__En__COUNTING&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_cyvzYVvDEee5sJs-02TvDA" name="Debug__Exec" port="_ct5voFvDEee5sJs-02TvDA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_cympcFvDEee5sJs-02TvDA" name="Debug__B__Ex__COUNTING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_cympcVvDEee5sJs-02TvDA" name="Debug__B__Ex__COUNTING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;COUNTING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__C__count::Region1::Debug__B__Ex__COUNTING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_cy3vMFvDEee5sJs-02TvDA" name="Debug__B__Ex__COUNTING__14">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__C__count::Region1::Debug__B__Ex__COUNTING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_cyn3kFvDEee5sJs-02TvDA" name="Debug__B__Ac__count">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_cyn3kVvDEee5sJs-02TvDA" name="Debug__B__Ac__count">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;COUNTING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;count&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__C__count::Region1::Debug__B__Ac__count&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_czBgMFvDEee5sJs-02TvDA" name="Debug__B__Ac__count__15">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__C__count::Region1::Debug__B__Ac__count&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_cypswFvDEee5sJs-02TvDA" name="Debug__A__Ac__count">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_cyqT0FvDEee5sJs-02TvDA" name="Debug__A__Ac__count">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;count&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;COUNTING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__C__count::Region1::Debug__A__Ac__count&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_czKqIFvDEee5sJs-02TvDA" name="Debug__A__Ac__count__16">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__C__count::Region1::Debug__A__Ac__count&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_cyrh8FvDEee5sJs-02TvDA" name="Debug__A__En__COUNTING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_cyrh8VvDEee5sJs-02TvDA" name="Debug__A__En__COUNTING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;COUNTING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__C__count::Region1::Debug__A__En__COUNTING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_czNtcFvDEee5sJs-02TvDA" name="Debug__A__En__COUNTING__17">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__C__count::Region1::Debug__A__En__COUNTING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_czmvAFvDEee5sJs-02TvDA" name="Debug__Path__initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_czvR4FvDEee5sJs-02TvDA" name="Debug__C__initial">
            <connectionPoint xmi:id="_cz2moVvDEee5sJs-02TvDA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_cz97YVvDEee5sJs-02TvDA" name="ex" kind="exitPoint"/>
            <region xmi:id="_czvR4VvDEee5sJs-02TvDA" name="Region1">
              <transition xmi:id="_c0pQ0FvDEee5sJs-02TvDA" name="Debug__init__trans__initial" source="_cz2moVvDEee5sJs-02TvDA" target="_c0gt8FvDEee5sJs-02TvDA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_c1JAEFvDEee5sJs-02TvDA" name="Debug__init__trans__initial__44">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__C__initial::Region1::Debug__init__trans__initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
              </transition>
              <transition xmi:id="_c0p34FvDEee5sJs-02TvDA" name="Debug__Ac__initial" source="_c0gt8FvDEee5sJs-02TvDA" target="_c0h8EFvDEee5sJs-02TvDA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_c0qe8FvDEee5sJs-02TvDA" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>timer.informEvery(UMLRTTimespec(10,0));
varInt = 0;
varBool = false;
varString = &quot;This is a string&quot;;
log.show(&quot;Start counting.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__C__initial::Region1::Debug__Ac__initial&quot;,(char *)&quot;Debug__B__Ac__initial&quot;,(char *)&quot;Debug__A__Ac__initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_c0p34VvDEee5sJs-02TvDA" name="Debug__Exec" port="_ct5voFvDEee5sJs-02TvDA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_c0rGAFvDEee5sJs-02TvDA" name="Debug__En__COUNTING" source="_c0h8EFvDEee5sJs-02TvDA" target="_c0oCsFvDEee5sJs-02TvDA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_c1MqcFvDEee5sJs-02TvDA" name="Debug__En__COUNTING__47">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__C__initial::Region1::Debug__En__COUNTING&quot;,(char *)&quot;Debug__A__Ac__initial&quot;,(char *)&quot;Debug__A__En__initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_c0rGAVvDEee5sJs-02TvDA" name="Debug__Exec" port="_ct5voFvDEee5sJs-02TvDA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_c0rtEFvDEee5sJs-02TvDA" name="Debug__end__trans__initial" source="_c0oCsFvDEee5sJs-02TvDA" target="_cz97YVvDEee5sJs-02TvDA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_c1PGsFvDEee5sJs-02TvDA" name="Debug__end__trans__initial__49">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__C__initial::Region1::Debug__end__trans__initial&quot;,(char *)&quot;Debug__A__En__initial&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_c0sUIFvDEee5sJs-02TvDA" name="Debug__Exec" port="_ct5voFvDEee5sJs-02TvDA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_c0gt8FvDEee5sJs-02TvDA" name="Debug__B__Ac__initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_c0gt8VvDEee5sJs-02TvDA" name="Debug__B__Ac__initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__C__initial::Region1::Debug__B__Ac__initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_c00P8FvDEee5sJs-02TvDA" name="Debug__B__Ac__initial__40">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__C__initial::Region1::Debug__B__Ac__initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_c0h8EFvDEee5sJs-02TvDA" name="Debug__A__Ac__initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_c0h8EVvDEee5sJs-02TvDA" name="Debug__A__Ac__initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;COUNTING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__C__initial::Region1::Debug__A__Ac__initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_c09Z4FvDEee5sJs-02TvDA" name="Debug__A__Ac__initial__41">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__C__initial::Region1::Debug__A__Ac__initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_c0oCsFvDEee5sJs-02TvDA" name="Debug__A__En__initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_c0oCsVvDEee5sJs-02TvDA" name="Debug__A__En__initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;COUNTING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__C__initial::Region1::Debug__A__En__initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_c1Gj0FvDEee5sJs-02TvDA" name="Debug__A__En__initial__42">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Counter::Counter::CounterStateMachine::Region::Debug__C__initial::Region1::Debug__A__En__initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_c1XCgFvDEee5sJs-02TvDA" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_ct03IFvDEee5sJs-02TvDA" name="Debug__recallAllMsg" specification="_ct0QEFvDEee5sJs-02TvDA">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_cusZ0VvDEee5sJs-02TvDA" name="Debug__variablesViewMethod" specification="_cusZ0FvDEee5sJs-02TvDA">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;varInt,&quot;);
tempS.append(&quot;Integer,&quot;);
if(varInt!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,varInt);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
tempS.append(&quot;varBool,&quot;);
tempS.append(&quot;Boolean,&quot;);
if(varBool==true){
    tempS.append(&quot;true&quot;);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;false&quot;);
    tempS.append(&quot;\n&quot;);
};
tempS.append(&quot;varString,&quot;);
tempS.append(&quot;String,&quot;);
if(varString==NULL){
    tempS.append(&quot;\&quot;\&quot;&quot;);
    tempS.append(&quot;\n&quot;);
}else{
    tempS.append(&quot;\&quot;&quot;);
    tempS.append(varString);
    tempS.append(&quot;\&quot;&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_cu4AAFvDEee5sJs-02TvDA" name="Debug__variablesChange" specification="_cuxSUFvDEee5sJs-02TvDA">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;varInt&quot;==tempVarName){
    varInt=atoi(varValue);
    return true;
}else if (&quot;varString&quot;==tempVarName){
    if (varString==NULL)
        varString=(char*) malloc(strlen(varValue)+1);
    else if(strlen(varString)&lt;strlen(varValue))
        varString=(char *) realloc(varString,strlen(varValue)+1);
    strcpy(varString,varValue);
    return true;
}else if (&quot;varBool&quot;==tempVarName){
    if(strcmp(varValue,&quot;true&quot;)==0)
        varBool=true;
    else 
        varBool=false;
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_cxcL0FvDEee5sJs-02TvDA" name="Debug__sendEvent" specification="_cv2QYFvDEee5sJs-02TvDA">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
this->Debug__event.setPayloadField(&quot;SenderCapsule&quot;,reserve3);
this->Debug__event.setPayloadField(&quot;Port&quot;,reserve4);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_ct0QEFvDEee5sJs-02TvDA" name="Debug__recallAllMsg" visibility="private" method="_ct03IFvDEee5sJs-02TvDA"/>
      <ownedOperation xmi:id="_cusZ0FvDEee5sJs-02TvDA" name="Debug__variablesView" visibility="private" method="_cusZ0VvDEee5sJs-02TvDA"/>
      <ownedOperation xmi:id="_cuxSUFvDEee5sJs-02TvDA" name="Debug__variablesChange" visibility="private" method="_cu4AAFvDEee5sJs-02TvDA">
        <ownedParameter xmi:id="_cu0VoFvDEee5sJs-02TvDA" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_cu08sFvDEee5sJs-02TvDA" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_cu3Y8FvDEee5sJs-02TvDA" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_cv2QYFvDEee5sJs-02TvDA" name="Debug__sendEvent" visibility="private" method="_cxcL0FvDEee5sJs-02TvDA">
        <ownedParameter xmi:id="_cv2QYVvDEee5sJs-02TvDA" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_cwGIAFvDEee5sJs-02TvDA" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_cwUKcFvDEee5sJs-02TvDA" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_cwiM4FvDEee5sJs-02TvDA" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_cwiz8FvDEee5sJs-02TvDA" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_cwwPUFvDEee5sJs-02TvDA" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_cw9qsFvDEee5sJs-02TvDA" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_cw-RwFvDEee5sJs-02TvDA" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_cw-40FvDEee5sJs-02TvDA" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_cw_f4FvDEee5sJs-02TvDA" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_cxM7QFvDEee5sJs-02TvDA" name="reserve4">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_cnxScFvDEee5sJs-02TvDA" name="Debug__Top">
      <ownedAttribute xmi:id="_cshPkFvDEee5sJs-02TvDA" name="Debug__Gateway">
        <type xmi:type="uml:Class" href="../CommGateWay/model.uml#_XIyCcAdxEeadtKuU2t6fMg"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_cs8tYFvDEee5sJs-02TvDA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_cs8tYVvDEee5sJs-02TvDA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_ctA-0FvDEee5sJs-02TvDA" name="Debug__Counter" type="_7rXgAE1iEeeFgIitP47fuA">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_ctRdgFvDEee5sJs-02TvDA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_ctRdgVvDEee5sJs-02TvDA" value="1"/>
      </ownedAttribute>
    </packagedElement>
    <profileApplication xmi:id="_0GZ5w01iEeeFgIitP47fuA">
      <eAnnotations xmi:id="_0GZ5xE1iEeeFgIitP47fuA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:id="_0GZ5xU1iEeeFgIitP47fuA">
      <eAnnotations xmi:id="_0GZ5xk1iEeeFgIitP47fuA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
    <profileApplication xmi:id="_0GZ5x01iEeeFgIitP47fuA">
      <eAnnotations xmi:id="_0GZ5yE1iEeeFgIitP47fuA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UMLRT_CPP/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:Capsule xmi:id="_7z6YAE1iEeeFgIitP47fuA" base_Class="_7rXgAE1iEeeFgIitP47fuA"/>
  <UMLRealTime:RTPort xmi:id="_NoP8UE1jEeeFgIitP47fuA" isWired="false" base_Port="_NmuSUE1jEeeFgIitP47fuA"/>
  <UMLRealTime:RTPort xmi:id="_PDsmoE1jEeeFgIitP47fuA" isWired="false" base_Port="_PDcH8E1jEeeFgIitP47fuA"/>
  <UMLRTStateMachines:RTState xmi:id="_RV22gE1jEeeFgIitP47fuA" base_State="_RVtFgE1jEeeFgIitP47fuA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_RWAAcE1jEeeFgIitP47fuA" base_Region="_RU7CYE1jEeeFgIitP47fuA"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_RWV-sE1jEeeFgIitP47fuA" base_StateMachine="_RUEGwE1jEeeFgIitP47fuA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_boot4E1jEeeFgIitP47fuA" base_Pseudostate="_boT9wE1jEeeFgIitP47fuA"/>
  <UMLRealTime:Capsule xmi:id="_crzd4FvDEee5sJs-02TvDA" base_Class="_cnxScFvDEee5sJs-02TvDA"/>
  <UMLRealTime:CapsulePart xmi:id="_cs7fQFvDEee5sJs-02TvDA" base_Property="_cshPkFvDEee5sJs-02TvDA"/>
  <UMLRealTime:CapsulePart xmi:id="_ctQ2cFvDEee5sJs-02TvDA" base_Property="_ctA-0FvDEee5sJs-02TvDA"/>
  <UMLRealTime:RTPort xmi:id="_cuK1YFvDEee5sJs-02TvDA" isNotification="true" isWired="false" base_Port="_ct5voFvDEee5sJs-02TvDA"/>
  <RTCppProperties:AttributeProperties xmi:id="_cu_70FvDEee5sJs-02TvDA" type="debugEvents::Event" base_Property="_cu5OIVvDEee5sJs-02TvDA"/>
  <RTCppProperties:AttributeProperties xmi:id="_cvNXMFvDEee5sJs-02TvDA" type="SROManager" base_Property="_cvGCcFvDEee5sJs-02TvDA"/>
  <RTCppProperties:CapsuleProperties xmi:id="_cvaykFvDEee5sJs-02TvDA" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_7rXgAE1iEeeFgIitP47fuA"/>
  <RTCppProperties:ParameterProperties xmi:id="_cv_aUFvDEee5sJs-02TvDA" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_cv2QYVvDEee5sJs-02TvDA"/>
  <RTCppProperties:ParameterProperties xmi:id="_cwOD0FvDEee5sJs-02TvDA" type="debugEvents::EVENTTYPE" base_Parameter="_cwGIAFvDEee5sJs-02TvDA"/>
  <RTCppProperties:ParameterProperties xmi:id="_cwbfMFvDEee5sJs-02TvDA" type="const char *" base_Parameter="_cwUKcFvDEee5sJs-02TvDA"/>
  <RTCppProperties:ParameterProperties xmi:id="_cwqIsFvDEee5sJs-02TvDA" type="const char *" base_Parameter="_cwiz8FvDEee5sJs-02TvDA"/>
  <RTCppProperties:ParameterProperties xmi:id="_cw3kEFvDEee5sJs-02TvDA" type="const char *" base_Parameter="_cwwPUFvDEee5sJs-02TvDA"/>
  <RTCppProperties:ParameterProperties xmi:id="_cxG0oFvDEee5sJs-02TvDA" type="const char *" base_Parameter="_cw_f4FvDEee5sJs-02TvDA"/>
  <RTCppProperties:ParameterProperties xmi:id="_cxWFMFvDEee5sJs-02TvDA" type="const char *" base_Parameter="_cxM7QFvDEee5sJs-02TvDA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_cxvt0FvDEee5sJs-02TvDA" base_Pseudostate="_cxnyAFvDEee5sJs-02TvDA"/>
  <UMLRTStateMachines:RTState xmi:id="_cx4QsFvDEee5sJs-02TvDA" base_State="_cxwU4FvDEee5sJs-02TvDA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_cx_lcFvDEee5sJs-02TvDA" base_Pseudostate="_cx43wFvDEee5sJs-02TvDA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_cyHhQFvDEee5sJs-02TvDA" base_Pseudostate="_cyAMgFvDEee5sJs-02TvDA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_cymCYFvDEee5sJs-02TvDA" base_Region="_cxwU4VvDEee5sJs-02TvDA"/>
  <UMLRTStateMachines:RTState xmi:id="_cy3IIFvDEee5sJs-02TvDA" base_State="_cympcFvDEee5sJs-02TvDA"/>
  <UMLRTStateMachines:RTState xmi:id="_czA5IFvDEee5sJs-02TvDA" base_State="_cyn3kFvDEee5sJs-02TvDA"/>
  <UMLRTStateMachines:RTState xmi:id="_czKDEFvDEee5sJs-02TvDA" base_State="_cypswFvDEee5sJs-02TvDA"/>
  <UMLRTStateMachines:RTState xmi:id="_czW3YFvDEee5sJs-02TvDA" base_State="_cyrh8FvDEee5sJs-02TvDA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_czuq0FvDEee5sJs-02TvDA" base_Pseudostate="_czmvAFvDEee5sJs-02TvDA"/>
  <UMLRTStateMachines:RTState xmi:id="_cz2moFvDEee5sJs-02TvDA" base_State="_czvR4FvDEee5sJs-02TvDA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_cz97YFvDEee5sJs-02TvDA" base_Pseudostate="_cz2moVvDEee5sJs-02TvDA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_c0EpEFvDEee5sJs-02TvDA" base_Pseudostate="_cz97YVvDEee5sJs-02TvDA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_c0gG4FvDEee5sJs-02TvDA" base_Region="_czvR4VvDEee5sJs-02TvDA"/>
  <UMLRTStateMachines:RTState xmi:id="_c0zo4FvDEee5sJs-02TvDA" base_State="_c0gt8FvDEee5sJs-02TvDA"/>
  <UMLRTStateMachines:RTState xmi:id="_c08y0FvDEee5sJs-02TvDA" base_State="_c0h8EFvDEee5sJs-02TvDA"/>
  <UMLRTStateMachines:RTState xmi:id="_c1F8wFvDEee5sJs-02TvDA" base_State="_c0oCsFvDEee5sJs-02TvDA"/>
  <UMLRTStateMachines:RTState xmi:id="_c1dwMFvDEee5sJs-02TvDA" base_State="_c1XCgFvDEee5sJs-02TvDA"/>
</xmi:XMI>
