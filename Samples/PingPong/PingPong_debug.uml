<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_MImLUExOEeeAapBXl-GW2w" name="PingPong">
    <eAnnotations xmi:id="_SI_ngExOEeeAapBXl-GW2w" source="http://www.eclipse.org/papyrus-rt/language/1.0.0">
      <details xmi:id="_SJAOkExOEeeAapBXl-GW2w" key="language" value="umlrt-cpp"/>
    </eAnnotations>
    <eAnnotations xmi:id="_o9ItsExOEeeAapBXl-GW2w" source="UMLRT_Default_top">
      <details xmi:id="_o9ItsUxOEeeAapBXl-GW2w" key="top_name" value="Debug__Top"/>
    </eAnnotations>
    <packageImport xmi:id="_Ll-TwFzTEeefLpHt66ofOA">
      <importedPackage xmi:type="uml:Model" href="../CommGateWay/model.uml#_MZw7AAdxEeadtKuU2t6fMg"/>
    </packageImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_YKTpsExOEeeAapBXl-GW2w" name="PingPong">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_YKDyEExOEeeAapBXl-GW2w" name="PingPong">
        <interfaceRealization xmi:id="_YLTIMExOEeeAapBXl-GW2w" client="_YKDyEExOEeeAapBXl-GW2w" supplier="_YLFFwExOEeeAapBXl-GW2w" contract="_YLFFwExOEeeAapBXl-GW2w"/>
        <interfaceRealization xmi:id="_YLvNEExOEeeAapBXl-GW2w" client="_YKDyEExOEeeAapBXl-GW2w" supplier="_YLnRQExOEeeAapBXl-GW2w" contract="_YLnRQExOEeeAapBXl-GW2w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_YLFFwExOEeeAapBXl-GW2w" name="PingPong">
        <ownedOperation xmi:id="_bVz8YExOEeeAapBXl-GW2w" name="pong"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_YLbrEExOEeeAapBXl-GW2w" name="PingPong~">
        <ownedOperation xmi:id="_akmh4ExOEeeAapBXl-GW2w" name="ping"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_YLmDIExOEeeAapBXl-GW2w" client="_YKDyEExOEeeAapBXl-GW2w" supplier="_YLbrEExOEeeAapBXl-GW2w"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_YLmqMExOEeeAapBXl-GW2w" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_YLnRQExOEeeAapBXl-GW2w" name="PingPongIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_YLwbMExOEeeAapBXl-GW2w" client="_YKDyEExOEeeAapBXl-GW2w" supplier="_YLnRQExOEeeAapBXl-GW2w"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_akzWMExOEeeAapBXl-GW2w" operation="_akmh4ExOEeeAapBXl-GW2w"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_bV-UcExOEeeAapBXl-GW2w" operation="_bVz8YExOEeeAapBXl-GW2w"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_dBdl4ExOEeeAapBXl-GW2w" name="Pinger" classifierBehavior="_7eBO8ExOEeeAapBXl-GW2w" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_e-deEExOEeeAapBXl-GW2w" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_gCK90ExOEeeAapBXl-GW2w" name="pinger" type="_YKDyEExOEeeAapBXl-GW2w" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:id="_ww8oQExOEeeAapBXl-GW2w" name="i" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_Lp1gEFzTEeefLpHt66ofOA" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Lp8NwFzTEeefLpHt66ofOA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_Lp8NwVzTEeefLpHt66ofOA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_LqPIsFzTEeefLpHt66ofOA" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_LqPIsVzTEeefLpHt66ofOA" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_LqPIslzTEeefLpHt66ofOA" name="Debug__event">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_Lqb9AFzTEeefLpHt66ofOA" name="Debug__SRO">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_7eBO8ExOEeeAapBXl-GW2w" name="PingerStateMachine" isReentrant="false">
        <region xmi:id="_7eS7wExOEeeAapBXl-GW2w" name="Region">
          <transition xmi:id="_7emdwExOEeeAapBXl-GW2w" name="Initial" source="_LuYo4FzTEeefLpHt66ofOA" target="_7ehlQExOEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_-mSyAExPEeeAapBXl-GW2w" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.show(&quot;leaving initial pseudo state of pinger\n&quot;);
pinger.ping().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_B4BBcExQEeeAapBXl-GW2w" name="onPong" source="_Ls4NAFzTEeefLpHt66ofOA" target="_7ehlQExOEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ImedgExQEeeAapBXl-GW2w" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.show(&quot;pong message received.\n&quot;);
pinger.ping().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::onPong&quot;,(char *)&quot;Debug__Path__onPong&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_LtU48VzTEeefLpHt66ofOA" name="Debug__onPong" source="_7ehlQExOEeeAapBXl-GW2w" target="_Ls4NAFzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LtVgAFzTEeefLpHt66ofOA" name="Debug__onPong__3">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__onPong&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;Debug__Path__onPong&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:id="_DrVZMExQEeeAapBXl-GW2w" event="_bV-UcExOEeeAapBXl-GW2w" port="_gCK90ExOEeeAapBXl-GW2w"/>
          </transition>
          <transition xmi:id="_LtWuIFzTEeefLpHt66ofOA" name="Debug__onPong__S" guard="_LtXVMVzTEeefLpHt66ofOA" source="_Ls4NAFzTEeefLpHt66ofOA" target="_LtGPcVzTEeefLpHt66ofOA">
            <ownedRule xmi:id="_LtXVMVzTEeefLpHt66ofOA" name="Debug__GuardonPong">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_LtXVMFzTEeefLpHt66ofOA" name="Debug__GuardonPong">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LtXVMlzTEeefLpHt66ofOA" name="Debug__onPong__S__5">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__onPong__S&quot;,(char *)&quot;Debug__Path__onPong&quot;,(char *)&quot;en&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_LtYjUFzTEeefLpHt66ofOA" name="Debug__onPong__E" source="_LtOLQFzTEeefLpHt66ofOA" target="_7ehlQExOEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LtYjUVzTEeefLpHt66ofOA" name="Debug__onPong__E__6">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__onPong__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_LtZxcFzTEeefLpHt66ofOA" name="Debug__onPong__dbg__varChange" source="_Ls-6sVzTEeefLpHt66ofOA" target="_Ls-6sVzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LtaYgFzTEeefLpHt66ofOA" name="Debug__onPong__dbg__varChange__8">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_LtZxcVzTEeefLpHt66ofOA" name="Debug__MSG" port="_Lp1gEFzTEeefLpHt66ofOA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_Lta_kFzTEeefLpHt66ofOA" name="Debug__onPong__dbg__setBreakPoint" source="_Ls-6sVzTEeefLpHt66ofOA" target="_Ls-6sVzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LtcNsFzTEeefLpHt66ofOA" name="Debug__onPong__dbg__setBreakPoint__9">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Lta_kVzTEeefLpHt66ofOA" name="Debug__MSG" port="_Lp1gEFzTEeefLpHt66ofOA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_LtcNsVzTEeefLpHt66ofOA" name="Debug__onPong__dbg__remBreakPoint" source="_Ls-6sVzTEeefLpHt66ofOA" target="_Ls-6sVzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Ltc0wVzTEeefLpHt66ofOA" name="Debug__onPong__dbg__remBreakPoint__10">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Ltc0wFzTEeefLpHt66ofOA" name="Debug__MSG" port="_Lp1gEFzTEeefLpHt66ofOA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_Ltdb0FzTEeefLpHt66ofOA" name="Debug__onPong__dbg__viewBreakPoints" source="_Ls-6sVzTEeefLpHt66ofOA" target="_Ls-6sVzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Ltdb0lzTEeefLpHt66ofOA" name="Debug__onPong__dbg__viewBreakPoints__11">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Ltdb0VzTEeefLpHt66ofOA" name="Debug__MSG" port="_Lp1gEFzTEeefLpHt66ofOA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_LteC4FzTEeefLpHt66ofOA" name="Debug__onPong__dbg__dbgSetExecMode" source="_Ls-6sVzTEeefLpHt66ofOA" target="_Ls-6sVzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LteC4lzTEeefLpHt66ofOA" name="Debug__onPong__dbg__dbgSetExecMode__12">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_LteC4VzTEeefLpHt66ofOA" name="Debug__MSG" port="_Lp1gEFzTEeefLpHt66ofOA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_Ltep8FzTEeefLpHt66ofOA" name="Debug__onPong__dbg__dbgDeferMsg" source="_Ls-6sVzTEeefLpHt66ofOA" target="_Ls-6sVzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LtfRAVzTEeefLpHt66ofOA" name="Debug__onPong__dbg__dbgDeferMsg__13">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_LtfRAFzTEeefLpHt66ofOA" name="Debug__MSG" port="_gCK90ExOEeeAapBXl-GW2w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_Lu0twVzTEeefLpHt66ofOA" name="Debug__Initial" source="_LvtekFzTEeefLpHt66ofOA" target="_LuYo4FzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Lu1U0FzTEeefLpHt66ofOA" name="Debug__Initial__27">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPong&quot;,&quot;PLAYING&quot;,&quot;pong&quot;,&quot;PingPong&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_Lv0zUVzTEeefLpHt66ofOA" name="ConnectionEstablished" port="_Lp1gEFzTEeefLpHt66ofOA">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
            </trigger>
          </transition>
          <transition xmi:id="_Lu174FzTEeefLpHt66ofOA" name="Debug__Initial__S" guard="_Lu2i8VzTEeefLpHt66ofOA" source="_LuYo4FzTEeefLpHt66ofOA" target="_LunSYVzTEeefLpHt66ofOA">
            <ownedRule xmi:id="_Lu2i8VzTEeefLpHt66ofOA" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_Lu2i8FzTEeefLpHt66ofOA" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo1&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Lu3KAFzTEeefLpHt66ofOA" name="Debug__Initial__S__29">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_Lu3xEFzTEeefLpHt66ofOA" name="Debug__Initial__E" source="_LuuAEVzTEeefLpHt66ofOA" target="_7ehlQExOEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Lu3xEVzTEeefLpHt66ofOA" name="Debug__Initial__E__30">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_Lu4_MFzTEeefLpHt66ofOA" name="Debug__Initial__dbg__varChange" source="_LugksFzTEeefLpHt66ofOA" target="_LugksFzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Lu5mQFzTEeefLpHt66ofOA" name="Debug__Initial__dbg__varChange__32">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_Lu4_MVzTEeefLpHt66ofOA" name="Debug__MSG" port="_Lp1gEFzTEeefLpHt66ofOA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_Lu6NUFzTEeefLpHt66ofOA" name="Debug__Initial__dbg__setBreakPoint" source="_LugksFzTEeefLpHt66ofOA" target="_LugksFzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Lu6NUlzTEeefLpHt66ofOA" name="Debug__Initial__dbg__setBreakPoint__33">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Lu6NUVzTEeefLpHt66ofOA" name="Debug__MSG" port="_Lp1gEFzTEeefLpHt66ofOA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_Lu60YFzTEeefLpHt66ofOA" name="Debug__Initial__dbg__remBreakPoint" source="_LugksFzTEeefLpHt66ofOA" target="_LugksFzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Lu60YlzTEeefLpHt66ofOA" name="Debug__Initial__dbg__remBreakPoint__34">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Lu60YVzTEeefLpHt66ofOA" name="Debug__MSG" port="_Lp1gEFzTEeefLpHt66ofOA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_Lu7bcFzTEeefLpHt66ofOA" name="Debug__Initial__dbg__viewBreakPoints" source="_LugksFzTEeefLpHt66ofOA" target="_LugksFzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Lu7bclzTEeefLpHt66ofOA" name="Debug__Initial__dbg__viewBreakPoints__35">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Lu7bcVzTEeefLpHt66ofOA" name="Debug__MSG" port="_Lp1gEFzTEeefLpHt66ofOA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_LvBiEFzTEeefLpHt66ofOA" name="Debug__Initial__dbg__dbgSetExecMode" source="_LugksFzTEeefLpHt66ofOA" target="_LugksFzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LvBiElzTEeefLpHt66ofOA" name="Debug__Initial__dbg__dbgSetExecMode__36">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_LvBiEVzTEeefLpHt66ofOA" name="Debug__MSG" port="_Lp1gEFzTEeefLpHt66ofOA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_LvCJIFzTEeefLpHt66ofOA" name="Debug__Initial__dbg__dbgDeferMsg" source="_LugksFzTEeefLpHt66ofOA" target="_LugksFzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LvCwMFzTEeefLpHt66ofOA" name="Debug__Initial__dbg__dbgDeferMsg__37">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_LvCJIVzTEeefLpHt66ofOA" name="Debug__MSG" port="_gCK90ExOEeeAapBXl-GW2w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_Lv0MQVzTEeefLpHt66ofOA" name="Debug__InitDebug" source="_7eXNMExOEeeAapBXl-GW2w" target="_LvtekFzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Lv0zUFzTEeefLpHt66ofOA" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_7eXNMExOEeeAapBXl-GW2w" name="Pseudo1"/>
          <subvertex xmi:type="uml:State" xmi:id="_7ehlQExOEeeAapBXl-GW2w" name="PLAYING">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_e3YJMExPEeeAapBXl-GW2w" name="Entry" isReentrant="false">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
log.show(&quot;Entering playing state of pinger\n&quot;);
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_gBgaAExPEeeAapBXl-GW2w" name="Exit" isReentrant="false">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
log.show(&quot;Leaving playing state of pinger\n&quot;);
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_Ls4NAFzTEeefLpHt66ofOA" name="Debug__Path__onPong" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_Ls-6sVzTEeefLpHt66ofOA" name="Debug__C__onPong">
            <connectionPoint xmi:id="_LtGPcVzTEeefLpHt66ofOA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_LtOLQFzTEeefLpHt66ofOA" name="ex" kind="exitPoint"/>
            <region xmi:id="_Ls-6slzTEeefLpHt66ofOA" name="Region1">
              <transition xmi:id="_Ltq3MFzTEeefLpHt66ofOA" name="Debug__init__trans__onPong" source="_LtGPcVzTEeefLpHt66ofOA" target="_Ltnz4VzTEeefLpHt66ofOA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LuQtEFzTEeefLpHt66ofOA" name="Debug__init__trans__onPong__19">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__init__trans__onPong&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
              </transition>
              <transition xmi:id="_Ltq3MVzTEeefLpHt66ofOA" name="Debug__Ex__PLAYING" source="_Ltnz4VzTEeefLpHt66ofOA" target="_Ltoa8FzTEeefLpHt66ofOA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LtreQVzTEeefLpHt66ofOA" name="Exit" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Leaving playing state of pinger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ac__onPong&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_LtreQFzTEeefLpHt66ofOA" name="Debug__Exec" port="_Lp1gEFzTEeefLpHt66ofOA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_LtreQlzTEeefLpHt66ofOA" name="Debug__AC__onPong" source="_Ltoa8FzTEeefLpHt66ofOA" target="_LtppEFzTEeefLpHt66ofOA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LtsFUFzTEeefLpHt66ofOA" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;pong message received.\n&quot;);
pinger.ping().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__AC__onPong&quot;,(char *)&quot;Debug__B__Ac__onPong&quot;,(char *)&quot;Debug__A__Ac__onPong&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_LtreQ1zTEeefLpHt66ofOA" name="Debug__Exec" port="_Lp1gEFzTEeefLpHt66ofOA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_LtsFUVzTEeefLpHt66ofOA" name="Debug__En__PLAYING" source="_LtppEFzTEeefLpHt66ofOA" target="_LtqQIFzTEeefLpHt66ofOA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LtssYFzTEeefLpHt66ofOA" name="Entry" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Entering playing state of pinger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__onPong&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_LtsFUlzTEeefLpHt66ofOA" name="Debug__Exec" port="_Lp1gEFzTEeefLpHt66ofOA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_LtssYVzTEeefLpHt66ofOA" name="Debug__end__trans__onPong" source="_LtqQIFzTEeefLpHt66ofOA" target="_LtOLQFzTEeefLpHt66ofOA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LuU-gFzTEeefLpHt66ofOA" name="Debug__end__trans__onPong__24">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__end__trans__onPong&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_LtssYlzTEeefLpHt66ofOA" name="Debug__Exec" port="_Lp1gEFzTEeefLpHt66ofOA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_Ltnz4VzTEeefLpHt66ofOA" name="Debug__B__Ex__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Ltnz4lzTEeefLpHt66ofOA" name="Debug__B__Ex__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Lt1PQFzTEeefLpHt66ofOA" name="Debug__B__Ex__PLAYING__14">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_Ltoa8FzTEeefLpHt66ofOA" name="Debug__B__Ac__onPong">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Ltoa8VzTEeefLpHt66ofOA" name="Debug__B__Ac__onPong">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;onPong&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Lt9LEVzTEeefLpHt66ofOA" name="Debug__B__Ac__onPong__15">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_LtppEFzTEeefLpHt66ofOA" name="Debug__A__Ac__onPong">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_LtppEVzTEeefLpHt66ofOA" name="Debug__A__Ac__onPong">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;onPong&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__A__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_LuG8EFzTEeefLpHt66ofOA" name="Debug__A__Ac__onPong__16">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__A__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_LtqQIFzTEeefLpHt66ofOA" name="Debug__A__En__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_LtqQIVzTEeefLpHt66ofOA" name="Debug__A__En__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_LuIKMFzTEeefLpHt66ofOA" name="Debug__A__En__PLAYING__17">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_LuYo4FzTEeefLpHt66ofOA" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_LugksFzTEeefLpHt66ofOA" name="Debug__C__Initial">
            <connectionPoint xmi:id="_LunSYVzTEeefLpHt66ofOA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_LuuAEVzTEeefLpHt66ofOA" name="ex" kind="exitPoint"/>
            <region xmi:id="_LugksVzTEeefLpHt66ofOA" name="Region1">
              <transition xmi:id="_LvPkgFzTEeefLpHt66ofOA" name="Debug__init__trans__Initial" source="_LunSYVzTEeefLpHt66ofOA" target="_LvMhMVzTEeefLpHt66ofOA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LvnX8FzTEeefLpHt66ofOA" name="Debug__init__trans__Initial__42">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
              </transition>
              <transition xmi:id="_LvPkgVzTEeefLpHt66ofOA" name="Debug__Ac__Initial" source="_LvMhMVzTEeefLpHt66ofOA" target="_LvNvUFzTEeefLpHt66ofOA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LvPkg1zTEeefLpHt66ofOA" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;leaving initial pseudo state of pinger\n&quot;);
pinger.ping().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_LvPkglzTEeefLpHt66ofOA" name="Debug__Exec" port="_Lp1gEFzTEeefLpHt66ofOA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_LvQLkFzTEeefLpHt66ofOA" name="Debug__En__PLAYING" source="_LvNvUFzTEeefLpHt66ofOA" target="_LvOWYFzTEeefLpHt66ofOA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LvQLklzTEeefLpHt66ofOA" name="Entry" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Entering playing state of pinger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_LvQLkVzTEeefLpHt66ofOA" name="Debug__Exec" port="_Lp1gEFzTEeefLpHt66ofOA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_LvQLk1zTEeefLpHt66ofOA" name="Debug__end__trans__Initial" source="_LvOWYFzTEeefLpHt66ofOA" target="_LuuAEVzTEeefLpHt66ofOA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Lvp0MFzTEeefLpHt66ofOA" name="Debug__end__trans__Initial__46">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_LvQyoFzTEeefLpHt66ofOA" name="Debug__Exec" port="_Lp1gEFzTEeefLpHt66ofOA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_LvMhMVzTEeefLpHt66ofOA" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_LvNIQFzTEeefLpHt66ofOA" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_LvYHYFzTEeefLpHt66ofOA" name="Debug__B__Ac__Initial__38">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_LvNvUFzTEeefLpHt66ofOA" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_LvNvUVzTEeefLpHt66ofOA" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Lve1EVzTEeefLpHt66ofOA" name="Debug__A__Ac__Initial__39">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_LvOWYFzTEeefLpHt66ofOA" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_LvOWYVzTEeefLpHt66ofOA" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_LvmJ0FzTEeefLpHt66ofOA" name="Debug__A__En__Initial__40">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_LvtekFzTEeefLpHt66ofOA" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_Lp05AFzTEeefLpHt66ofOA" name="Debug__recallAllMsg" specification="_Lp0R8FzTEeefLpHt66ofOA">
        <language>C++</language>
        <body>pinger.recallAll();
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_LqMFYVzTEeefLpHt66ofOA" name="Debug__variablesViewMethod" specification="_LqMFYFzTEeefLpHt66ofOA">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;i,&quot;);
tempS.append(&quot;Integer,&quot;);
if(i!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,i);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_LqOhoVzTEeefLpHt66ofOA" name="Debug__variablesChange" specification="_LqNTgFzTEeefLpHt66ofOA">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;i&quot;==tempVarName){
    i=atoi(varValue);
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_LszUgFzTEeefLpHt66ofOA" name="Debug__sendEvent" specification="_LrRqgFzTEeefLpHt66ofOA">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
this->Debug__event.setPayloadField(&quot;SenderCapsule&quot;,reserve3);
this->Debug__event.setPayloadField(&quot;Port&quot;,reserve4);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_Lp0R8FzTEeefLpHt66ofOA" name="Debug__recallAllMsg" visibility="private" method="_Lp05AFzTEeefLpHt66ofOA"/>
      <ownedOperation xmi:id="_LqMFYFzTEeefLpHt66ofOA" name="Debug__variablesView" visibility="private" method="_LqMFYVzTEeefLpHt66ofOA"/>
      <ownedOperation xmi:id="_LqNTgFzTEeefLpHt66ofOA" name="Debug__variablesChange" visibility="private" method="_LqOhoVzTEeefLpHt66ofOA">
        <ownedParameter xmi:id="_LqN6kFzTEeefLpHt66ofOA" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_LqN6kVzTEeefLpHt66ofOA" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_LqOhoFzTEeefLpHt66ofOA" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_LrRqgFzTEeefLpHt66ofOA" name="Debug__sendEvent" visibility="private" method="_LszUgFzTEeefLpHt66ofOA">
        <ownedParameter xmi:id="_LrRqgVzTEeefLpHt66ofOA" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Lree0FzTEeefLpHt66ofOA" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_LrshQFzTEeefLpHt66ofOA" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Lr8_8FzTEeefLpHt66ofOA" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Lr8_8VzTEeefLpHt66ofOA" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_LsJ0QFzTEeefLpHt66ofOA" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_LsXPoFzTEeefLpHt66ofOA" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_LsYdwFzTEeefLpHt66ofOA" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_LsZE0FzTEeefLpHt66ofOA" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_LsZr4FzTEeefLpHt66ofOA" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_LsmgMFzTEeefLpHt66ofOA" name="reserve4">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_irESsExOEeeAapBXl-GW2w" name="Ponger" classifierBehavior="_P8x8sExQEeeAapBXl-GW2w" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_j9fj4ExOEeeAapBXl-GW2w" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_kypqQExOEeeAapBXl-GW2w" name="ponger" type="_YKDyEExOEeeAapBXl-GW2w" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:id="_4p-aAExOEeeAapBXl-GW2w" name="j" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_LmnM8FzTEeefLpHt66ofOA" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_LmvIwVzTEeefLpHt66ofOA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_LmvIwlzTEeefLpHt66ofOA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_LnFHAFzTEeefLpHt66ofOA" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_LnFuEFzTEeefLpHt66ofOA" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_LnFuEVzTEeefLpHt66ofOA" name="Debug__event">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_LnUXkFzTEeefLpHt66ofOA" name="Debug__SRO">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_P8x8sExQEeeAapBXl-GW2w" name="PongerStateMachine" isReentrant="false">
        <region xmi:id="_P9XykExQEeeAapBXl-GW2w" name="Region">
          <transition xmi:id="_P9qGcExQEeeAapBXl-GW2w" name="Initial" source="_Lv7hAFzTEeefLpHt66ofOA" target="_P9jYwExQEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LyEPAFzTEeefLpHt66ofOA" name="Initial__71">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_ZUZMUExQEeeAapBXl-GW2w" name="onPing" source="_LyKVoFzTEeefLpHt66ofOA" target="_P9jYwExQEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_q3J4cExQEeeAapBXl-GW2w" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.show(&quot;ping message received.\n&quot;);
ponger.pong().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::onPing&quot;,(char *)&quot;Debug__Path__onPing&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_LxauwVzTEeefLpHt66ofOA" name="Debug__Initial" source="_Lzl5AFzTEeefLpHt66ofOA" target="_Lv7hAFzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LxbV0FzTEeefLpHt66ofOA" name="Debug__Initial__49">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPong&quot;,&quot;PLAYING&quot;,&quot;pong&quot;,&quot;PingPong&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPing&quot;,&quot;PLAYING&quot;,&quot;ping&quot;,&quot;PingPong&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_Lzub4FzTEeefLpHt66ofOA" name="ConnectionEstablished" port="_LmnM8FzTEeefLpHt66ofOA">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
            </trigger>
          </transition>
          <transition xmi:id="_Lxb84FzTEeefLpHt66ofOA" name="Debug__Initial__S" guard="_Lxcj8VzTEeefLpHt66ofOA" source="_Lv7hAFzTEeefLpHt66ofOA" target="_LxN6cVzTEeefLpHt66ofOA">
            <ownedRule xmi:id="_Lxcj8VzTEeefLpHt66ofOA" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_Lxcj8FzTEeefLpHt66ofOA" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo2&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LxdLAFzTEeefLpHt66ofOA" name="Debug__Initial__S__51">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_LxdyEFzTEeefLpHt66ofOA" name="Debug__Initial__E" source="_LxVPMFzTEeefLpHt66ofOA" target="_P9jYwExQEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LxdyEVzTEeefLpHt66ofOA" name="Debug__Initial__E__52">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_LxfAMFzTEeefLpHt66ofOA" name="Debug__Initial__dbg__varChange" source="_LwCOsVzTEeefLpHt66ofOA" target="_LwCOsVzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LxfAMlzTEeefLpHt66ofOA" name="Debug__Initial__dbg__varChange__54">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_LxfAMVzTEeefLpHt66ofOA" name="Debug__MSG" port="_LmnM8FzTEeefLpHt66ofOA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_LxfnQFzTEeefLpHt66ofOA" name="Debug__Initial__dbg__setBreakPoint" source="_LwCOsVzTEeefLpHt66ofOA" target="_LwCOsVzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LxfnQlzTEeefLpHt66ofOA" name="Debug__Initial__dbg__setBreakPoint__55">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_LxfnQVzTEeefLpHt66ofOA" name="Debug__MSG" port="_LmnM8FzTEeefLpHt66ofOA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_LxgOUFzTEeefLpHt66ofOA" name="Debug__Initial__dbg__remBreakPoint" source="_LwCOsVzTEeefLpHt66ofOA" target="_LwCOsVzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LxgOUlzTEeefLpHt66ofOA" name="Debug__Initial__dbg__remBreakPoint__56">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_LxgOUVzTEeefLpHt66ofOA" name="Debug__MSG" port="_LmnM8FzTEeefLpHt66ofOA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_Lxg1YFzTEeefLpHt66ofOA" name="Debug__Initial__dbg__viewBreakPoints" source="_LwCOsVzTEeefLpHt66ofOA" target="_LwCOsVzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Lxg1YlzTEeefLpHt66ofOA" name="Debug__Initial__dbg__viewBreakPoints__57">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Lxg1YVzTEeefLpHt66ofOA" name="Debug__MSG" port="_LmnM8FzTEeefLpHt66ofOA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_Lxg1Y1zTEeefLpHt66ofOA" name="Debug__Initial__dbg__dbgSetExecMode" source="_LwCOsVzTEeefLpHt66ofOA" target="_LwCOsVzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LxhccVzTEeefLpHt66ofOA" name="Debug__Initial__dbg__dbgSetExecMode__58">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_LxhccFzTEeefLpHt66ofOA" name="Debug__MSG" port="_LmnM8FzTEeefLpHt66ofOA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_LxhcclzTEeefLpHt66ofOA" name="Debug__Initial__dbg__dbgDeferMsg" source="_LwCOsVzTEeefLpHt66ofOA" target="_LwCOsVzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LxiDgFzTEeefLpHt66ofOA" name="Debug__Initial__dbg__dbgDeferMsg__59">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Lxhcc1zTEeefLpHt66ofOA" name="Debug__MSG" port="_kypqQExOEeeAapBXl-GW2w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_LywLgVzTEeefLpHt66ofOA" name="Debug__onPing" source="_P9jYwExQEeeAapBXl-GW2w" target="_LyKVoFzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LywykFzTEeefLpHt66ofOA" name="Debug__onPing__73">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__onPing&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;Debug__Path__onPing&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:id="_b3gpUExQEeeAapBXl-GW2w" event="_akzWMExOEeeAapBXl-GW2w" port="_kypqQExOEeeAapBXl-GW2w"/>
          </transition>
          <transition xmi:id="_LyyAsFzTEeefLpHt66ofOA" name="Debug__onPing__S" guard="_LyyAslzTEeefLpHt66ofOA" source="_LyKVoFzTEeefLpHt66ofOA" target="_Lyg68FzTEeefLpHt66ofOA">
            <ownedRule xmi:id="_LyyAslzTEeefLpHt66ofOA" name="Debug__GuardonPing">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_LyyAsVzTEeefLpHt66ofOA" name="Debug__GuardonPing">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LyynwFzTEeefLpHt66ofOA" name="Debug__onPing__S__75">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__onPing__S&quot;,(char *)&quot;Debug__Path__onPing&quot;,(char *)&quot;en&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_LyzO0FzTEeefLpHt66ofOA" name="Debug__onPing__E" source="_LyqE4VzTEeefLpHt66ofOA" target="_P9jYwExQEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Lyz14FzTEeefLpHt66ofOA" name="Debug__onPing__E__76">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__onPing__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_Ly0c8FzTEeefLpHt66ofOA" name="Debug__onPing__dbg__varChange" source="_LyS4gFzTEeefLpHt66ofOA" target="_LyS4gFzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Ly1EAFzTEeefLpHt66ofOA" name="Debug__onPing__dbg__varChange__78">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_Ly0c8VzTEeefLpHt66ofOA" name="Debug__MSG" port="_LmnM8FzTEeefLpHt66ofOA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_Ly1EAVzTEeefLpHt66ofOA" name="Debug__onPing__dbg__setBreakPoint" source="_LyS4gFzTEeefLpHt66ofOA" target="_LyS4gFzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Ly1rEFzTEeefLpHt66ofOA" name="Debug__onPing__dbg__setBreakPoint__79">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Ly1EAlzTEeefLpHt66ofOA" name="Debug__MSG" port="_LmnM8FzTEeefLpHt66ofOA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_Ly1rEVzTEeefLpHt66ofOA" name="Debug__onPing__dbg__remBreakPoint" source="_LyS4gFzTEeefLpHt66ofOA" target="_LyS4gFzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Ly2SIFzTEeefLpHt66ofOA" name="Debug__onPing__dbg__remBreakPoint__80">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Ly1rElzTEeefLpHt66ofOA" name="Debug__MSG" port="_LmnM8FzTEeefLpHt66ofOA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_Ly2SIVzTEeefLpHt66ofOA" name="Debug__onPing__dbg__viewBreakPoints" source="_LyS4gFzTEeefLpHt66ofOA" target="_LyS4gFzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Ly25MFzTEeefLpHt66ofOA" name="Debug__onPing__dbg__viewBreakPoints__81">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Ly2SIlzTEeefLpHt66ofOA" name="Debug__MSG" port="_LmnM8FzTEeefLpHt66ofOA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_Ly25MVzTEeefLpHt66ofOA" name="Debug__onPing__dbg__dbgSetExecMode" source="_LyS4gFzTEeefLpHt66ofOA" target="_LyS4gFzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Ly25M1zTEeefLpHt66ofOA" name="Debug__onPing__dbg__dbgSetExecMode__82">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_Ly25MlzTEeefLpHt66ofOA" name="Debug__MSG" port="_LmnM8FzTEeefLpHt66ofOA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_Ly3gQFzTEeefLpHt66ofOA" name="Debug__onPing__dbg__dbgDeferMsg" source="_LyS4gFzTEeefLpHt66ofOA" target="_LyS4gFzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Ly3gQlzTEeefLpHt66ofOA" name="Debug__onPing__dbg__dbgDeferMsg__83">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Ly3gQVzTEeefLpHt66ofOA" name="Debug__MSG" port="_kypqQExOEeeAapBXl-GW2w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_Lzt00VzTEeefLpHt66ofOA" name="Debug__InitDebug" source="_P9fHUExQEeeAapBXl-GW2w" target="_Lzl5AFzTEeefLpHt66ofOA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Lzt00lzTEeefLpHt66ofOA" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_P9fHUExQEeeAapBXl-GW2w" name="Pseudo2"/>
          <subvertex xmi:type="uml:State" xmi:id="_P9jYwExQEeeAapBXl-GW2w" name="PLAYING">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_fs-fAExQEeeAapBXl-GW2w" name="Entry" isReentrant="false">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
log.show(&quot;Entering playing state of ponger\n&quot;);
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_j-wdQExQEeeAapBXl-GW2w" name="Exit" isReentrant="false">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
log.show(&quot;Leaving playing state of ponger\n&quot;);
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_Lv7hAFzTEeefLpHt66ofOA" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_LwCOsVzTEeefLpHt66ofOA" name="Debug__C__Initial">
            <connectionPoint xmi:id="_LxN6cVzTEeefLpHt66ofOA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_LxVPMFzTEeefLpHt66ofOA" name="ex" kind="exitPoint"/>
            <region xmi:id="_LwCOslzTEeefLpHt66ofOA" name="Region1">
              <transition xmi:id="_LxqmYFzTEeefLpHt66ofOA" name="Debug__init__trans__Initial" source="_LxN6cVzTEeefLpHt66ofOA" target="_LxoKIVzTEeefLpHt66ofOA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LyBLsFzTEeefLpHt66ofOA" name="Debug__init__trans__Initial__64">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
              </transition>
              <transition xmi:id="_LxqmYVzTEeefLpHt66ofOA" name="Debug__Ac__Initial" source="_LxoKIVzTEeefLpHt66ofOA" target="_LxoxMFzTEeefLpHt66ofOA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LyBywFzTEeefLpHt66ofOA" name="Debug__Ac__Initial__66">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_LxqmYlzTEeefLpHt66ofOA" name="Debug__Exec" port="_LmnM8FzTEeefLpHt66ofOA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_LxqmY1zTEeefLpHt66ofOA" name="Debug__En__PLAYING" source="_LxoxMFzTEeefLpHt66ofOA" target="_Lxp_UFzTEeefLpHt66ofOA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LxrNcFzTEeefLpHt66ofOA" name="Entry" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Entering playing state of ponger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_LxqmZFzTEeefLpHt66ofOA" name="Debug__Exec" port="_LmnM8FzTEeefLpHt66ofOA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_LxrNcVzTEeefLpHt66ofOA" name="Debug__end__trans__Initial" source="_Lxp_UFzTEeefLpHt66ofOA" target="_LxVPMFzTEeefLpHt66ofOA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LyDn8FzTEeefLpHt66ofOA" name="Debug__end__trans__Initial__69">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_LxrNclzTEeefLpHt66ofOA" name="Debug__Exec" port="_LmnM8FzTEeefLpHt66ofOA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_LxoKIVzTEeefLpHt66ofOA" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_LxoKIlzTEeefLpHt66ofOA" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_LxxUEVzTEeefLpHt66ofOA" name="Debug__B__Ac__Initial__60">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_LxoxMFzTEeefLpHt66ofOA" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_LxoxMVzTEeefLpHt66ofOA" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Lx4BwVzTEeefLpHt66ofOA" name="Debug__A__Ac__Initial__61">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_Lxp_UFzTEeefLpHt66ofOA" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Lxp_UVzTEeefLpHt66ofOA" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Lx_9kFzTEeefLpHt66ofOA" name="Debug__A__En__Initial__62">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_LyKVoFzTEeefLpHt66ofOA" name="Debug__Path__onPing" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_LyS4gFzTEeefLpHt66ofOA" name="Debug__C__onPing">
            <connectionPoint xmi:id="_Lyg68FzTEeefLpHt66ofOA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_LyqE4VzTEeefLpHt66ofOA" name="ex" kind="exitPoint"/>
            <region xmi:id="_LyS4gVzTEeefLpHt66ofOA" name="Region1">
              <transition xmi:id="_LzBRQFzTEeefLpHt66ofOA" name="Debug__init__trans__onPing" source="_Lyg68FzTEeefLpHt66ofOA" target="_Ly-N8VzTEeefLpHt66ofOA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LzgZcFzTEeefLpHt66ofOA" name="Debug__init__trans__onPing__89">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__init__trans__onPing&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
              </transition>
              <transition xmi:id="_LzBRQVzTEeefLpHt66ofOA" name="Debug__Ex__PLAYING" source="_Ly-N8VzTEeefLpHt66ofOA" target="_Ly-1AFzTEeefLpHt66ofOA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LzBRQ1zTEeefLpHt66ofOA" name="Exit" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Leaving playing state of ponger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ac__onPing&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_LzBRQlzTEeefLpHt66ofOA" name="Debug__Exec" port="_LmnM8FzTEeefLpHt66ofOA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_LzB4UFzTEeefLpHt66ofOA" name="Debug__AC__onPing" source="_Ly-1AFzTEeefLpHt66ofOA" target="_Ly_cEFzTEeefLpHt66ofOA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LzB4UlzTEeefLpHt66ofOA" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;ping message received.\n&quot;);
ponger.pong().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__AC__onPing&quot;,(char *)&quot;Debug__B__Ac__onPing&quot;,(char *)&quot;Debug__A__Ac__onPing&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_LzB4UVzTEeefLpHt66ofOA" name="Debug__Exec" port="_LmnM8FzTEeefLpHt66ofOA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_LzB4U1zTEeefLpHt66ofOA" name="Debug__En__PLAYING" source="_Ly_cEFzTEeefLpHt66ofOA" target="_LzAqMFzTEeefLpHt66ofOA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LzCfYFzTEeefLpHt66ofOA" name="Entry" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Entering playing state of ponger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__onPing&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_LzB4VFzTEeefLpHt66ofOA" name="Debug__Exec" port="_LmnM8FzTEeefLpHt66ofOA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_LzCfYVzTEeefLpHt66ofOA" name="Debug__end__trans__onPing" source="_LzAqMFzTEeefLpHt66ofOA" target="_LyqE4VzTEeefLpHt66ofOA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LzkD0FzTEeefLpHt66ofOA" name="Debug__end__trans__onPing__94">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__end__trans__onPing&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_LzCfYlzTEeefLpHt66ofOA" name="Debug__Exec" port="_LmnM8FzTEeefLpHt66ofOA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_Ly-N8VzTEeefLpHt66ofOA" name="Debug__B__Ex__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Ly-N8lzTEeefLpHt66ofOA" name="Debug__B__Ex__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_LzImAVzTEeefLpHt66ofOA" name="Debug__B__Ex__PLAYING__84">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_Ly-1AFzTEeefLpHt66ofOA" name="Debug__B__Ac__onPing">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Ly-1AVzTEeefLpHt66ofOA" name="Debug__B__Ac__onPing">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;onPing&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_LzP6wFzTEeefLpHt66ofOA" name="Debug__B__Ac__onPing__85">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_Ly_cEFzTEeefLpHt66ofOA" name="Debug__A__Ac__onPing">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Ly_cEVzTEeefLpHt66ofOA" name="Debug__A__Ac__onPing">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;onPing&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__A__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_LzXPgFzTEeefLpHt66ofOA" name="Debug__A__Ac__onPing__86">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__A__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_LzAqMFzTEeefLpHt66ofOA" name="Debug__A__En__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_LzAqMVzTEeefLpHt66ofOA" name="Debug__A__En__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_LzYdoFzTEeefLpHt66ofOA" name="Debug__A__En__PLAYING__87">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_Lzl5AFzTEeefLpHt66ofOA" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_Lmml4VzTEeefLpHt66ofOA" name="Debug__recallAllMsg" specification="_Lmml4FzTEeefLpHt66ofOA">
        <language>C++</language>
        <body>ponger.recallAll();
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_LnCDsVzTEeefLpHt66ofOA" name="Debug__variablesViewMethod" specification="_LnCDsFzTEeefLpHt66ofOA">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;j,&quot;);
tempS.append(&quot;Integer,&quot;);
if(j!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,j);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_LnEf8lzTEeefLpHt66ofOA" name="Debug__variablesChange" specification="_LnD44FzTEeefLpHt66ofOA">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;j&quot;==tempVarName){
    j=atoi(varValue);
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_LpwnkFzTEeefLpHt66ofOA" name="Debug__sendEvent" specification="_LoHBwFzTEeefLpHt66ofOA">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
this->Debug__event.setPayloadField(&quot;SenderCapsule&quot;,reserve3);
this->Debug__event.setPayloadField(&quot;Port&quot;,reserve4);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_Lmml4FzTEeefLpHt66ofOA" name="Debug__recallAllMsg" visibility="private" method="_Lmml4VzTEeefLpHt66ofOA"/>
      <ownedOperation xmi:id="_LnCDsFzTEeefLpHt66ofOA" name="Debug__variablesView" visibility="private" method="_LnCDsVzTEeefLpHt66ofOA"/>
      <ownedOperation xmi:id="_LnD44FzTEeefLpHt66ofOA" name="Debug__variablesChange" visibility="private" method="_LnEf8lzTEeefLpHt66ofOA">
        <ownedParameter xmi:id="_LnD44VzTEeefLpHt66ofOA" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_LnEf8FzTEeefLpHt66ofOA" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_LnEf8VzTEeefLpHt66ofOA" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_LoHBwFzTEeefLpHt66ofOA" name="Debug__sendEvent" visibility="private" method="_LpwnkFzTEeefLpHt66ofOA">
        <ownedParameter xmi:id="_LoHo0FzTEeefLpHt66ofOA" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_LoW5YFzTEeefLpHt66ofOA" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_LomJ8FzTEeefLpHt66ofOA" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Lo1agFzTEeefLpHt66ofOA" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Lo2BkFzTEeefLpHt66ofOA" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_LpErEFzTEeefLpHt66ofOA" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_LpTUkFzTEeefLpHt66ofOA" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_LpT7oFzTEeefLpHt66ofOA" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_LpT7oVzTEeefLpHt66ofOA" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_LpUisFzTEeefLpHt66ofOA" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_LpjMMFzTEeefLpHt66ofOA" name="reserve4">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_n15_4ExOEeeAapBXl-GW2w" name="Top" isActive="true">
      <ownedAttribute xmi:id="_rrH98ExOEeeAapBXl-GW2w" name="pinger" visibility="protected" type="_dBdl4ExOEeeAapBXl-GW2w" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_sWX6YExOEeeAapBXl-GW2w" name="ponger" visibility="protected" type="_irESsExOEeeAapBXl-GW2w" isOrdered="true" aggregation="composite"/>
      <ownedConnector xmi:id="_udBd0ExOEeeAapBXl-GW2w" name="RTConnector1">
        <end xmi:id="_udFvQExOEeeAapBXl-GW2w" partWithPort="_rrH98ExOEeeAapBXl-GW2w" role="_gCK90ExOEeeAapBXl-GW2w"/>
        <end xmi:id="_udGWUExOEeeAapBXl-GW2w" partWithPort="_sWX6YExOEeeAapBXl-GW2w" role="_kypqQExOEeeAapBXl-GW2w"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_LhomUFzTEeefLpHt66ofOA" name="Debug__Top">
      <ownedAttribute xmi:id="_LmB-IFzTEeefLpHt66ofOA" name="Debug__Gateway">
        <type xmi:type="uml:Class" href="../CommGateWay/model.uml#_XIyCcAdxEeadtKuU2t6fMg"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_LmJ58VzTEeefLpHt66ofOA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_LmKhAFzTEeefLpHt66ofOA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_LmM9QFzTEeefLpHt66ofOA" name="Debug__Top" type="_n15_4ExOEeeAapBXl-GW2w">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_LmVgIFzTEeefLpHt66ofOA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_LmVgIVzTEeefLpHt66ofOA" value="1"/>
      </ownedAttribute>
    </packagedElement>
    <profileApplication xmi:id="_MUbn4ExOEeeAapBXl-GW2w">
      <eAnnotations xmi:id="_MUddEExOEeeAapBXl-GW2w" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:id="_SJ7boExOEeeAapBXl-GW2w">
      <eAnnotations xmi:id="_SJ8pwExOEeeAapBXl-GW2w" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UMLRT_CPP/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
    <profileApplication xmi:id="_UV8AMExOEeeAapBXl-GW2w">
      <eAnnotations xmi:id="_UV8nQExOEeeAapBXl-GW2w" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:ProtocolContainer xmi:id="_YKnywExOEeeAapBXl-GW2w" base_Package="_YKTpsExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTMessageSet xmi:id="_YLO2wExOEeeAapBXl-GW2w" base_Interface="_YLFFwExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTMessageSet xmi:id="_YLk1AExOEeeAapBXl-GW2w" base_Interface="_YLbrEExOEeeAapBXl-GW2w" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_YLt-8ExOEeeAapBXl-GW2w" base_Interface="_YLnRQExOEeeAapBXl-GW2w" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_YLxCQExOEeeAapBXl-GW2w" base_Collaboration="_YKDyEExOEeeAapBXl-GW2w"/>
  <UMLRealTime:Capsule xmi:id="_dCzpsExOEeeAapBXl-GW2w" base_Class="_dBdl4ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTPort xmi:id="_e-suoExOEeeAapBXl-GW2w" isWired="false" base_Port="_e-deEExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTPort xmi:id="_gCa1cExOEeeAapBXl-GW2w" base_Port="_gCK90ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:Capsule xmi:id="_irM1kExOEeeAapBXl-GW2w" base_Class="_irESsExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTPort xmi:id="_j9j1UExOEeeAapBXl-GW2w" isWired="false" base_Port="_j9fj4ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTPort xmi:id="_kyvJ0ExOEeeAapBXl-GW2w" base_Port="_kypqQExOEeeAapBXl-GW2w"/>
  <UMLRealTime:Capsule xmi:id="_n2EX8ExOEeeAapBXl-GW2w" base_Class="_n15_4ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:CapsulePart xmi:id="_rrLoUExOEeeAapBXl-GW2w" base_Property="_rrH98ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:CapsulePart xmi:id="_sWcy4ExOEeeAapBXl-GW2w" base_Property="_sWX6YExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTConnector xmi:id="_udG9YExOEeeAapBXl-GW2w" base_Connector="_udBd0ExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_7ecswExOEeeAapBXl-GW2w" base_Pseudostate="_7eXNMExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTState xmi:id="_7ekokExOEeeAapBXl-GW2w" base_State="_7ehlQExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTRegion xmi:id="_7eoS8ExOEeeAapBXl-GW2w" base_Region="_7eS7wExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_7e4KkExOEeeAapBXl-GW2w" base_StateMachine="_7eBO8ExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_P9hjkExQEeeAapBXl-GW2w" base_Pseudostate="_P9fHUExQEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTState xmi:id="_P9pfYExQEeeAapBXl-GW2w" base_State="_P9jYwExQEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTRegion xmi:id="_P9qtgExQEeeAapBXl-GW2w" base_Region="_P9XykExQEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_P9wNEExQEeeAapBXl-GW2w" base_StateMachine="_P8x8sExQEeeAapBXl-GW2w"/>
  <UMLRealTime:Capsule xmi:id="_Ll6CUFzTEeefLpHt66ofOA" base_Class="_LhomUFzTEeefLpHt66ofOA"/>
  <UMLRealTime:CapsulePart xmi:id="_LmJ58FzTEeefLpHt66ofOA" base_Property="_LmB-IFzTEeefLpHt66ofOA"/>
  <UMLRealTime:CapsulePart xmi:id="_LmU5EFzTEeefLpHt66ofOA" base_Property="_LmM9QFzTEeefLpHt66ofOA"/>
  <UMLRealTime:RTPort xmi:id="_LmvIwFzTEeefLpHt66ofOA" isNotification="true" isWired="false" base_Port="_LmnM8FzTEeefLpHt66ofOA"/>
  <RTCppProperties:AttributeProperties xmi:id="_LnNp4FzTEeefLpHt66ofOA" type="debugEvents::Event" base_Property="_LnFuEVzTEeefLpHt66ofOA"/>
  <RTCppProperties:AttributeProperties xmi:id="_LncTYFzTEeefLpHt66ofOA" type="SROManager" base_Property="_LnUXkFzTEeefLpHt66ofOA"/>
  <RTCppProperties:CapsuleProperties xmi:id="_Lnq84FzTEeefLpHt66ofOA" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_irESsExOEeeAapBXl-GW2w"/>
  <RTCppProperties:ParameterProperties xmi:id="_LoPkoFzTEeefLpHt66ofOA" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_LoHo0FzTEeefLpHt66ofOA"/>
  <RTCppProperties:ParameterProperties xmi:id="_LoeOIFzTEeefLpHt66ofOA" type="debugEvents::EVENTTYPE" base_Parameter="_LoW5YFzTEeefLpHt66ofOA"/>
  <RTCppProperties:ParameterProperties xmi:id="_LotesFzTEeefLpHt66ofOA" type="const char *" base_Parameter="_LomJ8FzTEeefLpHt66ofOA"/>
  <RTCppProperties:ParameterProperties xmi:id="_Lo9WUFzTEeefLpHt66ofOA" type="const char *" base_Parameter="_Lo2BkFzTEeefLpHt66ofOA"/>
  <RTCppProperties:ParameterProperties xmi:id="_LpL_0FzTEeefLpHt66ofOA" type="const char *" base_Parameter="_LpErEFzTEeefLpHt66ofOA"/>
  <RTCppProperties:ParameterProperties xmi:id="_Lpb3cFzTEeefLpHt66ofOA" type="const char *" base_Parameter="_LpUisFzTEeefLpHt66ofOA"/>
  <RTCppProperties:ParameterProperties xmi:id="_Lpqg8FzTEeefLpHt66ofOA" type="const char *" base_Parameter="_LpjMMFzTEeefLpHt66ofOA"/>
  <UMLRealTime:RTPort xmi:id="_Lp7msFzTEeefLpHt66ofOA" isNotification="true" isWired="false" base_Port="_Lp1gEFzTEeefLpHt66ofOA"/>
  <RTCppProperties:AttributeProperties xmi:id="_LqV2YFzTEeefLpHt66ofOA" type="debugEvents::Event" base_Property="_LqPIslzTEeefLpHt66ofOA"/>
  <RTCppProperties:AttributeProperties xmi:id="_Lqm8IFzTEeefLpHt66ofOA" type="SROManager" base_Property="_Lqb9AFzTEeefLpHt66ofOA"/>
  <RTCppProperties:CapsuleProperties xmi:id="_Lq5QAFzTEeefLpHt66ofOA" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_dBdl4ExOEeeAapBXl-GW2w"/>
  <RTCppProperties:ParameterProperties xmi:id="_LrYYMFzTEeefLpHt66ofOA" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_LrRqgVzTEeefLpHt66ofOA"/>
  <RTCppProperties:ParameterProperties xmi:id="_LrlMgFzTEeefLpHt66ofOA" type="debugEvents::EVENTTYPE" base_Parameter="_Lree0FzTEeefLpHt66ofOA"/>
  <RTCppProperties:ParameterProperties xmi:id="_Lrz2AFzTEeefLpHt66ofOA" type="const char *" base_Parameter="_LrshQFzTEeefLpHt66ofOA"/>
  <RTCppProperties:ParameterProperties xmi:id="_LsDtoFzTEeefLpHt66ofOA" type="const char *" base_Parameter="_Lr8_8VzTEeefLpHt66ofOA"/>
  <RTCppProperties:ParameterProperties xmi:id="_LsQh8FzTEeefLpHt66ofOA" type="const char *" base_Parameter="_LsJ0QFzTEeefLpHt66ofOA"/>
  <RTCppProperties:ParameterProperties xmi:id="_LsgZkFzTEeefLpHt66ofOA" type="const char *" base_Parameter="_LsZr4FzTEeefLpHt66ofOA"/>
  <RTCppProperties:ParameterProperties xmi:id="_LstN4FzTEeefLpHt66ofOA" type="const char *" base_Parameter="_LsmgMFzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Ls-6sFzTEeefLpHt66ofOA" base_Pseudostate="_Ls4NAFzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTState xmi:id="_LtGPcFzTEeefLpHt66ofOA" base_State="_Ls-6sVzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_LtM9IFzTEeefLpHt66ofOA" base_Pseudostate="_LtGPcVzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_LtU48FzTEeefLpHt66ofOA" base_Pseudostate="_LtOLQFzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_Ltnz4FzTEeefLpHt66ofOA" base_Region="_Ls-6slzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTState xmi:id="_Lt0oMFzTEeefLpHt66ofOA" base_State="_Ltnz4VzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTState xmi:id="_Lt9LEFzTEeefLpHt66ofOA" base_State="_Ltoa8FzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTState xmi:id="_LuGVAFzTEeefLpHt66ofOA" base_State="_LtppEFzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTState xmi:id="_LuQGAFzTEeefLpHt66ofOA" base_State="_LtqQIFzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Luf9oFzTEeefLpHt66ofOA" base_Pseudostate="_LuYo4FzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTState xmi:id="_LunSYFzTEeefLpHt66ofOA" base_State="_LugksFzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_LuuAEFzTEeefLpHt66ofOA" base_Pseudostate="_LunSYVzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Lu0twFzTEeefLpHt66ofOA" base_Pseudostate="_LuuAEVzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_LvMhMFzTEeefLpHt66ofOA" base_Region="_LugksVzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTState xmi:id="_LvXgUFzTEeefLpHt66ofOA" base_State="_LvMhMVzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTState xmi:id="_Lve1EFzTEeefLpHt66ofOA" base_State="_LvNvUFzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTState xmi:id="_LvliwFzTEeefLpHt66ofOA" base_State="_LvOWYFzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTState xmi:id="_Lv0MQFzTEeefLpHt66ofOA" base_State="_LvtekFzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_LwCOsFzTEeefLpHt66ofOA" base_Pseudostate="_Lv7hAFzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTState xmi:id="_LxN6cFzTEeefLpHt66ofOA" base_State="_LwCOsVzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_LxUoIFzTEeefLpHt66ofOA" base_Pseudostate="_LxN6cVzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_LxauwFzTEeefLpHt66ofOA" base_Pseudostate="_LxVPMFzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_LxoKIFzTEeefLpHt66ofOA" base_Region="_LwCOslzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTState xmi:id="_LxxUEFzTEeefLpHt66ofOA" base_State="_LxoKIVzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTState xmi:id="_Lx4BwFzTEeefLpHt66ofOA" base_State="_LxoxMFzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTState xmi:id="_Lx_WgFzTEeefLpHt66ofOA" base_State="_Lxp_UFzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_LySRcFzTEeefLpHt66ofOA" base_Pseudostate="_LyKVoFzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTState xmi:id="_LygT4FzTEeefLpHt66ofOA" base_State="_LyS4gFzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_LyqE4FzTEeefLpHt66ofOA" base_Pseudostate="_Lyg68FzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_LywLgFzTEeefLpHt66ofOA" base_Pseudostate="_LyqE4VzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_Ly-N8FzTEeefLpHt66ofOA" base_Region="_LyS4gVzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTState xmi:id="_LzImAFzTEeefLpHt66ofOA" base_State="_Ly-N8VzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTState xmi:id="_LzPTsFzTEeefLpHt66ofOA" base_State="_Ly-1AFzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTState xmi:id="_LzWocFzTEeefLpHt66ofOA" base_State="_Ly_cEFzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTState xmi:id="_LzfyYFzTEeefLpHt66ofOA" base_State="_LzAqMFzTEeefLpHt66ofOA"/>
  <UMLRTStateMachines:RTState xmi:id="_Lzt00FzTEeefLpHt66ofOA" base_State="_Lzl5AFzTEeefLpHt66ofOA"/>
</xmi:XMI>
