<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_MImLUExOEeeAapBXl-GW2w" name="PingPong">
    <eAnnotations xmi:id="_SI_ngExOEeeAapBXl-GW2w" source="http://www.eclipse.org/papyrus-rt/language/1.0.0">
      <details xmi:id="_SJAOkExOEeeAapBXl-GW2w" key="language" value="umlrt-cpp"/>
    </eAnnotations>
    <eAnnotations xmi:id="_o9ItsExOEeeAapBXl-GW2w" source="UMLRT_Default_top">
      <details xmi:id="_o9ItsUxOEeeAapBXl-GW2w" key="top_name" value="Debug__Top"/>
    </eAnnotations>
    <packageImport xmi:id="__l_OYE1VEee3wOKK7wRcrg">
      <importedPackage xmi:type="uml:Model" href="../CommGateWay/model.uml#_MZw7AAdxEeadtKuU2t6fMg"/>
    </packageImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_YKTpsExOEeeAapBXl-GW2w" name="PingPong">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_YKDyEExOEeeAapBXl-GW2w" name="PingPong">
        <interfaceRealization xmi:id="_YLTIMExOEeeAapBXl-GW2w" client="_YKDyEExOEeeAapBXl-GW2w" supplier="_YLFFwExOEeeAapBXl-GW2w" contract="_YLFFwExOEeeAapBXl-GW2w"/>
        <interfaceRealization xmi:id="_YLvNEExOEeeAapBXl-GW2w" client="_YKDyEExOEeeAapBXl-GW2w" supplier="_YLnRQExOEeeAapBXl-GW2w" contract="_YLnRQExOEeeAapBXl-GW2w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_YLFFwExOEeeAapBXl-GW2w" name="PingPong">
        <ownedOperation xmi:id="_bVz8YExOEeeAapBXl-GW2w" name="pong"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_YLbrEExOEeeAapBXl-GW2w" name="PingPong~">
        <ownedOperation xmi:id="_akmh4ExOEeeAapBXl-GW2w" name="ping"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_YLmDIExOEeeAapBXl-GW2w" client="_YKDyEExOEeeAapBXl-GW2w" supplier="_YLbrEExOEeeAapBXl-GW2w"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_YLmqMExOEeeAapBXl-GW2w" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_YLnRQExOEeeAapBXl-GW2w" name="PingPongIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_YLwbMExOEeeAapBXl-GW2w" client="_YKDyEExOEeeAapBXl-GW2w" supplier="_YLnRQExOEeeAapBXl-GW2w"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_akzWMExOEeeAapBXl-GW2w" operation="_akmh4ExOEeeAapBXl-GW2w"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_bV-UcExOEeeAapBXl-GW2w" operation="_bVz8YExOEeeAapBXl-GW2w"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_dBdl4ExOEeeAapBXl-GW2w" name="Pinger" classifierBehavior="_7eBO8ExOEeeAapBXl-GW2w" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_e-deEExOEeeAapBXl-GW2w" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_gCK90ExOEeeAapBXl-GW2w" name="pinger" type="_YKDyEExOEeeAapBXl-GW2w" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:id="_ww8oQExOEeeAapBXl-GW2w" name="i" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="__nPLkE1VEee3wOKK7wRcrg" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="__nb_4U1VEee3wOKK7wRcrg" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="__nb_4k1VEee3wOKK7wRcrg" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="__n9kUE1VEee3wOKK7wRcrg" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="__n-LYE1VEee3wOKK7wRcrg" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="__n-LYU1VEee3wOKK7wRcrg" name="Debug__event">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="__oK_sE1VEee3wOKK7wRcrg" name="Debug__SRO">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_7eBO8ExOEeeAapBXl-GW2w" name="PingerStateMachine" isReentrant="false">
        <region xmi:id="_7eS7wExOEeeAapBXl-GW2w" name="Region">
          <transition xmi:id="_7emdwExOEeeAapBXl-GW2w" name="Initial" source="__srFME1VEee3wOKK7wRcrg" target="_7ehlQExOEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_-mSyAExPEeeAapBXl-GW2w" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.show(&quot;leaving initial pseudo state of pinger\n&quot;);
pinger.ping().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_B4BBcExQEeeAapBXl-GW2w" name="onPong" source="__uKS8E1VEee3wOKK7wRcrg" target="_7ehlQExOEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ImedgExQEeeAapBXl-GW2w" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.show(&quot;pong message received.\n&quot;);
pinger.ping().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::onPong&quot;,(char *)&quot;Debug__Path__onPong&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="__tF78U1VEee3wOKK7wRcrg" name="Debug__Initial" source="__vtyIE1VEee3wOKK7wRcrg" target="__srFME1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__tHKEE1VEee3wOKK7wRcrg" name="Debug__Initial__3">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPong&quot;,&quot;PLAYING&quot;,&quot;pong&quot;,&quot;PingPong&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *) &quot;&quot;,(char *) &quot;&quot;,(char *)&quot;&quot;,(char *) &quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="__v1G4E1VEee3wOKK7wRcrg" name="ConnectionEstablished" port="__nPLkE1VEee3wOKK7wRcrg">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
            </trigger>
          </transition>
          <transition xmi:id="__tIYME1VEee3wOKK7wRcrg" name="Debug__Initial__S" guard="__tJmUU1VEee3wOKK7wRcrg" source="__srFME1VEee3wOKK7wRcrg" target="__s4gkU1VEee3wOKK7wRcrg">
            <ownedRule xmi:id="__tJmUU1VEee3wOKK7wRcrg" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="__tJmUE1VEee3wOKK7wRcrg" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo1&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__tK0cE1VEee3wOKK7wRcrg" name="Debug__Initial__S__5">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="__tMpoE1VEee3wOKK7wRcrg" name="Debug__Initial__E" source="__s_1UE1VEee3wOKK7wRcrg" target="_7ehlQExOEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__tMpoU1VEee3wOKK7wRcrg" name="Debug__Initial__E__6">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="__tPF4E1VEee3wOKK7wRcrg" name="Debug__Initial__dbg__varChange" source="__sxy4U1VEee3wOKK7wRcrg" target="__sxy4U1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__tPs8E1VEee3wOKK7wRcrg" name="Debug__Initial__dbg__varChange__8">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="__tPF4U1VEee3wOKK7wRcrg" name="Debug__MSG" port="__nPLkE1VEee3wOKK7wRcrg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="__tQUAE1VEee3wOKK7wRcrg" name="Debug__Initial__dbg__setBreakPoint" source="__sxy4U1VEee3wOKK7wRcrg" target="__sxy4U1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__tQ7EE1VEee3wOKK7wRcrg" name="Debug__Initial__dbg__setBreakPoint__9">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="__tQUAU1VEee3wOKK7wRcrg" name="Debug__MSG" port="__nPLkE1VEee3wOKK7wRcrg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="__tRiIE1VEee3wOKK7wRcrg" name="Debug__Initial__dbg__remBreakPoint" source="__sxy4U1VEee3wOKK7wRcrg" target="__sxy4U1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__tSJME1VEee3wOKK7wRcrg" name="Debug__Initial__dbg__remBreakPoint__10">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="__tRiIU1VEee3wOKK7wRcrg" name="Debug__MSG" port="__nPLkE1VEee3wOKK7wRcrg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="__tSwQE1VEee3wOKK7wRcrg" name="Debug__Initial__dbg__viewBreakPoints" source="__sxy4U1VEee3wOKK7wRcrg" target="__sxy4U1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__tTXUU1VEee3wOKK7wRcrg" name="Debug__Initial__dbg__viewBreakPoints__11">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="__tTXUE1VEee3wOKK7wRcrg" name="Debug__MSG" port="__nPLkE1VEee3wOKK7wRcrg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="__tT-YE1VEee3wOKK7wRcrg" name="Debug__Initial__dbg__dbgSetExecMode" source="__sxy4U1VEee3wOKK7wRcrg" target="__sxy4U1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__tT-Yk1VEee3wOKK7wRcrg" name="Debug__Initial__dbg__dbgSetExecMode__12">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="__tT-YU1VEee3wOKK7wRcrg" name="Debug__MSG" port="__nPLkE1VEee3wOKK7wRcrg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="__tUlcE1VEee3wOKK7wRcrg" name="Debug__Initial__dbg__dbgDeferMsg" source="__sxy4U1VEee3wOKK7wRcrg" target="__sxy4U1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__tVMgE1VEee3wOKK7wRcrg" name="Debug__Initial__dbg__dbgDeferMsg__13">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="__tUlcU1VEee3wOKK7wRcrg" name="Debug__MSG" port="_gCK90ExOEeeAapBXl-GW2w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="__um-4E1VEee3wOKK7wRcrg" name="Debug__onPong" source="_7ehlQExOEeeAapBXl-GW2w" target="__uKS8E1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__unl8E1VEee3wOKK7wRcrg" name="Debug__onPong__25">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__onPong&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;Debug__Path__onPong&quot;,(char *)&quot;&quot;);
</body>
            </effect>
            <trigger xmi:id="_DrVZMExQEeeAapBXl-GW2w" event="_bV-UcExOEeeAapBXl-GW2w" port="_gCK90ExOEeeAapBXl-GW2w"/>
          </transition>
          <transition xmi:id="__uqCME1VEee3wOKK7wRcrg" name="Debug__onPong__S" guard="__uqpQU1VEee3wOKK7wRcrg" source="__uKS8E1VEee3wOKK7wRcrg" target="__uaKkU1VEee3wOKK7wRcrg">
            <ownedRule xmi:id="__uqpQU1VEee3wOKK7wRcrg" name="Debug__GuardonPong">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="__uqpQE1VEee3wOKK7wRcrg" name="Debug__GuardonPong">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__urQUE1VEee3wOKK7wRcrg" name="Debug__onPong__S__27">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__onPong__S&quot;,(char *)&quot;Debug__Path__onPong&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="__utFgE1VEee3wOKK7wRcrg" name="Debug__onPong__E" source="__ugRMU1VEee3wOKK7wRcrg" target="_7ehlQExOEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__utskE1VEee3wOKK7wRcrg" name="Debug__onPong__E__28">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__onPong__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="__uvhwE1VEee3wOKK7wRcrg" name="Debug__onPong__dbg__varChange" source="__uRAoE1VEee3wOKK7wRcrg" target="__uRAoE1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__uvhwk1VEee3wOKK7wRcrg" name="Debug__onPong__dbg__varChange__30">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="__uvhwU1VEee3wOKK7wRcrg" name="Debug__MSG" port="__nPLkE1VEee3wOKK7wRcrg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="__uwv4E1VEee3wOKK7wRcrg" name="Debug__onPong__dbg__setBreakPoint" source="__uRAoE1VEee3wOKK7wRcrg" target="__uRAoE1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__uwv4k1VEee3wOKK7wRcrg" name="Debug__onPong__dbg__setBreakPoint__31">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="__uwv4U1VEee3wOKK7wRcrg" name="Debug__MSG" port="__nPLkE1VEee3wOKK7wRcrg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="__uxW8E1VEee3wOKK7wRcrg" name="Debug__onPong__dbg__remBreakPoint" source="__uRAoE1VEee3wOKK7wRcrg" target="__uRAoE1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__ux-AU1VEee3wOKK7wRcrg" name="Debug__onPong__dbg__remBreakPoint__32">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="__ux-AE1VEee3wOKK7wRcrg" name="Debug__MSG" port="__nPLkE1VEee3wOKK7wRcrg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="__uylEE1VEee3wOKK7wRcrg" name="Debug__onPong__dbg__viewBreakPoints" source="__uRAoE1VEee3wOKK7wRcrg" target="__uRAoE1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__uzMIE1VEee3wOKK7wRcrg" name="Debug__onPong__dbg__viewBreakPoints__33">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="__uylEU1VEee3wOKK7wRcrg" name="Debug__MSG" port="__nPLkE1VEee3wOKK7wRcrg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="__uzMIU1VEee3wOKK7wRcrg" name="Debug__onPong__dbg__dbgSetExecMode" source="__uRAoE1VEee3wOKK7wRcrg" target="__uRAoE1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__uzzME1VEee3wOKK7wRcrg" name="Debug__onPong__dbg__dbgSetExecMode__34">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="__uzMIk1VEee3wOKK7wRcrg" name="Debug__MSG" port="__nPLkE1VEee3wOKK7wRcrg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="__u0aQE1VEee3wOKK7wRcrg" name="Debug__onPong__dbg__dbgDeferMsg" source="__uRAoE1VEee3wOKK7wRcrg" target="__uRAoE1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__u1BUE1VEee3wOKK7wRcrg" name="Debug__onPong__dbg__dbgDeferMsg__35">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="__u0aQU1VEee3wOKK7wRcrg" name="Debug__MSG" port="_gCK90ExOEeeAapBXl-GW2w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="__v0f0E1VEee3wOKK7wRcrg" name="Debug__InitDebug" source="_7eXNMExOEeeAapBXl-GW2w" target="__vtyIE1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__v0f0U1VEee3wOKK7wRcrg" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_7eXNMExOEeeAapBXl-GW2w" name="Pseudo1"/>
          <subvertex xmi:type="uml:State" xmi:id="_7ehlQExOEeeAapBXl-GW2w" name="PLAYING">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_e3YJMExPEeeAapBXl-GW2w" name="Entry" isReentrant="false">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
log.show(&quot;Entering playing state of pinger\n&quot;);
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_gBgaAExPEeeAapBXl-GW2w" name="Exit" isReentrant="false">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
log.show(&quot;Leaving playing state of pinger\n&quot;);
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="__srFME1VEee3wOKK7wRcrg" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="__sxy4U1VEee3wOKK7wRcrg" name="Debug__C__Initial">
            <connectionPoint xmi:id="__s4gkU1VEee3wOKK7wRcrg" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="__s_1UE1VEee3wOKK7wRcrg" name="ex" kind="exitPoint"/>
            <region xmi:id="__sxy4k1VEee3wOKK7wRcrg" name="Region1">
              <transition xmi:id="__tiA0E1VEee3wOKK7wRcrg" name="Debug__init__trans__Initial" source="__s4gkU1VEee3wOKK7wRcrg" target="__tdvYU1VEee3wOKK7wRcrg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="__t_64E1VEee3wOKK7wRcrg" name="Debug__init__trans__Initial__18">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="__tiA0U1VEee3wOKK7wRcrg" name="Debug__Ac__Initial" source="__tdvYU1VEee3wOKK7wRcrg" target="__tfkkE1VEee3wOKK7wRcrg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="__tin4U1VEee3wOKK7wRcrg" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;leaving initial pseudo state of pinger\n&quot;);
pinger.ping().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="__tin4E1VEee3wOKK7wRcrg" name="Debug__Exec" port="__nPLkE1VEee3wOKK7wRcrg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="__tjO8E1VEee3wOKK7wRcrg" name="Debug__En__PLAYING" source="__tfkkE1VEee3wOKK7wRcrg" target="__tgysE1VEee3wOKK7wRcrg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="__tj2AE1VEee3wOKK7wRcrg" name="Entry" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Entering playing state of pinger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="__tjO8U1VEee3wOKK7wRcrg" name="Debug__Exec" port="__nPLkE1VEee3wOKK7wRcrg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="__tkdEE1VEee3wOKK7wRcrg" name="Debug__end__trans__Initial" source="__tgysE1VEee3wOKK7wRcrg" target="__s_1UE1VEee3wOKK7wRcrg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="__uFacE1VEee3wOKK7wRcrg" name="Debug__end__trans__Initial__22">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="__tkdEU1VEee3wOKK7wRcrg" name="Debug__Exec" port="__nPLkE1VEee3wOKK7wRcrg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="__tdvYU1VEee3wOKK7wRcrg" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="__teWcE1VEee3wOKK7wRcrg" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="__trx0E1VEee3wOKK7wRcrg" name="Debug__B__Ac__Initial__14">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="__tfkkE1VEee3wOKK7wRcrg" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="__tfkkU1VEee3wOKK7wRcrg" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="__t07wE1VEee3wOKK7wRcrg" name="Debug__A__Ac__Initial__15">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="__tgysE1VEee3wOKK7wRcrg" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="__tgysU1VEee3wOKK7wRcrg" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="__t9eoE1VEee3wOKK7wRcrg" name="Debug__A__En__Initial__16">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="__uKS8E1VEee3wOKK7wRcrg" name="Debug__Path__onPong" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="__uRAoE1VEee3wOKK7wRcrg" name="Debug__C__onPong">
            <connectionPoint xmi:id="__uaKkU1VEee3wOKK7wRcrg" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="__ugRMU1VEee3wOKK7wRcrg" name="ex" kind="exitPoint"/>
            <region xmi:id="__uRAoU1VEee3wOKK7wRcrg" name="Region1">
              <transition xmi:id="__vCcsE1VEee3wOKK7wRcrg" name="Debug__init__trans__onPong" source="__uaKkU1VEee3wOKK7wRcrg" target="__u89IU1VEee3wOKK7wRcrg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="__vlPQE1VEee3wOKK7wRcrg" name="Debug__init__trans__onPong__41">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__init__trans__onPong&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="__vCcsU1VEee3wOKK7wRcrg" name="Debug__Ex__PLAYING" source="__u89IU1VEee3wOKK7wRcrg" target="__u-LQE1VEee3wOKK7wRcrg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="__vDDwE1VEee3wOKK7wRcrg" name="Exit" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Leaving playing state of pinger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ac__onPong&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="__vCcsk1VEee3wOKK7wRcrg" name="Debug__Exec" port="__nPLkE1VEee3wOKK7wRcrg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="__vDDwU1VEee3wOKK7wRcrg" name="Debug__AC__onPong" source="__u-LQE1VEee3wOKK7wRcrg" target="__vAAcE1VEee3wOKK7wRcrg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="__vDq0U1VEee3wOKK7wRcrg" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;pong message received.\n&quot;);
pinger.ping().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__AC__onPong&quot;,(char *)&quot;Debug__B__Ac__onPong&quot;,(char *)&quot;Debug__A__Ac__onPong&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="__vDq0E1VEee3wOKK7wRcrg" name="Debug__Exec" port="__nPLkE1VEee3wOKK7wRcrg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="__vDq0k1VEee3wOKK7wRcrg" name="Debug__En__PLAYING" source="__vAAcE1VEee3wOKK7wRcrg" target="__vBOkE1VEee3wOKK7wRcrg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="__vER4U1VEee3wOKK7wRcrg" name="Entry" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Entering playing state of pinger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__onPong&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="__vER4E1VEee3wOKK7wRcrg" name="Debug__Exec" port="__nPLkE1VEee3wOKK7wRcrg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="__vER4k1VEee3wOKK7wRcrg" name="Debug__end__trans__onPong" source="__vBOkE1VEee3wOKK7wRcrg" target="__ugRMU1VEee3wOKK7wRcrg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="__vqu0E1VEee3wOKK7wRcrg" name="Debug__end__trans__onPong__46">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__end__trans__onPong&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="__vER401VEee3wOKK7wRcrg" name="Debug__Exec" port="__nPLkE1VEee3wOKK7wRcrg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="__u89IU1VEee3wOKK7wRcrg" name="Debug__B__Ex__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="__u9kME1VEee3wOKK7wRcrg" name="Debug__B__Ex__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="__vK_kE1VEee3wOKK7wRcrg" name="Debug__B__Ex__PLAYING__36">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="__u-LQE1VEee3wOKK7wRcrg" name="Debug__B__Ac__onPong">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="__u-yUE1VEee3wOKK7wRcrg" name="Debug__B__Ac__onPong">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;onPong&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="__vSUUE1VEee3wOKK7wRcrg" name="Debug__B__Ac__onPong__37">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="__vAAcE1VEee3wOKK7wRcrg" name="Debug__A__Ac__onPong">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="__vAAcU1VEee3wOKK7wRcrg" name="Debug__A__Ac__onPong">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;onPong&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__A__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="__vaQIU1VEee3wOKK7wRcrg" name="Debug__A__Ac__onPong__38">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__A__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="__vBOkE1VEee3wOKK7wRcrg" name="Debug__A__En__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="__vB1oE1VEee3wOKK7wRcrg" name="Debug__A__En__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="__vcsYE1VEee3wOKK7wRcrg" name="Debug__A__En__PLAYING__39">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="__vtyIE1VEee3wOKK7wRcrg" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="__nKTEU1VEee3wOKK7wRcrg" name="Debug__recallAllMsg" specification="__nKTEE1VEee3wOKK7wRcrg">
        <language>C++</language>
        <body>pinger.recallAll();
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="__n1ogU1VEee3wOKK7wRcrg" name="Debug__variablesViewMethod" specification="__n1ogE1VEee3wOKK7wRcrg">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;i,&quot;);
tempS.append(&quot;Integer,&quot;);
if(i!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,i);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="__n8WMU1VEee3wOKK7wRcrg" name="Debug__variablesChange" specification="__n4EwE1VEee3wOKK7wRcrg">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;i&quot;==tempVarName){
    i=atoi(varValue);
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="__p_koU1VEee3wOKK7wRcrg" name="Debug__sendEvent" specification="__o28ME1VEee3wOKK7wRcrg">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="__nKTEE1VEee3wOKK7wRcrg" name="Debug__recallAllMsg" visibility="private" method="__nKTEU1VEee3wOKK7wRcrg"/>
      <ownedOperation xmi:id="__n1ogE1VEee3wOKK7wRcrg" name="Debug__variablesView" visibility="private" method="__n1ogU1VEee3wOKK7wRcrg"/>
      <ownedOperation xmi:id="__n4EwE1VEee3wOKK7wRcrg" name="Debug__variablesChange" visibility="private" method="__n8WMU1VEee3wOKK7wRcrg">
        <ownedParameter xmi:id="__n5S4E1VEee3wOKK7wRcrg" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="__n558E1VEee3wOKK7wRcrg" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="__n8WME1VEee3wOKK7wRcrg" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="__o28ME1VEee3wOKK7wRcrg" name="Debug__sendEvent" visibility="private" method="__p_koU1VEee3wOKK7wRcrg">
        <ownedParameter xmi:id="__o3jQE1VEee3wOKK7wRcrg" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="__pFlsE1VEee3wOKK7wRcrg" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="__pUPME1VEee3wOKK7wRcrg" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="__phDgE1VEee3wOKK7wRcrg" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="__phqkE1VEee3wOKK7wRcrg" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="__pue4E1VEee3wOKK7wRcrg" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="__p-WgE1VEee3wOKK7wRcrg" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="__p-9kE1VEee3wOKK7wRcrg" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="__p-9kU1VEee3wOKK7wRcrg" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="__p_koE1VEee3wOKK7wRcrg" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_irESsExOEeeAapBXl-GW2w" name="Ponger" classifierBehavior="_P8x8sExQEeeAapBXl-GW2w" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_j9fj4ExOEeeAapBXl-GW2w" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_kypqQExOEeeAapBXl-GW2w" name="ponger" type="_YKDyEExOEeeAapBXl-GW2w" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:id="_4p-aAExOEeeAapBXl-GW2w" name="j" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="__qGSUE1VEee3wOKK7wRcrg" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="__qNAAU1VEee3wOKK7wRcrg" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="__qNnEE1VEee3wOKK7wRcrg" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="__qkMYE1VEee3wOKK7wRcrg" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="__qkzcE1VEee3wOKK7wRcrg" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="__qkzcU1VEee3wOKK7wRcrg" name="Debug__event">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="__qxnwE1VEee3wOKK7wRcrg" name="Debug__SRO">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_P8x8sExQEeeAapBXl-GW2w" name="PongerStateMachine" isReentrant="false">
        <region xmi:id="_P9XykExQEeeAapBXl-GW2w" name="Region">
          <transition xmi:id="_P9qGcExQEeeAapBXl-GW2w" name="Initial" source="__y96cE1VEee3wOKK7wRcrg" target="_P9jYwExQEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__z2rQE1VEee3wOKK7wRcrg" name="Initial__95">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_ZUZMUExQEeeAapBXl-GW2w" name="onPing" source="__wAGAE1VEee3wOKK7wRcrg" target="_P9jYwExQEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_q3J4cExQEeeAapBXl-GW2w" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.show(&quot;ping message received.\n&quot;);
ponger.pong().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::onPing&quot;,(char *)&quot;Debug__Path__onPing&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="__wbj0E1VEee3wOKK7wRcrg" name="Debug__onPing" source="_P9jYwExQEeeAapBXl-GW2w" target="__wAGAE1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__wcK4E1VEee3wOKK7wRcrg" name="Debug__onPing__49">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__onPing&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;Debug__Path__onPing&quot;,(char *)&quot;&quot;);
</body>
            </effect>
            <trigger xmi:id="_b3gpUExQEeeAapBXl-GW2w" event="_akzWMExOEeeAapBXl-GW2w" port="_kypqQExOEeeAapBXl-GW2w"/>
          </transition>
          <transition xmi:id="__wdZAE1VEee3wOKK7wRcrg" name="Debug__onPing__S" guard="__weAEU1VEee3wOKK7wRcrg" source="__wAGAE1VEee3wOKK7wRcrg" target="__wM6UE1VEee3wOKK7wRcrg">
            <ownedRule xmi:id="__weAEU1VEee3wOKK7wRcrg" name="Debug__GuardonPing">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="__weAEE1VEee3wOKK7wRcrg" name="Debug__GuardonPing">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__wenIE1VEee3wOKK7wRcrg" name="Debug__onPing__S__51">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__onPing__S&quot;,(char *)&quot;Debug__Path__onPing&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="__wf1QE1VEee3wOKK7wRcrg" name="Debug__onPing__E" source="__wTA8E1VEee3wOKK7wRcrg" target="_P9jYwExQEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__wf1QU1VEee3wOKK7wRcrg" name="Debug__onPing__E__52">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__onPing__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="__whDYE1VEee3wOKK7wRcrg" name="Debug__onPing__dbg__varChange" source="__wGMoU1VEee3wOKK7wRcrg" target="__wGMoU1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__whqcU1VEee3wOKK7wRcrg" name="Debug__onPing__dbg__varChange__54">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="__whqcE1VEee3wOKK7wRcrg" name="Debug__MSG" port="__qGSUE1VEee3wOKK7wRcrg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="__wiRgE1VEee3wOKK7wRcrg" name="Debug__onPing__dbg__setBreakPoint" source="__wGMoU1VEee3wOKK7wRcrg" target="__wGMoU1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__wiRgk1VEee3wOKK7wRcrg" name="Debug__onPing__dbg__setBreakPoint__55">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="__wiRgU1VEee3wOKK7wRcrg" name="Debug__MSG" port="__qGSUE1VEee3wOKK7wRcrg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="__wi4kE1VEee3wOKK7wRcrg" name="Debug__onPing__dbg__remBreakPoint" source="__wGMoU1VEee3wOKK7wRcrg" target="__wGMoU1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__wi4kk1VEee3wOKK7wRcrg" name="Debug__onPing__dbg__remBreakPoint__56">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="__wi4kU1VEee3wOKK7wRcrg" name="Debug__MSG" port="__qGSUE1VEee3wOKK7wRcrg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="__wjfoE1VEee3wOKK7wRcrg" name="Debug__onPing__dbg__viewBreakPoints" source="__wGMoU1VEee3wOKK7wRcrg" target="__wGMoU1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__wkGsE1VEee3wOKK7wRcrg" name="Debug__onPing__dbg__viewBreakPoints__57">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="__wjfoU1VEee3wOKK7wRcrg" name="Debug__MSG" port="__qGSUE1VEee3wOKK7wRcrg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="__wkGsU1VEee3wOKK7wRcrg" name="Debug__onPing__dbg__dbgSetExecMode" source="__wGMoU1VEee3wOKK7wRcrg" target="__wGMoU1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__wkGs01VEee3wOKK7wRcrg" name="Debug__onPing__dbg__dbgSetExecMode__58">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="__wkGsk1VEee3wOKK7wRcrg" name="Debug__MSG" port="__qGSUE1VEee3wOKK7wRcrg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="__wktwE1VEee3wOKK7wRcrg" name="Debug__onPing__dbg__dbgDeferMsg" source="__wGMoU1VEee3wOKK7wRcrg" target="__wGMoU1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__wktwk1VEee3wOKK7wRcrg" name="Debug__onPing__dbg__dbgDeferMsg__59">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="__wktwU1VEee3wOKK7wRcrg" name="Debug__MSG" port="_kypqQExOEeeAapBXl-GW2w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="__zSDgE1VEee3wOKK7wRcrg" name="Debug__Initial" source="__z4gcE1VEee3wOKK7wRcrg" target="__y96cE1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__zSDgU1VEee3wOKK7wRcrg" name="Debug__Initial__73">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPong&quot;,&quot;PLAYING&quot;,&quot;pong&quot;,&quot;PingPong&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPing&quot;,&quot;PLAYING&quot;,&quot;ping&quot;,&quot;PingPong&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *) &quot;&quot;,(char *) &quot;&quot;,(char *)&quot;&quot;,(char *) &quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="__z-nEE1VEee3wOKK7wRcrg" name="ConnectionEstablished" port="__qGSUE1VEee3wOKK7wRcrg">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
            </trigger>
          </transition>
          <transition xmi:id="__zTRoE1VEee3wOKK7wRcrg" name="Debug__Initial__S" guard="__zTRok1VEee3wOKK7wRcrg" source="__y96cE1VEee3wOKK7wRcrg" target="__zHrcU1VEee3wOKK7wRcrg">
            <ownedRule xmi:id="__zTRok1VEee3wOKK7wRcrg" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="__zTRoU1VEee3wOKK7wRcrg" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo2&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__zT4sE1VEee3wOKK7wRcrg" name="Debug__Initial__S__75">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="__zUfwE1VEee3wOKK7wRcrg" name="Debug__Initial__E" source="__zMj8U1VEee3wOKK7wRcrg" target="_P9jYwExQEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__zVG0E1VEee3wOKK7wRcrg" name="Debug__Initial__E__76">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="__zVt4E1VEee3wOKK7wRcrg" name="Debug__Initial__dbg__varChange" source="__zCy8E1VEee3wOKK7wRcrg" target="__zCy8E1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__zWU8U1VEee3wOKK7wRcrg" name="Debug__Initial__dbg__varChange__78">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="__zWU8E1VEee3wOKK7wRcrg" name="Debug__MSG" port="__qGSUE1VEee3wOKK7wRcrg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="__zWU8k1VEee3wOKK7wRcrg" name="Debug__Initial__dbg__setBreakPoint" source="__zCy8E1VEee3wOKK7wRcrg" target="__zCy8E1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__zW8AU1VEee3wOKK7wRcrg" name="Debug__Initial__dbg__setBreakPoint__79">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="__zW8AE1VEee3wOKK7wRcrg" name="Debug__MSG" port="__qGSUE1VEee3wOKK7wRcrg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="__zW8Ak1VEee3wOKK7wRcrg" name="Debug__Initial__dbg__remBreakPoint" source="__zCy8E1VEee3wOKK7wRcrg" target="__zCy8E1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__zXjEE1VEee3wOKK7wRcrg" name="Debug__Initial__dbg__remBreakPoint__80">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="__zW8A01VEee3wOKK7wRcrg" name="Debug__MSG" port="__qGSUE1VEee3wOKK7wRcrg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="__zXjEU1VEee3wOKK7wRcrg" name="Debug__Initial__dbg__viewBreakPoints" source="__zCy8E1VEee3wOKK7wRcrg" target="__zCy8E1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__zYKIU1VEee3wOKK7wRcrg" name="Debug__Initial__dbg__viewBreakPoints__81">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="__zYKIE1VEee3wOKK7wRcrg" name="Debug__MSG" port="__qGSUE1VEee3wOKK7wRcrg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="__zYKIk1VEee3wOKK7wRcrg" name="Debug__Initial__dbg__dbgSetExecMode" source="__zCy8E1VEee3wOKK7wRcrg" target="__zCy8E1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__zYKJE1VEee3wOKK7wRcrg" name="Debug__Initial__dbg__dbgSetExecMode__82">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="__zYKI01VEee3wOKK7wRcrg" name="Debug__MSG" port="__qGSUE1VEee3wOKK7wRcrg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="__zYxME1VEee3wOKK7wRcrg" name="Debug__Initial__dbg__dbgDeferMsg" source="__zCy8E1VEee3wOKK7wRcrg" target="__zCy8E1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__zYxMk1VEee3wOKK7wRcrg" name="Debug__Initial__dbg__dbgDeferMsg__83">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="__zYxMU1VEee3wOKK7wRcrg" name="Debug__MSG" port="_kypqQExOEeeAapBXl-GW2w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="__z9Y8U1VEee3wOKK7wRcrg" name="Debug__InitDebug" source="_P9fHUExQEeeAapBXl-GW2w" target="__z4gcE1VEee3wOKK7wRcrg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="__z-AAE1VEee3wOKK7wRcrg" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_P9fHUExQEeeAapBXl-GW2w" name="Pseudo2"/>
          <subvertex xmi:type="uml:State" xmi:id="_P9jYwExQEeeAapBXl-GW2w" name="PLAYING">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_fs-fAExQEeeAapBXl-GW2w" name="Entry" isReentrant="false">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
log.show(&quot;Entering playing state of ponger\n&quot;);
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_j-wdQExQEeeAapBXl-GW2w" name="Exit" isReentrant="false">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
log.show(&quot;Leaving playing state of ponger\n&quot;);
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="__wAGAE1VEee3wOKK7wRcrg" name="Debug__Path__onPing" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="__wGMoU1VEee3wOKK7wRcrg" name="Debug__C__onPing">
            <connectionPoint xmi:id="__wM6UE1VEee3wOKK7wRcrg" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="__wTA8E1VEee3wOKK7wRcrg" name="ex" kind="exitPoint"/>
            <region xmi:id="__wGMok1VEee3wOKK7wRcrg" name="Region1">
              <transition xmi:id="__wuewE1VEee3wOKK7wRcrg" name="Debug__init__trans__onPing" source="__wM6UE1VEee3wOKK7wRcrg" target="__wrbcE1VEee3wOKK7wRcrg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="__xOOAE1VEee3wOKK7wRcrg" name="Debug__init__trans__onPing__65">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__init__trans__onPing&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="__wuewU1VEee3wOKK7wRcrg" name="Debug__Ex__PLAYING" source="__wrbcE1VEee3wOKK7wRcrg" target="__wsCgE1VEee3wOKK7wRcrg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="__wvF0E1VEee3wOKK7wRcrg" name="Exit" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Leaving playing state of ponger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ac__onPing&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="__wuewk1VEee3wOKK7wRcrg" name="Debug__Exec" port="__qGSUE1VEee3wOKK7wRcrg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="__wvF0U1VEee3wOKK7wRcrg" name="Debug__AC__onPing" source="__wsCgE1VEee3wOKK7wRcrg" target="__wtQoE1VEee3wOKK7wRcrg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="__wvF001VEee3wOKK7wRcrg" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;ping message received.\n&quot;);
ponger.pong().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__AC__onPing&quot;,(char *)&quot;Debug__B__Ac__onPing&quot;,(char *)&quot;Debug__A__Ac__onPing&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="__wvF0k1VEee3wOKK7wRcrg" name="Debug__Exec" port="__qGSUE1VEee3wOKK7wRcrg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="__wvs4E1VEee3wOKK7wRcrg" name="Debug__En__PLAYING" source="__wtQoE1VEee3wOKK7wRcrg" target="__wt3sE1VEee3wOKK7wRcrg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="__wvs4k1VEee3wOKK7wRcrg" name="Entry" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Entering playing state of ponger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__onPing&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="__wvs4U1VEee3wOKK7wRcrg" name="Debug__Exec" port="__qGSUE1VEee3wOKK7wRcrg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="__wwT8E1VEee3wOKK7wRcrg" name="Debug__end__trans__onPing" source="__wt3sE1VEee3wOKK7wRcrg" target="__wTA8E1VEee3wOKK7wRcrg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="__xRRUE1VEee3wOKK7wRcrg" name="Debug__end__trans__onPing__70">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__end__trans__onPing&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="__wwT8U1VEee3wOKK7wRcrg" name="Debug__Exec" port="__qGSUE1VEee3wOKK7wRcrg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="__wrbcE1VEee3wOKK7wRcrg" name="Debug__B__Ex__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="__wrbcU1VEee3wOKK7wRcrg" name="Debug__B__Ex__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="__w1zgU1VEee3wOKK7wRcrg" name="Debug__B__Ex__PLAYING__60">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="__wsCgE1VEee3wOKK7wRcrg" name="Debug__B__Ac__onPing">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="__wsCgU1VEee3wOKK7wRcrg" name="Debug__B__Ac__onPing">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;onPing&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="__w8hMU1VEee3wOKK7wRcrg" name="Debug__B__Ac__onPing__61">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="__wtQoE1VEee3wOKK7wRcrg" name="Debug__A__Ac__onPing">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="__wtQoU1VEee3wOKK7wRcrg" name="Debug__A__Ac__onPing">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;onPing&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__A__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="__xD18E1VEee3wOKK7wRcrg" name="Debug__A__Ac__onPing__62">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__A__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="__wt3sE1VEee3wOKK7wRcrg" name="Debug__A__En__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="__wt3sU1VEee3wOKK7wRcrg" name="Debug__A__En__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="__xFrIE1VEee3wOKK7wRcrg" name="Debug__A__En__PLAYING__63">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="__y96cE1VEee3wOKK7wRcrg" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="__zCy8E1VEee3wOKK7wRcrg" name="Debug__C__Initial">
            <connectionPoint xmi:id="__zHrcU1VEee3wOKK7wRcrg" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="__zMj8U1VEee3wOKK7wRcrg" name="ex" kind="exitPoint"/>
            <region xmi:id="__zCy8U1VEee3wOKK7wRcrg" name="Region1">
              <transition xmi:id="__zgF8E1VEee3wOKK7wRcrg" name="Debug__init__trans__Initial" source="__zHrcU1VEee3wOKK7wRcrg" target="__zeQwU1VEee3wOKK7wRcrg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="__zzA4E1VEee3wOKK7wRcrg" name="Debug__init__trans__Initial__88">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="__zgF8U1VEee3wOKK7wRcrg" name="Debug__Ac__Initial" source="__zeQwU1VEee3wOKK7wRcrg" target="__ze30E1VEee3wOKK7wRcrg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="__z0PAE1VEee3wOKK7wRcrg" name="Debug__Ac__Initial__90">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="__zgF8k1VEee3wOKK7wRcrg" name="Debug__Exec" port="__qGSUE1VEee3wOKK7wRcrg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="__zgF801VEee3wOKK7wRcrg" name="Debug__En__PLAYING" source="__ze30E1VEee3wOKK7wRcrg" target="__zfe4E1VEee3wOKK7wRcrg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="__zgtAE1VEee3wOKK7wRcrg" name="Entry" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Entering playing state of ponger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="__zgF9E1VEee3wOKK7wRcrg" name="Debug__Exec" port="__qGSUE1VEee3wOKK7wRcrg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="__zgtAU1VEee3wOKK7wRcrg" name="Debug__end__trans__Initial" source="__zfe4E1VEee3wOKK7wRcrg" target="__zMj8U1VEee3wOKK7wRcrg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="__z1dIE1VEee3wOKK7wRcrg" name="Debug__end__trans__Initial__93">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="__zgtAk1VEee3wOKK7wRcrg" name="Debug__Exec" port="__qGSUE1VEee3wOKK7wRcrg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="__zeQwU1VEee3wOKK7wRcrg" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="__zeQwk1VEee3wOKK7wRcrg" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="__zllgU1VEee3wOKK7wRcrg" name="Debug__B__Ac__Initial__84">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="__ze30E1VEee3wOKK7wRcrg" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="__ze30U1VEee3wOKK7wRcrg" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="__zrsIU1VEee3wOKK7wRcrg" name="Debug__A__Ac__Initial__85">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="__zfe4E1VEee3wOKK7wRcrg" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="__zfe4U1VEee3wOKK7wRcrg" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="__zxywU1VEee3wOKK7wRcrg" name="Debug__A__En__Initial__86">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="__z4gcE1VEee3wOKK7wRcrg" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="__qFEMU1VEee3wOKK7wRcrg" name="Debug__recallAllMsg" specification="__qFEME1VEee3wOKK7wRcrg">
        <language>C++</language>
        <body>ponger.recallAll();
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="__qes0U1VEee3wOKK7wRcrg" name="Debug__variablesViewMethod" specification="__qes0E1VEee3wOKK7wRcrg">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;j,&quot;);
tempS.append(&quot;Integer,&quot;);
if(j!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,j);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="__qjlUE1VEee3wOKK7wRcrg" name="Debug__variablesChange" specification="__qhwIE1VEee3wOKK7wRcrg">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;j&quot;==tempVarName){
    j=atoi(varValue);
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="__sh7QU1VEee3wOKK7wRcrg" name="Debug__sendEvent" specification="__rdkQE1VEee3wOKK7wRcrg">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="__qFEME1VEee3wOKK7wRcrg" name="Debug__recallAllMsg" visibility="private" method="__qFEMU1VEee3wOKK7wRcrg"/>
      <ownedOperation xmi:id="__qes0E1VEee3wOKK7wRcrg" name="Debug__variablesView" visibility="private" method="__qes0U1VEee3wOKK7wRcrg"/>
      <ownedOperation xmi:id="__qhwIE1VEee3wOKK7wRcrg" name="Debug__variablesChange" visibility="private" method="__qjlUE1VEee3wOKK7wRcrg">
        <ownedParameter xmi:id="__qiXME1VEee3wOKK7wRcrg" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="__qi-QE1VEee3wOKK7wRcrg" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="__qi-QU1VEee3wOKK7wRcrg" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="__rdkQE1VEee3wOKK7wRcrg" name="Debug__sendEvent" visibility="private" method="__sh7QU1VEee3wOKK7wRcrg">
        <ownedParameter xmi:id="__reLUE1VEee3wOKK7wRcrg" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="__rrmsE1VEee3wOKK7wRcrg" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="__r5CEE1VEee3wOKK7wRcrg" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="__sF2YE1VEee3wOKK7wRcrg" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="__sGdcE1VEee3wOKK7wRcrg" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="__sTRwE1VEee3wOKK7wRcrg" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="__sgGEE1VEee3wOKK7wRcrg" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="__sgtIE1VEee3wOKK7wRcrg" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="__shUME1VEee3wOKK7wRcrg" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="__sh7QE1VEee3wOKK7wRcrg" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_n15_4ExOEeeAapBXl-GW2w" name="Top" isActive="true">
      <ownedAttribute xmi:id="_rrH98ExOEeeAapBXl-GW2w" name="pinger" visibility="protected" type="_dBdl4ExOEeeAapBXl-GW2w" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_sWX6YExOEeeAapBXl-GW2w" name="ponger" visibility="protected" type="_irESsExOEeeAapBXl-GW2w" isOrdered="true" aggregation="composite"/>
      <ownedConnector xmi:id="_udBd0ExOEeeAapBXl-GW2w" name="RTConnector1">
        <end xmi:id="_udFvQExOEeeAapBXl-GW2w" partWithPort="_rrH98ExOEeeAapBXl-GW2w" role="_gCK90ExOEeeAapBXl-GW2w"/>
        <end xmi:id="_udGWUExOEeeAapBXl-GW2w" partWithPort="_sWX6YExOEeeAapBXl-GW2w" role="_kypqQExOEeeAapBXl-GW2w"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="__iX5sE1VEee3wOKK7wRcrg" name="Debug__Top">
      <ownedAttribute xmi:id="__mMCsE1VEee3wOKK7wRcrg" name="Debug__Gateway">
        <type xmi:type="uml:Class" href="../CommGateWay/model.uml#_XIyCcAdxEeadtKuU2t6fMg"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="__mdvgE1VEee3wOKK7wRcrg" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="__mdvgU1VEee3wOKK7wRcrg" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="__mhZ4E1VEee3wOKK7wRcrg" name="Debug__Top" type="_n15_4ExOEeeAapBXl-GW2w">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="__msZAU1VEee3wOKK7wRcrg" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="__mtAEE1VEee3wOKK7wRcrg" value="1"/>
      </ownedAttribute>
    </packagedElement>
    <profileApplication xmi:id="_MUbn4ExOEeeAapBXl-GW2w">
      <eAnnotations xmi:id="_MUddEExOEeeAapBXl-GW2w" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:id="_SJ7boExOEeeAapBXl-GW2w">
      <eAnnotations xmi:id="_SJ8pwExOEeeAapBXl-GW2w" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UMLRT_CPP/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
    <profileApplication xmi:id="_UV8AMExOEeeAapBXl-GW2w">
      <eAnnotations xmi:id="_UV8nQExOEeeAapBXl-GW2w" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:ProtocolContainer xmi:id="_YKnywExOEeeAapBXl-GW2w" base_Package="_YKTpsExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTMessageSet xmi:id="_YLO2wExOEeeAapBXl-GW2w" base_Interface="_YLFFwExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTMessageSet xmi:id="_YLk1AExOEeeAapBXl-GW2w" base_Interface="_YLbrEExOEeeAapBXl-GW2w" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_YLt-8ExOEeeAapBXl-GW2w" base_Interface="_YLnRQExOEeeAapBXl-GW2w" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_YLxCQExOEeeAapBXl-GW2w" base_Collaboration="_YKDyEExOEeeAapBXl-GW2w"/>
  <UMLRealTime:Capsule xmi:id="_dCzpsExOEeeAapBXl-GW2w" base_Class="_dBdl4ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTPort xmi:id="_e-suoExOEeeAapBXl-GW2w" isWired="false" base_Port="_e-deEExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTPort xmi:id="_gCa1cExOEeeAapBXl-GW2w" base_Port="_gCK90ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:Capsule xmi:id="_irM1kExOEeeAapBXl-GW2w" base_Class="_irESsExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTPort xmi:id="_j9j1UExOEeeAapBXl-GW2w" isWired="false" base_Port="_j9fj4ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTPort xmi:id="_kyvJ0ExOEeeAapBXl-GW2w" base_Port="_kypqQExOEeeAapBXl-GW2w"/>
  <UMLRealTime:Capsule xmi:id="_n2EX8ExOEeeAapBXl-GW2w" base_Class="_n15_4ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:CapsulePart xmi:id="_rrLoUExOEeeAapBXl-GW2w" base_Property="_rrH98ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:CapsulePart xmi:id="_sWcy4ExOEeeAapBXl-GW2w" base_Property="_sWX6YExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTConnector xmi:id="_udG9YExOEeeAapBXl-GW2w" base_Connector="_udBd0ExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_7ecswExOEeeAapBXl-GW2w" base_Pseudostate="_7eXNMExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTState xmi:id="_7ekokExOEeeAapBXl-GW2w" base_State="_7ehlQExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTRegion xmi:id="_7eoS8ExOEeeAapBXl-GW2w" base_Region="_7eS7wExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_7e4KkExOEeeAapBXl-GW2w" base_StateMachine="_7eBO8ExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_P9hjkExQEeeAapBXl-GW2w" base_Pseudostate="_P9fHUExQEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTState xmi:id="_P9pfYExQEeeAapBXl-GW2w" base_State="_P9jYwExQEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTRegion xmi:id="_P9qtgExQEeeAapBXl-GW2w" base_Region="_P9XykExQEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_P9wNEExQEeeAapBXl-GW2w" base_StateMachine="_P8x8sExQEeeAapBXl-GW2w"/>
  <UMLRealTime:Capsule xmi:id="__lyaEE1VEee3wOKK7wRcrg" base_Class="__iX5sE1VEee3wOKK7wRcrg"/>
  <UMLRealTime:CapsulePart xmi:id="__mdIcE1VEee3wOKK7wRcrg" base_Property="__mMCsE1VEee3wOKK7wRcrg"/>
  <UMLRealTime:CapsulePart xmi:id="__msZAE1VEee3wOKK7wRcrg" base_Property="__mhZ4E1VEee3wOKK7wRcrg"/>
  <UMLRealTime:RTPort xmi:id="__nb_4E1VEee3wOKK7wRcrg" isNotification="true" isWired="false" base_Port="__nPLkE1VEee3wOKK7wRcrg"/>
  <RTCppProperties:AttributeProperties xmi:id="__oE5EE1VEee3wOKK7wRcrg" type="debugEvents::Event" base_Property="__n-LYU1VEee3wOKK7wRcrg"/>
  <RTCppProperties:AttributeProperties xmi:id="__oRtYE1VEee3wOKK7wRcrg" type="SROManager" base_Property="__oK_sE1VEee3wOKK7wRcrg"/>
  <RTCppProperties:CapsuleProperties xmi:id="__ofIwE1VEee3wOKK7wRcrg" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_dBdl4ExOEeeAapBXl-GW2w"/>
  <RTCppProperties:ParameterProperties xmi:id="__o_fEE1VEee3wOKK7wRcrg" type="debugEvents::EVENTSOURCEKIND" base_Parameter="__o3jQE1VEee3wOKK7wRcrg"/>
  <RTCppProperties:ParameterProperties xmi:id="__pM6cE1VEee3wOKK7wRcrg" type="debugEvents::EVENTTYPE" base_Parameter="__pFlsE1VEee3wOKK7wRcrg"/>
  <RTCppProperties:ParameterProperties xmi:id="__pa84E1VEee3wOKK7wRcrg" type="const char *" base_Parameter="__pUPME1VEee3wOKK7wRcrg"/>
  <RTCppProperties:ParameterProperties xmi:id="__po_UE1VEee3wOKK7wRcrg" type="const char *" base_Parameter="__phqkE1VEee3wOKK7wRcrg"/>
  <RTCppProperties:ParameterProperties xmi:id="__p1MkE1VEee3wOKK7wRcrg" type="const char *" base_Parameter="__pue4E1VEee3wOKK7wRcrg"/>
  <UMLRealTime:RTPort xmi:id="__qNAAE1VEee3wOKK7wRcrg" isNotification="true" isWired="false" base_Port="__qGSUE1VEee3wOKK7wRcrg"/>
  <RTCppProperties:AttributeProperties xmi:id="__qsIME1VEee3wOKK7wRcrg" type="debugEvents::Event" base_Property="__qkzcU1VEee3wOKK7wRcrg"/>
  <RTCppProperties:AttributeProperties xmi:id="__q4VcE1VEee3wOKK7wRcrg" type="SROManager" base_Property="__qxnwE1VEee3wOKK7wRcrg"/>
  <RTCppProperties:CapsuleProperties xmi:id="__rGX4E1VEee3wOKK7wRcrg" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_irESsExOEeeAapBXl-GW2w"/>
  <RTCppProperties:ParameterProperties xmi:id="__rk5AE1VEee3wOKK7wRcrg" type="debugEvents::EVENTSOURCEKIND" base_Parameter="__reLUE1VEee3wOKK7wRcrg"/>
  <RTCppProperties:ParameterProperties xmi:id="__ry7cE1VEee3wOKK7wRcrg" type="debugEvents::EVENTTYPE" base_Parameter="__rrmsE1VEee3wOKK7wRcrg"/>
  <RTCppProperties:ParameterProperties xmi:id="__r_vwE1VEee3wOKK7wRcrg" type="const char *" base_Parameter="__r5CEE1VEee3wOKK7wRcrg"/>
  <RTCppProperties:ParameterProperties xmi:id="__sNyME1VEee3wOKK7wRcrg" type="const char *" base_Parameter="__sGdcE1VEee3wOKK7wRcrg"/>
  <RTCppProperties:ParameterProperties xmi:id="__samgE1VEee3wOKK7wRcrg" type="const char *" base_Parameter="__sTRwE1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="__sxy4E1VEee3wOKK7wRcrg" base_Pseudostate="__srFME1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTState xmi:id="__s4gkE1VEee3wOKK7wRcrg" base_State="__sxy4U1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="__s_OQE1VEee3wOKK7wRcrg" base_Pseudostate="__s4gkU1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="__tF78E1VEee3wOKK7wRcrg" base_Pseudostate="__s_1UE1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTRegion xmi:id="__tdvYE1VEee3wOKK7wRcrg" base_Region="__sxy4k1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTState xmi:id="__trKwE1VEee3wOKK7wRcrg" base_State="__tdvYU1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTState xmi:id="__t0UsE1VEee3wOKK7wRcrg" base_State="__tfkkE1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTState xmi:id="__t83kE1VEee3wOKK7wRcrg" base_State="__tgysE1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="__uQZkE1VEee3wOKK7wRcrg" base_Pseudostate="__uKS8E1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTState xmi:id="__uaKkE1VEee3wOKK7wRcrg" base_State="__uRAoE1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="__ugRME1VEee3wOKK7wRcrg" base_Pseudostate="__uaKkU1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="__umX0E1VEee3wOKK7wRcrg" base_Pseudostate="__ugRMU1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTRegion xmi:id="__u89IE1VEee3wOKK7wRcrg" base_Region="__uRAoU1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTState xmi:id="__vKYgE1VEee3wOKK7wRcrg" base_State="__u89IU1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTState xmi:id="__vRtQE1VEee3wOKK7wRcrg" base_State="__u-LQE1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTState xmi:id="__vaQIE1VEee3wOKK7wRcrg" base_State="__vAAcE1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTState xmi:id="__vkoME1VEee3wOKK7wRcrg" base_State="__vBOkE1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTState xmi:id="__vz4wE1VEee3wOKK7wRcrg" base_State="__vtyIE1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="__wGMoE1VEee3wOKK7wRcrg" base_Pseudostate="__wAGAE1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTState xmi:id="__wMTQE1VEee3wOKK7wRcrg" base_State="__wGMoU1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="__wSZ4E1VEee3wOKK7wRcrg" base_Pseudostate="__wM6UE1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="__wa8wE1VEee3wOKK7wRcrg" base_Pseudostate="__wTA8E1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTRegion xmi:id="__wq0YE1VEee3wOKK7wRcrg" base_Region="__wGMok1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTState xmi:id="__w1zgE1VEee3wOKK7wRcrg" base_State="__wrbcE1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTState xmi:id="__w8hME1VEee3wOKK7wRcrg" base_State="__wsCgE1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTState xmi:id="__xDO4E1VEee3wOKK7wRcrg" base_State="__wtQoE1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTState xmi:id="__xM_4E1VEee3wOKK7wRcrg" base_State="__wt3sE1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="__zCL4E1VEee3wOKK7wRcrg" base_Pseudostate="__y96cE1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTState xmi:id="__zHrcE1VEee3wOKK7wRcrg" base_State="__zCy8E1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="__zMj8E1VEee3wOKK7wRcrg" base_Pseudostate="__zHrcU1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="__zRccE1VEee3wOKK7wRcrg" base_Pseudostate="__zMj8U1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTRegion xmi:id="__zeQwE1VEee3wOKK7wRcrg" base_Region="__zCy8U1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTState xmi:id="__zllgE1VEee3wOKK7wRcrg" base_State="__zeQwU1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTState xmi:id="__zrsIE1VEee3wOKK7wRcrg" base_State="__ze30E1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTState xmi:id="__zxywE1VEee3wOKK7wRcrg" base_State="__zfe4E1VEee3wOKK7wRcrg"/>
  <UMLRTStateMachines:RTState xmi:id="__z9Y8E1VEee3wOKK7wRcrg" base_State="__z4gcE1VEee3wOKK7wRcrg"/>
</xmi:XMI>
