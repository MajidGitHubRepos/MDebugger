<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_MImLUExOEeeAapBXl-GW2w" name="PingPong">
    <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_SI_ngExOEeeAapBXl-GW2w" source="http://www.eclipse.org/papyrus-rt/language/1.0.0">
      <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_SJAOkExOEeeAapBXl-GW2w" key="language" value="umlrt-cpp"/>
    </eAnnotations>
    <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_o9ItsExOEeeAapBXl-GW2w" source="UMLRT_Default_top">
      <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_o9ItsUxOEeeAapBXl-GW2w" key="top_name" value="Debug__Top"/>
    </eAnnotations>
    <packageImport xmi:type="uml:PackageImport" xmi:id="_xY5sAMjEEeepLoplTK0Zlg">
      <importedPackage xmi:type="uml:Model" href="../CommGateWay/model.uml#_MZw7AAdxEeadtKuU2t6fMg"/>
    </packageImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_YKTpsExOEeeAapBXl-GW2w" name="PingPong">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_YKDyEExOEeeAapBXl-GW2w" name="PingPong">
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_YLTIMExOEeeAapBXl-GW2w" client="_YKDyEExOEeeAapBXl-GW2w" supplier="_YLFFwExOEeeAapBXl-GW2w" contract="_YLFFwExOEeeAapBXl-GW2w"/>
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_YLvNEExOEeeAapBXl-GW2w" client="_YKDyEExOEeeAapBXl-GW2w" supplier="_YLnRQExOEeeAapBXl-GW2w" contract="_YLnRQExOEeeAapBXl-GW2w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_YLFFwExOEeeAapBXl-GW2w" name="PingPong">
        <ownedOperation xmi:type="uml:Operation" xmi:id="_bVz8YExOEeeAapBXl-GW2w" name="pong"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_YLbrEExOEeeAapBXl-GW2w" name="PingPong~">
        <ownedOperation xmi:type="uml:Operation" xmi:id="_akmh4ExOEeeAapBXl-GW2w" name="ping"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_YLmDIExOEeeAapBXl-GW2w" client="_YKDyEExOEeeAapBXl-GW2w" supplier="_YLbrEExOEeeAapBXl-GW2w"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_YLmqMExOEeeAapBXl-GW2w" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_YLnRQExOEeeAapBXl-GW2w" name="PingPongIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_YLwbMExOEeeAapBXl-GW2w" client="_YKDyEExOEeeAapBXl-GW2w" supplier="_YLnRQExOEeeAapBXl-GW2w"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_akzWMExOEeeAapBXl-GW2w" operation="_akmh4ExOEeeAapBXl-GW2w"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_bV-UcExOEeeAapBXl-GW2w" operation="_bVz8YExOEeeAapBXl-GW2w"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_dBdl4ExOEeeAapBXl-GW2w" name="Pinger" visibility="public" classifierBehavior="_7eBO8ExOEeeAapBXl-GW2w" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_e-deEExOEeeAapBXl-GW2w" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_gCK90ExOEeeAapBXl-GW2w" name="pinger" type="_YKDyEExOEeeAapBXl-GW2w" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_ww8oQExOEeeAapBXl-GW2w" name="pingCount" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_-bo3cMihEeecpIDEOn0ZdA" name="varString">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        <defaultValue xmi:type="uml:LiteralString" xmi:id="_Ez1IkMiiEeecpIDEOn0ZdA" value="testStringVariable"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_Inau8MiiEeecpIDEOn0ZdA" name="varBool">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_xaGl4MjEEeepLoplTK0Zlg" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_xaUoUcjEEeepLoplTK0Zlg" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_xaUoUsjEEeepLoplTK0Zlg" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_xa-IkMjEEeepLoplTK0Zlg" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_xa-voMjEEeepLoplTK0Zlg" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_xa_WsMjEEeepLoplTK0Zlg" name="Debug__event">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_xbOAMMjEEeepLoplTK0Zlg" name="Debug__SRO">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_7eBO8ExOEeeAapBXl-GW2w" name="PingerStateMachine" isReentrant="false">
        <region xmi:type="uml:Region" xmi:id="_7eS7wExOEeeAapBXl-GW2w" name="Region">
          <transition xmi:type="uml:Transition" xmi:id="_7emdwExOEeeAapBXl-GW2w" name="Initial" source="_xmBiAMjEEeepLoplTK0Zlg" target="_7ehlQExOEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_-mSyAExPEeeAapBXl-GW2w" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.show(&quot;leaving initial pseudo state of pinger\n&quot;);
pinger.ping().send();
pingCount=1;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_B4BBcExQEeeAapBXl-GW2w" name="onPong" source="_xnW-wMjEEeepLoplTK0Zlg" target="_7ehlQExOEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ImedgExQEeeAapBXl-GW2w" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.show(&quot;pong message received.\n&quot;);
pinger.ping().send();
pingCount=pingCount+1;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::onPong&quot;,(char *)&quot;Debug__Path__onPong&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xmjtgMjEEeepLoplTK0Zlg" name="Debug__Initial" source="_xpGrMMjEEeepLoplTK0Zlg" target="_xmBiAMjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xmjtgcjEEeepLoplTK0Zlg" name="Debug__Initial__51">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPong&quot;,&quot;PLAYING&quot;,&quot;pong&quot;,&quot;PingPong&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPing&quot;,&quot;PLAYING&quot;,&quot;ping&quot;,&quot;PingPong&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xpOnAMjEEeepLoplTK0Zlg" name="ConnectionEstablished" port="_xaGl4MjEEeepLoplTK0Zlg">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xmk7oMjEEeepLoplTK0Zlg" name="Debug__Initial__S" guard="_xmliscjEEeepLoplTK0Zlg" source="_xmBiAMjEEeepLoplTK0Zlg" target="_xmSnwcjEEeepLoplTK0Zlg">
            <ownedRule xmi:type="uml:Constraint" xmi:id="_xmliscjEEeepLoplTK0Zlg" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_xmlisMjEEeepLoplTK0Zlg" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo2&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xmlissjEEeepLoplTK0Zlg" name="Debug__Initial__S__53">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xmnX4MjEEeepLoplTK0Zlg" name="Debug__Initial__E" source="_xmYHUcjEEeepLoplTK0Zlg" target="_7ehlQExOEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xmnX4cjEEeepLoplTK0Zlg" name="Debug__Initial__E__54">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xmpNEMjEEeepLoplTK0Zlg" name="Debug__Initial__dbg__varChange" source="_xmI2wMjEEeepLoplTK0Zlg" target="_xmI2wMjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xmp0IMjEEeepLoplTK0Zlg" name="Debug__Initial__dbg__varChange__56">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xmpNEcjEEeepLoplTK0Zlg" name="Debug__MSG" port="_xaGl4MjEEeepLoplTK0Zlg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xmp0IcjEEeepLoplTK0Zlg" name="Debug__Initial__dbg__setBreakPoint" source="_xmI2wMjEEeepLoplTK0Zlg" target="_xmI2wMjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xmqbMMjEEeepLoplTK0Zlg" name="Debug__Initial__dbg__setBreakPoint__57">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xmp0IsjEEeepLoplTK0Zlg" name="Debug__MSG" port="_xaGl4MjEEeepLoplTK0Zlg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xmqbMcjEEeepLoplTK0Zlg" name="Debug__Initial__dbg__remBreakPoint" source="_xmI2wMjEEeepLoplTK0Zlg" target="_xmI2wMjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xmqbM8jEEeepLoplTK0Zlg" name="Debug__Initial__dbg__remBreakPoint__58">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xmqbMsjEEeepLoplTK0Zlg" name="Debug__MSG" port="_xaGl4MjEEeepLoplTK0Zlg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xmrCQMjEEeepLoplTK0Zlg" name="Debug__Initial__dbg__viewBreakPoints" source="_xmI2wMjEEeepLoplTK0Zlg" target="_xmI2wMjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xmrCQsjEEeepLoplTK0Zlg" name="Debug__Initial__dbg__viewBreakPoints__59">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xmrCQcjEEeepLoplTK0Zlg" name="Debug__MSG" port="_xaGl4MjEEeepLoplTK0Zlg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xmrpUMjEEeepLoplTK0Zlg" name="Debug__Initial__dbg__dbgSetExecMode" source="_xmI2wMjEEeepLoplTK0Zlg" target="_xmI2wMjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xmrpUsjEEeepLoplTK0Zlg" name="Debug__Initial__dbg__dbgSetExecMode__60">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xmrpUcjEEeepLoplTK0Zlg" name="Debug__MSG" port="_xaGl4MjEEeepLoplTK0Zlg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xmsQYMjEEeepLoplTK0Zlg" name="Debug__Initial__dbg__dbgDeferMsg" source="_xmI2wMjEEeepLoplTK0Zlg" target="_xmI2wMjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xmsQYsjEEeepLoplTK0Zlg" name="Debug__Initial__dbg__dbgDeferMsg__61">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xmsQYcjEEeepLoplTK0Zlg" name="Debug__MSG" port="_gCK90ExOEeeAapBXl-GW2w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xnxOccjEEeepLoplTK0Zlg" name="Debug__onPong" source="_7ehlQExOEeeAapBXl-GW2w" target="_xnW-wMjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xnx1gMjEEeepLoplTK0Zlg" name="Debug__onPong__73">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__onPong&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;Debug__Path__onPong&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_DrVZMExQEeeAapBXl-GW2w" event="_bV-UcExOEeeAapBXl-GW2w" port="_gCK90ExOEeeAapBXl-GW2w"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xn2G8MjEEeepLoplTK0Zlg" name="Debug__onPong__S" guard="_xn2uAcjEEeepLoplTK0Zlg" source="_xnW-wMjEEeepLoplTK0Zlg" target="_xngvwcjEEeepLoplTK0Zlg">
            <ownedRule xmi:type="uml:Constraint" xmi:id="_xn2uAcjEEeepLoplTK0Zlg" name="Debug__GuardonPong">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_xn2uAMjEEeepLoplTK0Zlg" name="Debug__GuardonPong">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xn3VEMjEEeepLoplTK0Zlg" name="Debug__onPong__S__75">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__onPong__S&quot;,(char *)&quot;Debug__Path__onPong&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xn4jMMjEEeepLoplTK0Zlg" name="Debug__onPong__E" source="_xnrH0MjEEeepLoplTK0Zlg" target="_7ehlQExOEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xn5KQMjEEeepLoplTK0Zlg" name="Debug__onPong__E__76">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__onPong__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xn8NkMjEEeepLoplTK0Zlg" name="Debug__onPong__dbg__varChange" source="_xnb3QcjEEeepLoplTK0Zlg" target="_xnb3QcjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xn9bsMjEEeepLoplTK0Zlg" name="Debug__onPong__dbg__varChange__78">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xn8NkcjEEeepLoplTK0Zlg" name="Debug__MSG" port="_xaGl4MjEEeepLoplTK0Zlg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xn9bscjEEeepLoplTK0Zlg" name="Debug__onPong__dbg__setBreakPoint" source="_xnb3QcjEEeepLoplTK0Zlg" target="_xnb3QcjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xn-CwcjEEeepLoplTK0Zlg" name="Debug__onPong__dbg__setBreakPoint__79">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xn-CwMjEEeepLoplTK0Zlg" name="Debug__MSG" port="_xaGl4MjEEeepLoplTK0Zlg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xn-p0MjEEeepLoplTK0Zlg" name="Debug__onPong__dbg__remBreakPoint" source="_xnb3QcjEEeepLoplTK0Zlg" target="_xnb3QcjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xoAfAMjEEeepLoplTK0Zlg" name="Debug__onPong__dbg__remBreakPoint__80">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xn_38MjEEeepLoplTK0Zlg" name="Debug__MSG" port="_xaGl4MjEEeepLoplTK0Zlg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xoBGEMjEEeepLoplTK0Zlg" name="Debug__onPong__dbg__viewBreakPoints" source="_xnb3QcjEEeepLoplTK0Zlg" target="_xnb3QcjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xoBtIMjEEeepLoplTK0Zlg" name="Debug__onPong__dbg__viewBreakPoints__81">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xoBGEcjEEeepLoplTK0Zlg" name="Debug__MSG" port="_xaGl4MjEEeepLoplTK0Zlg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xoBtIcjEEeepLoplTK0Zlg" name="Debug__onPong__dbg__dbgSetExecMode" source="_xnb3QcjEEeepLoplTK0Zlg" target="_xnb3QcjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xoCUMMjEEeepLoplTK0Zlg" name="Debug__onPong__dbg__dbgSetExecMode__82">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xoBtIsjEEeepLoplTK0Zlg" name="Debug__MSG" port="_xaGl4MjEEeepLoplTK0Zlg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xoCUMcjEEeepLoplTK0Zlg" name="Debug__onPong__dbg__dbgDeferMsg" source="_xnb3QcjEEeepLoplTK0Zlg" target="_xnb3QcjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xoCUM8jEEeepLoplTK0Zlg" name="Debug__onPong__dbg__dbgDeferMsg__83">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xoCUMsjEEeepLoplTK0Zlg" name="Debug__MSG" port="_gCK90ExOEeeAapBXl-GW2w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xpNY4cjEEeepLoplTK0Zlg" name="Debug__InitDebug" source="_7eXNMExOEeeAapBXl-GW2w" target="_xpGrMMjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xpN_8MjEEeepLoplTK0Zlg" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_7eXNMExOEeeAapBXl-GW2w" name="Pseudo2"/>
          <subvertex xmi:type="uml:State" xmi:id="_7ehlQExOEeeAapBXl-GW2w" name="PLAYING">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_e3YJMExPEeeAapBXl-GW2w" name="Entry" isReentrant="false">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
log.show(&quot;Entering playing state of pinger\n&quot;);
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_gBgaAExPEeeAapBXl-GW2w" name="Exit" isReentrant="false">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
log.show(&quot;Leaving playing state of pinger\n&quot;);
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_xmBiAMjEEeepLoplTK0Zlg" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_xmI2wMjEEeepLoplTK0Zlg" name="Debug__C__Initial">
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_xmSnwcjEEeepLoplTK0Zlg" name="en" kind="entryPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_xmYHUcjEEeepLoplTK0Zlg" name="ex" kind="exitPoint"/>
            <region xmi:type="uml:Region" xmi:id="_xmI2wcjEEeepLoplTK0Zlg" name="Region1">
              <transition xmi:type="uml:Transition" xmi:id="_xm1aUMjEEeepLoplTK0Zlg" name="Debug__init__trans__Initial" source="_xmSnwcjEEeepLoplTK0Zlg" target="_xmzlIMjEEeepLoplTK0Zlg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xnN00MjEEeepLoplTK0Zlg" name="Debug__init__trans__Initial__66">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_xm1aUcjEEeepLoplTK0Zlg" name="Debug__Ac__Initial" source="_xmzlIMjEEeepLoplTK0Zlg" target="_xm0MMMjEEeepLoplTK0Zlg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xm2BYMjEEeepLoplTK0Zlg" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;leaving initial pseudo state of pinger\n&quot;);
pinger.ping().send();
pingCount=1;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_xm1aUsjEEeepLoplTK0Zlg" name="Debug__Exec" port="_xaGl4MjEEeepLoplTK0Zlg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_xm2BYcjEEeepLoplTK0Zlg" name="Debug__En__PLAYING" source="_xm0MMMjEEeepLoplTK0Zlg" target="_xm0zQMjEEeepLoplTK0Zlg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xm2BY8jEEeepLoplTK0Zlg" name="Entry" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Entering playing state of pinger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_xm2BYsjEEeepLoplTK0Zlg" name="Debug__Exec" port="_xaGl4MjEEeepLoplTK0Zlg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_xm2ocMjEEeepLoplTK0Zlg" name="Debug__end__trans__Initial" source="_xm0zQMjEEeepLoplTK0Zlg" target="_xmYHUcjEEeepLoplTK0Zlg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xnSGQMjEEeepLoplTK0Zlg" name="Debug__end__trans__Initial__70">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_xm2occjEEeepLoplTK0Zlg" name="Debug__Exec" port="_xaGl4MjEEeepLoplTK0Zlg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_xmzlIMjEEeepLoplTK0Zlg" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_xmzlIcjEEeepLoplTK0Zlg" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_xm_LUcjEEeepLoplTK0Zlg" name="Debug__B__Ac__Initial__62">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_xm0MMMjEEeepLoplTK0Zlg" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_xm0MMcjEEeepLoplTK0Zlg" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>    if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or
    		Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
    	//std::cout&lt;&lt;&quot;check the result of checking breakpoints&quot; &lt;&lt;not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or
        //		Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0));
    	//int i=0;
    	//std::cin>>i;
    	extComm.selfExec().send();
    }
    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_xnF5AMjEEeepLoplTK0Zlg" name="Debug__A__Ac__Initial__63">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_xm0zQMjEEeepLoplTK0Zlg" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_xm0zQcjEEeepLoplTK0Zlg" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>    if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
    	std::cout&lt;&lt;&quot;Mojtaba added debug code\n&quot;;
    	int i=0;
    	std::cin>>i;
        extComm.selfExec().send();}
    Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_xnMmscjEEeepLoplTK0Zlg" name="Debug__A__En__Initial__64">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_xnW-wMjEEeepLoplTK0Zlg" name="Debug__Path__onPong" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_xnb3QcjEEeepLoplTK0Zlg" name="Debug__C__onPong">
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_xngvwcjEEeepLoplTK0Zlg" name="en" kind="entryPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_xnrH0MjEEeepLoplTK0Zlg" name="ex" kind="exitPoint"/>
            <region xmi:type="uml:Region" xmi:id="_xnb3QsjEEeepLoplTK0Zlg" name="Region1">
              <transition xmi:type="uml:Transition" xmi:id="_xoK3EMjEEeepLoplTK0Zlg" name="Debug__init__trans__onPong" source="_xngvwcjEEeepLoplTK0Zlg" target="_xoIa0cjEEeepLoplTK0Zlg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xo9hQMjEEeepLoplTK0Zlg" name="Debug__init__trans__onPong__89">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__init__trans__onPong&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_xoK3EcjEEeepLoplTK0Zlg" name="Debug__Ex__PLAYING" source="_xoIa0cjEEeepLoplTK0Zlg" target="_xoJB4cjEEeepLoplTK0Zlg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xoLeIMjEEeepLoplTK0Zlg" name="Exit" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Leaving playing state of pinger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ac__onPong&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_xoK3EsjEEeepLoplTK0Zlg" name="Debug__Exec" port="_xaGl4MjEEeepLoplTK0Zlg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_xoLeIcjEEeepLoplTK0Zlg" name="Debug__AC__onPong" source="_xoJB4cjEEeepLoplTK0Zlg" target="_xoJo8cjEEeepLoplTK0Zlg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xoMFMMjEEeepLoplTK0Zlg" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;pong message received.\n&quot;);
pinger.ping().send();
pingCount=pingCount+1;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__AC__onPong&quot;,(char *)&quot;Debug__B__Ac__onPong&quot;,(char *)&quot;Debug__A__Ac__onPong&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_xoLeIsjEEeepLoplTK0Zlg" name="Debug__Exec" port="_xaGl4MjEEeepLoplTK0Zlg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_xoMFMcjEEeepLoplTK0Zlg" name="Debug__En__PLAYING" source="_xoJo8cjEEeepLoplTK0Zlg" target="_xoKQAMjEEeepLoplTK0Zlg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xoMsQMjEEeepLoplTK0Zlg" name="Entry" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Entering playing state of pinger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__onPong&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_xoMFMsjEEeepLoplTK0Zlg" name="Debug__Exec" port="_xaGl4MjEEeepLoplTK0Zlg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_xoMsQcjEEeepLoplTK0Zlg" name="Debug__end__trans__onPong" source="_xoKQAMjEEeepLoplTK0Zlg" target="_xnrH0MjEEeepLoplTK0Zlg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xpBysMjEEeepLoplTK0Zlg" name="Debug__end__trans__onPong__94">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__end__trans__onPong&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_xoMsQsjEEeepLoplTK0Zlg" name="Debug__Exec" port="_xaGl4MjEEeepLoplTK0Zlg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_xoIa0cjEEeepLoplTK0Zlg" name="Debug__B__Ex__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_xoJB4MjEEeepLoplTK0Zlg" name="Debug__B__Ex__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_xoSL0cjEEeepLoplTK0Zlg" name="Debug__B__Ex__PLAYING__84">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_xoJB4cjEEeepLoplTK0Zlg" name="Debug__B__Ac__onPong">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_xoJo8MjEEeepLoplTK0Zlg" name="Debug__B__Ac__onPong">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;onPong&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_xoYScMjEEeepLoplTK0Zlg" name="Debug__B__Ac__onPong__85">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_xoJo8cjEEeepLoplTK0Zlg" name="Debug__A__Ac__onPong">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_xoJo8sjEEeepLoplTK0Zlg" name="Debug__A__Ac__onPong">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;onPong&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__A__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_xodyAcjEEeepLoplTK0Zlg" name="Debug__A__Ac__onPong__86">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__A__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_xoKQAMjEEeepLoplTK0Zlg" name="Debug__A__En__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_xoKQAcjEEeepLoplTK0Zlg" name="Debug__A__En__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_xoeZEMjEEeepLoplTK0Zlg" name="Debug__A__En__PLAYING__87">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_xpGrMMjEEeepLoplTK0Zlg" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_xaEwsMjEEeepLoplTK0Zlg" name="Debug__recallAllMsg" specification="_xaBtYMjEEeepLoplTK0Zlg">
        <language>C++</language>
        <body>pinger.recallAll();
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_xax7UcjEEeepLoplTK0Zlg" name="Debug__variablesViewMethod" specification="_xax7UMjEEeepLoplTK0Zlg">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;pingCount,&quot;);
tempS.append(&quot;Integer,&quot;);
if(pingCount!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,pingCount);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
tempS.append(&quot;varString,&quot;);
tempS.append(&quot;String,&quot;);
if(varString==NULL){
    tempS.append(&quot;\&quot;\&quot;&quot;);
    tempS.append(&quot;\n&quot;);
}else{
    tempS.append(&quot;\&quot;&quot;);
    tempS.append(varString);
    tempS.append(&quot;\&quot;&quot;);
    tempS.append(&quot;\n&quot;);
};
tempS.append(&quot;varBool,&quot;);
tempS.append(&quot;Boolean,&quot;);
if(varBool==true){
    tempS.append(&quot;true&quot;);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;false&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_xa7sUMjEEeepLoplTK0Zlg" name="Debug__variablesChange" specification="_xa4B8MjEEeepLoplTK0Zlg">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;pingCount&quot;==tempVarName){
    pingCount=atoi(varValue);
    return true;
}else if (&quot;varString&quot;==tempVarName){
    if (varString==NULL)
        varString=(char*) malloc(strlen(varValue)+1);
    else if(strlen(varString)&lt;strlen(varValue))
        varString=(char *) realloc(varString,strlen(varValue)+1);
    strcpy(varString,varValue);
    return true;
}else if (&quot;varBool&quot;==tempVarName){
    if(strcmp(varValue,&quot;true&quot;)==0)
        varBool=true;
    else 
        varBool=false;
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_xd79AMjEEeepLoplTK0Zlg" name="Debug__sendEvent" specification="_xcZE4MjEEeepLoplTK0Zlg">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
this->Debug__event.setPayloadField(&quot;SenderCapsule&quot;,reserve3);
this->Debug__event.setPayloadField(&quot;Port&quot;,reserve4);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:type="uml:Operation" xmi:id="_xaBtYMjEEeepLoplTK0Zlg" name="Debug__recallAllMsg" visibility="private" method="_xaEwsMjEEeepLoplTK0Zlg"/>
      <ownedOperation xmi:type="uml:Operation" xmi:id="_xax7UMjEEeepLoplTK0Zlg" name="Debug__variablesView" visibility="private" method="_xax7UcjEEeepLoplTK0Zlg"/>
      <ownedOperation xmi:type="uml:Operation" xmi:id="_xa4B8MjEEeepLoplTK0Zlg" name="Debug__variablesChange" visibility="private" method="_xa7sUMjEEeepLoplTK0Zlg">
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xa5QEMjEEeepLoplTK0Zlg" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xa53IMjEEeepLoplTK0Zlg" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xa7FQMjEEeepLoplTK0Zlg" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="uml:Operation" xmi:id="_xcZE4MjEEeepLoplTK0Zlg" name="Debug__sendEvent" visibility="private" method="_xd79AMjEEeepLoplTK0Zlg">
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xcZr8MjEEeepLoplTK0Zlg" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xco8gMjEEeepLoplTK0Zlg" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xcz7oMjEEeepLoplTK0Zlg" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xdFBYMjEEeepLoplTK0Zlg" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xdGPgMjEEeepLoplTK0Zlg" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xdR1sMjEEeepLoplTK0Zlg" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xdfREMjEEeepLoplTK0Zlg" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xdf4IMjEEeepLoplTK0Zlg" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xdhGQMjEEeepLoplTK0Zlg" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xdhGQcjEEeepLoplTK0Zlg" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xduhoMjEEeepLoplTK0Zlg" name="reserve4">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_irESsExOEeeAapBXl-GW2w" name="Ponger" classifierBehavior="_P8x8sExQEeeAapBXl-GW2w" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_j9fj4ExOEeeAapBXl-GW2w" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_kypqQExOEeeAapBXl-GW2w" name="ponger" type="_YKDyEExOEeeAapBXl-GW2w" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_4p-aAExOEeeAapBXl-GW2w" name="j" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_xeG8IMjEEeepLoplTK0Zlg" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_xeNCwcjEEeepLoplTK0Zlg" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_xeNCwsjEEeepLoplTK0Zlg" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_xeiZ8MjEEeepLoplTK0Zlg" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_xejBAMjEEeepLoplTK0Zlg" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_xejBAcjEEeepLoplTK0Zlg" name="Debug__event">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_xeunMMjEEeepLoplTK0Zlg" name="Debug__SRO">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_P8x8sExQEeeAapBXl-GW2w" name="PongerStateMachine" isReentrant="false">
        <region xmi:type="uml:Region" xmi:id="_P9XykExQEeeAapBXl-GW2w" name="Region">
          <transition xmi:type="uml:Transition" xmi:id="_P9qGcExQEeeAapBXl-GW2w" name="Initial" source="_xg_RAMjEEeepLoplTK0Zlg" target="_P9jYwExQEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xjImEMjEEeepLoplTK0Zlg" name="Initial__25">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_ZUZMUExQEeeAapBXl-GW2w" name="onPing" source="_xjOFoMjEEeepLoplTK0Zlg" target="_P9jYwExQEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_q3J4cExQEeeAapBXl-GW2w" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.show(&quot;ping message received.\n&quot;);
ponger.pong().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::onPing&quot;,(char *)&quot;Debug__Path__onPing&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xhaHwcjEEeepLoplTK0Zlg" name="Debug__Initial" source="_xlogcMjEEeepLoplTK0Zlg" target="_xg_RAMjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xhau0MjEEeepLoplTK0Zlg" name="Debug__Initial__3">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPing&quot;,&quot;PLAYING&quot;,&quot;ping&quot;,&quot;PingPong&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xlxqYMjEEeepLoplTK0Zlg" name="ConnectionEstablished" port="_xeG8IMjEEeepLoplTK0Zlg">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xheZMMjEEeepLoplTK0Zlg" name="Debug__Initial__S" guard="_xhfAQcjEEeepLoplTK0Zlg" source="_xg_RAMjEEeepLoplTK0Zlg" target="_xhNTcMjEEeepLoplTK0Zlg">
            <ownedRule xmi:type="uml:Constraint" xmi:id="_xhfAQcjEEeepLoplTK0Zlg" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_xhfAQMjEEeepLoplTK0Zlg" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo1&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xhgOYMjEEeepLoplTK0Zlg" name="Debug__Initial__S__5">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xhjRsMjEEeepLoplTK0Zlg" name="Debug__Initial__E" source="_xhUBIMjEEeepLoplTK0Zlg" target="_P9jYwExQEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xhjRscjEEeepLoplTK0Zlg" name="Debug__Initial__E__6">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xhrNgMjEEeepLoplTK0Zlg" name="Debug__Initial__dbg__varChange" source="_xhFXoMjEEeepLoplTK0Zlg" target="_xhFXoMjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xhr0kMjEEeepLoplTK0Zlg" name="Debug__Initial__dbg__varChange__8">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xhrNgcjEEeepLoplTK0Zlg" name="Debug__MSG" port="_xeG8IMjEEeepLoplTK0Zlg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xhtCsMjEEeepLoplTK0Zlg" name="Debug__Initial__dbg__setBreakPoint" source="_xhFXoMjEEeepLoplTK0Zlg" target="_xhFXoMjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xhuQ0MjEEeepLoplTK0Zlg" name="Debug__Initial__dbg__setBreakPoint__9">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xhtpwMjEEeepLoplTK0Zlg" name="Debug__MSG" port="_xeG8IMjEEeepLoplTK0Zlg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xhve8MjEEeepLoplTK0Zlg" name="Debug__Initial__dbg__remBreakPoint" source="_xhFXoMjEEeepLoplTK0Zlg" target="_xhFXoMjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xhxUIMjEEeepLoplTK0Zlg" name="Debug__Initial__dbg__remBreakPoint__10">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xhwtEMjEEeepLoplTK0Zlg" name="Debug__MSG" port="_xeG8IMjEEeepLoplTK0Zlg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xhx7MMjEEeepLoplTK0Zlg" name="Debug__Initial__dbg__viewBreakPoints" source="_xhFXoMjEEeepLoplTK0Zlg" target="_xhFXoMjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xhyiQcjEEeepLoplTK0Zlg" name="Debug__Initial__dbg__viewBreakPoints__11">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xhyiQMjEEeepLoplTK0Zlg" name="Debug__MSG" port="_xeG8IMjEEeepLoplTK0Zlg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xhzJUMjEEeepLoplTK0Zlg" name="Debug__Initial__dbg__dbgSetExecMode" source="_xhFXoMjEEeepLoplTK0Zlg" target="_xhFXoMjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xh0-gMjEEeepLoplTK0Zlg" name="Debug__Initial__dbg__dbgSetExecMode__12">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xhzwYMjEEeepLoplTK0Zlg" name="Debug__MSG" port="_xeG8IMjEEeepLoplTK0Zlg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xh1lkMjEEeepLoplTK0Zlg" name="Debug__Initial__dbg__dbgDeferMsg" source="_xhFXoMjEEeepLoplTK0Zlg" target="_xhFXoMjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xh2MocjEEeepLoplTK0Zlg" name="Debug__Initial__dbg__dbgDeferMsg__13">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xh2MoMjEEeepLoplTK0Zlg" name="Debug__MSG" port="_kypqQExOEeeAapBXl-GW2w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xjxfQcjEEeepLoplTK0Zlg" name="Debug__onPing" source="_P9jYwExQEeeAapBXl-GW2w" target="_xjOFoMjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xjyGUMjEEeepLoplTK0Zlg" name="Debug__onPing__27">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__onPing&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;Debug__Path__onPing&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_b3gpUExQEeeAapBXl-GW2w" event="_akzWMExOEeeAapBXl-GW2w" port="_kypqQExOEeeAapBXl-GW2w"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xj1JoMjEEeepLoplTK0Zlg" name="Debug__onPing__S" guard="_xj1wscjEEeepLoplTK0Zlg" source="_xjOFoMjEEeepLoplTK0Zlg" target="_xjZEwcjEEeepLoplTK0Zlg">
            <ownedRule xmi:type="uml:Constraint" xmi:id="_xj1wscjEEeepLoplTK0Zlg" name="Debug__GuardonPing">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_xj1wsMjEEeepLoplTK0Zlg" name="Debug__GuardonPing">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xj2-0MjEEeepLoplTK0Zlg" name="Debug__onPing__S__29">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__onPing__S&quot;,(char *)&quot;Debug__Path__onPing&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xj6CIMjEEeepLoplTK0Zlg" name="Debug__onPing__E" source="_xjlSAcjEEeepLoplTK0Zlg" target="_P9jYwExQEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xj6pMMjEEeepLoplTK0Zlg" name="Debug__onPing__E__30">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__onPing__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xkDzIMjEEeepLoplTK0Zlg" name="Debug__onPing__dbg__varChange" source="_xjTlMcjEEeepLoplTK0Zlg" target="_xjTlMcjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xkEaMcjEEeepLoplTK0Zlg" name="Debug__onPing__dbg__varChange__32">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xkEaMMjEEeepLoplTK0Zlg" name="Debug__MSG" port="_xeG8IMjEEeepLoplTK0Zlg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xkFoUMjEEeepLoplTK0Zlg" name="Debug__onPing__dbg__setBreakPoint" source="_xjTlMcjEEeepLoplTK0Zlg" target="_xjTlMcjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xkFoUsjEEeepLoplTK0Zlg" name="Debug__onPing__dbg__setBreakPoint__33">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xkFoUcjEEeepLoplTK0Zlg" name="Debug__MSG" port="_xeG8IMjEEeepLoplTK0Zlg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xkGPYMjEEeepLoplTK0Zlg" name="Debug__onPing__dbg__remBreakPoint" source="_xjTlMcjEEeepLoplTK0Zlg" target="_xjTlMcjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xkGPYsjEEeepLoplTK0Zlg" name="Debug__onPing__dbg__remBreakPoint__34">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xkGPYcjEEeepLoplTK0Zlg" name="Debug__MSG" port="_xeG8IMjEEeepLoplTK0Zlg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xkG2cMjEEeepLoplTK0Zlg" name="Debug__onPing__dbg__viewBreakPoints" source="_xjTlMcjEEeepLoplTK0Zlg" target="_xjTlMcjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xkHdgMjEEeepLoplTK0Zlg" name="Debug__onPing__dbg__viewBreakPoints__35">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xkG2ccjEEeepLoplTK0Zlg" name="Debug__MSG" port="_xeG8IMjEEeepLoplTK0Zlg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xkHdgcjEEeepLoplTK0Zlg" name="Debug__onPing__dbg__dbgSetExecMode" source="_xjTlMcjEEeepLoplTK0Zlg" target="_xjTlMcjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xkIEkMjEEeepLoplTK0Zlg" name="Debug__onPing__dbg__dbgSetExecMode__36">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xkHdgsjEEeepLoplTK0Zlg" name="Debug__MSG" port="_xeG8IMjEEeepLoplTK0Zlg">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xkIEkcjEEeepLoplTK0Zlg" name="Debug__onPing__dbg__dbgDeferMsg" source="_xjTlMcjEEeepLoplTK0Zlg" target="_xjTlMcjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xkJSsMjEEeepLoplTK0Zlg" name="Debug__onPing__dbg__dbgDeferMsg__37">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xkIEksjEEeepLoplTK0Zlg" name="Debug__MSG" port="_kypqQExOEeeAapBXl-GW2w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_xlwcQMjEEeepLoplTK0Zlg" name="Debug__InitDebug" source="_P9fHUExQEeeAapBXl-GW2w" target="_xlogcMjEEeepLoplTK0Zlg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xlwcQcjEEeepLoplTK0Zlg" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_P9fHUExQEeeAapBXl-GW2w" name="Pseudo1"/>
          <subvertex xmi:type="uml:State" xmi:id="_P9jYwExQEeeAapBXl-GW2w" name="PLAYING">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_fs-fAExQEeeAapBXl-GW2w" name="Entry" isReentrant="false">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
log.show(&quot;Entering playing state of ponger\n&quot;);
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_j-wdQExQEeeAapBXl-GW2w" name="Exit" isReentrant="false">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
log.show(&quot;Leaving playing state of ponger\n&quot;);
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_xg_RAMjEEeepLoplTK0Zlg" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_xhFXoMjEEeepLoplTK0Zlg" name="Debug__C__Initial">
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_xhNTcMjEEeepLoplTK0Zlg" name="en" kind="entryPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_xhUBIMjEEeepLoplTK0Zlg" name="ex" kind="exitPoint"/>
            <region xmi:type="uml:Region" xmi:id="_xhFXocjEEeepLoplTK0Zlg" name="Region1">
              <transition xmi:type="uml:Transition" xmi:id="_xiJHkMjEEeepLoplTK0Zlg" name="Debug__init__trans__Initial" source="_xhNTcMjEEeepLoplTK0Zlg" target="_xiDA8cjEEeepLoplTK0Zlg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xi3gUMjEEeepLoplTK0Zlg" name="Debug__init__trans__Initial__18">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_xiJuoMjEEeepLoplTK0Zlg" name="Debug__Ac__Initial" source="_xiDA8cjEEeepLoplTK0Zlg" target="_xiEPEMjEEeepLoplTK0Zlg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xi_cIMjEEeepLoplTK0Zlg" name="Debug__Ac__Initial__20">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_xiJuocjEEeepLoplTK0Zlg" name="Debug__Exec" port="_xeG8IMjEEeepLoplTK0Zlg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_xiKVsMjEEeepLoplTK0Zlg" name="Debug__En__PLAYING" source="_xiEPEMjEEeepLoplTK0Zlg" target="_xiGrUMjEEeepLoplTK0Zlg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xiLj0MjEEeepLoplTK0Zlg" name="Entry" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Entering playing state of ponger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_xiKVscjEEeepLoplTK0Zlg" name="Debug__Exec" port="_xeG8IMjEEeepLoplTK0Zlg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_xiMK4MjEEeepLoplTK0Zlg" name="Debug__end__trans__Initial" source="_xiGrUMjEEeepLoplTK0Zlg" target="_xhUBIMjEEeepLoplTK0Zlg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xjGJ0MjEEeepLoplTK0Zlg" name="Debug__end__trans__Initial__23">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_xiMx8MjEEeepLoplTK0Zlg" name="Debug__Exec" port="_xeG8IMjEEeepLoplTK0Zlg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_xiDA8cjEEeepLoplTK0Zlg" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_xiDA8sjEEeepLoplTK0Zlg" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_xiWi8MjEEeepLoplTK0Zlg" name="Debug__B__Ac__Initial__14">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_xiEPEMjEEeepLoplTK0Zlg" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_xiEPEcjEEeepLoplTK0Zlg" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_xij-UcjEEeepLoplTK0Zlg" name="Debug__A__Ac__Initial__15">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_xiGrUMjEEeepLoplTK0Zlg" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_xiGrUcjEEeepLoplTK0Zlg" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_xiz18MjEEeepLoplTK0Zlg" name="Debug__A__En__Initial__16">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_xjOFoMjEEeepLoplTK0Zlg" name="Debug__Path__onPing" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_xjTlMcjEEeepLoplTK0Zlg" name="Debug__C__onPing">
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_xjZEwcjEEeepLoplTK0Zlg" name="en" kind="entryPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_xjlSAcjEEeepLoplTK0Zlg" name="ex" kind="exitPoint"/>
            <region xmi:type="uml:Region" xmi:id="_xjTlMsjEEeepLoplTK0Zlg" name="Region1">
              <transition xmi:type="uml:Transition" xmi:id="_xkfQ8MjEEeepLoplTK0Zlg" name="Debug__init__trans__onPing" source="_xjZEwcjEEeepLoplTK0Zlg" target="_xkR1kcjEEeepLoplTK0Zlg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xlYo0MjEEeepLoplTK0Zlg" name="Debug__init__trans__onPing__43">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__init__trans__onPing&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_xkfQ8cjEEeepLoplTK0Zlg" name="Debug__Ex__PLAYING" source="_xkR1kcjEEeepLoplTK0Zlg" target="_xkTDsMjEEeepLoplTK0Zlg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xkhtMMjEEeepLoplTK0Zlg" name="Exit" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Leaving playing state of ponger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ac__onPing&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_xkfQ8sjEEeepLoplTK0Zlg" name="Debug__Exec" port="_xeG8IMjEEeepLoplTK0Zlg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_xkiUQMjEEeepLoplTK0Zlg" name="Debug__AC__onPing" source="_xkTDsMjEEeepLoplTK0Zlg" target="_xkZKUMjEEeepLoplTK0Zlg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xki7UMjEEeepLoplTK0Zlg" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;ping message received.\n&quot;);
ponger.pong().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__AC__onPing&quot;,(char *)&quot;Debug__B__Ac__onPing&quot;,(char *)&quot;Debug__A__Ac__onPing&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_xkiUQcjEEeepLoplTK0Zlg" name="Debug__Exec" port="_xeG8IMjEEeepLoplTK0Zlg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_xkjiYMjEEeepLoplTK0Zlg" name="Debug__En__PLAYING" source="_xkZKUMjEEeepLoplTK0Zlg" target="_xkeC0MjEEeepLoplTK0Zlg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xkkJcMjEEeepLoplTK0Zlg" name="Entry" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Entering playing state of ponger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__onPing&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_xkjiYcjEEeepLoplTK0Zlg" name="Debug__Exec" port="_xeG8IMjEEeepLoplTK0Zlg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_xklXkMjEEeepLoplTK0Zlg" name="Debug__end__trans__onPing" source="_xkeC0MjEEeepLoplTK0Zlg" target="_xjlSAcjEEeepLoplTK0Zlg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xljn8MjEEeepLoplTK0Zlg" name="Debug__end__trans__onPing__48">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__end__trans__onPing&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_xkl-oMjEEeepLoplTK0Zlg" name="Debug__Exec" port="_xeG8IMjEEeepLoplTK0Zlg">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_xkR1kcjEEeepLoplTK0Zlg" name="Debug__B__Ex__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_xkScoMjEEeepLoplTK0Zlg" name="Debug__B__Ex__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_xkw9wMjEEeepLoplTK0Zlg" name="Debug__B__Ex__PLAYING__38">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_xkTDsMjEEeepLoplTK0Zlg" name="Debug__B__Ac__onPing">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_xkTDscjEEeepLoplTK0Zlg" name="Debug__B__Ac__onPing">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;onPing&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_xk_nQcjEEeepLoplTK0Zlg" name="Debug__B__Ac__onPing__39">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_xkZKUMjEEeepLoplTK0Zlg" name="Debug__A__Ac__onPing">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_xkZKUcjEEeepLoplTK0Zlg" name="Debug__A__Ac__onPing">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;onPing&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__A__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_xlHjEcjEEeepLoplTK0Zlg" name="Debug__A__Ac__onPing__40">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__A__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_xkeC0MjEEeepLoplTK0Zlg" name="Debug__A__En__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_xkeC0cjEEeepLoplTK0Zlg" name="Debug__A__En__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_xlJ_UMjEEeepLoplTK0Zlg" name="Debug__A__En__PLAYING__41">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_xlogcMjEEeepLoplTK0Zlg" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_xeFG8MjEEeepLoplTK0Zlg" name="Debug__recallAllMsg" specification="_xeEf4MjEEeepLoplTK0Zlg">
        <language>C++</language>
        <body>ponger.recallAll();
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_xeeIgcjEEeepLoplTK0Zlg" name="Debug__variablesViewMethod" specification="_xeeIgMjEEeepLoplTK0Zlg">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;j,&quot;);
tempS.append(&quot;Integer,&quot;);
if(j!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,j);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_xehy4cjEEeepLoplTK0Zlg" name="Debug__variablesChange" specification="_xegkwMjEEeepLoplTK0Zlg">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;j&quot;==tempVarName){
    j=atoi(varValue);
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_xgwngMjEEeepLoplTK0Zlg" name="Debug__sendEvent" specification="_xfWSQMjEEeepLoplTK0Zlg">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
this->Debug__event.setPayloadField(&quot;SenderCapsule&quot;,reserve3);
this->Debug__event.setPayloadField(&quot;Port&quot;,reserve4);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:type="uml:Operation" xmi:id="_xeEf4MjEEeepLoplTK0Zlg" name="Debug__recallAllMsg" visibility="private" method="_xeFG8MjEEeepLoplTK0Zlg"/>
      <ownedOperation xmi:type="uml:Operation" xmi:id="_xeeIgMjEEeepLoplTK0Zlg" name="Debug__variablesView" visibility="private" method="_xeeIgcjEEeepLoplTK0Zlg"/>
      <ownedOperation xmi:type="uml:Operation" xmi:id="_xegkwMjEEeepLoplTK0Zlg" name="Debug__variablesChange" visibility="private" method="_xehy4cjEEeepLoplTK0Zlg">
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xegkwcjEEeepLoplTK0Zlg" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xehL0MjEEeepLoplTK0Zlg" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xehy4MjEEeepLoplTK0Zlg" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="uml:Operation" xmi:id="_xfWSQMjEEeepLoplTK0Zlg" name="Debug__sendEvent" visibility="private" method="_xgwngMjEEeepLoplTK0Zlg">
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xfW5UMjEEeepLoplTK0Zlg" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xfmw8MjEEeepLoplTK0Zlg" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xfzlQMjEEeepLoplTK0Zlg" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xf-kYMjEEeepLoplTK0Zlg" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xf_LcMjEEeepLoplTK0Zlg" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xgKKkMjEEeepLoplTK0Zlg" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xgYNAMjEEeepLoplTK0Zlg" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xgYNAcjEEeepLoplTK0Zlg" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xgaCMMjEEeepLoplTK0Zlg" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xgaCMcjEEeepLoplTK0Zlg" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_xgloYMjEEeepLoplTK0Zlg" name="reserve4">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_n15_4ExOEeeAapBXl-GW2w" name="Top" isActive="true">
      <ownedAttribute xmi:type="uml:Property" xmi:id="_rrH98ExOEeeAapBXl-GW2w" name="pinger" visibility="protected" type="_dBdl4ExOEeeAapBXl-GW2w" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_sWX6YExOEeeAapBXl-GW2w" name="ponger" visibility="protected" type="_irESsExOEeeAapBXl-GW2w" isOrdered="true" aggregation="composite"/>
      <ownedConnector xmi:type="uml:Connector" xmi:id="_udBd0ExOEeeAapBXl-GW2w" name="RTConnector1">
        <end xmi:type="uml:ConnectorEnd" xmi:id="_udFvQExOEeeAapBXl-GW2w" partWithPort="_rrH98ExOEeeAapBXl-GW2w" role="_gCK90ExOEeeAapBXl-GW2w"/>
        <end xmi:type="uml:ConnectorEnd" xmi:id="_udGWUExOEeeAapBXl-GW2w" partWithPort="_sWX6YExOEeeAapBXl-GW2w" role="_kypqQExOEeeAapBXl-GW2w"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_xVgZwMjEEeepLoplTK0Zlg" name="Debug__Top">
      <ownedAttribute xmi:type="uml:Property" xmi:id="_xZCO4MjEEeepLoplTK0Zlg" name="Debug__Gateway">
        <type xmi:type="uml:Class" href="../CommGateWay/model.uml#_XIyCcAdxEeadtKuU2t6fMg"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_xZW_AcjEEeepLoplTK0Zlg" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_xZXmEMjEEeepLoplTK0Zlg" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_xZaCUMjEEeepLoplTK0Zlg" name="Debug__Top" type="_n15_4ExOEeeAapBXl-GW2w">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_xZp58cjEEeepLoplTK0Zlg" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_xZp58sjEEeepLoplTK0Zlg" value="1"/>
      </ownedAttribute>
    </packagedElement>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_MUbn4ExOEeeAapBXl-GW2w">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_MUddEExOEeeAapBXl-GW2w" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://UML_RT_PROFILE/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_SJ7boExOEeeAapBXl-GW2w">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_SJ8pwExOEeeAapBXl-GW2w" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://UMLRT_CPP/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_UV8AMExOEeeAapBXl-GW2w">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_UV8nQExOEeeAapBXl-GW2w" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:ProtocolContainer xmi:id="_YKnywExOEeeAapBXl-GW2w" base_Package="_YKTpsExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTMessageSet xmi:id="_YLO2wExOEeeAapBXl-GW2w" base_Interface="_YLFFwExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTMessageSet xmi:id="_YLk1AExOEeeAapBXl-GW2w" base_Interface="_YLbrEExOEeeAapBXl-GW2w" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_YLt-8ExOEeeAapBXl-GW2w" base_Interface="_YLnRQExOEeeAapBXl-GW2w" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_YLxCQExOEeeAapBXl-GW2w" base_Collaboration="_YKDyEExOEeeAapBXl-GW2w"/>
  <UMLRealTime:Capsule xmi:id="_dCzpsExOEeeAapBXl-GW2w" base_Class="_dBdl4ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTPort xmi:id="_e-suoExOEeeAapBXl-GW2w" isWired="false" base_Port="_e-deEExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTPort xmi:id="_gCa1cExOEeeAapBXl-GW2w" base_Port="_gCK90ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:Capsule xmi:id="_irM1kExOEeeAapBXl-GW2w" base_Class="_irESsExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTPort xmi:id="_j9j1UExOEeeAapBXl-GW2w" isWired="false" base_Port="_j9fj4ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTPort xmi:id="_kyvJ0ExOEeeAapBXl-GW2w" base_Port="_kypqQExOEeeAapBXl-GW2w"/>
  <UMLRealTime:Capsule xmi:id="_n2EX8ExOEeeAapBXl-GW2w" base_Class="_n15_4ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:CapsulePart xmi:id="_rrLoUExOEeeAapBXl-GW2w" base_Property="_rrH98ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:CapsulePart xmi:id="_sWcy4ExOEeeAapBXl-GW2w" base_Property="_sWX6YExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTConnector xmi:id="_udG9YExOEeeAapBXl-GW2w" base_Connector="_udBd0ExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_7ecswExOEeeAapBXl-GW2w" base_Pseudostate="_7eXNMExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTState xmi:id="_7ekokExOEeeAapBXl-GW2w" base_State="_7ehlQExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTRegion xmi:id="_7eoS8ExOEeeAapBXl-GW2w" base_Region="_7eS7wExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_7e4KkExOEeeAapBXl-GW2w" base_StateMachine="_7eBO8ExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_P9hjkExQEeeAapBXl-GW2w" base_Pseudostate="_P9fHUExQEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTState xmi:id="_P9pfYExQEeeAapBXl-GW2w" base_State="_P9jYwExQEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTRegion xmi:id="_P9qtgExQEeeAapBXl-GW2w" base_Region="_P9XykExQEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_P9wNEExQEeeAapBXl-GW2w" base_StateMachine="_P8x8sExQEeeAapBXl-GW2w"/>
  <UMLRealTime:Capsule xmi:id="_xYs3sMjEEeepLoplTK0Zlg" base_Class="_xVgZwMjEEeepLoplTK0Zlg"/>
  <UMLRealTime:CapsulePart xmi:id="_xZW_AMjEEeepLoplTK0Zlg" base_Property="_xZCO4MjEEeepLoplTK0Zlg"/>
  <UMLRealTime:CapsulePart xmi:id="_xZp58MjEEeepLoplTK0Zlg" base_Property="_xZaCUMjEEeepLoplTK0Zlg"/>
  <UMLRealTime:RTPort xmi:id="_xaUoUMjEEeepLoplTK0Zlg" isNotification="true" isWired="false" base_Port="_xaGl4MjEEeepLoplTK0Zlg"/>
  <RTCppProperties:AttributeProperties xmi:id="_xbHSgMjEEeepLoplTK0Zlg" type="debugEvents::Event" base_Property="_xa_WsMjEEeepLoplTK0Zlg"/>
  <RTCppProperties:AttributeProperties xmi:id="_xb2SUMjEEeepLoplTK0Zlg" type="SROManager" base_Property="_xbOAMMjEEeepLoplTK0Zlg"/>
  <RTCppProperties:CapsuleProperties xmi:id="_xcCfkMjEEeepLoplTK0Zlg" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_dBdl4ExOEeeAapBXl-GW2w"/>
  <RTCppProperties:ParameterProperties xmi:id="_xckEAMjEEeepLoplTK0Zlg" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_xcZr8MjEEeepLoplTK0Zlg"/>
  <RTCppProperties:ParameterProperties xmi:id="_xcvDIMjEEeepLoplTK0Zlg" type="debugEvents::EVENTTYPE" base_Parameter="_xco8gMjEEeepLoplTK0Zlg"/>
  <RTCppProperties:ParameterProperties xmi:id="_xc9FkMjEEeepLoplTK0Zlg" type="const char *" base_Parameter="_xcz7oMjEEeepLoplTK0Zlg"/>
  <RTCppProperties:ParameterProperties xmi:id="_xdM9MMjEEeepLoplTK0Zlg" type="const char *" base_Parameter="_xdGPgMjEEeepLoplTK0Zlg"/>
  <RTCppProperties:ParameterProperties xmi:id="_xdZKcMjEEeepLoplTK0Zlg" type="const char *" base_Parameter="_xdR1sMjEEeepLoplTK0Zlg"/>
  <RTCppProperties:ParameterProperties xmi:id="_xdppIMjEEeepLoplTK0Zlg" type="const char *" base_Parameter="_xdhGQcjEEeepLoplTK0Zlg"/>
  <RTCppProperties:ParameterProperties xmi:id="_xd0oQMjEEeepLoplTK0Zlg" type="const char *" base_Parameter="_xduhoMjEEeepLoplTK0Zlg"/>
  <UMLRealTime:RTPort xmi:id="_xeNCwMjEEeepLoplTK0Zlg" isNotification="true" isWired="false" base_Port="_xeG8IMjEEeepLoplTK0Zlg"/>
  <RTCppProperties:AttributeProperties xmi:id="_xeqVwMjEEeepLoplTK0Zlg" type="debugEvents::Event" base_Property="_xejBAcjEEeepLoplTK0Zlg"/>
  <RTCppProperties:AttributeProperties xmi:id="_xe178MjEEeepLoplTK0Zlg" type="SROManager" base_Property="_xeunMMjEEeepLoplTK0Zlg"/>
  <RTCppProperties:CapsuleProperties xmi:id="_xfCJMMjEEeepLoplTK0Zlg" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_irESsExOEeeAapBXl-GW2w"/>
  <RTCppProperties:ParameterProperties xmi:id="_xfc_8MjEEeepLoplTK0Zlg" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_xfW5UMjEEeepLoplTK0Zlg"/>
  <RTCppProperties:ParameterProperties xmi:id="_xfs3kMjEEeepLoplTK0Zlg" type="debugEvents::EVENTTYPE" base_Parameter="_xfmw8MjEEeepLoplTK0Zlg"/>
  <RTCppProperties:ParameterProperties xmi:id="_xf5r4MjEEeepLoplTK0Zlg" type="const char *" base_Parameter="_xfzlQMjEEeepLoplTK0Zlg"/>
  <RTCppProperties:ParameterProperties xmi:id="_xgErAMjEEeepLoplTK0Zlg" type="const char *" base_Parameter="_xf_LcMjEEeepLoplTK0Zlg"/>
  <RTCppProperties:ParameterProperties xmi:id="_xgSGYMjEEeepLoplTK0Zlg" type="const char *" base_Parameter="_xgKKkMjEEeepLoplTK0Zlg"/>
  <RTCppProperties:ParameterProperties xmi:id="_xgfhwMjEEeepLoplTK0Zlg" type="const char *" base_Parameter="_xgaCMcjEEeepLoplTK0Zlg"/>
  <RTCppProperties:ParameterProperties xmi:id="_xgrvAMjEEeepLoplTK0Zlg" type="const char *" base_Parameter="_xgloYMjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_xhEwkMjEEeepLoplTK0Zlg" base_Pseudostate="_xg_RAMjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTState xmi:id="_xhLeQMjEEeepLoplTK0Zlg" base_State="_xhFXoMjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_xhTaEMjEEeepLoplTK0Zlg" base_Pseudostate="_xhNTcMjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_xhaHwMjEEeepLoplTK0Zlg" base_Pseudostate="_xhUBIMjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_xiDA8MjEEeepLoplTK0Zlg" base_Region="_xhFXocjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTState xmi:id="_xiUtwMjEEeepLoplTK0Zlg" base_State="_xiDA8cjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTState xmi:id="_xij-UMjEEeepLoplTK0Zlg" base_State="_xiEPEMjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTState xmi:id="_xizO4MjEEeepLoplTK0Zlg" base_State="_xiGrUMjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_xjTlMMjEEeepLoplTK0Zlg" base_Pseudostate="_xjOFoMjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTState xmi:id="_xjZEwMjEEeepLoplTK0Zlg" base_State="_xjTlMcjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_xjlSAMjEEeepLoplTK0Zlg" base_Pseudostate="_xjZEwcjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_xjxfQMjEEeepLoplTK0Zlg" base_Pseudostate="_xjlSAcjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_xkR1kMjEEeepLoplTK0Zlg" base_Region="_xjTlMsjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTState xmi:id="_xkwWsMjEEeepLoplTK0Zlg" base_State="_xkR1kcjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTState xmi:id="_xk_nQMjEEeepLoplTK0Zlg" base_State="_xkTDsMjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTState xmi:id="_xlHjEMjEEeepLoplTK0Zlg" base_State="_xkZKUMjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTState xmi:id="_xlYBwMjEEeepLoplTK0Zlg" base_State="_xkeC0MjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTState xmi:id="_xluAAMjEEeepLoplTK0Zlg" base_State="_xlogcMjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_xmIPsMjEEeepLoplTK0Zlg" base_Pseudostate="_xmBiAMjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTState xmi:id="_xmSnwMjEEeepLoplTK0Zlg" base_State="_xmI2wMjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_xmYHUMjEEeepLoplTK0Zlg" base_Pseudostate="_xmSnwcjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_xmjGcMjEEeepLoplTK0Zlg" base_Pseudostate="_xmYHUcjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_xmy-EMjEEeepLoplTK0Zlg" base_Region="_xmI2wcjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTState xmi:id="_xm_LUMjEEeepLoplTK0Zlg" base_State="_xmzlIMjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTState xmi:id="_xnFR8MjEEeepLoplTK0Zlg" base_State="_xm0MMMjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTState xmi:id="_xnMmsMjEEeepLoplTK0Zlg" base_State="_xm0zQMjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_xnb3QMjEEeepLoplTK0Zlg" base_Pseudostate="_xnW-wMjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTState xmi:id="_xngvwMjEEeepLoplTK0Zlg" base_State="_xnb3QcjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_xnqgwMjEEeepLoplTK0Zlg" base_Pseudostate="_xngvwcjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_xnxOcMjEEeepLoplTK0Zlg" base_Pseudostate="_xnrH0MjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_xoIa0MjEEeepLoplTK0Zlg" base_Region="_xnb3QsjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTState xmi:id="_xoSL0MjEEeepLoplTK0Zlg" base_State="_xoIa0cjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTState xmi:id="_xoXrYMjEEeepLoplTK0Zlg" base_State="_xoJB4cjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTState xmi:id="_xodyAMjEEeepLoplTK0Zlg" base_State="_xoJo8cjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTState xmi:id="_xo8TIMjEEeepLoplTK0Zlg" base_State="_xoKQAMjEEeepLoplTK0Zlg"/>
  <UMLRTStateMachines:RTState xmi:id="_xpNY4MjEEeepLoplTK0Zlg" base_State="_xpGrMMjEEeepLoplTK0Zlg"/>
</xmi:XMI>
