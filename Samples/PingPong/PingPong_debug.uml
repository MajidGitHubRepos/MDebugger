<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_MImLUExOEeeAapBXl-GW2w" name="PingPong">
    <eAnnotations xmi:id="_SI_ngExOEeeAapBXl-GW2w" source="http://www.eclipse.org/papyrus-rt/language/1.0.0">
      <details xmi:id="_SJAOkExOEeeAapBXl-GW2w" key="language" value="umlrt-cpp"/>
    </eAnnotations>
    <eAnnotations xmi:id="_o9ItsExOEeeAapBXl-GW2w" source="UMLRT_Default_top">
      <details xmi:id="_o9ItsUxOEeeAapBXl-GW2w" key="top_name" value="Debug__Top"/>
    </eAnnotations>
    <packageImport xmi:id="_e8tLwMjrEeewhZwYcFrjog">
      <importedPackage xmi:type="uml:Model" href="../CommGateWay/model.uml#_MZw7AAdxEeadtKuU2t6fMg"/>
    </packageImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_YKTpsExOEeeAapBXl-GW2w" name="PingPong">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_YKDyEExOEeeAapBXl-GW2w" name="PingPong">
        <interfaceRealization xmi:id="_YLTIMExOEeeAapBXl-GW2w" client="_YKDyEExOEeeAapBXl-GW2w" supplier="_YLFFwExOEeeAapBXl-GW2w" contract="_YLFFwExOEeeAapBXl-GW2w"/>
        <interfaceRealization xmi:id="_YLvNEExOEeeAapBXl-GW2w" client="_YKDyEExOEeeAapBXl-GW2w" supplier="_YLnRQExOEeeAapBXl-GW2w" contract="_YLnRQExOEeeAapBXl-GW2w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_YLFFwExOEeeAapBXl-GW2w" name="PingPong">
        <ownedOperation xmi:id="_bVz8YExOEeeAapBXl-GW2w" name="pong"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_YLbrEExOEeeAapBXl-GW2w" name="PingPong~">
        <ownedOperation xmi:id="_akmh4ExOEeeAapBXl-GW2w" name="ping"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_YLmDIExOEeeAapBXl-GW2w" client="_YKDyEExOEeeAapBXl-GW2w" supplier="_YLbrEExOEeeAapBXl-GW2w"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_YLmqMExOEeeAapBXl-GW2w" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_YLnRQExOEeeAapBXl-GW2w" name="PingPongIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_YLwbMExOEeeAapBXl-GW2w" client="_YKDyEExOEeeAapBXl-GW2w" supplier="_YLnRQExOEeeAapBXl-GW2w"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_akzWMExOEeeAapBXl-GW2w" operation="_akmh4ExOEeeAapBXl-GW2w"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_bV-UcExOEeeAapBXl-GW2w" operation="_bVz8YExOEeeAapBXl-GW2w"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_dBdl4ExOEeeAapBXl-GW2w" name="Pinger" visibility="public" classifierBehavior="_7eBO8ExOEeeAapBXl-GW2w" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_e-deEExOEeeAapBXl-GW2w" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_gCK90ExOEeeAapBXl-GW2w" name="pinger" type="_YKDyEExOEeeAapBXl-GW2w" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:id="_ww8oQExOEeeAapBXl-GW2w" name="pingCount" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_-bo3cMihEeecpIDEOn0ZdA" name="varString">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        <defaultValue xmi:type="uml:LiteralString" xmi:id="_Ez1IkMiiEeecpIDEOn0ZdA" value="testStringVariable"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_Inau8MiiEeecpIDEOn0ZdA" name="varBool">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_e_ahgMjrEeewhZwYcFrjog" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_e_idUMjrEeewhZwYcFrjog" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_e_jEYMjrEeewhZwYcFrjog" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_e_v4sMjrEeewhZwYcFrjog" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_e_v4scjrEeewhZwYcFrjog" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_e_v4ssjrEeewhZwYcFrjog" name="Debug__event">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_e_5CoMjrEeewhZwYcFrjog" name="Debug__SRO">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_7eBO8ExOEeeAapBXl-GW2w" name="PingerStateMachine" isReentrant="false">
        <region xmi:id="_7eS7wExOEeeAapBXl-GW2w" name="Region">
          <transition xmi:id="_7emdwExOEeeAapBXl-GW2w" name="Initial" source="_fEG0QMjrEeewhZwYcFrjog" target="_7ehlQExOEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_-mSyAExPEeeAapBXl-GW2w" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.show(&quot;leaving initial pseudo state of pinger\n&quot;);
pinger.ping().send();
pingCount=1;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_B4BBcExQEeeAapBXl-GW2w" name="onPong" source="_fFoeQMjrEeewhZwYcFrjog" target="_7ehlQExOEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ImedgExQEeeAapBXl-GW2w" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.show(&quot;pong message received.\n&quot;);
pinger.ping().send();
pingCount=pingCount+1;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::onPong&quot;,(char *)&quot;Debug__Path__onPong&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_fEl8ccjrEeewhZwYcFrjog" name="Debug__Initial" source="_fHAXQMjrEeewhZwYcFrjog" target="_fEG0QMjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fEpm0MjrEeewhZwYcFrjog" name="Debug__Initial__51">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPong&quot;,&quot;PLAYING&quot;,&quot;pong&quot;,&quot;PingPong&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPing&quot;,&quot;PLAYING&quot;,&quot;ping&quot;,&quot;PingPong&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_fHEBo8jrEeewhZwYcFrjog" name="ConnectionEstablished" port="_e_ahgMjrEeewhZwYcFrjog">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
            </trigger>
          </transition>
          <transition xmi:id="_fEq08MjrEeewhZwYcFrjog" name="Debug__Initial__S" guard="_fEq08sjrEeewhZwYcFrjog" source="_fEG0QMjrEeewhZwYcFrjog" target="_fEU2scjrEeewhZwYcFrjog">
            <ownedRule xmi:id="_fEq08sjrEeewhZwYcFrjog" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_fEq08cjrEeewhZwYcFrjog" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo2&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fEsDEMjrEeewhZwYcFrjog" name="Debug__Initial__S__53">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_fEufUMjrEeewhZwYcFrjog" name="Debug__Initial__E" source="_fEa9UMjrEeewhZwYcFrjog" target="_7ehlQExOEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fEufUcjrEeewhZwYcFrjog" name="Debug__Initial__E__54">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_fEvtcMjrEeewhZwYcFrjog" name="Debug__Initial__dbg__varChange" source="_fEOwEcjrEeewhZwYcFrjog" target="_fEOwEcjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fEwUgcjrEeewhZwYcFrjog" name="Debug__Initial__dbg__varChange__56">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_fEwUgMjrEeewhZwYcFrjog" name="Debug__MSG" port="_e_ahgMjrEeewhZwYcFrjog">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_fEwUgsjrEeewhZwYcFrjog" name="Debug__Initial__dbg__setBreakPoint" source="_fEOwEcjrEeewhZwYcFrjog" target="_fEOwEcjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fEw7kMjrEeewhZwYcFrjog" name="Debug__Initial__dbg__setBreakPoint__57">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_fEwUg8jrEeewhZwYcFrjog" name="Debug__MSG" port="_e_ahgMjrEeewhZwYcFrjog">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_fEw7kcjrEeewhZwYcFrjog" name="Debug__Initial__dbg__remBreakPoint" source="_fEOwEcjrEeewhZwYcFrjog" target="_fEOwEcjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fEw7k8jrEeewhZwYcFrjog" name="Debug__Initial__dbg__remBreakPoint__58">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_fEw7ksjrEeewhZwYcFrjog" name="Debug__MSG" port="_e_ahgMjrEeewhZwYcFrjog">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_fExioMjrEeewhZwYcFrjog" name="Debug__Initial__dbg__viewBreakPoints" source="_fEOwEcjrEeewhZwYcFrjog" target="_fEOwEcjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fExiosjrEeewhZwYcFrjog" name="Debug__Initial__dbg__viewBreakPoints__59">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_fExiocjrEeewhZwYcFrjog" name="Debug__MSG" port="_e_ahgMjrEeewhZwYcFrjog">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_fExio8jrEeewhZwYcFrjog" name="Debug__Initial__dbg__dbgSetExecMode" source="_fEOwEcjrEeewhZwYcFrjog" target="_fEOwEcjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fExipcjrEeewhZwYcFrjog" name="Debug__Initial__dbg__dbgSetExecMode__60">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_fExipMjrEeewhZwYcFrjog" name="Debug__MSG" port="_e_ahgMjrEeewhZwYcFrjog">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_fEyJsMjrEeewhZwYcFrjog" name="Debug__Initial__dbg__dbgDeferMsg" source="_fEOwEcjrEeewhZwYcFrjog" target="_fEOwEcjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fEyJssjrEeewhZwYcFrjog" name="Debug__Initial__dbg__dbgDeferMsg__61">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_fEyJscjrEeewhZwYcFrjog" name="Debug__MSG" port="_gCK90ExOEeeAapBXl-GW2w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_fGJboMjrEeewhZwYcFrjog" name="Debug__onPong" source="_7ehlQExOEeeAapBXl-GW2w" target="_fFoeQMjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fGJbocjrEeewhZwYcFrjog" name="Debug__onPong__73">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__onPong&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;Debug__Path__onPong&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:id="_DrVZMExQEeeAapBXl-GW2w" event="_bV-UcExOEeeAapBXl-GW2w" port="_gCK90ExOEeeAapBXl-GW2w"/>
          </transition>
          <transition xmi:id="_fGYFIMjrEeewhZwYcFrjog" name="Debug__onPong__S" guard="_fGYsMcjrEeewhZwYcFrjog" source="_fFoeQMjrEeewhZwYcFrjog" target="_fF91cMjrEeewhZwYcFrjog">
            <ownedRule xmi:id="_fGYsMcjrEeewhZwYcFrjog" name="Debug__GuardonPong">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_fGYsMMjrEeewhZwYcFrjog" name="Debug__GuardonPong">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fGZTQMjrEeewhZwYcFrjog" name="Debug__onPong__S__75">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__onPong__S&quot;,(char *)&quot;Debug__Path__onPong&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_fGZ6UMjrEeewhZwYcFrjog" name="Debug__onPong__E" source="_fGEjIMjrEeewhZwYcFrjog" target="_7ehlQExOEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fGZ6UcjrEeewhZwYcFrjog" name="Debug__onPong__E__76">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__onPong__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_fGbIcMjrEeewhZwYcFrjog" name="Debug__onPong__dbg__varChange" source="_fFvL8cjrEeewhZwYcFrjog" target="_fFvL8cjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fGbIcsjrEeewhZwYcFrjog" name="Debug__onPong__dbg__varChange__78">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_fGbIccjrEeewhZwYcFrjog" name="Debug__MSG" port="_e_ahgMjrEeewhZwYcFrjog">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_fGbvgMjrEeewhZwYcFrjog" name="Debug__onPong__dbg__setBreakPoint" source="_fFvL8cjrEeewhZwYcFrjog" target="_fFvL8cjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fGbvgsjrEeewhZwYcFrjog" name="Debug__onPong__dbg__setBreakPoint__79">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_fGbvgcjrEeewhZwYcFrjog" name="Debug__MSG" port="_e_ahgMjrEeewhZwYcFrjog">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_fGcWkMjrEeewhZwYcFrjog" name="Debug__onPong__dbg__remBreakPoint" source="_fFvL8cjrEeewhZwYcFrjog" target="_fFvL8cjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fGcWksjrEeewhZwYcFrjog" name="Debug__onPong__dbg__remBreakPoint__80">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_fGcWkcjrEeewhZwYcFrjog" name="Debug__MSG" port="_e_ahgMjrEeewhZwYcFrjog">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_fGcWk8jrEeewhZwYcFrjog" name="Debug__onPong__dbg__viewBreakPoints" source="_fFvL8cjrEeewhZwYcFrjog" target="_fFvL8cjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fGcWlcjrEeewhZwYcFrjog" name="Debug__onPong__dbg__viewBreakPoints__81">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_fGcWlMjrEeewhZwYcFrjog" name="Debug__MSG" port="_e_ahgMjrEeewhZwYcFrjog">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_fGcWlsjrEeewhZwYcFrjog" name="Debug__onPong__dbg__dbgSetExecMode" source="_fFvL8cjrEeewhZwYcFrjog" target="_fFvL8cjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fGc9ocjrEeewhZwYcFrjog" name="Debug__onPong__dbg__dbgSetExecMode__82">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_fGc9oMjrEeewhZwYcFrjog" name="Debug__MSG" port="_e_ahgMjrEeewhZwYcFrjog">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_fGc9osjrEeewhZwYcFrjog" name="Debug__onPong__dbg__dbgDeferMsg" source="_fFvL8cjrEeewhZwYcFrjog" target="_fFvL8cjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fGc9pMjrEeewhZwYcFrjog" name="Debug__onPong__dbg__dbgDeferMsg__83">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_fGc9o8jrEeewhZwYcFrjog" name="Debug__MSG" port="_gCK90ExOEeeAapBXl-GW2w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_fHEBocjrEeewhZwYcFrjog" name="Debug__InitDebug" source="_7eXNMExOEeeAapBXl-GW2w" target="_fHAXQMjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fHEBosjrEeewhZwYcFrjog" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_7eXNMExOEeeAapBXl-GW2w" name="Pseudo2"/>
          <subvertex xmi:type="uml:State" xmi:id="_7ehlQExOEeeAapBXl-GW2w" name="PLAYING">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_e3YJMExPEeeAapBXl-GW2w" name="Entry" isReentrant="false">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
log.show(&quot;Entering playing state of pinger\n&quot;);
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_gBgaAExPEeeAapBXl-GW2w" name="Exit" isReentrant="false">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
log.show(&quot;Leaving playing state of pinger\n&quot;);
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_fEG0QMjrEeewhZwYcFrjog" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_fEOwEcjrEeewhZwYcFrjog" name="Debug__C__Initial">
            <connectionPoint xmi:id="_fEU2scjrEeewhZwYcFrjog" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_fEa9UMjrEeewhZwYcFrjog" name="ex" kind="exitPoint"/>
            <region xmi:id="_fEOwEsjrEeewhZwYcFrjog" name="Region1">
              <transition xmi:id="_fE5ecsjrEeewhZwYcFrjog" name="Debug__init__trans__Initial" source="_fEU2scjrEeewhZwYcFrjog" target="_fE4QUcjrEeewhZwYcFrjog">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fFfUUMjrEeewhZwYcFrjog" name="Debug__init__trans__Initial__66">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_fE5ec8jrEeewhZwYcFrjog" name="Debug__Ac__Initial" source="_fE4QUcjrEeewhZwYcFrjog" target="_fE43YMjrEeewhZwYcFrjog">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fE6FgMjrEeewhZwYcFrjog" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;leaving initial pseudo state of pinger\n&quot;);
pinger.ping().send();
pingCount=1;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_fE5edMjrEeewhZwYcFrjog" name="Debug__Exec" port="_e_ahgMjrEeewhZwYcFrjog">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_fE6FgcjrEeewhZwYcFrjog" name="Debug__En__PLAYING" source="_fE43YMjrEeewhZwYcFrjog" target="_fE5ecMjrEeewhZwYcFrjog">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fE6Fg8jrEeewhZwYcFrjog" name="Entry" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Entering playing state of pinger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_fE6FgsjrEeewhZwYcFrjog" name="Debug__Exec" port="_e_ahgMjrEeewhZwYcFrjog">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_fE6skMjrEeewhZwYcFrjog" name="Debug__end__trans__Initial" source="_fE5ecMjrEeewhZwYcFrjog" target="_fEa9UMjrEeewhZwYcFrjog">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fFi-sMjrEeewhZwYcFrjog" name="Debug__end__trans__Initial__70">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_fE6skcjrEeewhZwYcFrjog" name="Debug__Exec" port="_e_ahgMjrEeewhZwYcFrjog">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_fE4QUcjrEeewhZwYcFrjog" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_fE4QUsjrEeewhZwYcFrjog" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_fFIvAcjrEeewhZwYcFrjog" name="Debug__B__Ac__Initial__62">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_fE43YMjrEeewhZwYcFrjog" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_fE43YcjrEeewhZwYcFrjog" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_fFab0MjrEeewhZwYcFrjog" name="Debug__A__Ac__Initial__63">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_fE5ecMjrEeewhZwYcFrjog" name="Debug__A__En__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_fE5eccjrEeewhZwYcFrjog" name="Debug__A__En__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_fFetQcjrEeewhZwYcFrjog" name="Debug__A__En__PLAYING__64">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_fFoeQMjrEeewhZwYcFrjog" name="Debug__Path__onPong" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_fFvL8cjrEeewhZwYcFrjog" name="Debug__C__onPong">
            <connectionPoint xmi:id="_fF91cMjrEeewhZwYcFrjog" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_fGEjIMjrEeewhZwYcFrjog" name="ex" kind="exitPoint"/>
            <region xmi:id="_fFvL8sjrEeewhZwYcFrjog" name="Region1">
              <transition xmi:id="_fGk5cMjrEeewhZwYcFrjog" name="Debug__init__trans__onPong" source="_fF91cMjrEeewhZwYcFrjog" target="_fGhPEcjrEeewhZwYcFrjog">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fG6QocjrEeewhZwYcFrjog" name="Debug__init__trans__onPong__89">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__init__trans__onPong&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_fGk5ccjrEeewhZwYcFrjog" name="Debug__Ex__PLAYING" source="_fGhPEcjrEeewhZwYcFrjog" target="_fGh2IMjrEeewhZwYcFrjog">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fGk5c8jrEeewhZwYcFrjog" name="Exit" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Leaving playing state of pinger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ac__onPong&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_fGk5csjrEeewhZwYcFrjog" name="Debug__Exec" port="_e_ahgMjrEeewhZwYcFrjog">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_fGlggMjrEeewhZwYcFrjog" name="Debug__AC__onPong" source="_fGh2IMjrEeewhZwYcFrjog" target="_fGjEQMjrEeewhZwYcFrjog">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fGlggsjrEeewhZwYcFrjog" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;pong message received.\n&quot;);
pinger.ping().send();
pingCount=pingCount+1;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__AC__onPong&quot;,(char *)&quot;Debug__B__Ac__onPong&quot;,(char *)&quot;Debug__A__Ac__onPong&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_fGlggcjrEeewhZwYcFrjog" name="Debug__Exec" port="_e_ahgMjrEeewhZwYcFrjog">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_fGlgg8jrEeewhZwYcFrjog" name="Debug__En__PLAYING" source="_fGjEQMjrEeewhZwYcFrjog" target="_fGkSYMjrEeewhZwYcFrjog">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fGlghcjrEeewhZwYcFrjog" name="Entry" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Entering playing state of pinger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__onPong&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_fGlghMjrEeewhZwYcFrjog" name="Debug__Exec" port="_e_ahgMjrEeewhZwYcFrjog">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_fGmHkMjrEeewhZwYcFrjog" name="Debug__end__trans__onPong" source="_fGkSYMjrEeewhZwYcFrjog" target="_fGEjIMjrEeewhZwYcFrjog">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fG97AMjrEeewhZwYcFrjog" name="Debug__end__trans__onPong__94">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__end__trans__onPong&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_fGmHkcjrEeewhZwYcFrjog" name="Debug__Exec" port="_e_ahgMjrEeewhZwYcFrjog">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_fGhPEcjrEeewhZwYcFrjog" name="Debug__B__Ex__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_fGhPEsjrEeewhZwYcFrjog" name="Debug__B__Ex__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_fGrnIcjrEeewhZwYcFrjog" name="Debug__B__Ex__PLAYING__84">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_fGh2IMjrEeewhZwYcFrjog" name="Debug__B__Ac__onPong">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_fGh2IcjrEeewhZwYcFrjog" name="Debug__B__Ac__onPong">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;onPong&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_fGwfoMjrEeewhZwYcFrjog" name="Debug__B__Ac__onPong__85">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_fGjEQMjrEeewhZwYcFrjog" name="Debug__A__Ac__onPong">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_fGjrUMjrEeewhZwYcFrjog" name="Debug__A__Ac__onPong">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;onPong&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__A__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_fG1YIMjrEeewhZwYcFrjog" name="Debug__A__Ac__onPong__86">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__A__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_fGkSYMjrEeewhZwYcFrjog" name="Debug__A__En__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_fGkSYcjrEeewhZwYcFrjog" name="Debug__A__En__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_fG1_MMjrEeewhZwYcFrjog" name="Debug__A__En__PLAYING__87">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_fHAXQMjrEeewhZwYcFrjog" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_e_VpAcjrEeewhZwYcFrjog" name="Debug__recallAllMsg" specification="_e_VpAMjrEeewhZwYcFrjog">
        <language>C++</language>
        <body>pinger.recallAll();
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_e_s1YcjrEeewhZwYcFrjog" name="Debug__variablesViewMethod" specification="_e_s1YMjrEeewhZwYcFrjog">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;pingCount,&quot;);
tempS.append(&quot;Integer,&quot;);
if(pingCount!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,pingCount);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
tempS.append(&quot;varString,&quot;);
tempS.append(&quot;String,&quot;);
if(varString==NULL){
    tempS.append(&quot;\&quot;\&quot;&quot;);
    tempS.append(&quot;\n&quot;);
}else{
    tempS.append(&quot;\&quot;&quot;);
    tempS.append(varString);
    tempS.append(&quot;\&quot;&quot;);
    tempS.append(&quot;\n&quot;);
};
tempS.append(&quot;varBool,&quot;);
tempS.append(&quot;Boolean,&quot;);
if(varBool==true){
    tempS.append(&quot;true&quot;);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;false&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_e_vRosjrEeewhZwYcFrjog" name="Debug__variablesChange" specification="_e_uqkMjrEeewhZwYcFrjog">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;varString&quot;==tempVarName){
    if (varString==NULL)
        varString=(char*) malloc(strlen(varValue)+1);
    else if(strlen(varString)&lt;strlen(varValue))
        varString=(char *) realloc(varString,strlen(varValue)+1);
    strcpy(varString,varValue);
    return true;
}else if (&quot;pingCount&quot;==tempVarName){
    pingCount=atoi(varValue);
    return true;
}else if (&quot;varBool&quot;==tempVarName){
    if(strcmp(varValue,&quot;true&quot;)==0)
        varBool=true;
    else 
        varBool=false;
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_fBMDIMjrEeewhZwYcFrjog" name="Debug__sendEvent" specification="_fAVHgMjrEeewhZwYcFrjog">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
this->Debug__event.setPayloadField(&quot;SenderCapsule&quot;,reserve3);
this->Debug__event.setPayloadField(&quot;Port&quot;,reserve4);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_e_VpAMjrEeewhZwYcFrjog" name="Debug__recallAllMsg" visibility="private" method="_e_VpAcjrEeewhZwYcFrjog"/>
      <ownedOperation xmi:id="_e_s1YMjrEeewhZwYcFrjog" name="Debug__variablesView" visibility="private" method="_e_s1YcjrEeewhZwYcFrjog"/>
      <ownedOperation xmi:id="_e_uqkMjrEeewhZwYcFrjog" name="Debug__variablesChange" visibility="private" method="_e_vRosjrEeewhZwYcFrjog">
        <ownedParameter xmi:id="_e_uqkcjrEeewhZwYcFrjog" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_e_vRoMjrEeewhZwYcFrjog" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_e_vRocjrEeewhZwYcFrjog" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_fAVHgMjrEeewhZwYcFrjog" name="Debug__sendEvent" visibility="private" method="_fBMDIMjrEeewhZwYcFrjog">
        <ownedParameter xmi:id="_fAVHgcjrEeewhZwYcFrjog" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_fAccQMjrEeewhZwYcFrjog" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_fAkYEMjrEeewhZwYcFrjog" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_fArs0MjrEeewhZwYcFrjog" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_fAsT4MjrEeewhZwYcFrjog" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_fAzooMjrEeewhZwYcFrjog" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_fA69YMjrEeewhZwYcFrjog" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_fA7kcMjrEeewhZwYcFrjog" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_fA8LgMjrEeewhZwYcFrjog" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_fA8LgcjrEeewhZwYcFrjog" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_fBEHUMjrEeewhZwYcFrjog" name="reserve4">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_irESsExOEeeAapBXl-GW2w" name="Ponger" classifierBehavior="_P8x8sExQEeeAapBXl-GW2w" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_j9fj4ExOEeeAapBXl-GW2w" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_kypqQExOEeeAapBXl-GW2w" name="ponger" type="_YKDyEExOEeeAapBXl-GW2w" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:id="_4p-aAExOEeeAapBXl-GW2w" name="j" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_e9hEEMjrEeewhZwYcFrjog" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_e9l8kcjrEeewhZwYcFrjog" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_e9l8ksjrEeewhZwYcFrjog" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_e91NIMjrEeewhZwYcFrjog" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_e91NIcjrEeewhZwYcFrjog" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_e91NIsjrEeewhZwYcFrjog" name="Debug__event">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_e99I8MjrEeewhZwYcFrjog" name="Debug__SRO">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_P8x8sExQEeeAapBXl-GW2w" name="PongerStateMachine" isReentrant="false">
        <region xmi:id="_P9XykExQEeeAapBXl-GW2w" name="Region">
          <transition xmi:id="_P9qGcExQEeeAapBXl-GW2w" name="Initial" source="_fBPtgMjrEeewhZwYcFrjog" target="_P9jYwExQEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fCIeUMjrEeewhZwYcFrjog" name="Initial__25">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_ZUZMUExQEeeAapBXl-GW2w" name="onPing" source="_fCK6kMjrEeewhZwYcFrjog" target="_P9jYwExQEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_q3J4cExQEeeAapBXl-GW2w" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.show(&quot;ping message received.\n&quot;);
ponger.pong().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::onPing&quot;,(char *)&quot;Debug__Path__onPing&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_fBhaUcjrEeewhZwYcFrjog" name="Debug__Initial" source="_fDyrMMjrEeewhZwYcFrjog" target="_fBPtgMjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fBhaUsjrEeewhZwYcFrjog" name="Debug__Initial__3">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPing&quot;,&quot;PLAYING&quot;,&quot;ping&quot;,&quot;PingPong&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_fD5Y4sjrEeewhZwYcFrjog" name="ConnectionEstablished" port="_e9hEEMjrEeewhZwYcFrjog">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
            </trigger>
          </transition>
          <transition xmi:id="_fBjPgMjrEeewhZwYcFrjog" name="Debug__Initial__S" guard="_fBjPgsjrEeewhZwYcFrjog" source="_fBPtgMjrEeewhZwYcFrjog" target="_fBY3ccjrEeewhZwYcFrjog">
            <ownedRule xmi:id="_fBjPgsjrEeewhZwYcFrjog" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_fBjPgcjrEeewhZwYcFrjog" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo1&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fBj2kMjrEeewhZwYcFrjog" name="Debug__Initial__S__5">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_fBlEsMjrEeewhZwYcFrjog" name="Debug__Initial__E" source="_fBdI4cjrEeewhZwYcFrjog" target="_P9jYwExQEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fBlrwMjrEeewhZwYcFrjog" name="Debug__Initial__E__6">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_fBoIAMjrEeewhZwYcFrjog" name="Debug__Initial__dbg__varChange" source="_fBT-8cjrEeewhZwYcFrjog" target="_fBT-8cjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fBovEcjrEeewhZwYcFrjog" name="Debug__Initial__dbg__varChange__8">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_fBovEMjrEeewhZwYcFrjog" name="Debug__MSG" port="_e9hEEMjrEeewhZwYcFrjog">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_fBovEsjrEeewhZwYcFrjog" name="Debug__Initial__dbg__setBreakPoint" source="_fBT-8cjrEeewhZwYcFrjog" target="_fBT-8cjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fBovFMjrEeewhZwYcFrjog" name="Debug__Initial__dbg__setBreakPoint__9">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_fBovE8jrEeewhZwYcFrjog" name="Debug__MSG" port="_e9hEEMjrEeewhZwYcFrjog">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_fBpWIMjrEeewhZwYcFrjog" name="Debug__Initial__dbg__remBreakPoint" source="_fBT-8cjrEeewhZwYcFrjog" target="_fBT-8cjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fBp9McjrEeewhZwYcFrjog" name="Debug__Initial__dbg__remBreakPoint__10">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_fBp9MMjrEeewhZwYcFrjog" name="Debug__MSG" port="_e9hEEMjrEeewhZwYcFrjog">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_fBqkQMjrEeewhZwYcFrjog" name="Debug__Initial__dbg__viewBreakPoints" source="_fBT-8cjrEeewhZwYcFrjog" target="_fBT-8cjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fBqkQsjrEeewhZwYcFrjog" name="Debug__Initial__dbg__viewBreakPoints__11">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_fBqkQcjrEeewhZwYcFrjog" name="Debug__MSG" port="_e9hEEMjrEeewhZwYcFrjog">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_fBrLUMjrEeewhZwYcFrjog" name="Debug__Initial__dbg__dbgSetExecMode" source="_fBT-8cjrEeewhZwYcFrjog" target="_fBT-8cjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fBryYcjrEeewhZwYcFrjog" name="Debug__Initial__dbg__dbgSetExecMode__12">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_fBryYMjrEeewhZwYcFrjog" name="Debug__MSG" port="_e9hEEMjrEeewhZwYcFrjog">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_fBsZcMjrEeewhZwYcFrjog" name="Debug__Initial__dbg__dbgDeferMsg" source="_fBT-8cjrEeewhZwYcFrjog" target="_fBT-8cjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fBsZcsjrEeewhZwYcFrjog" name="Debug__Initial__dbg__dbgDeferMsg__13">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_fBsZccjrEeewhZwYcFrjog" name="Debug__MSG" port="_kypqQExOEeeAapBXl-GW2w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_fCgRwcjrEeewhZwYcFrjog" name="Debug__onPing" source="_P9jYwExQEeeAapBXl-GW2w" target="_fCK6kMjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fCgRwsjrEeewhZwYcFrjog" name="Debug__onPing__27">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__onPing&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;Debug__Path__onPing&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:id="_b3gpUExQEeeAapBXl-GW2w" event="_akzWMExOEeeAapBXl-GW2w" port="_kypqQExOEeeAapBXl-GW2w"/>
          </transition>
          <transition xmi:id="_fC_Z8MjrEeewhZwYcFrjog" name="Debug__onPing__S" guard="_fC_Z8sjrEeewhZwYcFrjog" source="_fCK6kMjrEeewhZwYcFrjog" target="_fCS2YcjrEeewhZwYcFrjog">
            <ownedRule xmi:id="_fC_Z8sjrEeewhZwYcFrjog" name="Debug__GuardonPing">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_fC_Z8cjrEeewhZwYcFrjog" name="Debug__GuardonPing">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fDABAMjrEeewhZwYcFrjog" name="Debug__onPing__S__29">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__onPing__S&quot;,(char *)&quot;Debug__Path__onPing&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_fDB2MMjrEeewhZwYcFrjog" name="Debug__onPing__E" source="_fCZkEcjrEeewhZwYcFrjog" target="_P9jYwExQEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fDCdQMjrEeewhZwYcFrjog" name="Debug__onPing__E__30">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__onPing__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_fDEScMjrEeewhZwYcFrjog" name="Debug__onPing__dbg__varChange" source="_fCPMAMjrEeewhZwYcFrjog" target="_fCPMAMjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fDEScsjrEeewhZwYcFrjog" name="Debug__onPing__dbg__varChange__32">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_fDESccjrEeewhZwYcFrjog" name="Debug__MSG" port="_e9hEEMjrEeewhZwYcFrjog">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_fDE5gMjrEeewhZwYcFrjog" name="Debug__onPing__dbg__setBreakPoint" source="_fCPMAMjrEeewhZwYcFrjog" target="_fCPMAMjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fDFgkMjrEeewhZwYcFrjog" name="Debug__onPing__dbg__setBreakPoint__33">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_fDE5gcjrEeewhZwYcFrjog" name="Debug__MSG" port="_e9hEEMjrEeewhZwYcFrjog">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_fDFgkcjrEeewhZwYcFrjog" name="Debug__onPing__dbg__remBreakPoint" source="_fCPMAMjrEeewhZwYcFrjog" target="_fCPMAMjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fDFgk8jrEeewhZwYcFrjog" name="Debug__onPing__dbg__remBreakPoint__34">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_fDFgksjrEeewhZwYcFrjog" name="Debug__MSG" port="_e9hEEMjrEeewhZwYcFrjog">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_fDGHoMjrEeewhZwYcFrjog" name="Debug__onPing__dbg__viewBreakPoints" source="_fCPMAMjrEeewhZwYcFrjog" target="_fCPMAMjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fDGHosjrEeewhZwYcFrjog" name="Debug__onPing__dbg__viewBreakPoints__35">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_fDGHocjrEeewhZwYcFrjog" name="Debug__MSG" port="_e9hEEMjrEeewhZwYcFrjog">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_fDGHo8jrEeewhZwYcFrjog" name="Debug__onPing__dbg__dbgSetExecMode" source="_fCPMAMjrEeewhZwYcFrjog" target="_fCPMAMjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fDGHpcjrEeewhZwYcFrjog" name="Debug__onPing__dbg__dbgSetExecMode__36">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_fDGHpMjrEeewhZwYcFrjog" name="Debug__MSG" port="_e9hEEMjrEeewhZwYcFrjog">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_fDGHpsjrEeewhZwYcFrjog" name="Debug__onPing__dbg__dbgDeferMsg" source="_fCPMAMjrEeewhZwYcFrjog" target="_fCPMAMjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fDGusMjrEeewhZwYcFrjog" name="Debug__onPing__dbg__dbgDeferMsg__37">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_fDGHp8jrEeewhZwYcFrjog" name="Debug__MSG" port="_kypqQExOEeeAapBXl-GW2w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_fD5Y4MjrEeewhZwYcFrjog" name="Debug__InitDebug" source="_P9fHUExQEeeAapBXl-GW2w" target="_fDyrMMjrEeewhZwYcFrjog">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fD5Y4cjrEeewhZwYcFrjog" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_P9fHUExQEeeAapBXl-GW2w" name="Pseudo1"/>
          <subvertex xmi:type="uml:State" xmi:id="_P9jYwExQEeeAapBXl-GW2w" name="PLAYING">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_fs-fAExQEeeAapBXl-GW2w" name="Entry" isReentrant="false">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
log.show(&quot;Entering playing state of ponger\n&quot;);
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_j-wdQExQEeeAapBXl-GW2w" name="Exit" isReentrant="false">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
log.show(&quot;Leaving playing state of ponger\n&quot;);
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_fBPtgMjrEeewhZwYcFrjog" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_fBT-8cjrEeewhZwYcFrjog" name="Debug__C__Initial">
            <connectionPoint xmi:id="_fBY3ccjrEeewhZwYcFrjog" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_fBdI4cjrEeewhZwYcFrjog" name="ex" kind="exitPoint"/>
            <region xmi:id="_fBUmAMjrEeewhZwYcFrjog" name="Region1">
              <transition xmi:id="_fBygEMjrEeewhZwYcFrjog" name="Debug__init__trans__Initial" source="_fBY3ccjrEeewhZwYcFrjog" target="_fBwq4cjrEeewhZwYcFrjog">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fCEM4MjrEeewhZwYcFrjog" name="Debug__init__trans__Initial__18">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_fBygEcjrEeewhZwYcFrjog" name="Debug__Ac__Initial" source="_fBwq4cjrEeewhZwYcFrjog" target="_fBxR8MjrEeewhZwYcFrjog">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fCFbAMjrEeewhZwYcFrjog" name="Debug__Ac__Initial__20">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_fBygEsjrEeewhZwYcFrjog" name="Debug__Exec" port="_e9hEEMjrEeewhZwYcFrjog">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_fBygE8jrEeewhZwYcFrjog" name="Debug__En__PLAYING" source="_fBxR8MjrEeewhZwYcFrjog" target="_fBx5AMjrEeewhZwYcFrjog">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fBygFcjrEeewhZwYcFrjog" name="Entry" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Entering playing state of ponger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_fBygFMjrEeewhZwYcFrjog" name="Debug__Exec" port="_e9hEEMjrEeewhZwYcFrjog">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_fBzHIMjrEeewhZwYcFrjog" name="Debug__end__trans__Initial" source="_fBx5AMjrEeewhZwYcFrjog" target="_fBdI4cjrEeewhZwYcFrjog">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fCHQMMjrEeewhZwYcFrjog" name="Debug__end__trans__Initial__23">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_fBzHIcjrEeewhZwYcFrjog" name="Debug__Exec" port="_e9hEEMjrEeewhZwYcFrjog">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_fBwq4cjrEeewhZwYcFrjog" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_fBwq4sjrEeewhZwYcFrjog" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_fB2xgcjrEeewhZwYcFrjog" name="Debug__B__Ac__Initial__14">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_fBxR8MjrEeewhZwYcFrjog" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_fBxR8cjrEeewhZwYcFrjog" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_fB7qAMjrEeewhZwYcFrjog" name="Debug__A__Ac__Initial__15">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_fBx5AMjrEeewhZwYcFrjog" name="Debug__A__En__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_fBx5AcjrEeewhZwYcFrjog" name="Debug__A__En__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_fCC-wMjrEeewhZwYcFrjog" name="Debug__A__En__PLAYING__16">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_fCK6kMjrEeewhZwYcFrjog" name="Debug__Path__onPing" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_fCPMAMjrEeewhZwYcFrjog" name="Debug__C__onPing">
            <connectionPoint xmi:id="_fCS2YcjrEeewhZwYcFrjog" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_fCZkEcjrEeewhZwYcFrjog" name="ex" kind="exitPoint"/>
            <region xmi:id="_fCPMAcjrEeewhZwYcFrjog" name="Region1">
              <transition xmi:id="_fDM1UMjrEeewhZwYcFrjog" name="Debug__init__trans__onPing" source="_fCS2YcjrEeewhZwYcFrjog" target="_fDLAIMjrEeewhZwYcFrjog">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fDo6McjrEeewhZwYcFrjog" name="Debug__init__trans__onPing__43">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__init__trans__onPing&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_fDM1UcjrEeewhZwYcFrjog" name="Debug__Ex__PLAYING" source="_fDLAIMjrEeewhZwYcFrjog" target="_fDLAIsjrEeewhZwYcFrjog">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fDM1U8jrEeewhZwYcFrjog" name="Exit" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Leaving playing state of ponger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ac__onPing&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_fDM1UsjrEeewhZwYcFrjog" name="Debug__Exec" port="_e9hEEMjrEeewhZwYcFrjog">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_fDNcYMjrEeewhZwYcFrjog" name="Debug__AC__onPing" source="_fDLAIsjrEeewhZwYcFrjog" target="_fDLnMMjrEeewhZwYcFrjog">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fDNcYsjrEeewhZwYcFrjog" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;ping message received.\n&quot;);
ponger.pong().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__AC__onPing&quot;,(char *)&quot;Debug__B__Ac__onPing&quot;,(char *)&quot;Debug__A__Ac__onPing&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_fDNcYcjrEeewhZwYcFrjog" name="Debug__Exec" port="_e9hEEMjrEeewhZwYcFrjog">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_fDNcY8jrEeewhZwYcFrjog" name="Debug__En__PLAYING" source="_fDLnMMjrEeewhZwYcFrjog" target="_fDMOQMjrEeewhZwYcFrjog">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fDODcMjrEeewhZwYcFrjog" name="Entry" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Entering playing state of ponger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__onPing&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_fDNcZMjrEeewhZwYcFrjog" name="Debug__Exec" port="_e9hEEMjrEeewhZwYcFrjog">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_fDODccjrEeewhZwYcFrjog" name="Debug__end__trans__onPing" source="_fDMOQMjrEeewhZwYcFrjog" target="_fCZkEcjrEeewhZwYcFrjog">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fDwO8MjrEeewhZwYcFrjog" name="Debug__end__trans__onPing__48">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__end__trans__onPing&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_fDODcsjrEeewhZwYcFrjog" name="Debug__Exec" port="_e9hEEMjrEeewhZwYcFrjog">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_fDLAIMjrEeewhZwYcFrjog" name="Debug__B__Ex__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_fDLAIcjrEeewhZwYcFrjog" name="Debug__B__Ex__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_fDSU4MjrEeewhZwYcFrjog" name="Debug__B__Ex__PLAYING__38">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_fDLAIsjrEeewhZwYcFrjog" name="Debug__B__Ac__onPing">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_fDLAI8jrEeewhZwYcFrjog" name="Debug__B__Ac__onPing">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;onPing&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_fDX0ccjrEeewhZwYcFrjog" name="Debug__B__Ac__onPing__39">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_fDLnMMjrEeewhZwYcFrjog" name="Debug__A__Ac__onPing">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_fDLnMcjrEeewhZwYcFrjog" name="Debug__A__Ac__onPing">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;onPing&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__A__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_fDgXUMjrEeewhZwYcFrjog" name="Debug__A__Ac__onPing__40">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__A__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_fDMOQMjrEeewhZwYcFrjog" name="Debug__A__En__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_fDMOQcjrEeewhZwYcFrjog" name="Debug__A__En__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_fDizkMjrEeewhZwYcFrjog" name="Debug__A__En__PLAYING__41">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_fDyrMMjrEeewhZwYcFrjog" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_e9gdAcjrEeewhZwYcFrjog" name="Debug__recallAllMsg" specification="_e9gdAMjrEeewhZwYcFrjog">
        <language>C++</language>
        <body>ponger.recallAll();
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_e9wUocjrEeewhZwYcFrjog" name="Debug__variablesViewMethod" specification="_e9wUoMjrEeewhZwYcFrjog">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;j,&quot;);
tempS.append(&quot;Integer,&quot;);
if(j!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,j);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_e90mEMjrEeewhZwYcFrjog" name="Debug__variablesChange" specification="_e9yJ0MjrEeewhZwYcFrjog">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;j&quot;==tempVarName){
    j=atoi(varValue);
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_e_Tz0MjrEeewhZwYcFrjog" name="Debug__sendEvent" specification="_e-cRIMjrEeewhZwYcFrjog">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
this->Debug__event.setPayloadField(&quot;SenderCapsule&quot;,reserve3);
this->Debug__event.setPayloadField(&quot;Port&quot;,reserve4);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_e9gdAMjrEeewhZwYcFrjog" name="Debug__recallAllMsg" visibility="private" method="_e9gdAcjrEeewhZwYcFrjog"/>
      <ownedOperation xmi:id="_e9wUoMjrEeewhZwYcFrjog" name="Debug__variablesView" visibility="private" method="_e9wUocjrEeewhZwYcFrjog"/>
      <ownedOperation xmi:id="_e9yJ0MjrEeewhZwYcFrjog" name="Debug__variablesChange" visibility="private" method="_e90mEMjrEeewhZwYcFrjog">
        <ownedParameter xmi:id="_e9zX8MjrEeewhZwYcFrjog" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_e9zX8cjrEeewhZwYcFrjog" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_e9z_AMjrEeewhZwYcFrjog" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_e-cRIMjrEeewhZwYcFrjog" name="Debug__sendEvent" visibility="private" method="_e_Tz0MjrEeewhZwYcFrjog">
        <ownedParameter xmi:id="_e-c4MMjrEeewhZwYcFrjog" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_e-lbEMjrEeewhZwYcFrjog" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_e-sv0MjrEeewhZwYcFrjog" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_e-0EkMjrEeewhZwYcFrjog" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_e-0roMjrEeewhZwYcFrjog" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_e-8AYMjrEeewhZwYcFrjog" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_e_D8MMjrEeewhZwYcFrjog" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_e_D8McjrEeewhZwYcFrjog" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_e_EjQMjrEeewhZwYcFrjog" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_e_EjQcjrEeewhZwYcFrjog" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_e_L4AMjrEeewhZwYcFrjog" name="reserve4">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_n15_4ExOEeeAapBXl-GW2w" name="Top" isActive="true">
      <ownedAttribute xmi:id="_rrH98ExOEeeAapBXl-GW2w" name="pinger" visibility="protected" type="_dBdl4ExOEeeAapBXl-GW2w" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_sWX6YExOEeeAapBXl-GW2w" name="ponger" visibility="protected" type="_irESsExOEeeAapBXl-GW2w" isOrdered="true" aggregation="composite"/>
      <ownedConnector xmi:id="_udBd0ExOEeeAapBXl-GW2w" name="RTConnector1">
        <end xmi:id="_udFvQExOEeeAapBXl-GW2w" partWithPort="_rrH98ExOEeeAapBXl-GW2w" role="_gCK90ExOEeeAapBXl-GW2w"/>
        <end xmi:id="_udGWUExOEeeAapBXl-GW2w" partWithPort="_sWX6YExOEeeAapBXl-GW2w" role="_kypqQExOEeeAapBXl-GW2w"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_e7ecsMjrEeewhZwYcFrjog" name="Debug__Top">
      <ownedAttribute xmi:id="_e8w2IMjrEeewhZwYcFrjog" name="Debug__Gateway">
        <type xmi:type="uml:Class" href="../CommGateWay/model.uml#_XIyCcAdxEeadtKuU2t6fMg"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_e828wcjrEeewhZwYcFrjog" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_e828wsjrEeewhZwYcFrjog" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_e84x8MjrEeewhZwYcFrjog" name="Debug__Top" type="_n15_4ExOEeeAapBXl-GW2w">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_e8-RgcjrEeewhZwYcFrjog" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_e8-RgsjrEeewhZwYcFrjog" value="1"/>
      </ownedAttribute>
    </packagedElement>
    <profileApplication xmi:id="_MUbn4ExOEeeAapBXl-GW2w">
      <eAnnotations xmi:id="_MUddEExOEeeAapBXl-GW2w" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:id="_SJ7boExOEeeAapBXl-GW2w">
      <eAnnotations xmi:id="_SJ8pwExOEeeAapBXl-GW2w" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UMLRT_CPP/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
    <profileApplication xmi:id="_UV8AMExOEeeAapBXl-GW2w">
      <eAnnotations xmi:id="_UV8nQExOEeeAapBXl-GW2w" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:ProtocolContainer xmi:id="_YKnywExOEeeAapBXl-GW2w" base_Package="_YKTpsExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTMessageSet xmi:id="_YLO2wExOEeeAapBXl-GW2w" base_Interface="_YLFFwExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTMessageSet xmi:id="_YLk1AExOEeeAapBXl-GW2w" base_Interface="_YLbrEExOEeeAapBXl-GW2w" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_YLt-8ExOEeeAapBXl-GW2w" base_Interface="_YLnRQExOEeeAapBXl-GW2w" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_YLxCQExOEeeAapBXl-GW2w" base_Collaboration="_YKDyEExOEeeAapBXl-GW2w"/>
  <UMLRealTime:Capsule xmi:id="_dCzpsExOEeeAapBXl-GW2w" base_Class="_dBdl4ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTPort xmi:id="_e-suoExOEeeAapBXl-GW2w" isWired="false" base_Port="_e-deEExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTPort xmi:id="_gCa1cExOEeeAapBXl-GW2w" base_Port="_gCK90ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:Capsule xmi:id="_irM1kExOEeeAapBXl-GW2w" base_Class="_irESsExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTPort xmi:id="_j9j1UExOEeeAapBXl-GW2w" isWired="false" base_Port="_j9fj4ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTPort xmi:id="_kyvJ0ExOEeeAapBXl-GW2w" base_Port="_kypqQExOEeeAapBXl-GW2w"/>
  <UMLRealTime:Capsule xmi:id="_n2EX8ExOEeeAapBXl-GW2w" base_Class="_n15_4ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:CapsulePart xmi:id="_rrLoUExOEeeAapBXl-GW2w" base_Property="_rrH98ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:CapsulePart xmi:id="_sWcy4ExOEeeAapBXl-GW2w" base_Property="_sWX6YExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTConnector xmi:id="_udG9YExOEeeAapBXl-GW2w" base_Connector="_udBd0ExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_7ecswExOEeeAapBXl-GW2w" base_Pseudostate="_7eXNMExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTState xmi:id="_7ekokExOEeeAapBXl-GW2w" base_State="_7ehlQExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTRegion xmi:id="_7eoS8ExOEeeAapBXl-GW2w" base_Region="_7eS7wExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_7e4KkExOEeeAapBXl-GW2w" base_StateMachine="_7eBO8ExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_P9hjkExQEeeAapBXl-GW2w" base_Pseudostate="_P9fHUExQEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTState xmi:id="_P9pfYExQEeeAapBXl-GW2w" base_State="_P9jYwExQEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTRegion xmi:id="_P9qtgExQEeeAapBXl-GW2w" base_Region="_P9XykExQEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_P9wNEExQEeeAapBXl-GW2w" base_StateMachine="_P8x8sExQEeeAapBXl-GW2w"/>
  <UMLRealTime:Capsule xmi:id="_e8qvgMjrEeewhZwYcFrjog" base_Class="_e7ecsMjrEeewhZwYcFrjog"/>
  <UMLRealTime:CapsulePart xmi:id="_e828wMjrEeewhZwYcFrjog" base_Property="_e8w2IMjrEeewhZwYcFrjog"/>
  <UMLRealTime:CapsulePart xmi:id="_e8-RgMjrEeewhZwYcFrjog" base_Property="_e84x8MjrEeewhZwYcFrjog"/>
  <UMLRealTime:RTPort xmi:id="_e9l8kMjrEeewhZwYcFrjog" isNotification="true" isWired="false" base_Port="_e9hEEMjrEeewhZwYcFrjog"/>
  <RTCppProperties:AttributeProperties xmi:id="_e95ekMjrEeewhZwYcFrjog" type="debugEvents::Event" base_Property="_e91NIsjrEeewhZwYcFrjog"/>
  <RTCppProperties:AttributeProperties xmi:id="_e-BaYMjrEeewhZwYcFrjog" type="SROManager" base_Property="_e99I8MjrEeewhZwYcFrjog"/>
  <RTCppProperties:CapsuleProperties xmi:id="_e-JWMMjrEeewhZwYcFrjog" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_irESsExOEeeAapBXl-GW2w"/>
  <RTCppProperties:ParameterProperties xmi:id="_e-hwsMjrEeewhZwYcFrjog" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_e-c4MMjrEeewhZwYcFrjog"/>
  <RTCppProperties:ParameterProperties xmi:id="_e-pFcMjrEeewhZwYcFrjog" type="debugEvents::EVENTTYPE" base_Parameter="_e-lbEMjrEeewhZwYcFrjog"/>
  <RTCppProperties:ParameterProperties xmi:id="_e-xBQMjrEeewhZwYcFrjog" type="const char *" base_Parameter="_e-sv0MjrEeewhZwYcFrjog"/>
  <RTCppProperties:ParameterProperties xmi:id="_e-4WAMjrEeewhZwYcFrjog" type="const char *" base_Parameter="_e-0roMjrEeewhZwYcFrjog"/>
  <RTCppProperties:ParameterProperties xmi:id="_e-_qwMjrEeewhZwYcFrjog" type="const char *" base_Parameter="_e-8AYMjrEeewhZwYcFrjog"/>
  <RTCppProperties:ParameterProperties xmi:id="_e_INoMjrEeewhZwYcFrjog" type="const char *" base_Parameter="_e_EjQcjrEeewhZwYcFrjog"/>
  <RTCppProperties:ParameterProperties xmi:id="_e_QJcMjrEeewhZwYcFrjog" type="const char *" base_Parameter="_e_L4AMjrEeewhZwYcFrjog"/>
  <UMLRealTime:RTPort xmi:id="_e_gBEMjrEeewhZwYcFrjog" isNotification="true" isWired="false" base_Port="_e_ahgMjrEeewhZwYcFrjog"/>
  <RTCppProperties:AttributeProperties xmi:id="_e_1_UMjrEeewhZwYcFrjog" type="debugEvents::Event" base_Property="_e_v4ssjrEeewhZwYcFrjog"/>
  <RTCppProperties:AttributeProperties xmi:id="_e_97IMjrEeewhZwYcFrjog" type="SROManager" base_Property="_e_5CoMjrEeewhZwYcFrjog"/>
  <RTCppProperties:CapsuleProperties xmi:id="_fAF28MjrEeewhZwYcFrjog" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_dBdl4ExOEeeAapBXl-GW2w"/>
  <RTCppProperties:ParameterProperties xmi:id="_fAZY8MjrEeewhZwYcFrjog" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_fAVHgcjrEeewhZwYcFrjog"/>
  <RTCppProperties:ParameterProperties xmi:id="_fAgtsMjrEeewhZwYcFrjog" type="debugEvents::EVENTTYPE" base_Parameter="_fAccQMjrEeewhZwYcFrjog"/>
  <RTCppProperties:ParameterProperties xmi:id="_fAoCcMjrEeewhZwYcFrjog" type="const char *" base_Parameter="_fAkYEMjrEeewhZwYcFrjog"/>
  <RTCppProperties:ParameterProperties xmi:id="_fAvXMMjrEeewhZwYcFrjog" type="const char *" base_Parameter="_fAsT4MjrEeewhZwYcFrjog"/>
  <RTCppProperties:ParameterProperties xmi:id="_fA3TAMjrEeewhZwYcFrjog" type="const char *" base_Parameter="_fAzooMjrEeewhZwYcFrjog"/>
  <RTCppProperties:ParameterProperties xmi:id="_fBAc8MjrEeewhZwYcFrjog" type="const char *" base_Parameter="_fA8LgcjrEeewhZwYcFrjog"/>
  <RTCppProperties:ParameterProperties xmi:id="_fBIYwMjrEeewhZwYcFrjog" type="const char *" base_Parameter="_fBEHUMjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_fBT-8MjrEeewhZwYcFrjog" base_Pseudostate="_fBPtgMjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTState xmi:id="_fBY3cMjrEeewhZwYcFrjog" base_State="_fBT-8cjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_fBdI4MjrEeewhZwYcFrjog" base_Pseudostate="_fBY3ccjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_fBhaUMjrEeewhZwYcFrjog" base_Pseudostate="_fBdI4cjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTRegion xmi:id="_fBwq4MjrEeewhZwYcFrjog" base_Region="_fBUmAMjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTState xmi:id="_fB2xgMjrEeewhZwYcFrjog" base_State="_fBwq4cjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTState xmi:id="_fB7C8MjrEeewhZwYcFrjog" base_State="_fBxR8MjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTState xmi:id="_fCCXsMjrEeewhZwYcFrjog" base_State="_fBx5AMjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_fCOk8MjrEeewhZwYcFrjog" base_Pseudostate="_fCK6kMjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTState xmi:id="_fCS2YMjrEeewhZwYcFrjog" base_State="_fCPMAMjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_fCZkEMjrEeewhZwYcFrjog" base_Pseudostate="_fCS2YcjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_fCgRwMjrEeewhZwYcFrjog" base_Pseudostate="_fCZkEcjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTRegion xmi:id="_fDKZEMjrEeewhZwYcFrjog" base_Region="_fCPMAcjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTState xmi:id="_fDRt0MjrEeewhZwYcFrjog" base_State="_fDLAIMjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTState xmi:id="_fDX0cMjrEeewhZwYcFrjog" base_State="_fDLAIsjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTState xmi:id="_fDfwQMjrEeewhZwYcFrjog" base_State="_fDLnMMjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTState xmi:id="_fDo6MMjrEeewhZwYcFrjog" base_State="_fDMOQMjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTState xmi:id="_fD4x0MjrEeewhZwYcFrjog" base_State="_fDyrMMjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_fEOwEMjrEeewhZwYcFrjog" base_Pseudostate="_fEG0QMjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTState xmi:id="_fEU2sMjrEeewhZwYcFrjog" base_State="_fEOwEcjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_fEaWQMjrEeewhZwYcFrjog" base_Pseudostate="_fEU2scjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_fEl8cMjrEeewhZwYcFrjog" base_Pseudostate="_fEa9UMjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTRegion xmi:id="_fE4QUMjrEeewhZwYcFrjog" base_Region="_fEOwEsjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTState xmi:id="_fFIvAMjrEeewhZwYcFrjog" base_State="_fE4QUcjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTState xmi:id="_fFZ0wMjrEeewhZwYcFrjog" base_State="_fE43YMjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTState xmi:id="_fFetQMjrEeewhZwYcFrjog" base_State="_fE5ecMjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_fFvL8MjrEeewhZwYcFrjog" base_Pseudostate="_fFoeQMjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTState xmi:id="_fF9OYMjrEeewhZwYcFrjog" base_State="_fFvL8cjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_fGD8EMjrEeewhZwYcFrjog" base_Pseudostate="_fF91cMjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_fGINgMjrEeewhZwYcFrjog" base_Pseudostate="_fGEjIMjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTRegion xmi:id="_fGhPEMjrEeewhZwYcFrjog" base_Region="_fFvL8sjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTState xmi:id="_fGrnIMjrEeewhZwYcFrjog" base_State="_fGhPEcjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTState xmi:id="_fGv4kMjrEeewhZwYcFrjog" base_State="_fGh2IMjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTState xmi:id="_fG0xEMjrEeewhZwYcFrjog" base_State="_fGjEQMjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTState xmi:id="_fG6QoMjrEeewhZwYcFrjog" base_State="_fGkSYMjrEeewhZwYcFrjog"/>
  <UMLRTStateMachines:RTState xmi:id="_fHEBoMjrEeewhZwYcFrjog" base_State="_fHAXQMjrEeewhZwYcFrjog"/>
</xmi:XMI>
