<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_MImLUExOEeeAapBXl-GW2w" name="PingPong">
    <eAnnotations xmi:id="_SI_ngExOEeeAapBXl-GW2w" source="http://www.eclipse.org/papyrus-rt/language/1.0.0">
      <details xmi:id="_SJAOkExOEeeAapBXl-GW2w" key="language" value="umlrt-cpp"/>
    </eAnnotations>
    <eAnnotations xmi:id="_o9ItsExOEeeAapBXl-GW2w" source="UMLRT_Default_top">
      <details xmi:id="_o9ItsUxOEeeAapBXl-GW2w" key="top_name" value="Debug__Top"/>
    </eAnnotations>
    <packageImport xmi:id="_sIx2QHxREee3banEMWf4bA">
      <importedPackage xmi:type="uml:Model" href="../CommGateWay/model.uml#_MZw7AAdxEeadtKuU2t6fMg"/>
    </packageImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_YKTpsExOEeeAapBXl-GW2w" name="PingPong">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_YKDyEExOEeeAapBXl-GW2w" name="PingPong">
        <interfaceRealization xmi:id="_YLTIMExOEeeAapBXl-GW2w" client="_YKDyEExOEeeAapBXl-GW2w" supplier="_YLFFwExOEeeAapBXl-GW2w" contract="_YLFFwExOEeeAapBXl-GW2w"/>
        <interfaceRealization xmi:id="_YLvNEExOEeeAapBXl-GW2w" client="_YKDyEExOEeeAapBXl-GW2w" supplier="_YLnRQExOEeeAapBXl-GW2w" contract="_YLnRQExOEeeAapBXl-GW2w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_YLFFwExOEeeAapBXl-GW2w" name="PingPong">
        <ownedOperation xmi:id="_bVz8YExOEeeAapBXl-GW2w" name="pong"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_YLbrEExOEeeAapBXl-GW2w" name="PingPong~">
        <ownedOperation xmi:id="_akmh4ExOEeeAapBXl-GW2w" name="ping"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_YLmDIExOEeeAapBXl-GW2w" client="_YKDyEExOEeeAapBXl-GW2w" supplier="_YLbrEExOEeeAapBXl-GW2w"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_YLmqMExOEeeAapBXl-GW2w" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_YLnRQExOEeeAapBXl-GW2w" name="PingPongIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_YLwbMExOEeeAapBXl-GW2w" client="_YKDyEExOEeeAapBXl-GW2w" supplier="_YLnRQExOEeeAapBXl-GW2w"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_akzWMExOEeeAapBXl-GW2w" operation="_akmh4ExOEeeAapBXl-GW2w"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_bV-UcExOEeeAapBXl-GW2w" operation="_bVz8YExOEeeAapBXl-GW2w"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_dBdl4ExOEeeAapBXl-GW2w" name="Pinger" classifierBehavior="_7eBO8ExOEeeAapBXl-GW2w" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_e-deEExOEeeAapBXl-GW2w" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_gCK90ExOEeeAapBXl-GW2w" name="pinger" type="_YKDyEExOEeeAapBXl-GW2w" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:id="_ww8oQExOEeeAapBXl-GW2w" name="i" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_sJpY8HxREee3banEMWf4bA" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_sJx70XxREee3banEMWf4bA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_sJx70nxREee3banEMWf4bA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_sKIhIHxREee3banEMWf4bA" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_sKIhIXxREee3banEMWf4bA" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_sKJIMHxREee3banEMWf4bA" name="Debug__event">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_sKXxsHxREee3banEMWf4bA" name="Debug__SRO">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_7eBO8ExOEeeAapBXl-GW2w" name="PingerStateMachine" isReentrant="false">
        <region xmi:id="_7eS7wExOEeeAapBXl-GW2w" name="Region">
          <transition xmi:id="_7emdwExOEeeAapBXl-GW2w" name="Initial" source="_sP7AEHxREee3banEMWf4bA" target="_7ehlQExOEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_-mSyAExPEeeAapBXl-GW2w" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.show(&quot;leaving initial pseudo state of pinger\n&quot;);
pinger.ping().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_B4BBcExQEeeAapBXl-GW2w" name="onPong" source="_sRqsgHxREee3banEMWf4bA" target="_7ehlQExOEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ImedgExQEeeAapBXl-GW2w" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.show(&quot;pong message received.\n&quot;);
pinger.ping().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::onPong&quot;,(char *)&quot;Debug__Path__onPong&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_sQXE8XxREee3banEMWf4bA" name="Debug__Initial" source="_sTXVoHxREee3banEMWf4bA" target="_sP7AEHxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sQXE8nxREee3banEMWf4bA" name="Debug__Initial__3">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPong&quot;,&quot;PLAYING&quot;,&quot;pong&quot;,&quot;PingPong&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_sTeqYXxREee3banEMWf4bA" name="ConnectionEstablished" port="_sJpY8HxREee3banEMWf4bA">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
            </trigger>
          </transition>
          <transition xmi:id="_sQYTEHxREee3banEMWf4bA" name="Debug__Initial__S" guard="_sQY6IXxREee3banEMWf4bA" source="_sP7AEHxREee3banEMWf4bA" target="_sQJpkHxREee3banEMWf4bA">
            <ownedRule xmi:id="_sQY6IXxREee3banEMWf4bA" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_sQY6IHxREee3banEMWf4bA" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo1&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sQZhMHxREee3banEMWf4bA" name="Debug__Initial__S__5">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_sQaIQHxREee3banEMWf4bA" name="Debug__Initial__E" source="_sQQXQHxREee3banEMWf4bA" target="_7ehlQExOEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sQavUHxREee3banEMWf4bA" name="Debug__Initial__E__6">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_sQbWYHxREee3banEMWf4bA" name="Debug__Initial__dbg__varChange" source="_sQCU0HxREee3banEMWf4bA" target="_sQCU0HxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sQb9cXxREee3banEMWf4bA" name="Debug__Initial__dbg__varChange__8">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_sQb9cHxREee3banEMWf4bA" name="Debug__MSG" port="_sJpY8HxREee3banEMWf4bA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_sQckgHxREee3banEMWf4bA" name="Debug__Initial__dbg__setBreakPoint" source="_sQCU0HxREee3banEMWf4bA" target="_sQCU0HxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sQckgnxREee3banEMWf4bA" name="Debug__Initial__dbg__setBreakPoint__9">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_sQckgXxREee3banEMWf4bA" name="Debug__MSG" port="_sJpY8HxREee3banEMWf4bA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_sQdLkHxREee3banEMWf4bA" name="Debug__Initial__dbg__remBreakPoint" source="_sQCU0HxREee3banEMWf4bA" target="_sQCU0HxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sQdLknxREee3banEMWf4bA" name="Debug__Initial__dbg__remBreakPoint__10">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_sQdLkXxREee3banEMWf4bA" name="Debug__MSG" port="_sJpY8HxREee3banEMWf4bA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_sQdyoHxREee3banEMWf4bA" name="Debug__Initial__dbg__viewBreakPoints" source="_sQCU0HxREee3banEMWf4bA" target="_sQCU0HxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sQdyonxREee3banEMWf4bA" name="Debug__Initial__dbg__viewBreakPoints__11">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_sQdyoXxREee3banEMWf4bA" name="Debug__MSG" port="_sJpY8HxREee3banEMWf4bA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_sQeZsHxREee3banEMWf4bA" name="Debug__Initial__dbg__dbgSetExecMode" source="_sQCU0HxREee3banEMWf4bA" target="_sQCU0HxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sQfAwHxREee3banEMWf4bA" name="Debug__Initial__dbg__dbgSetExecMode__12">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_sQeZsXxREee3banEMWf4bA" name="Debug__MSG" port="_sJpY8HxREee3banEMWf4bA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_sQfAwXxREee3banEMWf4bA" name="Debug__Initial__dbg__dbgDeferMsg" source="_sQCU0HxREee3banEMWf4bA" target="_sQCU0HxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sQfn0HxREee3banEMWf4bA" name="Debug__Initial__dbg__dbgDeferMsg__13">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_sQfAwnxREee3banEMWf4bA" name="Debug__MSG" port="_gCK90ExOEeeAapBXl-GW2w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_sSH_gHxREee3banEMWf4bA" name="Debug__onPong" source="_7ehlQExOEeeAapBXl-GW2w" target="_sRqsgHxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sSH_gXxREee3banEMWf4bA" name="Debug__onPong__25">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__onPong&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;Debug__Path__onPong&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:id="_DrVZMExQEeeAapBXl-GW2w" event="_bV-UcExOEeeAapBXl-GW2w" port="_gCK90ExOEeeAapBXl-GW2w"/>
          </transition>
          <transition xmi:id="_sSJ0sHxREee3banEMWf4bA" name="Debug__onPong__S" guard="_sSJ0snxREee3banEMWf4bA" source="_sRqsgHxREee3banEMWf4bA" target="_sR5WAXxREee3banEMWf4bA">
            <ownedRule xmi:id="_sSJ0snxREee3banEMWf4bA" name="Debug__GuardonPong">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_sSJ0sXxREee3banEMWf4bA" name="Debug__GuardonPong">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sSKbwHxREee3banEMWf4bA" name="Debug__onPong__S__27">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__onPong__S&quot;,(char *)&quot;Debug__Path__onPong&quot;,(char *)&quot;en&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_sSLp4HxREee3banEMWf4bA" name="Debug__onPong__E" source="_sSAqwHxREee3banEMWf4bA" target="_7ehlQExOEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sSLp4XxREee3banEMWf4bA" name="Debug__onPong__E__28">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__onPong__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_sSOGIHxREee3banEMWf4bA" name="Debug__onPong__dbg__varChange" source="_sRyBQXxREee3banEMWf4bA" target="_sRyBQXxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sSOtMXxREee3banEMWf4bA" name="Debug__onPong__dbg__varChange__30">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_sSOtMHxREee3banEMWf4bA" name="Debug__MSG" port="_sJpY8HxREee3banEMWf4bA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_sSPUQHxREee3banEMWf4bA" name="Debug__onPong__dbg__setBreakPoint" source="_sRyBQXxREee3banEMWf4bA" target="_sRyBQXxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sSPUQnxREee3banEMWf4bA" name="Debug__onPong__dbg__setBreakPoint__31">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_sSPUQXxREee3banEMWf4bA" name="Debug__MSG" port="_sJpY8HxREee3banEMWf4bA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_sSP7UHxREee3banEMWf4bA" name="Debug__onPong__dbg__remBreakPoint" source="_sRyBQXxREee3banEMWf4bA" target="_sRyBQXxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sSP7UnxREee3banEMWf4bA" name="Debug__onPong__dbg__remBreakPoint__32">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_sSP7UXxREee3banEMWf4bA" name="Debug__MSG" port="_sJpY8HxREee3banEMWf4bA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_sSQiYHxREee3banEMWf4bA" name="Debug__onPong__dbg__viewBreakPoints" source="_sRyBQXxREee3banEMWf4bA" target="_sRyBQXxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sSRJcHxREee3banEMWf4bA" name="Debug__onPong__dbg__viewBreakPoints__33">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_sSQiYXxREee3banEMWf4bA" name="Debug__MSG" port="_sJpY8HxREee3banEMWf4bA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_sSRJcXxREee3banEMWf4bA" name="Debug__onPong__dbg__dbgSetExecMode" source="_sRyBQXxREee3banEMWf4bA" target="_sRyBQXxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sSRwgHxREee3banEMWf4bA" name="Debug__onPong__dbg__dbgSetExecMode__34">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_sSRJcnxREee3banEMWf4bA" name="Debug__MSG" port="_sJpY8HxREee3banEMWf4bA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_sSRwgXxREee3banEMWf4bA" name="Debug__onPong__dbg__dbgDeferMsg" source="_sRyBQXxREee3banEMWf4bA" target="_sRyBQXxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sSSXkHxREee3banEMWf4bA" name="Debug__onPong__dbg__dbgDeferMsg__35">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_sSRwgnxREee3banEMWf4bA" name="Debug__MSG" port="_gCK90ExOEeeAapBXl-GW2w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_sTeDUXxREee3banEMWf4bA" name="Debug__InitDebug" source="_7eXNMExOEeeAapBXl-GW2w" target="_sTXVoHxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sTeqYHxREee3banEMWf4bA" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_7eXNMExOEeeAapBXl-GW2w" name="Pseudo1"/>
          <subvertex xmi:type="uml:State" xmi:id="_7ehlQExOEeeAapBXl-GW2w" name="PLAYING">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_e3YJMExPEeeAapBXl-GW2w" name="Entry" isReentrant="false">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
log.show(&quot;Entering playing state of pinger\n&quot;);
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_gBgaAExPEeeAapBXl-GW2w" name="Exit" isReentrant="false">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
log.show(&quot;Leaving playing state of pinger\n&quot;);
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_sP7AEHxREee3banEMWf4bA" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_sQCU0HxREee3banEMWf4bA" name="Debug__C__Initial">
            <connectionPoint xmi:id="_sQJpkHxREee3banEMWf4bA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_sQQXQHxREee3banEMWf4bA" name="ex" kind="exitPoint"/>
            <region xmi:id="_sQCU0XxREee3banEMWf4bA" name="Region1">
              <transition xmi:id="_sQp_4HxREee3banEMWf4bA" name="Debug__init__trans__Initial" source="_sQJpkHxREee3banEMWf4bA" target="_sQnjoHxREee3banEMWf4bA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sRjXwHxREee3banEMWf4bA" name="Debug__init__trans__Initial__18">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
              </transition>
              <transition xmi:id="_sQp_4XxREee3banEMWf4bA" name="Debug__Ac__Initial" source="_sQnjoHxREee3banEMWf4bA" target="_sQoKsHxREee3banEMWf4bA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sQqm8HxREee3banEMWf4bA" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;leaving initial pseudo state of pinger\n&quot;);
pinger.ping().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_sQp_4nxREee3banEMWf4bA" name="Debug__Exec" port="_sJpY8HxREee3banEMWf4bA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_sQqm8XxREee3banEMWf4bA" name="Debug__En__PLAYING" source="_sQoKsHxREee3banEMWf4bA" target="_sQpY0HxREee3banEMWf4bA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sQrOAHxREee3banEMWf4bA" name="Entry" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Entering playing state of pinger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_sQqm8nxREee3banEMWf4bA" name="Debug__Exec" port="_sJpY8HxREee3banEMWf4bA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_sQrOAXxREee3banEMWf4bA" name="Debug__end__trans__Initial" source="_sQpY0HxREee3banEMWf4bA" target="_sQQXQHxREee3banEMWf4bA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sRnpMHxREee3banEMWf4bA" name="Debug__end__trans__Initial__22">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_sQrOAnxREee3banEMWf4bA" name="Debug__Exec" port="_sJpY8HxREee3banEMWf4bA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_sQnjoHxREee3banEMWf4bA" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_sQnjoXxREee3banEMWf4bA" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_sQ0X8XxREee3banEMWf4bA" name="Debug__B__Ac__Initial__14">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_sQoKsHxREee3banEMWf4bA" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_sQoKsXxREee3banEMWf4bA" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_sQ860HxREee3banEMWf4bA" name="Debug__A__Ac__Initial__15">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_sQpY0HxREee3banEMWf4bA" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_sQpY0XxREee3banEMWf4bA" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_sRE2oXxREee3banEMWf4bA" name="Debug__A__En__Initial__16">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_sRqsgHxREee3banEMWf4bA" name="Debug__Path__onPong" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_sRyBQXxREee3banEMWf4bA" name="Debug__C__onPong">
            <connectionPoint xmi:id="_sR5WAXxREee3banEMWf4bA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_sSAqwHxREee3banEMWf4bA" name="ex" kind="exitPoint"/>
            <region xmi:id="_sRyBQnxREee3banEMWf4bA" name="Region1">
              <transition xmi:id="_sSd9wHxREee3banEMWf4bA" name="Debug__init__trans__onPong" source="_sR5WAXxREee3banEMWf4bA" target="_sSaTYXxREee3banEMWf4bA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sTQn8HxREee3banEMWf4bA" name="Debug__init__trans__onPong__41">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__init__trans__onPong&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
              </transition>
              <transition xmi:id="_sSd9wXxREee3banEMWf4bA" name="Debug__Ex__PLAYING" source="_sSaTYXxREee3banEMWf4bA" target="_sSa6cHxREee3banEMWf4bA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sSek0HxREee3banEMWf4bA" name="Exit" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Leaving playing state of pinger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ac__onPong&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_sSd9wnxREee3banEMWf4bA" name="Debug__Exec" port="_sJpY8HxREee3banEMWf4bA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_sSek0XxREee3banEMWf4bA" name="Debug__AC__onPong" source="_sSa6cHxREee3banEMWf4bA" target="_sScIkHxREee3banEMWf4bA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sSfL4HxREee3banEMWf4bA" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;pong message received.\n&quot;);
pinger.ping().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__AC__onPong&quot;,(char *)&quot;Debug__B__Ac__onPong&quot;,(char *)&quot;Debug__A__Ac__onPong&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_sSek0nxREee3banEMWf4bA" name="Debug__Exec" port="_sJpY8HxREee3banEMWf4bA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_sSfL4XxREee3banEMWf4bA" name="Debug__En__PLAYING" source="_sScIkHxREee3banEMWf4bA" target="_sSdWsHxREee3banEMWf4bA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sShBEHxREee3banEMWf4bA" name="Entry" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Entering playing state of pinger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__onPong&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_sSfL4nxREee3banEMWf4bA" name="Debug__Exec" port="_sJpY8HxREee3banEMWf4bA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_sShoIHxREee3banEMWf4bA" name="Debug__end__trans__onPong" source="_sSdWsHxREee3banEMWf4bA" target="_sSAqwHxREee3banEMWf4bA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sTU5YHxREee3banEMWf4bA" name="Debug__end__trans__onPong__46">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__end__trans__onPong&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_sShoIXxREee3banEMWf4bA" name="Debug__Exec" port="_sJpY8HxREee3banEMWf4bA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_sSaTYXxREee3banEMWf4bA" name="Debug__B__Ex__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_sSaTYnxREee3banEMWf4bA" name="Debug__B__Ex__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_sSo84HxREee3banEMWf4bA" name="Debug__B__Ex__PLAYING__36">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_sSa6cHxREee3banEMWf4bA" name="Debug__B__Ac__onPong">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_sSbhgHxREee3banEMWf4bA" name="Debug__B__Ac__onPong">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;onPong&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_sSxfwXxREee3banEMWf4bA" name="Debug__B__Ac__onPong__37">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_sScIkHxREee3banEMWf4bA" name="Debug__A__Ac__onPong">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_sScIkXxREee3banEMWf4bA" name="Debug__A__Ac__onPong">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;onPong&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__A__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_sS6CoHxREee3banEMWf4bA" name="Debug__A__Ac__onPong__38">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__A__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_sSdWsHxREee3banEMWf4bA" name="Debug__A__En__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_sSdWsXxREee3banEMWf4bA" name="Debug__A__En__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_sTFBwHxREee3banEMWf4bA" name="Debug__A__En__PLAYING__39">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::PingerStateMachine::Region::Debug__C__onPong::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_sTXVoHxREee3banEMWf4bA" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_sJox4HxREee3banEMWf4bA" name="Debug__recallAllMsg" specification="_sJoK0HxREee3banEMWf4bA">
        <language>C++</language>
        <body>pinger.recallAll();
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_sKEPsXxREee3banEMWf4bA" name="Debug__variablesViewMethod" specification="_sKEPsHxREee3banEMWf4bA">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;i,&quot;);
tempS.append(&quot;Integer,&quot;);
if(i!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,i);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_sKH6EHxREee3banEMWf4bA" name="Debug__variablesChange" specification="_sKGE4HxREee3banEMWf4bA">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;i&quot;==tempVarName){
    i=atoi(varValue);
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_sMw-YHxREee3banEMWf4bA" name="Debug__sendEvent" specification="_sLLC8HxREee3banEMWf4bA">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
this->Debug__event.setPayloadField(&quot;SenderCapsule&quot;,reserve3);
this->Debug__event.setPayloadField(&quot;Port&quot;,reserve4);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_sJoK0HxREee3banEMWf4bA" name="Debug__recallAllMsg" visibility="private" method="_sJox4HxREee3banEMWf4bA"/>
      <ownedOperation xmi:id="_sKEPsHxREee3banEMWf4bA" name="Debug__variablesView" visibility="private" method="_sKEPsXxREee3banEMWf4bA"/>
      <ownedOperation xmi:id="_sKGE4HxREee3banEMWf4bA" name="Debug__variablesChange" visibility="private" method="_sKH6EHxREee3banEMWf4bA">
        <ownedParameter xmi:id="_sKGE4XxREee3banEMWf4bA" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sKGr8HxREee3banEMWf4bA" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sKGr8XxREee3banEMWf4bA" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_sLLC8HxREee3banEMWf4bA" name="Debug__sendEvent" visibility="private" method="_sMw-YHxREee3banEMWf4bA">
        <ownedParameter xmi:id="_sLLqAHxREee3banEMWf4bA" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sLbhoHxREee3banEMWf4bA" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sLpkEHxREee3banEMWf4bA" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sL2_cHxREee3banEMWf4bA" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sL3mgHxREee3banEMWf4bA" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sMFB4HxREee3banEMWf4bA" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sMR2MHxREee3banEMWf4bA" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sMSdQHxREee3banEMWf4bA" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sMSdQXxREee3banEMWf4bA" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sMUScHxREee3banEMWf4bA" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sMjjAHxREee3banEMWf4bA" name="reserve4">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_irESsExOEeeAapBXl-GW2w" name="Ponger" classifierBehavior="_P8x8sExQEeeAapBXl-GW2w" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_j9fj4ExOEeeAapBXl-GW2w" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_kypqQExOEeeAapBXl-GW2w" name="ponger" type="_YKDyEExOEeeAapBXl-GW2w" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:id="_4p-aAExOEeeAapBXl-GW2w" name="j" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_sM124XxREee3banEMWf4bA" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_sM9LoHxREee3banEMWf4bA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_sM9LoXxREee3banEMWf4bA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_sNPfgHxREee3banEMWf4bA" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_sNPfgXxREee3banEMWf4bA" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_sNPfgnxREee3banEMWf4bA" name="Debug__event">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_sNcT0HxREee3banEMWf4bA" name="Debug__SRO">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_P8x8sExQEeeAapBXl-GW2w" name="PongerStateMachine" isReentrant="false">
        <region xmi:id="_P9XykExQEeeAapBXl-GW2w" name="Region">
          <transition xmi:id="_P9qGcExQEeeAapBXl-GW2w" name="Initial" source="_sT0ooHxREee3banEMWf4bA" target="_P9jYwExQEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sVNIsHxREee3banEMWf4bA" name="Initial__71">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_ZUZMUExQEeeAapBXl-GW2w" name="onPing" source="_sVPk8HxREee3banEMWf4bA" target="_P9jYwExQEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_q3J4cExQEeeAapBXl-GW2w" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.show(&quot;ping message received.\n&quot;);
ponger.pong().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::onPing&quot;,(char *)&quot;Debug__Path__onPing&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_sUXbMXxREee3banEMWf4bA" name="Debug__Initial" source="_sW4jsHxREee3banEMWf4bA" target="_sT0ooHxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sUYCQHxREee3banEMWf4bA" name="Debug__Initial__49">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPong&quot;,&quot;PLAYING&quot;,&quot;pong&quot;,&quot;PingPong&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPing&quot;,&quot;PLAYING&quot;,&quot;ping&quot;,&quot;PingPong&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_sXAfgHxREee3banEMWf4bA" name="ConnectionEstablished" port="_sM124XxREee3banEMWf4bA">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
            </trigger>
          </transition>
          <transition xmi:id="_sUZQYHxREee3banEMWf4bA" name="Debug__Initial__S" guard="_sUZ3cXxREee3banEMWf4bA" source="_sT0ooHxREee3banEMWf4bA" target="_sUHjkXxREee3banEMWf4bA">
            <ownedRule xmi:id="_sUZ3cXxREee3banEMWf4bA" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_sUZ3cHxREee3banEMWf4bA" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo2&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sUZ3cnxREee3banEMWf4bA" name="Debug__Initial__S__51">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_sUbFkHxREee3banEMWf4bA" name="Debug__Initial__E" source="_sUQtgHxREee3banEMWf4bA" target="_P9jYwExQEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sUbsoHxREee3banEMWf4bA" name="Debug__Initial__E__52">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_sUc6wHxREee3banEMWf4bA" name="Debug__Initial__dbg__varChange" source="_sUAO0XxREee3banEMWf4bA" target="_sUAO0XxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sUc6wnxREee3banEMWf4bA" name="Debug__Initial__dbg__varChange__54">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_sUc6wXxREee3banEMWf4bA" name="Debug__MSG" port="_sM124XxREee3banEMWf4bA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_sUdh0HxREee3banEMWf4bA" name="Debug__Initial__dbg__setBreakPoint" source="_sUAO0XxREee3banEMWf4bA" target="_sUAO0XxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sUeI4HxREee3banEMWf4bA" name="Debug__Initial__dbg__setBreakPoint__55">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_sUdh0XxREee3banEMWf4bA" name="Debug__MSG" port="_sM124XxREee3banEMWf4bA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_sUev8HxREee3banEMWf4bA" name="Debug__Initial__dbg__remBreakPoint" source="_sUAO0XxREee3banEMWf4bA" target="_sUAO0XxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sUev8nxREee3banEMWf4bA" name="Debug__Initial__dbg__remBreakPoint__56">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_sUev8XxREee3banEMWf4bA" name="Debug__MSG" port="_sM124XxREee3banEMWf4bA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_sUfXAHxREee3banEMWf4bA" name="Debug__Initial__dbg__viewBreakPoints" source="_sUAO0XxREee3banEMWf4bA" target="_sUAO0XxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sUfXAnxREee3banEMWf4bA" name="Debug__Initial__dbg__viewBreakPoints__57">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_sUfXAXxREee3banEMWf4bA" name="Debug__MSG" port="_sM124XxREee3banEMWf4bA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_sUf-EHxREee3banEMWf4bA" name="Debug__Initial__dbg__dbgSetExecMode" source="_sUAO0XxREee3banEMWf4bA" target="_sUAO0XxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sUglIHxREee3banEMWf4bA" name="Debug__Initial__dbg__dbgSetExecMode__58">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_sUf-EXxREee3banEMWf4bA" name="Debug__MSG" port="_sM124XxREee3banEMWf4bA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_sUglIXxREee3banEMWf4bA" name="Debug__Initial__dbg__dbgDeferMsg" source="_sUAO0XxREee3banEMWf4bA" target="_sUAO0XxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sUhMMXxREee3banEMWf4bA" name="Debug__Initial__dbg__dbgDeferMsg__59">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_sUhMMHxREee3banEMWf4bA" name="Debug__MSG" port="_kypqQExOEeeAapBXl-GW2w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_sV0MsHxREee3banEMWf4bA" name="Debug__onPing" source="_P9jYwExQEeeAapBXl-GW2w" target="_sVPk8HxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sV0MsXxREee3banEMWf4bA" name="Debug__onPing__73">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__onPing&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;Debug__Path__onPing&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:id="_b3gpUExQEeeAapBXl-GW2w" event="_akzWMExOEeeAapBXl-GW2w" port="_kypqQExOEeeAapBXl-GW2w"/>
          </transition>
          <transition xmi:id="_sV1a0HxREee3banEMWf4bA" name="Debug__onPing__S" guard="_sV2B4XxREee3banEMWf4bA" source="_sVPk8HxREee3banEMWf4bA" target="_sVljMHxREee3banEMWf4bA">
            <ownedRule xmi:id="_sV2B4XxREee3banEMWf4bA" name="Debug__GuardonPing">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_sV2B4HxREee3banEMWf4bA" name="Debug__GuardonPing">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sV2o8HxREee3banEMWf4bA" name="Debug__onPing__S__75">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__onPing__S&quot;,(char *)&quot;Debug__Path__onPing&quot;,(char *)&quot;en&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_sV33EHxREee3banEMWf4bA" name="Debug__onPing__E" source="_sVs38XxREee3banEMWf4bA" target="_P9jYwExQEeeAapBXl-GW2w">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sV33EXxREee3banEMWf4bA" name="Debug__onPing__E__76">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__onPing__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
          </transition>
          <transition xmi:id="_sV5FMHxREee3banEMWf4bA" name="Debug__onPing__dbg__varChange" source="_sVZV8HxREee3banEMWf4bA" target="_sVZV8HxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sV5sQHxREee3banEMWf4bA" name="Debug__onPing__dbg__varChange__78">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_sV5FMXxREee3banEMWf4bA" name="Debug__MSG" port="_sM124XxREee3banEMWf4bA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_sV5sQXxREee3banEMWf4bA" name="Debug__onPing__dbg__setBreakPoint" source="_sVZV8HxREee3banEMWf4bA" target="_sVZV8HxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sV6TUXxREee3banEMWf4bA" name="Debug__onPing__dbg__setBreakPoint__79">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_sV6TUHxREee3banEMWf4bA" name="Debug__MSG" port="_sM124XxREee3banEMWf4bA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_sV66YHxREee3banEMWf4bA" name="Debug__onPing__dbg__remBreakPoint" source="_sVZV8HxREee3banEMWf4bA" target="_sVZV8HxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sV66YnxREee3banEMWf4bA" name="Debug__onPing__dbg__remBreakPoint__80">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_sV66YXxREee3banEMWf4bA" name="Debug__MSG" port="_sM124XxREee3banEMWf4bA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_sV7hcHxREee3banEMWf4bA" name="Debug__onPing__dbg__viewBreakPoints" source="_sVZV8HxREee3banEMWf4bA" target="_sVZV8HxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sV7hcnxREee3banEMWf4bA" name="Debug__onPing__dbg__viewBreakPoints__81">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_sV7hcXxREee3banEMWf4bA" name="Debug__MSG" port="_sM124XxREee3banEMWf4bA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_sV8IgHxREee3banEMWf4bA" name="Debug__onPing__dbg__dbgSetExecMode" source="_sVZV8HxREee3banEMWf4bA" target="_sVZV8HxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sV8IgnxREee3banEMWf4bA" name="Debug__onPing__dbg__dbgSetExecMode__82">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_sV8IgXxREee3banEMWf4bA" name="Debug__MSG" port="_sM124XxREee3banEMWf4bA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_sV8vkHxREee3banEMWf4bA" name="Debug__onPing__dbg__dbgDeferMsg" source="_sVZV8HxREee3banEMWf4bA" target="_sVZV8HxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sV8vknxREee3banEMWf4bA" name="Debug__onPing__dbg__dbgDeferMsg__83">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_sV8vkXxREee3banEMWf4bA" name="Debug__MSG" port="_kypqQExOEeeAapBXl-GW2w">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_sW_RYXxREee3banEMWf4bA" name="Debug__InitDebug" source="_P9fHUExQEeeAapBXl-GW2w" target="_sW4jsHxREee3banEMWf4bA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sW_4cHxREee3banEMWf4bA" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_P9fHUExQEeeAapBXl-GW2w" name="Pseudo2"/>
          <subvertex xmi:type="uml:State" xmi:id="_P9jYwExQEeeAapBXl-GW2w" name="PLAYING">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_fs-fAExQEeeAapBXl-GW2w" name="Entry" isReentrant="false">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
log.show(&quot;Entering playing state of ponger\n&quot;);
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_j-wdQExQEeeAapBXl-GW2w" name="Exit" isReentrant="false">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
log.show(&quot;Leaving playing state of ponger\n&quot;);
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_sT0ooHxREee3banEMWf4bA" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_sUAO0XxREee3banEMWf4bA" name="Debug__C__Initial">
            <connectionPoint xmi:id="_sUHjkXxREee3banEMWf4bA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_sUQtgHxREee3banEMWf4bA" name="ex" kind="exitPoint"/>
            <region xmi:id="_sUAO0nxREee3banEMWf4bA" name="Region1">
              <transition xmi:id="_sUsLUHxREee3banEMWf4bA" name="Debug__init__trans__Initial" source="_sUHjkXxREee3banEMWf4bA" target="_sUpvEHxREee3banEMWf4bA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sVIQMHxREee3banEMWf4bA" name="Debug__init__trans__Initial__64">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
              </transition>
              <transition xmi:id="_sUsLUXxREee3banEMWf4bA" name="Debug__Ac__Initial" source="_sUpvEHxREee3banEMWf4bA" target="_sUqWIHxREee3banEMWf4bA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sVJeUHxREee3banEMWf4bA" name="Debug__Ac__Initial__66">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_sUsyYHxREee3banEMWf4bA" name="Debug__Exec" port="_sM124XxREee3banEMWf4bA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_sUsyYXxREee3banEMWf4bA" name="Debug__En__PLAYING" source="_sUqWIHxREee3banEMWf4bA" target="_sUrkQHxREee3banEMWf4bA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sUtZcHxREee3banEMWf4bA" name="Entry" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Entering playing state of ponger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_sUsyYnxREee3banEMWf4bA" name="Debug__Exec" port="_sM124XxREee3banEMWf4bA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_sUtZcXxREee3banEMWf4bA" name="Debug__end__trans__Initial" source="_sUrkQHxREee3banEMWf4bA" target="_sUQtgHxREee3banEMWf4bA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sVL6kHxREee3banEMWf4bA" name="Debug__end__trans__Initial__69">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_sUtZcnxREee3banEMWf4bA" name="Debug__Exec" port="_sM124XxREee3banEMWf4bA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_sUpvEHxREee3banEMWf4bA" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_sUpvEXxREee3banEMWf4bA" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_sU0uMXxREee3banEMWf4bA" name="Debug__B__Ac__Initial__60">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_sUqWIHxREee3banEMWf4bA" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_sUqWIXxREee3banEMWf4bA" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_sU94IHxREee3banEMWf4bA" name="Debug__A__Ac__Initial__61">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_sUrkQHxREee3banEMWf4bA" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_sUrkQXxREee3banEMWf4bA" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_sVGbAXxREee3banEMWf4bA" name="Debug__A__En__Initial__62">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_sVPk8HxREee3banEMWf4bA" name="Debug__Path__onPing" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_sVZV8HxREee3banEMWf4bA" name="Debug__C__onPing">
            <connectionPoint xmi:id="_sVljMHxREee3banEMWf4bA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_sVs38XxREee3banEMWf4bA" name="ex" kind="exitPoint"/>
            <region xmi:id="_sVZV8XxREee3banEMWf4bA" name="Region1">
              <transition xmi:id="_sWKyAHxREee3banEMWf4bA" name="Debug__init__trans__onPing" source="_sVljMHxREee3banEMWf4bA" target="_sWHHoXxREee3banEMWf4bA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sWx2AHxREee3banEMWf4bA" name="Debug__init__trans__onPing__89">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__init__trans__onPing&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
              </transition>
              <transition xmi:id="_sWKyAXxREee3banEMWf4bA" name="Debug__Ex__PLAYING" source="_sWHHoXxREee3banEMWf4bA" target="_sWHusHxREee3banEMWf4bA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sWLZEHxREee3banEMWf4bA" name="Exit" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Leaving playing state of ponger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ac__onPing&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_sWKyAnxREee3banEMWf4bA" name="Debug__Exec" port="_sM124XxREee3banEMWf4bA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_sWLZEXxREee3banEMWf4bA" name="Debug__AC__onPing" source="_sWHusHxREee3banEMWf4bA" target="_sWI80HxREee3banEMWf4bA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sWMAIHxREee3banEMWf4bA" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;ping message received.\n&quot;);
ponger.pong().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__AC__onPing&quot;,(char *)&quot;Debug__B__Ac__onPing&quot;,(char *)&quot;Debug__A__Ac__onPing&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_sWLZEnxREee3banEMWf4bA" name="Debug__Exec" port="_sM124XxREee3banEMWf4bA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_sWMAIXxREee3banEMWf4bA" name="Debug__En__PLAYING" source="_sWI80HxREee3banEMWf4bA" target="_sWKK8HxREee3banEMWf4bA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sWOcYHxREee3banEMWf4bA" name="Entry" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;Entering playing state of ponger\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__onPing&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_sWMAInxREee3banEMWf4bA" name="Debug__Exec" port="_sM124XxREee3banEMWf4bA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_sWOcYXxREee3banEMWf4bA" name="Debug__end__trans__onPing" source="_sWKK8HxREee3banEMWf4bA" target="_sVs38XxREee3banEMWf4bA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sW2HcHxREee3banEMWf4bA" name="Debug__end__trans__onPing__94">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__end__trans__onPing&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_sWPDcHxREee3banEMWf4bA" name="Debug__Exec" port="_sM124XxREee3banEMWf4bA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_sWHHoXxREee3banEMWf4bA" name="Debug__B__Ex__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_sWHHonxREee3banEMWf4bA" name="Debug__B__Ex__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_sWWYMHxREee3banEMWf4bA" name="Debug__B__Ex__PLAYING__84">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_sWHusHxREee3banEMWf4bA" name="Debug__B__Ac__onPing">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_sWHusXxREee3banEMWf4bA" name="Debug__B__Ac__onPing">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;onPing&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_sWe7EXxREee3banEMWf4bA" name="Debug__B__Ac__onPing__85">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_sWI80HxREee3banEMWf4bA" name="Debug__A__Ac__onPing">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_sWI80XxREee3banEMWf4bA" name="Debug__A__Ac__onPing">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;onPing&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__A__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_sWnd8XxREee3banEMWf4bA" name="Debug__A__Ac__onPing__86">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__A__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_sWKK8HxREee3banEMWf4bA" name="Debug__A__En__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_sWKK8XxREee3banEMWf4bA" name="Debug__A__En__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_sWpTIHxREee3banEMWf4bA" name="Debug__A__En__PLAYING__87">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::PongerStateMachine::Region::Debug__C__onPing::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_sW4jsHxREee3banEMWf4bA" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_sM124HxREee3banEMWf4bA" name="Debug__recallAllMsg" specification="_sM1P0HxREee3banEMWf4bA">
        <language>C++</language>
        <body>ponger.recallAll();
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_sNNDQXxREee3banEMWf4bA" name="Debug__variablesViewMethod" specification="_sNNDQHxREee3banEMWf4bA">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;j,&quot;);
tempS.append(&quot;Integer,&quot;);
if(j!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,j);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_sNO4cnxREee3banEMWf4bA" name="Debug__variablesChange" specification="_sNORYHxREee3banEMWf4bA">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;j&quot;==tempVarName){
    j=atoi(varValue);
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_sP1ggHxREee3banEMWf4bA" name="Debug__sendEvent" specification="_sOJecHxREee3banEMWf4bA">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
this->Debug__event.setPayloadField(&quot;SenderCapsule&quot;,reserve3);
this->Debug__event.setPayloadField(&quot;Port&quot;,reserve4);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_sM1P0HxREee3banEMWf4bA" name="Debug__recallAllMsg" visibility="private" method="_sM124HxREee3banEMWf4bA"/>
      <ownedOperation xmi:id="_sNNDQHxREee3banEMWf4bA" name="Debug__variablesView" visibility="private" method="_sNNDQXxREee3banEMWf4bA"/>
      <ownedOperation xmi:id="_sNORYHxREee3banEMWf4bA" name="Debug__variablesChange" visibility="private" method="_sNO4cnxREee3banEMWf4bA">
        <ownedParameter xmi:id="_sNORYXxREee3banEMWf4bA" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sNO4cHxREee3banEMWf4bA" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sNO4cXxREee3banEMWf4bA" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_sOJecHxREee3banEMWf4bA" name="Debug__sendEvent" visibility="private" method="_sP1ggHxREee3banEMWf4bA">
        <ownedParameter xmi:id="_sOJecXxREee3banEMWf4bA" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sOW50HxREee3banEMWf4bA" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sOv7YHxREee3banEMWf4bA" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sO9WwHxREee3banEMWf4bA" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sO9WwXxREee3banEMWf4bA" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sPLZMHxREee3banEMWf4bA" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sPY0kHxREee3banEMWf4bA" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sPZboHxREee3banEMWf4bA" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sPZboXxREee3banEMWf4bA" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sPaCsHxREee3banEMWf4bA" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_sPneEHxREee3banEMWf4bA" name="reserve4">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_n15_4ExOEeeAapBXl-GW2w" name="Top" isActive="true">
      <ownedAttribute xmi:id="_rrH98ExOEeeAapBXl-GW2w" name="pinger" visibility="protected" type="_dBdl4ExOEeeAapBXl-GW2w" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_sWX6YExOEeeAapBXl-GW2w" name="ponger" visibility="protected" type="_irESsExOEeeAapBXl-GW2w" isOrdered="true" aggregation="composite"/>
      <ownedConnector xmi:id="_udBd0ExOEeeAapBXl-GW2w" name="RTConnector1">
        <end xmi:id="_udFvQExOEeeAapBXl-GW2w" partWithPort="_rrH98ExOEeeAapBXl-GW2w" role="_gCK90ExOEeeAapBXl-GW2w"/>
        <end xmi:id="_udGWUExOEeeAapBXl-GW2w" partWithPort="_sWX6YExOEeeAapBXl-GW2w" role="_kypqQExOEeeAapBXl-GW2w"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_sF5hYHxREee3banEMWf4bA" name="Debug__Top">
      <ownedAttribute xmi:id="_sI4j8HxREee3banEMWf4bA" name="Debug__Gateway">
        <type xmi:type="uml:Class" href="../CommGateWay/model.uml#_XIyCcAdxEeadtKuU2t6fMg"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_sJBG0HxREee3banEMWf4bA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_sJBG0XxREee3banEMWf4bA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_sJMF8HxREee3banEMWf4bA" name="Debug__Top" type="_n15_4ExOEeeAapBXl-GW2w">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_sJUo0HxREee3banEMWf4bA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_sJUo0XxREee3banEMWf4bA" value="1"/>
      </ownedAttribute>
    </packagedElement>
    <profileApplication xmi:id="_MUbn4ExOEeeAapBXl-GW2w">
      <eAnnotations xmi:id="_MUddEExOEeeAapBXl-GW2w" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:id="_SJ7boExOEeeAapBXl-GW2w">
      <eAnnotations xmi:id="_SJ8pwExOEeeAapBXl-GW2w" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UMLRT_CPP/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
    <profileApplication xmi:id="_UV8AMExOEeeAapBXl-GW2w">
      <eAnnotations xmi:id="_UV8nQExOEeeAapBXl-GW2w" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:ProtocolContainer xmi:id="_YKnywExOEeeAapBXl-GW2w" base_Package="_YKTpsExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTMessageSet xmi:id="_YLO2wExOEeeAapBXl-GW2w" base_Interface="_YLFFwExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTMessageSet xmi:id="_YLk1AExOEeeAapBXl-GW2w" base_Interface="_YLbrEExOEeeAapBXl-GW2w" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_YLt-8ExOEeeAapBXl-GW2w" base_Interface="_YLnRQExOEeeAapBXl-GW2w" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_YLxCQExOEeeAapBXl-GW2w" base_Collaboration="_YKDyEExOEeeAapBXl-GW2w"/>
  <UMLRealTime:Capsule xmi:id="_dCzpsExOEeeAapBXl-GW2w" base_Class="_dBdl4ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTPort xmi:id="_e-suoExOEeeAapBXl-GW2w" isWired="false" base_Port="_e-deEExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTPort xmi:id="_gCa1cExOEeeAapBXl-GW2w" base_Port="_gCK90ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:Capsule xmi:id="_irM1kExOEeeAapBXl-GW2w" base_Class="_irESsExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTPort xmi:id="_j9j1UExOEeeAapBXl-GW2w" isWired="false" base_Port="_j9fj4ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTPort xmi:id="_kyvJ0ExOEeeAapBXl-GW2w" base_Port="_kypqQExOEeeAapBXl-GW2w"/>
  <UMLRealTime:Capsule xmi:id="_n2EX8ExOEeeAapBXl-GW2w" base_Class="_n15_4ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:CapsulePart xmi:id="_rrLoUExOEeeAapBXl-GW2w" base_Property="_rrH98ExOEeeAapBXl-GW2w"/>
  <UMLRealTime:CapsulePart xmi:id="_sWcy4ExOEeeAapBXl-GW2w" base_Property="_sWX6YExOEeeAapBXl-GW2w"/>
  <UMLRealTime:RTConnector xmi:id="_udG9YExOEeeAapBXl-GW2w" base_Connector="_udBd0ExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_7ecswExOEeeAapBXl-GW2w" base_Pseudostate="_7eXNMExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTState xmi:id="_7ekokExOEeeAapBXl-GW2w" base_State="_7ehlQExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTRegion xmi:id="_7eoS8ExOEeeAapBXl-GW2w" base_Region="_7eS7wExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_7e4KkExOEeeAapBXl-GW2w" base_StateMachine="_7eBO8ExOEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_P9hjkExQEeeAapBXl-GW2w" base_Pseudostate="_P9fHUExQEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTState xmi:id="_P9pfYExQEeeAapBXl-GW2w" base_State="_P9jYwExQEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTRegion xmi:id="_P9qtgExQEeeAapBXl-GW2w" base_Region="_P9XykExQEeeAapBXl-GW2w"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_P9wNEExQEeeAapBXl-GW2w" base_StateMachine="_P8x8sExQEeeAapBXl-GW2w"/>
  <UMLRealTime:Capsule xmi:id="_sIuL4HxREee3banEMWf4bA" base_Class="_sF5hYHxREee3banEMWf4bA"/>
  <UMLRealTime:CapsulePart xmi:id="_sI_4sHxREee3banEMWf4bA" base_Property="_sI4j8HxREee3banEMWf4bA"/>
  <UMLRealTime:CapsulePart xmi:id="_sJUBwHxREee3banEMWf4bA" base_Property="_sJMF8HxREee3banEMWf4bA"/>
  <UMLRealTime:RTPort xmi:id="_sJx70HxREee3banEMWf4bA" isNotification="true" isWired="false" base_Port="_sJpY8HxREee3banEMWf4bA"/>
  <RTCppProperties:AttributeProperties xmi:id="_sKQc8HxREee3banEMWf4bA" type="debugEvents::Event" base_Property="_sKJIMHxREee3banEMWf4bA"/>
  <RTCppProperties:AttributeProperties xmi:id="_sKftgHxREee3banEMWf4bA" type="SROManager" base_Property="_sKXxsHxREee3banEMWf4bA"/>
  <RTCppProperties:CapsuleProperties xmi:id="_sKu-EHxREee3banEMWf4bA" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_dBdl4ExOEeeAapBXl-GW2w"/>
  <RTCppProperties:ParameterProperties xmi:id="_sLS-wHxREee3banEMWf4bA" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_sLLqAHxREee3banEMWf4bA"/>
  <RTCppProperties:ParameterProperties xmi:id="_sLi2YHxREee3banEMWf4bA" type="debugEvents::EVENTTYPE" base_Parameter="_sLbhoHxREee3banEMWf4bA"/>
  <RTCppProperties:ParameterProperties xmi:id="_sLwRwHxREee3banEMWf4bA" type="const char *" base_Parameter="_sLpkEHxREee3banEMWf4bA"/>
  <RTCppProperties:ParameterProperties xmi:id="_sL-UMHxREee3banEMWf4bA" type="const char *" base_Parameter="_sL3mgHxREee3banEMWf4bA"/>
  <RTCppProperties:ParameterProperties xmi:id="_sMLIgHxREee3banEMWf4bA" type="const char *" base_Parameter="_sMFB4HxREee3banEMWf4bA"/>
  <RTCppProperties:ParameterProperties xmi:id="_sMbnMHxREee3banEMWf4bA" type="const char *" base_Parameter="_sMUScHxREee3banEMWf4bA"/>
  <RTCppProperties:ParameterProperties xmi:id="_sMqQsHxREee3banEMWf4bA" type="const char *" base_Parameter="_sMjjAHxREee3banEMWf4bA"/>
  <UMLRealTime:RTPort xmi:id="_sM8kkHxREee3banEMWf4bA" isNotification="true" isWired="false" base_Port="_sM124XxREee3banEMWf4bA"/>
  <RTCppProperties:AttributeProperties xmi:id="_sNWNMHxREee3banEMWf4bA" type="debugEvents::Event" base_Property="_sNPfgnxREee3banEMWf4bA"/>
  <RTCppProperties:AttributeProperties xmi:id="_sNjokHxREee3banEMWf4bA" type="SROManager" base_Property="_sNcT0HxREee3banEMWf4bA"/>
  <RTCppProperties:CapsuleProperties xmi:id="_sNwc4HxREee3banEMWf4bA" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_irESsExOEeeAapBXl-GW2w"/>
  <RTCppProperties:ParameterProperties xmi:id="_sOQMIHxREee3banEMWf4bA" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_sOJecXxREee3banEMWf4bA"/>
  <RTCppProperties:ParameterProperties xmi:id="_sOmxcHxREee3banEMWf4bA" type="debugEvents::EVENTTYPE" base_Parameter="_sOW50HxREee3banEMWf4bA"/>
  <RTCppProperties:ParameterProperties xmi:id="_sO2pEHxREee3banEMWf4bA" type="const char *" base_Parameter="_sOv7YHxREee3banEMWf4bA"/>
  <RTCppProperties:ParameterProperties xmi:id="_sPEEcHxREee3banEMWf4bA" type="const char *" base_Parameter="_sO9WwXxREee3banEMWf4bA"/>
  <RTCppProperties:ParameterProperties xmi:id="_sPSG4HxREee3banEMWf4bA" type="const char *" base_Parameter="_sPLZMHxREee3banEMWf4bA"/>
  <RTCppProperties:ParameterProperties xmi:id="_sPgwYHxREee3banEMWf4bA" type="const char *" base_Parameter="_sPaCsHxREee3banEMWf4bA"/>
  <RTCppProperties:ParameterProperties xmi:id="_sPuy0HxREee3banEMWf4bA" type="const char *" base_Parameter="_sPneEHxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_sQBtwHxREee3banEMWf4bA" base_Pseudostate="_sP7AEHxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTState xmi:id="_sQJCgHxREee3banEMWf4bA" base_State="_sQCU0HxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_sQPwMHxREee3banEMWf4bA" base_Pseudostate="_sQJpkHxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_sQXE8HxREee3banEMWf4bA" base_Pseudostate="_sQQXQHxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_sQm8kHxREee3banEMWf4bA" base_Region="_sQCU0XxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTState xmi:id="_sQ0X8HxREee3banEMWf4bA" base_State="_sQnjoHxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTState xmi:id="_sQ8TwHxREee3banEMWf4bA" base_State="_sQoKsHxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTState xmi:id="_sRE2oHxREee3banEMWf4bA" base_State="_sQpY0HxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_sRyBQHxREee3banEMWf4bA" base_Pseudostate="_sRqsgHxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTState xmi:id="_sR5WAHxREee3banEMWf4bA" base_State="_sRyBQXxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_sSADsHxREee3banEMWf4bA" base_Pseudostate="_sR5WAXxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_sSHYcHxREee3banEMWf4bA" base_Pseudostate="_sSAqwHxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_sSaTYHxREee3banEMWf4bA" base_Region="_sRyBQnxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTState xmi:id="_sSoV0HxREee3banEMWf4bA" base_State="_sSaTYXxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTState xmi:id="_sSxfwHxREee3banEMWf4bA" base_State="_sSa6cHxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTState xmi:id="_sS5bkHxREee3banEMWf4bA" base_State="_sScIkHxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTState xmi:id="_sTQA4HxREee3banEMWf4bA" base_State="_sSdWsHxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTState xmi:id="_sTeDUHxREee3banEMWf4bA" base_State="_sTXVoHxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_sUAO0HxREee3banEMWf4bA" base_Pseudostate="_sT0ooHxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTState xmi:id="_sUHjkHxREee3banEMWf4bA" base_State="_sUAO0XxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_sUQGcHxREee3banEMWf4bA" base_Pseudostate="_sUHjkXxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_sUXbMHxREee3banEMWf4bA" base_Pseudostate="_sUQtgHxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_sUpIAHxREee3banEMWf4bA" base_Region="_sUAO0nxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTState xmi:id="_sU0uMHxREee3banEMWf4bA" base_State="_sUpvEHxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTState xmi:id="_sU9REHxREee3banEMWf4bA" base_State="_sUqWIHxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTState xmi:id="_sVGbAHxREee3banEMWf4bA" base_State="_sUrkQHxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_sVYu4HxREee3banEMWf4bA" base_Pseudostate="_sVPk8HxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTState xmi:id="_sVk8IHxREee3banEMWf4bA" base_State="_sVZV8HxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_sVs38HxREee3banEMWf4bA" base_Pseudostate="_sVljMHxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_sVzloHxREee3banEMWf4bA" base_Pseudostate="_sVs38XxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_sWHHoHxREee3banEMWf4bA" base_Region="_sVZV8XxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTState xmi:id="_sWVxIHxREee3banEMWf4bA" base_State="_sWHHoXxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTState xmi:id="_sWe7EHxREee3banEMWf4bA" base_State="_sWHusHxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTState xmi:id="_sWnd8HxREee3banEMWf4bA" base_State="_sWI80HxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTState xmi:id="_sWxO8HxREee3banEMWf4bA" base_State="_sWKK8HxREee3banEMWf4bA"/>
  <UMLRTStateMachines:RTState xmi:id="_sW_RYHxREee3banEMWf4bA" base_State="_sW4jsHxREee3banEMWf4bA"/>
</xmi:XMI>
